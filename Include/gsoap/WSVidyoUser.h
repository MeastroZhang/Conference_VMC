/* WSVidyoUser.h
   Generated by wsdl2h 2.8.30 from VidyoPortalUserService.wsdl and typemap.dat
   2016-05-09 02:23:31 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on WSVidyoUser.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://portal.vidyo.com/user/v1_1                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://portal.vidyo.com/user/v1_1"

*/


/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns1	"http://portal.vidyo.com/user/v1_1"
//gsoap ns1   schema namespace:	http://portal.vidyo.com/user/v1_1
//gsoap ns1   schema form:	qualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:anyURI".
typedef char* xsd__anyURI;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__Recorder.
class ns1__Recorder;

//  Forward declaration of class ns1__RoomProfile.
class ns1__RoomProfile;

//  Forward declaration of class _ns1__GeneralFault.
class _ns1__GeneralFault;

//  Forward declaration of class _ns1__InvalidArgumentFault.
class _ns1__InvalidArgumentFault;

//  Forward declaration of class _ns1__SeatLicenseExpiredFault.
class _ns1__SeatLicenseExpiredFault;

//  Forward declaration of class _ns1__WrongPINFault.
class _ns1__WrongPINFault;

//  Forward declaration of class _ns1__ConferenceLockedFault.
class _ns1__ConferenceLockedFault;

//  Forward declaration of class _ns1__NotLicensedFault.
class _ns1__NotLicensedFault;

//  Forward declaration of class _ns1__ResourceNotAvailableFault.
class _ns1__ResourceNotAvailableFault;

//  Forward declaration of class _ns1__AccessRestrictedFault.
class _ns1__AccessRestrictedFault;

//  Forward declaration of class _ns1__InvalidModeratorPINFormatFault.
class _ns1__InvalidModeratorPINFormatFault;

//  Forward declaration of class _ns1__ControlMeetingFault.
class _ns1__ControlMeetingFault;

//  Forward declaration of class _ns1__ScheduledRoomCreationFault.
class _ns1__ScheduledRoomCreationFault;

//  Forward declaration of class _ns1__EndpointNotBoundFault.
class _ns1__EndpointNotBoundFault;

//  Forward declaration of class _ns1__InPointToPointCallFault.
class _ns1__InPointToPointCallFault;

//  Forward declaration of class _ns1__PrefixNotConfiguredException.
class _ns1__PrefixNotConfiguredException;

//  Forward declaration of class _ns1__FeatureNotAvailableFault.
class _ns1__FeatureNotAvailableFault;

//  Forward declaration of class _ns1__VidyoReplayNotAvailableFault.
class _ns1__VidyoReplayNotAvailableFault;

//  Forward declaration of class _ns1__RoomNotFoundFault.
class _ns1__RoomNotFoundFault;

//  Forward declaration of class _ns1__RoomMode.
class _ns1__RoomMode;

//  Forward declaration of class _ns1__Filter.
class _ns1__Filter;

//  Forward declaration of class _ns1__Entity.
class _ns1__Entity;

//  Forward declaration of class _ns1__LectureModeParticipant.
class _ns1__LectureModeParticipant;

//  Forward declaration of class _ns1__LoginAttempt.
class _ns1__LoginAttempt;

//  Forward declaration of class _ns1__WelcomeBannerContent.
class _ns1__WelcomeBannerContent;

//  Forward declaration of class _ns1__LogInRequest.
class _ns1__LogInRequest;

//  Forward declaration of class _ns1__LogInResponse.
class _ns1__LogInResponse;

//  Forward declaration of class _ns1__LinkEndpointRequest.
class _ns1__LinkEndpointRequest;

//  Forward declaration of class _ns1__LinkEndpointResponse.
class _ns1__LinkEndpointResponse;

//  Forward declaration of class _ns1__LogOutRequest.
class _ns1__LogOutRequest;

//  Forward declaration of class _ns1__LogOutResponse.
class _ns1__LogOutResponse;

//  Forward declaration of class _ns1__MyEndpointStatusRequest.
class _ns1__MyEndpointStatusRequest;

//  Forward declaration of class _ns1__MyEndpointStatusResponse.
class _ns1__MyEndpointStatusResponse;

//  Forward declaration of class _ns1__SearchMyContactsRequest.
class _ns1__SearchMyContactsRequest;

//  Forward declaration of class _ns1__SearchMyContactsResponse.
class _ns1__SearchMyContactsResponse;

//  Forward declaration of class _ns1__AddToMyContactsRequest.
class _ns1__AddToMyContactsRequest;

//  Forward declaration of class _ns1__AddToMyContactsResponse.
class _ns1__AddToMyContactsResponse;

//  Forward declaration of class _ns1__RemoveFromMyContactsRequest.
class _ns1__RemoveFromMyContactsRequest;

//  Forward declaration of class _ns1__RemoveFromMyContactsResponse.
class _ns1__RemoveFromMyContactsResponse;

//  Forward declaration of class _ns1__SearchRequest.
class _ns1__SearchRequest;

//  Forward declaration of class _ns1__SearchResponse.
class _ns1__SearchResponse;

//  Forward declaration of class _ns1__SearchByEntityIDRequest.
class _ns1__SearchByEntityIDRequest;

//  Forward declaration of class _ns1__SearchByEntityIDResponse.
class _ns1__SearchByEntityIDResponse;

//  Forward declaration of class _ns1__SearchByEmailRequest.
class _ns1__SearchByEmailRequest;

//  Forward declaration of class _ns1__SearchByEmailResponse.
class _ns1__SearchByEmailResponse;

//  Forward declaration of class _ns1__GetEntityByEntityIDRequest.
class _ns1__GetEntityByEntityIDRequest;

//  Forward declaration of class _ns1__GetEntityByEntityIDResponse.
class _ns1__GetEntityByEntityIDResponse;

//  Forward declaration of class _ns1__InviteToConferenceRequest.
class _ns1__InviteToConferenceRequest;

//  Forward declaration of class _ns1__InviteToConferenceResponse.
class _ns1__InviteToConferenceResponse;

//  Forward declaration of class _ns1__CancelOutboundCallRequest.
class _ns1__CancelOutboundCallRequest;

//  Forward declaration of class _ns1__CancelOutboundCallResponse.
class _ns1__CancelOutboundCallResponse;

//  Forward declaration of class _ns1__JoinConferenceRequest.
class _ns1__JoinConferenceRequest;

//  Forward declaration of class _ns1__JoinConferenceResponse.
class _ns1__JoinConferenceResponse;

//  Forward declaration of class _ns1__JoinIPCConferenceRequest.
class _ns1__JoinIPCConferenceRequest;

//  Forward declaration of class _ns1__JoinIPCConferenceResponse.
class _ns1__JoinIPCConferenceResponse;

//  Forward declaration of class _ns1__DirectCallRequest.
class _ns1__DirectCallRequest;

//  Forward declaration of class _ns1__DirectCallResponse.
class _ns1__DirectCallResponse;

//  Forward declaration of class _ns1__GetParticipantsRequest.
class _ns1__GetParticipantsRequest;

//  Forward declaration of class _ns1__GetParticipantsResponse.
class _ns1__GetParticipantsResponse;

//  Forward declaration of class _ns1__GetLectureModeParticipantsRequest.
class _ns1__GetLectureModeParticipantsRequest;

//  Forward declaration of class _ns1__GetLectureModeParticipantsResponse.
class _ns1__GetLectureModeParticipantsResponse;

//  Forward declaration of class _ns1__LeaveConferenceRequest.
class _ns1__LeaveConferenceRequest;

//  Forward declaration of class _ns1__LeaveConferenceResponse.
class _ns1__LeaveConferenceResponse;

//  Forward declaration of class _ns1__MuteAudioRequest.
class _ns1__MuteAudioRequest;

//  Forward declaration of class _ns1__MuteAudioResponse.
class _ns1__MuteAudioResponse;

//  Forward declaration of class _ns1__UnmuteAudioRequest.
class _ns1__UnmuteAudioRequest;

//  Forward declaration of class _ns1__UnmuteAudioResponse.
class _ns1__UnmuteAudioResponse;

//  Forward declaration of class _ns1__StartVideoRequest.
class _ns1__StartVideoRequest;

//  Forward declaration of class _ns1__StartVideoResponse.
class _ns1__StartVideoResponse;

//  Forward declaration of class _ns1__StopVideoRequest.
class _ns1__StopVideoRequest;

//  Forward declaration of class _ns1__StopVideoResponse.
class _ns1__StopVideoResponse;

//  Forward declaration of class _ns1__MyAccountRequest.
class _ns1__MyAccountRequest;

//  Forward declaration of class _ns1__MyAccountResponse.
class _ns1__MyAccountResponse;

//  Forward declaration of class _ns1__CreateRoomRequest.
class _ns1__CreateRoomRequest;

//  Forward declaration of class _ns1__CreateRoomResponse.
class _ns1__CreateRoomResponse;

//  Forward declaration of class _ns1__DeleteRoomRequest.
class _ns1__DeleteRoomRequest;

//  Forward declaration of class _ns1__DeleteRoomResponse.
class _ns1__DeleteRoomResponse;

//  Forward declaration of class _ns1__CreateRoomURLRequest.
class _ns1__CreateRoomURLRequest;

//  Forward declaration of class _ns1__CreateRoomURLResponse.
class _ns1__CreateRoomURLResponse;

//  Forward declaration of class _ns1__RemoveRoomURLRequest.
class _ns1__RemoveRoomURLRequest;

//  Forward declaration of class _ns1__RemoveRoomURLResponse.
class _ns1__RemoveRoomURLResponse;

//  Forward declaration of class _ns1__CreateRoomPINRequest.
class _ns1__CreateRoomPINRequest;

//  Forward declaration of class _ns1__CreateRoomPINResponse.
class _ns1__CreateRoomPINResponse;

//  Forward declaration of class _ns1__RemoveRoomPINRequest.
class _ns1__RemoveRoomPINRequest;

//  Forward declaration of class _ns1__RemoveRoomPINResponse.
class _ns1__RemoveRoomPINResponse;

//  Forward declaration of class _ns1__UpdatePasswordRequest.
class _ns1__UpdatePasswordRequest;

//  Forward declaration of class _ns1__UpdatePasswordResponse.
class _ns1__UpdatePasswordResponse;

//  Forward declaration of class _ns1__UpdateLanguageRequest.
class _ns1__UpdateLanguageRequest;

//  Forward declaration of class _ns1__UpdateLanguageResponse.
class _ns1__UpdateLanguageResponse;

//  Forward declaration of class _ns1__LockRoomRequest.
class _ns1__LockRoomRequest;

//  Forward declaration of class _ns1__LockRoomResponse.
class _ns1__LockRoomResponse;

//  Forward declaration of class _ns1__UnlockRoomRequest.
class _ns1__UnlockRoomRequest;

//  Forward declaration of class _ns1__UnlockRoomResponse.
class _ns1__UnlockRoomResponse;

//  Forward declaration of class _ns1__SetMemberModeRequest.
class _ns1__SetMemberModeRequest;

//  Forward declaration of class _ns1__SetMemberModeResponse.
class _ns1__SetMemberModeResponse;

//  Forward declaration of class _ns1__GetRecordingProfilesRequest.
class _ns1__GetRecordingProfilesRequest;

//  Forward declaration of class _ns1__GetRecordingProfilesResponse.
class _ns1__GetRecordingProfilesResponse;

//  Forward declaration of class _ns1__StartRecordingRequest.
class _ns1__StartRecordingRequest;

//  Forward declaration of class _ns1__StartRecordingResponse.
class _ns1__StartRecordingResponse;

//  Forward declaration of class _ns1__GetPortalVersionRequest.
class _ns1__GetPortalVersionRequest;

//  Forward declaration of class _ns1__GetPortalVersionResponse.
class _ns1__GetPortalVersionResponse;

//  Forward declaration of class _ns1__PauseRecordingRequest.
class _ns1__PauseRecordingRequest;

//  Forward declaration of class _ns1__PauseRecordingResponse.
class _ns1__PauseRecordingResponse;

//  Forward declaration of class _ns1__ResumeRecordingRequest.
class _ns1__ResumeRecordingRequest;

//  Forward declaration of class _ns1__ResumeRecordingResponse.
class _ns1__ResumeRecordingResponse;

//  Forward declaration of class _ns1__StopRecordingRequest.
class _ns1__StopRecordingRequest;

//  Forward declaration of class _ns1__StopRecordingResponse.
class _ns1__StopRecordingResponse;

//  Forward declaration of class _ns1__CreateWebcastURLRequest.
class _ns1__CreateWebcastURLRequest;

//  Forward declaration of class _ns1__CreateWebcastURLResponse.
class _ns1__CreateWebcastURLResponse;

//  Forward declaration of class _ns1__CreateWebcastPINRequest.
class _ns1__CreateWebcastPINRequest;

//  Forward declaration of class _ns1__CreateWebcastPINResponse.
class _ns1__CreateWebcastPINResponse;

//  Forward declaration of class _ns1__RemoveWebcastURLRequest.
class _ns1__RemoveWebcastURLRequest;

//  Forward declaration of class _ns1__RemoveWebcastURLResponse.
class _ns1__RemoveWebcastURLResponse;

//  Forward declaration of class _ns1__RemoveWebcastPINRequest.
class _ns1__RemoveWebcastPINRequest;

//  Forward declaration of class _ns1__RemoveWebcastPINResponse.
class _ns1__RemoveWebcastPINResponse;

//  Forward declaration of class _ns1__GetWebcastURLRequest.
class _ns1__GetWebcastURLRequest;

//  Forward declaration of class _ns1__GetWebcastURLResponse.
class _ns1__GetWebcastURLResponse;

//  Forward declaration of class _ns1__GetUserNameRequest.
class _ns1__GetUserNameRequest;

//  Forward declaration of class _ns1__GetUserNameResponse.
class _ns1__GetUserNameResponse;

//  Forward declaration of class _ns1__GetEntityByRoomKeyRequest.
class _ns1__GetEntityByRoomKeyRequest;

//  Forward declaration of class _ns1__GetEntityByRoomKeyResponse.
class _ns1__GetEntityByRoomKeyResponse;

//  Forward declaration of class _ns1__GetInviteContentRequest.
class _ns1__GetInviteContentRequest;

//  Forward declaration of class _ns1__GetInviteContentResponse.
class _ns1__GetInviteContentResponse;

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetRoomProfilesRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

//  Forward declaration of class _ns1__GetRoomProfilesResponse.
class _ns1__GetRoomProfilesResponse;

//  Forward declaration of class _ns1__GetRoomProfileRequest.
class _ns1__GetRoomProfileRequest;

//  Forward declaration of class _ns1__GetRoomProfileResponse.
class _ns1__GetRoomProfileResponse;

//  Forward declaration of class _ns1__SetRoomProfileRequest.
class _ns1__SetRoomProfileRequest;

//  Forward declaration of class _ns1__SetRoomProfileResponse.
class _ns1__SetRoomProfileResponse;

//  Forward declaration of class _ns1__RemoveRoomProfileRequest.
class _ns1__RemoveRoomProfileRequest;

//  Forward declaration of class _ns1__RemoveRoomProfileResponse.
class _ns1__RemoveRoomProfileResponse;

//  Forward declaration of class _ns1__CreateModeratorURLRequest.
class _ns1__CreateModeratorURLRequest;

//  Forward declaration of class _ns1__CreateModeratorURLResponse.
class _ns1__CreateModeratorURLResponse;

//  Forward declaration of class _ns1__RemoveModeratorURLRequest.
class _ns1__RemoveModeratorURLRequest;

//  Forward declaration of class _ns1__RemoveModeratorURLResponse.
class _ns1__RemoveModeratorURLResponse;

//  Forward declaration of class _ns1__GetModeratorURLRequest.
class _ns1__GetModeratorURLRequest;

//  Forward declaration of class _ns1__GetModeratorURLResponse.
class _ns1__GetModeratorURLResponse;

//  Forward declaration of class _ns1__GetModeratorURLWithTokenRequest.
class _ns1__GetModeratorURLWithTokenRequest;

//  Forward declaration of class _ns1__GetModeratorURLWithTokenResponse.
class _ns1__GetModeratorURLWithTokenResponse;

//  Forward declaration of class _ns1__CreateModeratorPINRequest.
class _ns1__CreateModeratorPINRequest;

//  Forward declaration of class _ns1__CreateModeratorPINResponse.
class _ns1__CreateModeratorPINResponse;

//  Forward declaration of class _ns1__RemoveModeratorPINRequest.
class _ns1__RemoveModeratorPINRequest;

//  Forward declaration of class _ns1__RemoveModeratorPINResponse.
class _ns1__RemoveModeratorPINResponse;

//  Forward declaration of class _ns1__GetConferenceIDRequest.
class _ns1__GetConferenceIDRequest;

//  Forward declaration of class _ns1__GetConferenceIDResponse.
class _ns1__GetConferenceIDResponse;

//  Forward declaration of class _ns1__GenerateAuthTokenRequest.
class _ns1__GenerateAuthTokenRequest;

//  Forward declaration of class _ns1__GenerateAuthTokenResponse.
class _ns1__GenerateAuthTokenResponse;

//  Forward declaration of class _ns1__CreateScheduledRoomRequest.
class _ns1__CreateScheduledRoomRequest;

//  Forward declaration of class _ns1__CreateScheduledRoomResponse.
class _ns1__CreateScheduledRoomResponse;

//  Forward declaration of class _ns1__DeleteScheduledRoomRequest.
class _ns1__DeleteScheduledRoomRequest;

//  Forward declaration of class _ns1__DeleteScheduledRoomResponse.
class _ns1__DeleteScheduledRoomResponse;

//  Forward declaration of class _ns1__PortalFeature.
class _ns1__PortalFeature;

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetPortalFeaturesRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

//  Forward declaration of class _ns1__GetPortalFeaturesResponse.
class _ns1__GetPortalFeaturesResponse;

//  Forward declaration of class _ns1__EndpointFeature.
class _ns1__EndpointFeature;

//  Forward declaration of class _ns1__SetEndpointDetailsRequest.
class _ns1__SetEndpointDetailsRequest;

//  Forward declaration of class _ns1__SetEndpointDetailsResponse.
class _ns1__SetEndpointDetailsResponse;

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetActiveSessionsRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

//  Forward declaration of class _ns1__GetActiveSessionsResponse.
class _ns1__GetActiveSessionsResponse;

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LogoutAllOtherSessionsRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

//  Forward declaration of class _ns1__LogoutAllOtherSessionsResponse.
class _ns1__LogoutAllOtherSessionsResponse;

//  Forward declaration of class _ns1__disconnectConferenceAllRequest.
class _ns1__disconnectConferenceAllRequest;

//  Forward declaration of class _ns1__disconnectConferenceAllResponse.
class _ns1__disconnectConferenceAllResponse;

//  Forward declaration of class _ns1__muteAudioServerAllRequest.
class _ns1__muteAudioServerAllRequest;

//  Forward declaration of class _ns1__muteAudioServerAllResponse.
class _ns1__muteAudioServerAllResponse;

//  Forward declaration of class _ns1__muteAudioClientAllRequest.
class _ns1__muteAudioClientAllRequest;

//  Forward declaration of class _ns1__muteAudioClientAllResponse.
class _ns1__muteAudioClientAllResponse;

//  Forward declaration of class _ns1__muteVideoServerAllRequest.
class _ns1__muteVideoServerAllRequest;

//  Forward declaration of class _ns1__muteVideoServerAllResponse.
class _ns1__muteVideoServerAllResponse;

//  Forward declaration of class _ns1__muteVideoClientAllRequest.
class _ns1__muteVideoClientAllRequest;

//  Forward declaration of class _ns1__muteVideoClientAllResponse.
class _ns1__muteVideoClientAllResponse;

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":OnetimeAccessRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

//  Forward declaration of class _ns1__OnetimeAccessResponse.
class _ns1__OnetimeAccessResponse;

//  Forward declaration of class _ns1__RoomAccessOption.
class _ns1__RoomAccessOption;

//  Forward declaration of class _ns1__RoomAccessOptionsRequest.
class _ns1__RoomAccessOptionsRequest;

//  Forward declaration of class _ns1__RoomAccessOptionsResponse.
class _ns1__RoomAccessOptionsResponse;

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":PortalPrefixRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

//  Forward declaration of class _ns1__PortalPrefixResponse.
class _ns1__PortalPrefixResponse;

//  Forward declaration of class _ns1__PrefixNotConfiguredFault.
class _ns1__PrefixNotConfiguredFault;

//  Forward declaration of class _ns1__getLoginAndWelcomeBannerRequest.
class _ns1__getLoginAndWelcomeBannerRequest;

//  Forward declaration of class _ns1__getLoginAndWelcomeBannerResponse.
class _ns1__getLoginAndWelcomeBannerResponse;

//  Forward declaration of class _ns1__getUserAccountTypeRequest.
class _ns1__getUserAccountTypeRequest;

//  Forward declaration of class _ns1__getUserAccountTypeResponse.
class _ns1__getUserAccountTypeResponse;

//  Forward declaration of class _ns1__StartLectureModeRequest.
class _ns1__StartLectureModeRequest;

//  Forward declaration of class _ns1__StartLectureModeResponse.
class _ns1__StartLectureModeResponse;

//  Forward declaration of class _ns1__StopLectureModeRequest.
class _ns1__StopLectureModeRequest;

//  Forward declaration of class _ns1__StopLectureModeResponse.
class _ns1__StopLectureModeResponse;

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RaiseHandRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

//  Forward declaration of class _ns1__RaiseHandResponse.
class _ns1__RaiseHandResponse;

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UnraiseHandRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

//  Forward declaration of class _ns1__UnraiseHandResponse.
class _ns1__UnraiseHandResponse;

//  Forward declaration of class _ns1__DismissRaisedHandRequest.
class _ns1__DismissRaisedHandRequest;

//  Forward declaration of class _ns1__DismissRaisedHandResponse.
class _ns1__DismissRaisedHandResponse;

//  Forward declaration of class _ns1__DismissAllRaisedHandRequest.
class _ns1__DismissAllRaisedHandRequest;

//  Forward declaration of class _ns1__DismissAllRaisedHandResponse.
class _ns1__DismissAllRaisedHandResponse;

//  Forward declaration of class _ns1__SetPresenterRequest.
class _ns1__SetPresenterRequest;

//  Forward declaration of class _ns1__SetPresenterResponse.
class _ns1__SetPresenterResponse;

//  Forward declaration of class _ns1__RemovePresenterRequest.
class _ns1__RemovePresenterRequest;

//  Forward declaration of class _ns1__RemovePresenterResponse.
class _ns1__RemovePresenterResponse;

//  Forward declaration of class _ns1__GetVidyoReplayLibraryRequest.
class _ns1__GetVidyoReplayLibraryRequest;

//  Forward declaration of class _ns1__GetVidyoReplayLibraryResponse.
class _ns1__GetVidyoReplayLibraryResponse;

//  Forward declaration of class _ns1__WhatIsMyIPAddressRequest.
class _ns1__WhatIsMyIPAddressRequest;

//  Forward declaration of class _ns1__WhatIsMyIPAddressResponse.
class _ns1__WhatIsMyIPAddressResponse;

//  Forward declaration of class _ns1__GetChangePasswordHtmlUrlWithTokenRequest.
class _ns1__GetChangePasswordHtmlUrlWithTokenRequest;

//  Forward declaration of class _ns1__GetChangePasswordHtmlUrlWithTokenResponse.
class _ns1__GetChangePasswordHtmlUrlWithTokenResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://portal.vidyo.com/user/v1_1                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://portal.vidyo.com/user/v1_1":sortDir is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns1__sortDir__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__sortDir
{
	ns1__sortDir__ASC,	///< xs:string value="ASC"
	ns1__sortDir__DESC,	///< xs:string value="DESC"
};

/// @brief "http://portal.vidyo.com/user/v1_1":EntityID is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   This is an ID of addressing object in VidyoPortal (Member, Room, or Legacy device).
/// </BLOCKQUOTE></PRE>
/// Content pattern is "[0-9]+".
typedef char* ns1__EntityID "[0-9]+";

/// @brief "http://portal.vidyo.com/user/v1_1":PortalFeatureName is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   List of Portal features.
/// </BLOCKQUOTE></PRE>
typedef char* ns1__PortalFeatureName;

/// @brief "http://portal.vidyo.com/user/v1_1":EndpointFeatureName is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Name of endpoint feature.
/// </BLOCKQUOTE></PRE>
typedef char* ns1__EndpointFeatureName;

/// @brief "http://portal.vidyo.com/user/v1_1":AccessOptionName is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   List of Allowed Access Option Names.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns1__AccessOptionName__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__AccessOptionName
{
	ns1__AccessOptionName__roomURL,	///< xs:string value="roomURL"
	ns1__AccessOptionName__extension,	///< xs:string value="extension"
	ns1__AccessOptionName__PIN,	///< xs:string value="PIN"
	ns1__AccessOptionName__dial_in_Number,	///< xs:string value="dial-in-Number"
};

/// <PRE><BLOCKQUOTE>
///   Type is 'W' for Windows platform.
///   Type is 'M' for MacOS platform.
///   Type is 'V' for VidyoRoom HD200 (Windows platform).
///   Type is 'R' for VidyoRoom HD100/HD50 (Windows platform).
///   Type is 'L' for Linux platform.
///   Type is 'S' for SL5 platform.
///   Type is 'U' for Ubuntu platform.
///   Type is 'T' for SL5 64bit platform.
///   Type is 'X' for Ubuntu 64bit platform.
///   Type is 'I' for iOS
///   Type is 'A' for Android
///   Type is 'P' for VidyoPanorama VP600.
///   Type is 'N' for VidyoPanorama 600 running Windows 64-bit.
///   Type is 'O' for VidyoPanorama 600 running Linux.
///   Type is 'Q' for VidyoRoom running Windows 32-bit.
///   Type is 'Y' for VidyoRoom running Windows 64-bit.
///   Type is 'Z' for VidyoRoom running Linux.
///   Type is 'B' for VidyoRoom SE Windows.
///   Type is 'C' for VidyoRoom SE Linux.
///   Type is 'D' for VidyoRoom SE OS X.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":ClientType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "_ns1__ClientType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum _ns1__ClientType
{
	_ns1__ClientType__W = 'W',	///< xs:string value="W"
	_ns1__ClientType__M = 'M',	///< xs:string value="M"
	_ns1__ClientType__V = 'V',	///< xs:string value="V"
	_ns1__ClientType__R = 'R',	///< xs:string value="R"
	_ns1__ClientType__L = 'L',	///< xs:string value="L"
	_ns1__ClientType__S = 'S',	///< xs:string value="S"
	_ns1__ClientType__U = 'U',	///< xs:string value="U"
	_ns1__ClientType__T = 'T',	///< xs:string value="T"
	_ns1__ClientType__X = 'X',	///< xs:string value="X"
	_ns1__ClientType__I = 'I',	///< xs:string value="I"
	_ns1__ClientType__A = 'A',	///< xs:string value="A"
	_ns1__ClientType__P = 'P',	///< xs:string value="P"
	_ns1__ClientType__N = 'N',	///< xs:string value="N"
	_ns1__ClientType__O = 'O',	///< xs:string value="O"
	_ns1__ClientType__Q = 'Q',	///< xs:string value="Q"
	_ns1__ClientType__Y = 'Y',	///< xs:string value="Y"
	_ns1__ClientType__Z = 'Z',	///< xs:string value="Z"
	_ns1__ClientType__B = 'B',	///< xs:string value="B"
	_ns1__ClientType__C = 'C',	///< xs:string value="C"
	_ns1__ClientType__D = 'D',	///< xs:string value="D"
};

/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":OK is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "_ns1__OK__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum _ns1__OK
{
	_ns1__OK__OK,	///< xs:string value="OK"
};

/// <PRE><BLOCKQUOTE>
///   Languages supported by VidyoPortal
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":Language is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "_ns1__Language__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum _ns1__Language
{
	_ns1__Language__en,	///< xs:string value="en"
	_ns1__Language__de,	///< xs:string value="de"
	_ns1__Language__es,	///< xs:string value="es"
	_ns1__Language__fr,	///< xs:string value="fr"
	_ns1__Language__it,	///< xs:string value="it"
	_ns1__Language__ja,	///< xs:string value="ja"
	_ns1__Language__ko,	///< xs:string value="ko"
	_ns1__Language__pt,	///< xs:string value="pt"
	_ns1__Language__zh_USCORECN,	///< xs:string value="zh_CN"
	_ns1__Language__fi,	///< xs:string value="fi"
	_ns1__Language__pl,	///< xs:string value="pl"
	_ns1__Language__zh_USCORETW,	///< xs:string value="zh_TW"
	_ns1__Language__th,	///< xs:string value="th"
	_ns1__Language__ru,	///< xs:string value="ru"
	_ns1__Language__tr,	///< xs:string value="tr"
};

/// <PRE><BLOCKQUOTE>
///   There are three types of entities in VidyoPortal:
///   1. Member - A member is an authorized user of VidyoPortal with a user account.
///   - A member may have at the most one personal room.
///   - A member has a display name
///   - A member has an extension that can also be used for search purposes.
///   2. Rooom - It is a meeting place. Rooms are of two kinds:
///   - Personal, as explained above
///   - Public. Each room has a owner assigned who can control the room.
///   3. Legacy - This entity represents external endpoints. Think of it as a label to identify and search external devices.
///   Legacy entity does not have an account on the VidyoPortal. There is no owner assigned to legacy devices.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":EntityType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "_ns1__EntityType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum _ns1__EntityType
{
	_ns1__EntityType__Member,	///< xs:string value="Member"
	_ns1__EntityType__Room,	///< xs:string value="Room"
	_ns1__EntityType__Legacy,	///< xs:string value="Legacy"
};

/// <PRE><BLOCKQUOTE>
///   The Member can override the current status with these possible values. Changing a mode will impact VidyoPortal operations.
///   For e.g. if the mode is set to DoNotDisturb for a member, this member will not get any incoming requests to join a meeting or a direct call.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":MemberMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "_ns1__MemberMode__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum _ns1__MemberMode
{
	_ns1__MemberMode__Available,	///< xs:string value="Available"
	_ns1__MemberMode__Away,	///< xs:string value="Away"
	_ns1__MemberMode__DoNotDisturb,	///< xs:string value="DoNotDisturb"
};

/// <PRE><BLOCKQUOTE>
///   Describes the member status based on the operation state of the endpoint in use by the member:
///   - Status is 'Offline' and hence can't be reached for a conference.
///   - Status is 'Online' and can be reached for a conference or a direct call.
///   - Status is 'Busy' in conference and can't can be reached for another conference or a direct call.
///   - Status is 'BusyInOwnRoom' in conference in own personal room and can't can be reached for another conference.
///   - Status is 'Ringing' endpoint associated with member start to ring on receive direct call or invite event from other part.
///   - Status is 'RingAccepted' endpoint associated with member accept the call from other part.
///   - Status is 'RingRejected' endpoint associated with member reject the call from other part.
///   - Status is 'RingNoAnswer' endpoint associated with member is not answered in some period of time.
///   - Status is 'Alerting' endpoint associated with member is alerting about outcome call.
///   - Status is 'AlertCancelled' endpoint associated with member is stop to be alerting about outcome call.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":MemberStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "_ns1__MemberStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum _ns1__MemberStatus
{
	_ns1__MemberStatus__Offline,	///< xs:string value="Offline"
	_ns1__MemberStatus__Online,	///< xs:string value="Online"
	_ns1__MemberStatus__Busy,	///< xs:string value="Busy"
	_ns1__MemberStatus__BusyInOwnRoom,	///< xs:string value="BusyInOwnRoom"
	_ns1__MemberStatus__Ringing,	///< xs:string value="Ringing"
	_ns1__MemberStatus__RingAccepted,	///< xs:string value="RingAccepted"
	_ns1__MemberStatus__RingRejected,	///< xs:string value="RingRejected"
	_ns1__MemberStatus__RingNoAnswer,	///< xs:string value="RingNoAnswer"
	_ns1__MemberStatus__Alerting,	///< xs:string value="Alerting"
	_ns1__MemberStatus__AlertCancelled,	///< xs:string value="AlertCancelled"
};

/// <PRE><BLOCKQUOTE>
///   Status is 'Empty' and hence can be used for meeting.
///   Status is 'Full' and is not accepting any more participants to the meeting.
///   Status is 'Occupied' some participants use the room for meeting.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RoomStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "_ns1__RoomStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum _ns1__RoomStatus
{
	_ns1__RoomStatus__Empty,	///< xs:string value="Empty"
	_ns1__RoomStatus__Full,	///< xs:string value="Full"
	_ns1__RoomStatus__Occupied,	///< xs:string value="Occupied"
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://portal.vidyo.com/user/v1_1                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://portal.vidyo.com/user/v1_1":Recorder is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Available Recording Profile
/// </BLOCKQUOTE></PRE>
/// class ns1__Recorder operations:
/// - ns1__Recorder* soap_new_ns1__Recorder(soap*) allocate
/// - ns1__Recorder* soap_new_ns1__Recorder(soap*, int num) allocate array
/// - ns1__Recorder* soap_new_req_ns1__Recorder(soap*, ...) allocate, set required members
/// - ns1__Recorder* soap_new_set_ns1__Recorder(soap*, ...) allocate, set all public members
/// - ns1__Recorder::soap_default(soap*) reset members to default
/// - int soap_read_ns1__Recorder(soap*, ns1__Recorder*) deserialize from a stream
/// - int soap_write_ns1__Recorder(soap*, ns1__Recorder*) serialize to a stream
/// - ns1__Recorder* ns1__Recorder::soap_dup(soap*) returns deep copy of ns1__Recorder, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Recorder::soap_del() deep deletes ns1__Recorder data members, use only after ns1__Recorder::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Recorder
{ public:
/// Element "recorderPrefix" of XSD type xs:string.
    char*                                recorderPrefix                 1;	///< Required element.
/// Element "description" of XSD type xs:string.
    char*                                description                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://portal.vidyo.com/user/v1_1":RoomProfile is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Available Room Profile
/// </BLOCKQUOTE></PRE>
/// class ns1__RoomProfile operations:
/// - ns1__RoomProfile* soap_new_ns1__RoomProfile(soap*) allocate
/// - ns1__RoomProfile* soap_new_ns1__RoomProfile(soap*, int num) allocate array
/// - ns1__RoomProfile* soap_new_req_ns1__RoomProfile(soap*, ...) allocate, set required members
/// - ns1__RoomProfile* soap_new_set_ns1__RoomProfile(soap*, ...) allocate, set all public members
/// - ns1__RoomProfile::soap_default(soap*) reset members to default
/// - int soap_read_ns1__RoomProfile(soap*, ns1__RoomProfile*) deserialize from a stream
/// - int soap_write_ns1__RoomProfile(soap*, ns1__RoomProfile*) serialize to a stream
/// - ns1__RoomProfile* ns1__RoomProfile::soap_dup(soap*) returns deep copy of ns1__RoomProfile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RoomProfile::soap_del() deep deletes ns1__RoomProfile data members, use only after ns1__RoomProfile::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__RoomProfile
{ public:
/// Element "roomProfileName" of XSD type xs:string.
    char*                                roomProfileName                1;	///< Required element.
/// Element "description" of XSD type xs:string.
    char*                                description                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GeneralFault
/// <PRE><BLOCKQUOTE>
///   This means that the exceptions happens in system.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GeneralFault is a complexType.
///
/// class _ns1__GeneralFault operations:
/// - _ns1__GeneralFault* soap_new__ns1__GeneralFault(soap*) allocate
/// - _ns1__GeneralFault* soap_new__ns1__GeneralFault(soap*, int num) allocate array
/// - _ns1__GeneralFault* soap_new_req__ns1__GeneralFault(soap*, ...) allocate, set required members
/// - _ns1__GeneralFault* soap_new_set__ns1__GeneralFault(soap*, ...) allocate, set all public members
/// - _ns1__GeneralFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GeneralFault(soap*, _ns1__GeneralFault*) deserialize from a stream
/// - int soap_write__ns1__GeneralFault(soap*, _ns1__GeneralFault*) serialize to a stream
/// - _ns1__GeneralFault* _ns1__GeneralFault::soap_dup(soap*) returns deep copy of _ns1__GeneralFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GeneralFault::soap_del() deep deletes _ns1__GeneralFault data members, use only after _ns1__GeneralFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GeneralFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault
/// <PRE><BLOCKQUOTE>
///   This means that the arguments which are passed into services are wrong.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault is a complexType.
///
/// class _ns1__InvalidArgumentFault operations:
/// - _ns1__InvalidArgumentFault* soap_new__ns1__InvalidArgumentFault(soap*) allocate
/// - _ns1__InvalidArgumentFault* soap_new__ns1__InvalidArgumentFault(soap*, int num) allocate array
/// - _ns1__InvalidArgumentFault* soap_new_req__ns1__InvalidArgumentFault(soap*, ...) allocate, set required members
/// - _ns1__InvalidArgumentFault* soap_new_set__ns1__InvalidArgumentFault(soap*, ...) allocate, set all public members
/// - _ns1__InvalidArgumentFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__InvalidArgumentFault(soap*, _ns1__InvalidArgumentFault*) deserialize from a stream
/// - int soap_write__ns1__InvalidArgumentFault(soap*, _ns1__InvalidArgumentFault*) serialize to a stream
/// - _ns1__InvalidArgumentFault* _ns1__InvalidArgumentFault::soap_dup(soap*) returns deep copy of _ns1__InvalidArgumentFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InvalidArgumentFault::soap_del() deep deletes _ns1__InvalidArgumentFault data members, use only after _ns1__InvalidArgumentFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InvalidArgumentFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault
/// <PRE><BLOCKQUOTE>
///   This means that the seat license has expired and needs to be renewed.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault is a complexType.
///
/// class _ns1__SeatLicenseExpiredFault operations:
/// - _ns1__SeatLicenseExpiredFault* soap_new__ns1__SeatLicenseExpiredFault(soap*) allocate
/// - _ns1__SeatLicenseExpiredFault* soap_new__ns1__SeatLicenseExpiredFault(soap*, int num) allocate array
/// - _ns1__SeatLicenseExpiredFault* soap_new_req__ns1__SeatLicenseExpiredFault(soap*, ...) allocate, set required members
/// - _ns1__SeatLicenseExpiredFault* soap_new_set__ns1__SeatLicenseExpiredFault(soap*, ...) allocate, set all public members
/// - _ns1__SeatLicenseExpiredFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SeatLicenseExpiredFault(soap*, _ns1__SeatLicenseExpiredFault*) deserialize from a stream
/// - int soap_write__ns1__SeatLicenseExpiredFault(soap*, _ns1__SeatLicenseExpiredFault*) serialize to a stream
/// - _ns1__SeatLicenseExpiredFault* _ns1__SeatLicenseExpiredFault::soap_dup(soap*) returns deep copy of _ns1__SeatLicenseExpiredFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SeatLicenseExpiredFault::soap_del() deep deletes _ns1__SeatLicenseExpiredFault data members, use only after _ns1__SeatLicenseExpiredFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SeatLicenseExpiredFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":WrongPINFault
/// <PRE><BLOCKQUOTE>
///   This means that the PIN provided to joinConference is wrong.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":WrongPINFault is a complexType.
///
/// class _ns1__WrongPINFault operations:
/// - _ns1__WrongPINFault* soap_new__ns1__WrongPINFault(soap*) allocate
/// - _ns1__WrongPINFault* soap_new__ns1__WrongPINFault(soap*, int num) allocate array
/// - _ns1__WrongPINFault* soap_new_req__ns1__WrongPINFault(soap*, ...) allocate, set required members
/// - _ns1__WrongPINFault* soap_new_set__ns1__WrongPINFault(soap*, ...) allocate, set all public members
/// - _ns1__WrongPINFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__WrongPINFault(soap*, _ns1__WrongPINFault*) deserialize from a stream
/// - int soap_write__ns1__WrongPINFault(soap*, _ns1__WrongPINFault*) serialize to a stream
/// - _ns1__WrongPINFault* _ns1__WrongPINFault::soap_dup(soap*) returns deep copy of _ns1__WrongPINFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__WrongPINFault::soap_del() deep deletes _ns1__WrongPINFault data members, use only after _ns1__WrongPINFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__WrongPINFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":ConferenceLockedFault
/// <PRE><BLOCKQUOTE>
///   This means that the conference provided by EntityID is unable to be join, due to the fact that it is locked.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":ConferenceLockedFault is a complexType.
///
/// class _ns1__ConferenceLockedFault operations:
/// - _ns1__ConferenceLockedFault* soap_new__ns1__ConferenceLockedFault(soap*) allocate
/// - _ns1__ConferenceLockedFault* soap_new__ns1__ConferenceLockedFault(soap*, int num) allocate array
/// - _ns1__ConferenceLockedFault* soap_new_req__ns1__ConferenceLockedFault(soap*, ...) allocate, set required members
/// - _ns1__ConferenceLockedFault* soap_new_set__ns1__ConferenceLockedFault(soap*, ...) allocate, set all public members
/// - _ns1__ConferenceLockedFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ConferenceLockedFault(soap*, _ns1__ConferenceLockedFault*) deserialize from a stream
/// - int soap_write__ns1__ConferenceLockedFault(soap*, _ns1__ConferenceLockedFault*) serialize to a stream
/// - _ns1__ConferenceLockedFault* _ns1__ConferenceLockedFault::soap_dup(soap*) returns deep copy of _ns1__ConferenceLockedFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ConferenceLockedFault::soap_del() deep deletes _ns1__ConferenceLockedFault data members, use only after _ns1__ConferenceLockedFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ConferenceLockedFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":NotLicensedFault
/// <PRE><BLOCKQUOTE>
///   This means that usage of API is not licensed.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":NotLicensedFault is a complexType.
///
/// class _ns1__NotLicensedFault operations:
/// - _ns1__NotLicensedFault* soap_new__ns1__NotLicensedFault(soap*) allocate
/// - _ns1__NotLicensedFault* soap_new__ns1__NotLicensedFault(soap*, int num) allocate array
/// - _ns1__NotLicensedFault* soap_new_req__ns1__NotLicensedFault(soap*, ...) allocate, set required members
/// - _ns1__NotLicensedFault* soap_new_set__ns1__NotLicensedFault(soap*, ...) allocate, set all public members
/// - _ns1__NotLicensedFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__NotLicensedFault(soap*, _ns1__NotLicensedFault*) deserialize from a stream
/// - int soap_write__ns1__NotLicensedFault(soap*, _ns1__NotLicensedFault*) serialize to a stream
/// - _ns1__NotLicensedFault* _ns1__NotLicensedFault::soap_dup(soap*) returns deep copy of _ns1__NotLicensedFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__NotLicensedFault::soap_del() deep deletes _ns1__NotLicensedFault data members, use only after _ns1__NotLicensedFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__NotLicensedFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":ResourceNotAvailableFault
/// <PRE><BLOCKQUOTE>
///   Resources are not available for the requested operation.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":ResourceNotAvailableFault is a complexType.
///
/// class _ns1__ResourceNotAvailableFault operations:
/// - _ns1__ResourceNotAvailableFault* soap_new__ns1__ResourceNotAvailableFault(soap*) allocate
/// - _ns1__ResourceNotAvailableFault* soap_new__ns1__ResourceNotAvailableFault(soap*, int num) allocate array
/// - _ns1__ResourceNotAvailableFault* soap_new_req__ns1__ResourceNotAvailableFault(soap*, ...) allocate, set required members
/// - _ns1__ResourceNotAvailableFault* soap_new_set__ns1__ResourceNotAvailableFault(soap*, ...) allocate, set all public members
/// - _ns1__ResourceNotAvailableFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ResourceNotAvailableFault(soap*, _ns1__ResourceNotAvailableFault*) deserialize from a stream
/// - int soap_write__ns1__ResourceNotAvailableFault(soap*, _ns1__ResourceNotAvailableFault*) serialize to a stream
/// - _ns1__ResourceNotAvailableFault* _ns1__ResourceNotAvailableFault::soap_dup(soap*) returns deep copy of _ns1__ResourceNotAvailableFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ResourceNotAvailableFault::soap_del() deep deletes _ns1__ResourceNotAvailableFault data members, use only after _ns1__ResourceNotAvailableFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ResourceNotAvailableFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":AccessRestrictedFault
/// <PRE><BLOCKQUOTE>
///   Access Restriction to Login through Mobile device
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":AccessRestrictedFault is a complexType.
///
/// class _ns1__AccessRestrictedFault operations:
/// - _ns1__AccessRestrictedFault* soap_new__ns1__AccessRestrictedFault(soap*) allocate
/// - _ns1__AccessRestrictedFault* soap_new__ns1__AccessRestrictedFault(soap*, int num) allocate array
/// - _ns1__AccessRestrictedFault* soap_new_req__ns1__AccessRestrictedFault(soap*, ...) allocate, set required members
/// - _ns1__AccessRestrictedFault* soap_new_set__ns1__AccessRestrictedFault(soap*, ...) allocate, set all public members
/// - _ns1__AccessRestrictedFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__AccessRestrictedFault(soap*, _ns1__AccessRestrictedFault*) deserialize from a stream
/// - int soap_write__ns1__AccessRestrictedFault(soap*, _ns1__AccessRestrictedFault*) serialize to a stream
/// - _ns1__AccessRestrictedFault* _ns1__AccessRestrictedFault::soap_dup(soap*) returns deep copy of _ns1__AccessRestrictedFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__AccessRestrictedFault::soap_del() deep deletes _ns1__AccessRestrictedFault data members, use only after _ns1__AccessRestrictedFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__AccessRestrictedFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":InvalidModeratorPINFormatFault
/// @brief "http://portal.vidyo.com/user/v1_1":InvalidModeratorPINFormatFault is a complexType.
///
/// class _ns1__InvalidModeratorPINFormatFault operations:
/// - _ns1__InvalidModeratorPINFormatFault* soap_new__ns1__InvalidModeratorPINFormatFault(soap*) allocate
/// - _ns1__InvalidModeratorPINFormatFault* soap_new__ns1__InvalidModeratorPINFormatFault(soap*, int num) allocate array
/// - _ns1__InvalidModeratorPINFormatFault* soap_new_req__ns1__InvalidModeratorPINFormatFault(soap*, ...) allocate, set required members
/// - _ns1__InvalidModeratorPINFormatFault* soap_new_set__ns1__InvalidModeratorPINFormatFault(soap*, ...) allocate, set all public members
/// - _ns1__InvalidModeratorPINFormatFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__InvalidModeratorPINFormatFault(soap*, _ns1__InvalidModeratorPINFormatFault*) deserialize from a stream
/// - int soap_write__ns1__InvalidModeratorPINFormatFault(soap*, _ns1__InvalidModeratorPINFormatFault*) serialize to a stream
/// - _ns1__InvalidModeratorPINFormatFault* _ns1__InvalidModeratorPINFormatFault::soap_dup(soap*) returns deep copy of _ns1__InvalidModeratorPINFormatFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InvalidModeratorPINFormatFault::soap_del() deep deletes _ns1__InvalidModeratorPINFormatFault data members, use only after _ns1__InvalidModeratorPINFormatFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InvalidModeratorPINFormatFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":ControlMeetingFault
/// @brief "http://portal.vidyo.com/user/v1_1":ControlMeetingFault is a complexType.
///
/// class _ns1__ControlMeetingFault operations:
/// - _ns1__ControlMeetingFault* soap_new__ns1__ControlMeetingFault(soap*) allocate
/// - _ns1__ControlMeetingFault* soap_new__ns1__ControlMeetingFault(soap*, int num) allocate array
/// - _ns1__ControlMeetingFault* soap_new_req__ns1__ControlMeetingFault(soap*, ...) allocate, set required members
/// - _ns1__ControlMeetingFault* soap_new_set__ns1__ControlMeetingFault(soap*, ...) allocate, set all public members
/// - _ns1__ControlMeetingFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ControlMeetingFault(soap*, _ns1__ControlMeetingFault*) deserialize from a stream
/// - int soap_write__ns1__ControlMeetingFault(soap*, _ns1__ControlMeetingFault*) serialize to a stream
/// - _ns1__ControlMeetingFault* _ns1__ControlMeetingFault::soap_dup(soap*) returns deep copy of _ns1__ControlMeetingFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ControlMeetingFault::soap_del() deep deletes _ns1__ControlMeetingFault data members, use only after _ns1__ControlMeetingFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ControlMeetingFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":ScheduledRoomCreationFault
/// @brief "http://portal.vidyo.com/user/v1_1":ScheduledRoomCreationFault is a complexType.
///
/// class _ns1__ScheduledRoomCreationFault operations:
/// - _ns1__ScheduledRoomCreationFault* soap_new__ns1__ScheduledRoomCreationFault(soap*) allocate
/// - _ns1__ScheduledRoomCreationFault* soap_new__ns1__ScheduledRoomCreationFault(soap*, int num) allocate array
/// - _ns1__ScheduledRoomCreationFault* soap_new_req__ns1__ScheduledRoomCreationFault(soap*, ...) allocate, set required members
/// - _ns1__ScheduledRoomCreationFault* soap_new_set__ns1__ScheduledRoomCreationFault(soap*, ...) allocate, set all public members
/// - _ns1__ScheduledRoomCreationFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ScheduledRoomCreationFault(soap*, _ns1__ScheduledRoomCreationFault*) deserialize from a stream
/// - int soap_write__ns1__ScheduledRoomCreationFault(soap*, _ns1__ScheduledRoomCreationFault*) serialize to a stream
/// - _ns1__ScheduledRoomCreationFault* _ns1__ScheduledRoomCreationFault::soap_dup(soap*) returns deep copy of _ns1__ScheduledRoomCreationFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ScheduledRoomCreationFault::soap_del() deep deletes _ns1__ScheduledRoomCreationFault data members, use only after _ns1__ScheduledRoomCreationFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ScheduledRoomCreationFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":EndpointNotBoundFault
/// <PRE><BLOCKQUOTE>
///   Endpoint not bound to the user requesting the operation.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":EndpointNotBoundFault is a complexType.
///
/// class _ns1__EndpointNotBoundFault operations:
/// - _ns1__EndpointNotBoundFault* soap_new__ns1__EndpointNotBoundFault(soap*) allocate
/// - _ns1__EndpointNotBoundFault* soap_new__ns1__EndpointNotBoundFault(soap*, int num) allocate array
/// - _ns1__EndpointNotBoundFault* soap_new_req__ns1__EndpointNotBoundFault(soap*, ...) allocate, set required members
/// - _ns1__EndpointNotBoundFault* soap_new_set__ns1__EndpointNotBoundFault(soap*, ...) allocate, set all public members
/// - _ns1__EndpointNotBoundFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__EndpointNotBoundFault(soap*, _ns1__EndpointNotBoundFault*) deserialize from a stream
/// - int soap_write__ns1__EndpointNotBoundFault(soap*, _ns1__EndpointNotBoundFault*) serialize to a stream
/// - _ns1__EndpointNotBoundFault* _ns1__EndpointNotBoundFault::soap_dup(soap*) returns deep copy of _ns1__EndpointNotBoundFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__EndpointNotBoundFault::soap_del() deep deletes _ns1__EndpointNotBoundFault data members, use only after _ns1__EndpointNotBoundFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__EndpointNotBoundFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":InPointToPointCallFault
/// <PRE><BLOCKQUOTE>
///   This means that the user is in point to point call and the conferenceID cannot be returned.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":InPointToPointCallFault is a complexType.
///
/// class _ns1__InPointToPointCallFault operations:
/// - _ns1__InPointToPointCallFault* soap_new__ns1__InPointToPointCallFault(soap*) allocate
/// - _ns1__InPointToPointCallFault* soap_new__ns1__InPointToPointCallFault(soap*, int num) allocate array
/// - _ns1__InPointToPointCallFault* soap_new_req__ns1__InPointToPointCallFault(soap*, ...) allocate, set required members
/// - _ns1__InPointToPointCallFault* soap_new_set__ns1__InPointToPointCallFault(soap*, ...) allocate, set all public members
/// - _ns1__InPointToPointCallFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__InPointToPointCallFault(soap*, _ns1__InPointToPointCallFault*) deserialize from a stream
/// - int soap_write__ns1__InPointToPointCallFault(soap*, _ns1__InPointToPointCallFault*) serialize to a stream
/// - _ns1__InPointToPointCallFault* _ns1__InPointToPointCallFault::soap_dup(soap*) returns deep copy of _ns1__InPointToPointCallFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InPointToPointCallFault::soap_del() deep deletes _ns1__InPointToPointCallFault data members, use only after _ns1__InPointToPointCallFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InPointToPointCallFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":PrefixNotConfiguredException
/// <PRE><BLOCKQUOTE>
///   Error when Portal Prefix not configured.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":PrefixNotConfiguredException is a complexType.
///
/// class _ns1__PrefixNotConfiguredException operations:
/// - _ns1__PrefixNotConfiguredException* soap_new__ns1__PrefixNotConfiguredException(soap*) allocate
/// - _ns1__PrefixNotConfiguredException* soap_new__ns1__PrefixNotConfiguredException(soap*, int num) allocate array
/// - _ns1__PrefixNotConfiguredException* soap_new_req__ns1__PrefixNotConfiguredException(soap*, ...) allocate, set required members
/// - _ns1__PrefixNotConfiguredException* soap_new_set__ns1__PrefixNotConfiguredException(soap*, ...) allocate, set all public members
/// - _ns1__PrefixNotConfiguredException::soap_default(soap*) reset members to default
/// - int soap_read__ns1__PrefixNotConfiguredException(soap*, _ns1__PrefixNotConfiguredException*) deserialize from a stream
/// - int soap_write__ns1__PrefixNotConfiguredException(soap*, _ns1__PrefixNotConfiguredException*) serialize to a stream
/// - _ns1__PrefixNotConfiguredException* _ns1__PrefixNotConfiguredException::soap_dup(soap*) returns deep copy of _ns1__PrefixNotConfiguredException, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__PrefixNotConfiguredException::soap_del() deep deletes _ns1__PrefixNotConfiguredException data members, use only after _ns1__PrefixNotConfiguredException::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__PrefixNotConfiguredException
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":FeatureNotAvailableFault
/// <PRE><BLOCKQUOTE>
///   Returns when the method is being called when both features are disabled on the VidyoPortal.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":FeatureNotAvailableFault is a complexType.
///
/// class _ns1__FeatureNotAvailableFault operations:
/// - _ns1__FeatureNotAvailableFault* soap_new__ns1__FeatureNotAvailableFault(soap*) allocate
/// - _ns1__FeatureNotAvailableFault* soap_new__ns1__FeatureNotAvailableFault(soap*, int num) allocate array
/// - _ns1__FeatureNotAvailableFault* soap_new_req__ns1__FeatureNotAvailableFault(soap*, ...) allocate, set required members
/// - _ns1__FeatureNotAvailableFault* soap_new_set__ns1__FeatureNotAvailableFault(soap*, ...) allocate, set all public members
/// - _ns1__FeatureNotAvailableFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__FeatureNotAvailableFault(soap*, _ns1__FeatureNotAvailableFault*) deserialize from a stream
/// - int soap_write__ns1__FeatureNotAvailableFault(soap*, _ns1__FeatureNotAvailableFault*) serialize to a stream
/// - _ns1__FeatureNotAvailableFault* _ns1__FeatureNotAvailableFault::soap_dup(soap*) returns deep copy of _ns1__FeatureNotAvailableFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__FeatureNotAvailableFault::soap_del() deep deletes _ns1__FeatureNotAvailableFault data members, use only after _ns1__FeatureNotAvailableFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__FeatureNotAvailableFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":VidyoReplayNotAvailableFault
/// <PRE><BLOCKQUOTE>
///   Returned when VidyoReplay is not set up on the specified tenant.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":VidyoReplayNotAvailableFault is a complexType.
///
/// class _ns1__VidyoReplayNotAvailableFault operations:
/// - _ns1__VidyoReplayNotAvailableFault* soap_new__ns1__VidyoReplayNotAvailableFault(soap*) allocate
/// - _ns1__VidyoReplayNotAvailableFault* soap_new__ns1__VidyoReplayNotAvailableFault(soap*, int num) allocate array
/// - _ns1__VidyoReplayNotAvailableFault* soap_new_req__ns1__VidyoReplayNotAvailableFault(soap*, ...) allocate, set required members
/// - _ns1__VidyoReplayNotAvailableFault* soap_new_set__ns1__VidyoReplayNotAvailableFault(soap*, ...) allocate, set all public members
/// - _ns1__VidyoReplayNotAvailableFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__VidyoReplayNotAvailableFault(soap*, _ns1__VidyoReplayNotAvailableFault*) deserialize from a stream
/// - int soap_write__ns1__VidyoReplayNotAvailableFault(soap*, _ns1__VidyoReplayNotAvailableFault*) serialize to a stream
/// - _ns1__VidyoReplayNotAvailableFault* _ns1__VidyoReplayNotAvailableFault::soap_dup(soap*) returns deep copy of _ns1__VidyoReplayNotAvailableFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__VidyoReplayNotAvailableFault::soap_del() deep deletes _ns1__VidyoReplayNotAvailableFault data members, use only after _ns1__VidyoReplayNotAvailableFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__VidyoReplayNotAvailableFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RoomNotFoundFault
/// @brief "http://portal.vidyo.com/user/v1_1":RoomNotFoundFault is a complexType.
///
/// class _ns1__RoomNotFoundFault operations:
/// - _ns1__RoomNotFoundFault* soap_new__ns1__RoomNotFoundFault(soap*) allocate
/// - _ns1__RoomNotFoundFault* soap_new__ns1__RoomNotFoundFault(soap*, int num) allocate array
/// - _ns1__RoomNotFoundFault* soap_new_req__ns1__RoomNotFoundFault(soap*, ...) allocate, set required members
/// - _ns1__RoomNotFoundFault* soap_new_set__ns1__RoomNotFoundFault(soap*, ...) allocate, set all public members
/// - _ns1__RoomNotFoundFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RoomNotFoundFault(soap*, _ns1__RoomNotFoundFault*) deserialize from a stream
/// - int soap_write__ns1__RoomNotFoundFault(soap*, _ns1__RoomNotFoundFault*) serialize to a stream
/// - _ns1__RoomNotFoundFault* _ns1__RoomNotFoundFault::soap_dup(soap*) returns deep copy of _ns1__RoomNotFoundFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RoomNotFoundFault::soap_del() deep deletes _ns1__RoomNotFoundFault data members, use only after _ns1__RoomNotFoundFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RoomNotFoundFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RoomMode
/// <PRE><BLOCKQUOTE>
///   - 'roomURL' (optional) means that room has an URL to be used to join the meeting. Typically used for sending invitations to users via mail, etc.
///   - 'roomLocked' means the owner is not allowing any more participants to join the room.
///   - 'hasPIN' means that the participant is required to enter a PIN in order to join this room.
///   - 'roomPIN' (optional) is the actual PIN that participant uses to enter the room.
///   - 'hasModeratorPIN' (optional) means that the participant is required to enter a Moderator PIN in order to control this room.
///   - 'moderatorPIN' (optional) is the actual Moderator PIN that participant uses to control the room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RoomMode is a complexType.
///
/// class _ns1__RoomMode operations:
/// - _ns1__RoomMode* soap_new__ns1__RoomMode(soap*) allocate
/// - _ns1__RoomMode* soap_new__ns1__RoomMode(soap*, int num) allocate array
/// - _ns1__RoomMode* soap_new_req__ns1__RoomMode(soap*, ...) allocate, set required members
/// - _ns1__RoomMode* soap_new_set__ns1__RoomMode(soap*, ...) allocate, set all public members
/// - _ns1__RoomMode::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RoomMode(soap*, _ns1__RoomMode*) deserialize from a stream
/// - int soap_write__ns1__RoomMode(soap*, _ns1__RoomMode*) serialize to a stream
/// - _ns1__RoomMode* _ns1__RoomMode::soap_dup(soap*) returns deep copy of _ns1__RoomMode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RoomMode::soap_del() deep deletes _ns1__RoomMode data members, use only after _ns1__RoomMode::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RoomMode
{ public:
/// Element "roomURL" of XSD type xs:string.
    char*                                roomURL                        0;	///< Optional element.
/// Element "isLocked" of XSD type xs:boolean.
    bool                                 isLocked                       1;	///< Required element.
/// Element "hasPIN" of XSD type xs:boolean.
    bool                                 hasPIN                         1;	///< Required element.
/// Element "roomPIN" of XSD type xs:string.
    char*                                roomPIN                        0;	///< Optional element.
/// Element "hasModeratorPIN" of XSD type xs:boolean.
    bool*                                hasModeratorPIN                0;	///< Optional element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":Filter
/// <PRE><BLOCKQUOTE>
///   Filter for search queries.
///   A SOAP fault will be thrown if limit exceeds 200. Default value for limit is 40.
///   Anything higher than 40 may result in poor system performance.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":Filter is a complexType.
///
/// class _ns1__Filter operations:
/// - _ns1__Filter* soap_new__ns1__Filter(soap*) allocate
/// - _ns1__Filter* soap_new__ns1__Filter(soap*, int num) allocate array
/// - _ns1__Filter* soap_new_req__ns1__Filter(soap*, ...) allocate, set required members
/// - _ns1__Filter* soap_new_set__ns1__Filter(soap*, ...) allocate, set all public members
/// - _ns1__Filter::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Filter(soap*, _ns1__Filter*) deserialize from a stream
/// - int soap_write__ns1__Filter(soap*, _ns1__Filter*) serialize to a stream
/// - _ns1__Filter* _ns1__Filter::soap_dup(soap*) returns deep copy of _ns1__Filter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Filter::soap_del() deep deletes _ns1__Filter data members, use only after _ns1__Filter::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Filter
{ public:
/// Element "start" of XSD type xs:int.
    int*                                 start                          0;	///< Optional element.
/// Element "limit" of XSD type xs:int.
    int*                                 limit                          0;	///< Optional element.
/// Element "sortBy" of XSD type xs:string.
    char*                                sortBy                         0;	///< Optional element.
/// Element "dir" of XSD type "http://portal.vidyo.com/user/v1_1":sortDir.
    enum ns1__sortDir*                   dir                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   There are three types of entities in VidyoPortal:
///   1. Member - A member is an authorized user of VidyoPortal with a user account.
///   - A member may have at the most one personal room.
///   - A member has a display name
///   - A member has an extension that can also be used for search purposes.
///   2. Rooom - It is a meeting place. Rooms are of two kinds:
///   - Personal, as explained above
///   - Public. Each room has a owner assigned who can control the room.
///   3. Legacy - This entity represents external endpoints. Think of it as a label to identify and search external devices.
///   Legacy entity does not have an account on the VidyoPortal. There is no owner assigned to legacy devices.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":EntityType.
    enum _ns1__EntityType*               EntityType                     0;	///< Optional element.
/// Element "query" of XSD type xs:string.
    char*                                query                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":Entity
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":Entity is a complexType.
///
/// class _ns1__Entity operations:
/// - _ns1__Entity* soap_new__ns1__Entity(soap*) allocate
/// - _ns1__Entity* soap_new__ns1__Entity(soap*, int num) allocate array
/// - _ns1__Entity* soap_new_req__ns1__Entity(soap*, ...) allocate, set required members
/// - _ns1__Entity* soap_new_set__ns1__Entity(soap*, ...) allocate, set all public members
/// - _ns1__Entity::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Entity(soap*, _ns1__Entity*) deserialize from a stream
/// - int soap_write__ns1__Entity(soap*, _ns1__Entity*) serialize to a stream
/// - _ns1__Entity* _ns1__Entity::soap_dup(soap*) returns deep copy of _ns1__Entity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Entity::soap_del() deep deletes _ns1__Entity data members, use only after _ns1__Entity::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Entity
{ public:
/// Element "entityID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        entityID                       1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   There are three types of entities in VidyoPortal:
///   1. Member - A member is an authorized user of VidyoPortal with a user account.
///   - A member may have at the most one personal room.
///   - A member has a display name
///   - A member has an extension that can also be used for search purposes.
///   2. Rooom - It is a meeting place. Rooms are of two kinds:
///   - Personal, as explained above
///   - Public. Each room has a owner assigned who can control the room.
///   3. Legacy - This entity represents external endpoints. Think of it as a label to identify and search external devices.
///   Legacy entity does not have an account on the VidyoPortal. There is no owner assigned to legacy devices.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":EntityType.
    enum _ns1__EntityType                EntityType                     1;	///< Required element.
/// Element "ownerID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        ownerID                        0;	///< Optional element.
/// Element "displayName" of XSD type xs:string.
    char*                                displayName                    1;	///< Required element.
/// Element "extension" of XSD type xs:string.
    char*                                extension                      1;	///< Required element.
/// Element "emailAddress" of XSD type xs:string.
    char*                                emailAddress                   0;	///< Optional element.
/// Element "tenant" of XSD type xs:string.
    char*                                tenant                         0;	///< Optional element.
/// Element "description" of XSD type xs:string.
    char*                                description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Languages supported by VidyoPortal
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Language.
    enum _ns1__Language*                 Language                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the member status based on the operation state of the endpoint in use by the member:
///   - Status is 'Offline' and hence can't be reached for a conference.
///   - Status is 'Online' and can be reached for a conference or a direct call.
///   - Status is 'Busy' in conference and can't can be reached for another conference or a direct call.
///   - Status is 'BusyInOwnRoom' in conference in own personal room and can't can be reached for another conference.
///   - Status is 'Ringing' endpoint associated with member start to ring on receive direct call or invite event from other part.
///   - Status is 'RingAccepted' endpoint associated with member accept the call from other part.
///   - Status is 'RingRejected' endpoint associated with member reject the call from other part.
///   - Status is 'RingNoAnswer' endpoint associated with member is not answered in some period of time.
///   - Status is 'Alerting' endpoint associated with member is alerting about outcome call.
///   - Status is 'AlertCancelled' endpoint associated with member is stop to be alerting about outcome call.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":MemberStatus.
    enum _ns1__MemberStatus*             MemberStatus                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Member can override the current status with these possible values. Changing a mode will impact VidyoPortal operations.
///   For e.g. if the mode is set to DoNotDisturb for a member, this member will not get any incoming requests to join a meeting or a direct call.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":MemberMode.
    enum _ns1__MemberMode*               MemberMode                     0;	///< Optional element.
/// Element "canCallDirect" of XSD type xs:boolean.
    bool*                                canCallDirect                  0;	///< Optional element.
/// Element "canJoinMeeting" of XSD type xs:boolean.
    bool*                                canJoinMeeting                 0;	///< Optional element.
/// Element "canRecordMeeting" of XSD type xs:boolean.
    bool*                                canRecordMeeting               0;	///< Optional element.
/// Element "isInMyContacts" of XSD type xs:boolean.
    bool*                                isInMyContacts                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Status is 'Empty' and hence can be used for meeting.
///   Status is 'Full' and is not accepting any more participants to the meeting.
///   Status is 'Occupied' some participants use the room for meeting.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":RoomStatus.
    enum _ns1__RoomStatus*               RoomStatus                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   - 'roomURL' (optional) means that room has an URL to be used to join the meeting. Typically used for sending invitations to users via mail, etc.
///   - 'roomLocked' means the owner is not allowing any more participants to join the room.
///   - 'hasPIN' means that the participant is required to enter a PIN in order to join this room.
///   - 'roomPIN' (optional) is the actual PIN that participant uses to enter the room.
///   - 'hasModeratorPIN' (optional) means that the participant is required to enter a Moderator PIN in order to control this room.
///   - 'moderatorPIN' (optional) is the actual Moderator PIN that participant uses to control the room.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":RoomMode.
    _ns1__RoomMode*                      RoomMode                       0;	///< Optional element.
/// Element "canControl" of XSD type xs:boolean.
    bool*                                canControl                     0;	///< Optional element.
/// Element "audio" of XSD type xs:boolean.
    bool*                                audio                          0;	///< Optional element.
/// Element "video" of XSD type xs:boolean.
    bool*                                video                          0;	///< Optional element.
/// Element "appshare" of XSD type xs:boolean.
    bool*                                appshare                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LectureModeParticipant
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of getLectureModeParticipants
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":LectureModeParticipant is a complexType.
///
/// class _ns1__LectureModeParticipant operations:
/// - _ns1__LectureModeParticipant* soap_new__ns1__LectureModeParticipant(soap*) allocate
/// - _ns1__LectureModeParticipant* soap_new__ns1__LectureModeParticipant(soap*, int num) allocate array
/// - _ns1__LectureModeParticipant* soap_new_req__ns1__LectureModeParticipant(soap*, ...) allocate, set required members
/// - _ns1__LectureModeParticipant* soap_new_set__ns1__LectureModeParticipant(soap*, ...) allocate, set all public members
/// - _ns1__LectureModeParticipant::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LectureModeParticipant(soap*, _ns1__LectureModeParticipant*) deserialize from a stream
/// - int soap_write__ns1__LectureModeParticipant(soap*, _ns1__LectureModeParticipant*) serialize to a stream
/// - _ns1__LectureModeParticipant* _ns1__LectureModeParticipant::soap_dup(soap*) returns deep copy of _ns1__LectureModeParticipant, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LectureModeParticipant::soap_del() deep deletes _ns1__LectureModeParticipant data members, use only after _ns1__LectureModeParticipant::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LectureModeParticipant
{ public:
/// Element "entityID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        entityID                       1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   There are three types of entities in VidyoPortal:
///   1. Member - A member is an authorized user of VidyoPortal with a user account.
///   - A member may have at the most one personal room.
///   - A member has a display name
///   - A member has an extension that can also be used for search purposes.
///   2. Rooom - It is a meeting place. Rooms are of two kinds:
///   - Personal, as explained above
///   - Public. Each room has a owner assigned who can control the room.
///   3. Legacy - This entity represents external endpoints. Think of it as a label to identify and search external devices.
///   Legacy entity does not have an account on the VidyoPortal. There is no owner assigned to legacy devices.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":EntityType.
    enum _ns1__EntityType                EntityType                     1;	///< Required element.
/// Element "displayName" of XSD type xs:string.
    char*                                displayName                    1;	///< Required element.
/// Element "extension" of XSD type xs:string.
    char*                                extension                      1;	///< Required element.
/// Element "audio" of XSD type xs:boolean.
    bool*                                audio                          0;	///< Optional element.
/// Element "video" of XSD type xs:boolean.
    bool*                                video                          0;	///< Optional element.
/// Element "appshare" of XSD type xs:boolean.
    bool*                                appshare                       0;	///< Optional element.
/// Element "handRaised" of XSD type xs:boolean.
    bool*                                handRaised                     0;	///< Optional element.
/// Element "presenter" of XSD type xs:boolean.
    bool*                                presenter                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LoginAttempt
/// <PRE><BLOCKQUOTE>
///   Login attempt information.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":LoginAttempt is a complexType.
///
/// class _ns1__LoginAttempt operations:
/// - _ns1__LoginAttempt* soap_new__ns1__LoginAttempt(soap*) allocate
/// - _ns1__LoginAttempt* soap_new__ns1__LoginAttempt(soap*, int num) allocate array
/// - _ns1__LoginAttempt* soap_new_req__ns1__LoginAttempt(soap*, ...) allocate, set required members
/// - _ns1__LoginAttempt* soap_new_set__ns1__LoginAttempt(soap*, ...) allocate, set all public members
/// - _ns1__LoginAttempt::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LoginAttempt(soap*, _ns1__LoginAttempt*) deserialize from a stream
/// - int soap_write__ns1__LoginAttempt(soap*, _ns1__LoginAttempt*) serialize to a stream
/// - _ns1__LoginAttempt* _ns1__LoginAttempt::soap_dup(soap*) returns deep copy of _ns1__LoginAttempt, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LoginAttempt::soap_del() deep deletes _ns1__LoginAttempt data members, use only after _ns1__LoginAttempt::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LoginAttempt
{ public:
/// Element "result" of XSD type xs:string.
    char*                                result                         1;	///< Required element.
/// Element "sourceIPAddress" of XSD type xs:string.
    char*                                sourceIPAddress                1;	///< Optional (xsi:nil when NULL) element.
/// Element "attemptTime" of XSD type xs:dateTime.
    time_t                               attemptTime                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":WelcomeBannerContent
/// <PRE><BLOCKQUOTE>
///   WelcomeBannerContent for a text based message to be used on the endpoints upon successful login with the last 5 login attempts (successful and unsuccessful) for that particular user.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":WelcomeBannerContent is a complexType.
///
/// class _ns1__WelcomeBannerContent operations:
/// - _ns1__WelcomeBannerContent* soap_new__ns1__WelcomeBannerContent(soap*) allocate
/// - _ns1__WelcomeBannerContent* soap_new__ns1__WelcomeBannerContent(soap*, int num) allocate array
/// - _ns1__WelcomeBannerContent* soap_new_req__ns1__WelcomeBannerContent(soap*, ...) allocate, set required members
/// - _ns1__WelcomeBannerContent* soap_new_set__ns1__WelcomeBannerContent(soap*, ...) allocate, set all public members
/// - _ns1__WelcomeBannerContent::soap_default(soap*) reset members to default
/// - int soap_read__ns1__WelcomeBannerContent(soap*, _ns1__WelcomeBannerContent*) deserialize from a stream
/// - int soap_write__ns1__WelcomeBannerContent(soap*, _ns1__WelcomeBannerContent*) serialize to a stream
/// - _ns1__WelcomeBannerContent* _ns1__WelcomeBannerContent::soap_dup(soap*) returns deep copy of _ns1__WelcomeBannerContent, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__WelcomeBannerContent::soap_del() deep deletes _ns1__WelcomeBannerContent data members, use only after _ns1__WelcomeBannerContent::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__WelcomeBannerContent
{ public:
/// Element "welcomeBannerText" of XSD type xs:string.
    char*                                welcomeBannerText              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Login attempt information.
/// </BLOCKQUOTE></PRE>
/// Size of the dynamic array of _ns1__LoginAttempt* is 0..unbounded.
   $int                                  __sizeLoginAttempt             0;
/// Pointer to array _ns1__LoginAttempt* of size 0..unbounded.
    _ns1__LoginAttempt*                 *LoginAttempt                   0;
/// Element "welcomeBannerPasswordExpiryDate" of XSD type xs:dateTime.
    time_t*                              welcomeBannerPasswordExpiryDate 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LogInRequest
/// <PRE><BLOCKQUOTE>
///   Login request to the VidyoPortal. User identified in Http Authentication header
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":LogInRequest is a complexType.
///
/// class _ns1__LogInRequest operations:
/// - _ns1__LogInRequest* soap_new__ns1__LogInRequest(soap*) allocate
/// - _ns1__LogInRequest* soap_new__ns1__LogInRequest(soap*, int num) allocate array
/// - _ns1__LogInRequest* soap_new_req__ns1__LogInRequest(soap*, ...) allocate, set required members
/// - _ns1__LogInRequest* soap_new_set__ns1__LogInRequest(soap*, ...) allocate, set all public members
/// - _ns1__LogInRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LogInRequest(soap*, _ns1__LogInRequest*) deserialize from a stream
/// - int soap_write__ns1__LogInRequest(soap*, _ns1__LogInRequest*) serialize to a stream
/// - _ns1__LogInRequest* _ns1__LogInRequest::soap_dup(soap*) returns deep copy of _ns1__LogInRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LogInRequest::soap_del() deep deletes _ns1__LogInRequest data members, use only after _ns1__LogInRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LogInRequest
{ public:
/// <PRE><BLOCKQUOTE>
///   Type is 'W' for Windows platform.
///   Type is 'M' for MacOS platform.
///   Type is 'V' for VidyoRoom HD200 (Windows platform).
///   Type is 'R' for VidyoRoom HD100/HD50 (Windows platform).
///   Type is 'L' for Linux platform.
///   Type is 'S' for SL5 platform.
///   Type is 'U' for Ubuntu platform.
///   Type is 'T' for SL5 64bit platform.
///   Type is 'X' for Ubuntu 64bit platform.
///   Type is 'I' for iOS
///   Type is 'A' for Android
///   Type is 'P' for VidyoPanorama VP600.
///   Type is 'N' for VidyoPanorama 600 running Windows 64-bit.
///   Type is 'O' for VidyoPanorama 600 running Linux.
///   Type is 'Q' for VidyoRoom running Windows 32-bit.
///   Type is 'Y' for VidyoRoom running Windows 64-bit.
///   Type is 'Z' for VidyoRoom running Linux.
///   Type is 'B' for VidyoRoom SE Windows.
///   Type is 'C' for VidyoRoom SE Linux.
///   Type is 'D' for VidyoRoom SE OS X.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ClientType.
    enum _ns1__ClientType*               ClientType                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LogInResponse
/// <PRE><BLOCKQUOTE>
///   If the users authentication is successfull, the Portal Access Key is returned.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":LogInResponse is a complexType.
///
/// class _ns1__LogInResponse operations:
/// - _ns1__LogInResponse* soap_new__ns1__LogInResponse(soap*) allocate
/// - _ns1__LogInResponse* soap_new__ns1__LogInResponse(soap*, int num) allocate array
/// - _ns1__LogInResponse* soap_new_req__ns1__LogInResponse(soap*, ...) allocate, set required members
/// - _ns1__LogInResponse* soap_new_set__ns1__LogInResponse(soap*, ...) allocate, set all public members
/// - _ns1__LogInResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LogInResponse(soap*, _ns1__LogInResponse*) deserialize from a stream
/// - int soap_write__ns1__LogInResponse(soap*, _ns1__LogInResponse*) serialize to a stream
/// - _ns1__LogInResponse* _ns1__LogInResponse::soap_dup(soap*) returns deep copy of _ns1__LogInResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LogInResponse::soap_del() deep deletes _ns1__LogInResponse data members, use only after _ns1__LogInResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LogInResponse
{ public:
/// Element "pak" of XSD type xs:string.
    char*                                pak                            1;	///< Required element.
/// Element "vmaddress" of XSD type xs:string.
    char*                                vmaddress                      0;	///< Optional element.
/// Element "proxyaddress" of XSD type xs:string.
    char*                                proxyaddress                   0;	///< Optional element.
/// Element "loctag" of XSD type xs:string.
    char*                                loctag                         0;	///< Optional element.
/// Element "pak2" of XSD type xs:string.
    char*                                pak2                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LinkEndpointRequest
/// <PRE><BLOCKQUOTE>
///   LinkEndpoint request to the VidyoPortal. User identified in Http Authentication header is associated with the vidyo endpoint identifier.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":LinkEndpointRequest is a complexType.
///
/// class _ns1__LinkEndpointRequest operations:
/// - _ns1__LinkEndpointRequest* soap_new__ns1__LinkEndpointRequest(soap*) allocate
/// - _ns1__LinkEndpointRequest* soap_new__ns1__LinkEndpointRequest(soap*, int num) allocate array
/// - _ns1__LinkEndpointRequest* soap_new_req__ns1__LinkEndpointRequest(soap*, ...) allocate, set required members
/// - _ns1__LinkEndpointRequest* soap_new_set__ns1__LinkEndpointRequest(soap*, ...) allocate, set all public members
/// - _ns1__LinkEndpointRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LinkEndpointRequest(soap*, _ns1__LinkEndpointRequest*) deserialize from a stream
/// - int soap_write__ns1__LinkEndpointRequest(soap*, _ns1__LinkEndpointRequest*) serialize to a stream
/// - _ns1__LinkEndpointRequest* _ns1__LinkEndpointRequest::soap_dup(soap*) returns deep copy of _ns1__LinkEndpointRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LinkEndpointRequest::soap_del() deep deletes _ns1__LinkEndpointRequest data members, use only after _ns1__LinkEndpointRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LinkEndpointRequest
{ public:
/// Element "EID" of XSD type xs:string.
    char*                                EID                            1;	///< Required element.
/// Element "vrIP" of XSD type xs:string.
    char*                                vrIP                           0;	///< Optional element.
/// Element "clientType" of XSD type xs:string.
    char*                                clientType                     0;	///< Optional element.
/// Element "applicationName" of XSD type xs:string.
    char*                                applicationName                0;	///< Optional element.
/// Element "applicationVersion" of XSD type xs:string.
    char*                                applicationVersion             0;	///< Optional element.
/// Element "applicationOs" of XSD type xs:string.
    char*                                applicationOs                  0;	///< Optional element.
/// Element "deviceModel" of XSD type xs:string.
    char*                                deviceModel                    0;	///< Optional element.
/// Element "pak2" of XSD type xs:boolean.
    bool*                                pak2                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LinkEndpointResponse
/// <PRE><BLOCKQUOTE>
///   If the users authentication is successful, the Member entity is returned.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":LinkEndpointResponse is a complexType.
///
/// class _ns1__LinkEndpointResponse operations:
/// - _ns1__LinkEndpointResponse* soap_new__ns1__LinkEndpointResponse(soap*) allocate
/// - _ns1__LinkEndpointResponse* soap_new__ns1__LinkEndpointResponse(soap*, int num) allocate array
/// - _ns1__LinkEndpointResponse* soap_new_req__ns1__LinkEndpointResponse(soap*, ...) allocate, set required members
/// - _ns1__LinkEndpointResponse* soap_new_set__ns1__LinkEndpointResponse(soap*, ...) allocate, set all public members
/// - _ns1__LinkEndpointResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LinkEndpointResponse(soap*, _ns1__LinkEndpointResponse*) deserialize from a stream
/// - int soap_write__ns1__LinkEndpointResponse(soap*, _ns1__LinkEndpointResponse*) serialize to a stream
/// - _ns1__LinkEndpointResponse* _ns1__LinkEndpointResponse::soap_dup(soap*) returns deep copy of _ns1__LinkEndpointResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LinkEndpointResponse::soap_del() deep deletes _ns1__LinkEndpointResponse data members, use only after _ns1__LinkEndpointResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LinkEndpointResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Entity.
    _ns1__Entity*                        Entity                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LogOutRequest
/// <PRE><BLOCKQUOTE>
///   Signout request to the VidyoPortal.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":LogOutRequest is a complexType.
///
/// class _ns1__LogOutRequest operations:
/// - _ns1__LogOutRequest* soap_new__ns1__LogOutRequest(soap*) allocate
/// - _ns1__LogOutRequest* soap_new__ns1__LogOutRequest(soap*, int num) allocate array
/// - _ns1__LogOutRequest* soap_new_req__ns1__LogOutRequest(soap*, ...) allocate, set required members
/// - _ns1__LogOutRequest* soap_new_set__ns1__LogOutRequest(soap*, ...) allocate, set all public members
/// - _ns1__LogOutRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LogOutRequest(soap*, _ns1__LogOutRequest*) deserialize from a stream
/// - int soap_write__ns1__LogOutRequest(soap*, _ns1__LogOutRequest*) serialize to a stream
/// - _ns1__LogOutRequest* _ns1__LogOutRequest::soap_dup(soap*) returns deep copy of _ns1__LogOutRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LogOutRequest::soap_del() deep deletes _ns1__LogOutRequest data members, use only after _ns1__LogOutRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LogOutRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LogOutResponse
/// @brief "http://portal.vidyo.com/user/v1_1":LogOutResponse is a complexType.
///
/// class _ns1__LogOutResponse operations:
/// - _ns1__LogOutResponse* soap_new__ns1__LogOutResponse(soap*) allocate
/// - _ns1__LogOutResponse* soap_new__ns1__LogOutResponse(soap*, int num) allocate array
/// - _ns1__LogOutResponse* soap_new_req__ns1__LogOutResponse(soap*, ...) allocate, set required members
/// - _ns1__LogOutResponse* soap_new_set__ns1__LogOutResponse(soap*, ...) allocate, set all public members
/// - _ns1__LogOutResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LogOutResponse(soap*, _ns1__LogOutResponse*) deserialize from a stream
/// - int soap_write__ns1__LogOutResponse(soap*, _ns1__LogOutResponse*) serialize to a stream
/// - _ns1__LogOutResponse* _ns1__LogOutResponse::soap_dup(soap*) returns deep copy of _ns1__LogOutResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LogOutResponse::soap_del() deep deletes _ns1__LogOutResponse data members, use only after _ns1__LogOutResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LogOutResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":MyEndpointStatusRequest
/// <PRE><BLOCKQUOTE>
///   Query the status of user as identified in the http authentication header.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":MyEndpointStatusRequest is a complexType.
///
/// class _ns1__MyEndpointStatusRequest operations:
/// - _ns1__MyEndpointStatusRequest* soap_new__ns1__MyEndpointStatusRequest(soap*) allocate
/// - _ns1__MyEndpointStatusRequest* soap_new__ns1__MyEndpointStatusRequest(soap*, int num) allocate array
/// - _ns1__MyEndpointStatusRequest* soap_new_req__ns1__MyEndpointStatusRequest(soap*, ...) allocate, set required members
/// - _ns1__MyEndpointStatusRequest* soap_new_set__ns1__MyEndpointStatusRequest(soap*, ...) allocate, set all public members
/// - _ns1__MyEndpointStatusRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__MyEndpointStatusRequest(soap*, _ns1__MyEndpointStatusRequest*) deserialize from a stream
/// - int soap_write__ns1__MyEndpointStatusRequest(soap*, _ns1__MyEndpointStatusRequest*) serialize to a stream
/// - _ns1__MyEndpointStatusRequest* _ns1__MyEndpointStatusRequest::soap_dup(soap*) returns deep copy of _ns1__MyEndpointStatusRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MyEndpointStatusRequest::soap_del() deep deletes _ns1__MyEndpointStatusRequest data members, use only after _ns1__MyEndpointStatusRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MyEndpointStatusRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":MyEndpointStatusResponse
/// @brief "http://portal.vidyo.com/user/v1_1":MyEndpointStatusResponse is a complexType.
///
/// class _ns1__MyEndpointStatusResponse operations:
/// - _ns1__MyEndpointStatusResponse* soap_new__ns1__MyEndpointStatusResponse(soap*) allocate
/// - _ns1__MyEndpointStatusResponse* soap_new__ns1__MyEndpointStatusResponse(soap*, int num) allocate array
/// - _ns1__MyEndpointStatusResponse* soap_new_req__ns1__MyEndpointStatusResponse(soap*, ...) allocate, set required members
/// - _ns1__MyEndpointStatusResponse* soap_new_set__ns1__MyEndpointStatusResponse(soap*, ...) allocate, set all public members
/// - _ns1__MyEndpointStatusResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__MyEndpointStatusResponse(soap*, _ns1__MyEndpointStatusResponse*) deserialize from a stream
/// - int soap_write__ns1__MyEndpointStatusResponse(soap*, _ns1__MyEndpointStatusResponse*) serialize to a stream
/// - _ns1__MyEndpointStatusResponse* _ns1__MyEndpointStatusResponse::soap_dup(soap*) returns deep copy of _ns1__MyEndpointStatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MyEndpointStatusResponse::soap_del() deep deletes _ns1__MyEndpointStatusResponse data members, use only after _ns1__MyEndpointStatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MyEndpointStatusResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Describes the member status based on the operation state of the endpoint in use by the member:
///   - Status is 'Offline' and hence can't be reached for a conference.
///   - Status is 'Online' and can be reached for a conference or a direct call.
///   - Status is 'Busy' in conference and can't can be reached for another conference or a direct call.
///   - Status is 'BusyInOwnRoom' in conference in own personal room and can't can be reached for another conference.
///   - Status is 'Ringing' endpoint associated with member start to ring on receive direct call or invite event from other part.
///   - Status is 'RingAccepted' endpoint associated with member accept the call from other part.
///   - Status is 'RingRejected' endpoint associated with member reject the call from other part.
///   - Status is 'RingNoAnswer' endpoint associated with member is not answered in some period of time.
///   - Status is 'Alerting' endpoint associated with member is alerting about outcome call.
///   - Status is 'AlertCancelled' endpoint associated with member is stop to be alerting about outcome call.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":MemberStatus.
    enum _ns1__MemberStatus              MemberStatus                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SearchMyContactsRequest
/// <PRE><BLOCKQUOTE>
///   Each member of the VidyoPortal is allowed to keep a list of Members, Rooms, Legacy devices as the their favourites for easy access. This API returns that list.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":SearchMyContactsRequest is a complexType.
///
/// class _ns1__SearchMyContactsRequest operations:
/// - _ns1__SearchMyContactsRequest* soap_new__ns1__SearchMyContactsRequest(soap*) allocate
/// - _ns1__SearchMyContactsRequest* soap_new__ns1__SearchMyContactsRequest(soap*, int num) allocate array
/// - _ns1__SearchMyContactsRequest* soap_new_req__ns1__SearchMyContactsRequest(soap*, ...) allocate, set required members
/// - _ns1__SearchMyContactsRequest* soap_new_set__ns1__SearchMyContactsRequest(soap*, ...) allocate, set all public members
/// - _ns1__SearchMyContactsRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SearchMyContactsRequest(soap*, _ns1__SearchMyContactsRequest*) deserialize from a stream
/// - int soap_write__ns1__SearchMyContactsRequest(soap*, _ns1__SearchMyContactsRequest*) serialize to a stream
/// - _ns1__SearchMyContactsRequest* _ns1__SearchMyContactsRequest::soap_dup(soap*) returns deep copy of _ns1__SearchMyContactsRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SearchMyContactsRequest::soap_del() deep deletes _ns1__SearchMyContactsRequest data members, use only after _ns1__SearchMyContactsRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SearchMyContactsRequest
{ public:
/// <PRE><BLOCKQUOTE>
///   Filter for search queries.
///   A SOAP fault will be thrown if limit exceeds 200. Default value for limit is 40.
///   Anything higher than 40 may result in poor system performance.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Filter.
    _ns1__Filter*                        Filter                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SearchMyContactsResponse
/// @brief "http://portal.vidyo.com/user/v1_1":SearchMyContactsResponse is a complexType.
///
/// class _ns1__SearchMyContactsResponse operations:
/// - _ns1__SearchMyContactsResponse* soap_new__ns1__SearchMyContactsResponse(soap*) allocate
/// - _ns1__SearchMyContactsResponse* soap_new__ns1__SearchMyContactsResponse(soap*, int num) allocate array
/// - _ns1__SearchMyContactsResponse* soap_new_req__ns1__SearchMyContactsResponse(soap*, ...) allocate, set required members
/// - _ns1__SearchMyContactsResponse* soap_new_set__ns1__SearchMyContactsResponse(soap*, ...) allocate, set all public members
/// - _ns1__SearchMyContactsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SearchMyContactsResponse(soap*, _ns1__SearchMyContactsResponse*) deserialize from a stream
/// - int soap_write__ns1__SearchMyContactsResponse(soap*, _ns1__SearchMyContactsResponse*) serialize to a stream
/// - _ns1__SearchMyContactsResponse* _ns1__SearchMyContactsResponse::soap_dup(soap*) returns deep copy of _ns1__SearchMyContactsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SearchMyContactsResponse::soap_del() deep deletes _ns1__SearchMyContactsResponse data members, use only after _ns1__SearchMyContactsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SearchMyContactsResponse
{ public:
/// Element "total" of XSD type xs:int.
    int                                  total                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Size of the dynamic array of _ns1__Entity* is 0..unbounded.
   $int                                  __sizeEntity                   0;
/// Pointer to array _ns1__Entity* of size 0..unbounded.
    _ns1__Entity*                       *Entity                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":AddToMyContactsRequest
/// <PRE><BLOCKQUOTE>
///   Adds an entity (Member, Room, or Legacy devices) to the Member's favourites for easy access.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":AddToMyContactsRequest is a complexType.
///
/// class _ns1__AddToMyContactsRequest operations:
/// - _ns1__AddToMyContactsRequest* soap_new__ns1__AddToMyContactsRequest(soap*) allocate
/// - _ns1__AddToMyContactsRequest* soap_new__ns1__AddToMyContactsRequest(soap*, int num) allocate array
/// - _ns1__AddToMyContactsRequest* soap_new_req__ns1__AddToMyContactsRequest(soap*, ...) allocate, set required members
/// - _ns1__AddToMyContactsRequest* soap_new_set__ns1__AddToMyContactsRequest(soap*, ...) allocate, set all public members
/// - _ns1__AddToMyContactsRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__AddToMyContactsRequest(soap*, _ns1__AddToMyContactsRequest*) deserialize from a stream
/// - int soap_write__ns1__AddToMyContactsRequest(soap*, _ns1__AddToMyContactsRequest*) serialize to a stream
/// - _ns1__AddToMyContactsRequest* _ns1__AddToMyContactsRequest::soap_dup(soap*) returns deep copy of _ns1__AddToMyContactsRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__AddToMyContactsRequest::soap_del() deep deletes _ns1__AddToMyContactsRequest data members, use only after _ns1__AddToMyContactsRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__AddToMyContactsRequest
{ public:
/// Element "entityID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        entityID                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":AddToMyContactsResponse
/// @brief "http://portal.vidyo.com/user/v1_1":AddToMyContactsResponse is a complexType.
///
/// class _ns1__AddToMyContactsResponse operations:
/// - _ns1__AddToMyContactsResponse* soap_new__ns1__AddToMyContactsResponse(soap*) allocate
/// - _ns1__AddToMyContactsResponse* soap_new__ns1__AddToMyContactsResponse(soap*, int num) allocate array
/// - _ns1__AddToMyContactsResponse* soap_new_req__ns1__AddToMyContactsResponse(soap*, ...) allocate, set required members
/// - _ns1__AddToMyContactsResponse* soap_new_set__ns1__AddToMyContactsResponse(soap*, ...) allocate, set all public members
/// - _ns1__AddToMyContactsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__AddToMyContactsResponse(soap*, _ns1__AddToMyContactsResponse*) deserialize from a stream
/// - int soap_write__ns1__AddToMyContactsResponse(soap*, _ns1__AddToMyContactsResponse*) serialize to a stream
/// - _ns1__AddToMyContactsResponse* _ns1__AddToMyContactsResponse::soap_dup(soap*) returns deep copy of _ns1__AddToMyContactsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__AddToMyContactsResponse::soap_del() deep deletes _ns1__AddToMyContactsResponse data members, use only after _ns1__AddToMyContactsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__AddToMyContactsResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveFromMyContactsRequest
/// <PRE><BLOCKQUOTE>
///   Removes an entity (Member, Room, or Legacy devices) from the Member's favourites.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveFromMyContactsRequest is a complexType.
///
/// class _ns1__RemoveFromMyContactsRequest operations:
/// - _ns1__RemoveFromMyContactsRequest* soap_new__ns1__RemoveFromMyContactsRequest(soap*) allocate
/// - _ns1__RemoveFromMyContactsRequest* soap_new__ns1__RemoveFromMyContactsRequest(soap*, int num) allocate array
/// - _ns1__RemoveFromMyContactsRequest* soap_new_req__ns1__RemoveFromMyContactsRequest(soap*, ...) allocate, set required members
/// - _ns1__RemoveFromMyContactsRequest* soap_new_set__ns1__RemoveFromMyContactsRequest(soap*, ...) allocate, set all public members
/// - _ns1__RemoveFromMyContactsRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveFromMyContactsRequest(soap*, _ns1__RemoveFromMyContactsRequest*) deserialize from a stream
/// - int soap_write__ns1__RemoveFromMyContactsRequest(soap*, _ns1__RemoveFromMyContactsRequest*) serialize to a stream
/// - _ns1__RemoveFromMyContactsRequest* _ns1__RemoveFromMyContactsRequest::soap_dup(soap*) returns deep copy of _ns1__RemoveFromMyContactsRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveFromMyContactsRequest::soap_del() deep deletes _ns1__RemoveFromMyContactsRequest data members, use only after _ns1__RemoveFromMyContactsRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveFromMyContactsRequest
{ public:
/// Element "entityID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        entityID                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveFromMyContactsResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveFromMyContactsResponse is a complexType.
///
/// class _ns1__RemoveFromMyContactsResponse operations:
/// - _ns1__RemoveFromMyContactsResponse* soap_new__ns1__RemoveFromMyContactsResponse(soap*) allocate
/// - _ns1__RemoveFromMyContactsResponse* soap_new__ns1__RemoveFromMyContactsResponse(soap*, int num) allocate array
/// - _ns1__RemoveFromMyContactsResponse* soap_new_req__ns1__RemoveFromMyContactsResponse(soap*, ...) allocate, set required members
/// - _ns1__RemoveFromMyContactsResponse* soap_new_set__ns1__RemoveFromMyContactsResponse(soap*, ...) allocate, set all public members
/// - _ns1__RemoveFromMyContactsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveFromMyContactsResponse(soap*, _ns1__RemoveFromMyContactsResponse*) deserialize from a stream
/// - int soap_write__ns1__RemoveFromMyContactsResponse(soap*, _ns1__RemoveFromMyContactsResponse*) serialize to a stream
/// - _ns1__RemoveFromMyContactsResponse* _ns1__RemoveFromMyContactsResponse::soap_dup(soap*) returns deep copy of _ns1__RemoveFromMyContactsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveFromMyContactsResponse::soap_del() deep deletes _ns1__RemoveFromMyContactsResponse data members, use only after _ns1__RemoveFromMyContactsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveFromMyContactsResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SearchRequest
/// <PRE><BLOCKQUOTE>
///   Search for entities (Member, Room, or Legacy devices) that matches the criterion as specified in the filter.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":SearchRequest is a complexType.
///
/// class _ns1__SearchRequest operations:
/// - _ns1__SearchRequest* soap_new__ns1__SearchRequest(soap*) allocate
/// - _ns1__SearchRequest* soap_new__ns1__SearchRequest(soap*, int num) allocate array
/// - _ns1__SearchRequest* soap_new_req__ns1__SearchRequest(soap*, ...) allocate, set required members
/// - _ns1__SearchRequest* soap_new_set__ns1__SearchRequest(soap*, ...) allocate, set all public members
/// - _ns1__SearchRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SearchRequest(soap*, _ns1__SearchRequest*) deserialize from a stream
/// - int soap_write__ns1__SearchRequest(soap*, _ns1__SearchRequest*) serialize to a stream
/// - _ns1__SearchRequest* _ns1__SearchRequest::soap_dup(soap*) returns deep copy of _ns1__SearchRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SearchRequest::soap_del() deep deletes _ns1__SearchRequest data members, use only after _ns1__SearchRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SearchRequest
{ public:
/// <PRE><BLOCKQUOTE>
///   Filter for search queries.
///   A SOAP fault will be thrown if limit exceeds 200. Default value for limit is 40.
///   Anything higher than 40 may result in poor system performance.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Filter.
    _ns1__Filter*                        Filter                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SearchResponse
/// @brief "http://portal.vidyo.com/user/v1_1":SearchResponse is a complexType.
///
/// class _ns1__SearchResponse operations:
/// - _ns1__SearchResponse* soap_new__ns1__SearchResponse(soap*) allocate
/// - _ns1__SearchResponse* soap_new__ns1__SearchResponse(soap*, int num) allocate array
/// - _ns1__SearchResponse* soap_new_req__ns1__SearchResponse(soap*, ...) allocate, set required members
/// - _ns1__SearchResponse* soap_new_set__ns1__SearchResponse(soap*, ...) allocate, set all public members
/// - _ns1__SearchResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SearchResponse(soap*, _ns1__SearchResponse*) deserialize from a stream
/// - int soap_write__ns1__SearchResponse(soap*, _ns1__SearchResponse*) serialize to a stream
/// - _ns1__SearchResponse* _ns1__SearchResponse::soap_dup(soap*) returns deep copy of _ns1__SearchResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SearchResponse::soap_del() deep deletes _ns1__SearchResponse data members, use only after _ns1__SearchResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SearchResponse
{ public:
/// Element "total" of XSD type xs:int.
    int                                  total                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Size of the dynamic array of _ns1__Entity* is 0..unbounded.
   $int                                  __sizeEntity                   0;
/// Pointer to array _ns1__Entity* of size 0..unbounded.
    _ns1__Entity*                       *Entity                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SearchByEntityIDRequest
/// <PRE><BLOCKQUOTE>
///   Search for all entities (mainly Rooms) by Member's EntityID
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":SearchByEntityIDRequest is a complexType.
///
/// class _ns1__SearchByEntityIDRequest operations:
/// - _ns1__SearchByEntityIDRequest* soap_new__ns1__SearchByEntityIDRequest(soap*) allocate
/// - _ns1__SearchByEntityIDRequest* soap_new__ns1__SearchByEntityIDRequest(soap*, int num) allocate array
/// - _ns1__SearchByEntityIDRequest* soap_new_req__ns1__SearchByEntityIDRequest(soap*, ...) allocate, set required members
/// - _ns1__SearchByEntityIDRequest* soap_new_set__ns1__SearchByEntityIDRequest(soap*, ...) allocate, set all public members
/// - _ns1__SearchByEntityIDRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SearchByEntityIDRequest(soap*, _ns1__SearchByEntityIDRequest*) deserialize from a stream
/// - int soap_write__ns1__SearchByEntityIDRequest(soap*, _ns1__SearchByEntityIDRequest*) serialize to a stream
/// - _ns1__SearchByEntityIDRequest* _ns1__SearchByEntityIDRequest::soap_dup(soap*) returns deep copy of _ns1__SearchByEntityIDRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SearchByEntityIDRequest::soap_del() deep deletes _ns1__SearchByEntityIDRequest data members, use only after _ns1__SearchByEntityIDRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SearchByEntityIDRequest
{ public:
/// Element "entityID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        entityID                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Filter for search queries.
///   A SOAP fault will be thrown if limit exceeds 200. Default value for limit is 40.
///   Anything higher than 40 may result in poor system performance.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Filter.
    _ns1__Filter*                        Filter                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SearchByEntityIDResponse
/// @brief "http://portal.vidyo.com/user/v1_1":SearchByEntityIDResponse is a complexType.
///
/// class _ns1__SearchByEntityIDResponse operations:
/// - _ns1__SearchByEntityIDResponse* soap_new__ns1__SearchByEntityIDResponse(soap*) allocate
/// - _ns1__SearchByEntityIDResponse* soap_new__ns1__SearchByEntityIDResponse(soap*, int num) allocate array
/// - _ns1__SearchByEntityIDResponse* soap_new_req__ns1__SearchByEntityIDResponse(soap*, ...) allocate, set required members
/// - _ns1__SearchByEntityIDResponse* soap_new_set__ns1__SearchByEntityIDResponse(soap*, ...) allocate, set all public members
/// - _ns1__SearchByEntityIDResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SearchByEntityIDResponse(soap*, _ns1__SearchByEntityIDResponse*) deserialize from a stream
/// - int soap_write__ns1__SearchByEntityIDResponse(soap*, _ns1__SearchByEntityIDResponse*) serialize to a stream
/// - _ns1__SearchByEntityIDResponse* _ns1__SearchByEntityIDResponse::soap_dup(soap*) returns deep copy of _ns1__SearchByEntityIDResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SearchByEntityIDResponse::soap_del() deep deletes _ns1__SearchByEntityIDResponse data members, use only after _ns1__SearchByEntityIDResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SearchByEntityIDResponse
{ public:
/// Element "total" of XSD type xs:int.
    int                                  total                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Size of the dynamic array of _ns1__Entity* is 0..unbounded.
   $int                                  __sizeEntity                   0;
/// Pointer to array _ns1__Entity* of size 0..unbounded.
    _ns1__Entity*                       *Entity                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SearchByEmailRequest
/// <PRE><BLOCKQUOTE>
///   Search for all entities (mainly Members) by Email Address
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":SearchByEmailRequest is a complexType.
///
/// class _ns1__SearchByEmailRequest operations:
/// - _ns1__SearchByEmailRequest* soap_new__ns1__SearchByEmailRequest(soap*) allocate
/// - _ns1__SearchByEmailRequest* soap_new__ns1__SearchByEmailRequest(soap*, int num) allocate array
/// - _ns1__SearchByEmailRequest* soap_new_req__ns1__SearchByEmailRequest(soap*, ...) allocate, set required members
/// - _ns1__SearchByEmailRequest* soap_new_set__ns1__SearchByEmailRequest(soap*, ...) allocate, set all public members
/// - _ns1__SearchByEmailRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SearchByEmailRequest(soap*, _ns1__SearchByEmailRequest*) deserialize from a stream
/// - int soap_write__ns1__SearchByEmailRequest(soap*, _ns1__SearchByEmailRequest*) serialize to a stream
/// - _ns1__SearchByEmailRequest* _ns1__SearchByEmailRequest::soap_dup(soap*) returns deep copy of _ns1__SearchByEmailRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SearchByEmailRequest::soap_del() deep deletes _ns1__SearchByEmailRequest data members, use only after _ns1__SearchByEmailRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SearchByEmailRequest
{ public:
/// Element "emailAddress" of XSD type xs:string.
    char*                                emailAddress                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Filter for search queries.
///   A SOAP fault will be thrown if limit exceeds 200. Default value for limit is 40.
///   Anything higher than 40 may result in poor system performance.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Filter.
    _ns1__Filter*                        Filter                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SearchByEmailResponse
/// @brief "http://portal.vidyo.com/user/v1_1":SearchByEmailResponse is a complexType.
///
/// class _ns1__SearchByEmailResponse operations:
/// - _ns1__SearchByEmailResponse* soap_new__ns1__SearchByEmailResponse(soap*) allocate
/// - _ns1__SearchByEmailResponse* soap_new__ns1__SearchByEmailResponse(soap*, int num) allocate array
/// - _ns1__SearchByEmailResponse* soap_new_req__ns1__SearchByEmailResponse(soap*, ...) allocate, set required members
/// - _ns1__SearchByEmailResponse* soap_new_set__ns1__SearchByEmailResponse(soap*, ...) allocate, set all public members
/// - _ns1__SearchByEmailResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SearchByEmailResponse(soap*, _ns1__SearchByEmailResponse*) deserialize from a stream
/// - int soap_write__ns1__SearchByEmailResponse(soap*, _ns1__SearchByEmailResponse*) serialize to a stream
/// - _ns1__SearchByEmailResponse* _ns1__SearchByEmailResponse::soap_dup(soap*) returns deep copy of _ns1__SearchByEmailResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SearchByEmailResponse::soap_del() deep deletes _ns1__SearchByEmailResponse data members, use only after _ns1__SearchByEmailResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SearchByEmailResponse
{ public:
/// Element "total" of XSD type xs:int.
    int                                  total                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Size of the dynamic array of _ns1__Entity* is 0..unbounded.
   $int                                  __sizeEntity                   0;
/// Pointer to array _ns1__Entity* of size 0..unbounded.
    _ns1__Entity*                       *Entity                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetEntityByEntityIDRequest
/// <PRE><BLOCKQUOTE>
///   Get entities by Member's EntityID
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetEntityByEntityIDRequest is a complexType.
///
/// class _ns1__GetEntityByEntityIDRequest operations:
/// - _ns1__GetEntityByEntityIDRequest* soap_new__ns1__GetEntityByEntityIDRequest(soap*) allocate
/// - _ns1__GetEntityByEntityIDRequest* soap_new__ns1__GetEntityByEntityIDRequest(soap*, int num) allocate array
/// - _ns1__GetEntityByEntityIDRequest* soap_new_req__ns1__GetEntityByEntityIDRequest(soap*, ...) allocate, set required members
/// - _ns1__GetEntityByEntityIDRequest* soap_new_set__ns1__GetEntityByEntityIDRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetEntityByEntityIDRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetEntityByEntityIDRequest(soap*, _ns1__GetEntityByEntityIDRequest*) deserialize from a stream
/// - int soap_write__ns1__GetEntityByEntityIDRequest(soap*, _ns1__GetEntityByEntityIDRequest*) serialize to a stream
/// - _ns1__GetEntityByEntityIDRequest* _ns1__GetEntityByEntityIDRequest::soap_dup(soap*) returns deep copy of _ns1__GetEntityByEntityIDRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetEntityByEntityIDRequest::soap_del() deep deletes _ns1__GetEntityByEntityIDRequest data members, use only after _ns1__GetEntityByEntityIDRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetEntityByEntityIDRequest
{ public:
/// Size of array of ns1__EntityID is 1..200.
   $int                                  __sizeentityID                 1:200;
/// Pointer to array ns1__EntityID of size 1..200.
    ns1__EntityID                       *entityID                       1:200;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetEntityByEntityIDResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetEntityByEntityIDResponse is a complexType.
///
/// class _ns1__GetEntityByEntityIDResponse operations:
/// - _ns1__GetEntityByEntityIDResponse* soap_new__ns1__GetEntityByEntityIDResponse(soap*) allocate
/// - _ns1__GetEntityByEntityIDResponse* soap_new__ns1__GetEntityByEntityIDResponse(soap*, int num) allocate array
/// - _ns1__GetEntityByEntityIDResponse* soap_new_req__ns1__GetEntityByEntityIDResponse(soap*, ...) allocate, set required members
/// - _ns1__GetEntityByEntityIDResponse* soap_new_set__ns1__GetEntityByEntityIDResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetEntityByEntityIDResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetEntityByEntityIDResponse(soap*, _ns1__GetEntityByEntityIDResponse*) deserialize from a stream
/// - int soap_write__ns1__GetEntityByEntityIDResponse(soap*, _ns1__GetEntityByEntityIDResponse*) serialize to a stream
/// - _ns1__GetEntityByEntityIDResponse* _ns1__GetEntityByEntityIDResponse::soap_dup(soap*) returns deep copy of _ns1__GetEntityByEntityIDResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetEntityByEntityIDResponse::soap_del() deep deletes _ns1__GetEntityByEntityIDResponse data members, use only after _ns1__GetEntityByEntityIDResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetEntityByEntityIDResponse
{ public:
/// Element "total" of XSD type xs:int.
    int                                  total                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Size of the dynamic array of _ns1__Entity* is 0..unbounded.
   $int                                  __sizeEntity                   0;
/// Pointer to array _ns1__Entity* of size 0..unbounded.
    _ns1__Entity*                       *Entity                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":InviteToConferenceRequest
/// <PRE><BLOCKQUOTE>
///   Invites a Member to a room. This request can only be issued by the Member who can control this room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":InviteToConferenceRequest is a complexType.
///
/// class _ns1__InviteToConferenceRequest operations:
/// - _ns1__InviteToConferenceRequest* soap_new__ns1__InviteToConferenceRequest(soap*) allocate
/// - _ns1__InviteToConferenceRequest* soap_new__ns1__InviteToConferenceRequest(soap*, int num) allocate array
/// - _ns1__InviteToConferenceRequest* soap_new_req__ns1__InviteToConferenceRequest(soap*, ...) allocate, set required members
/// - _ns1__InviteToConferenceRequest* soap_new_set__ns1__InviteToConferenceRequest(soap*, ...) allocate, set all public members
/// - _ns1__InviteToConferenceRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__InviteToConferenceRequest(soap*, _ns1__InviteToConferenceRequest*) deserialize from a stream
/// - int soap_write__ns1__InviteToConferenceRequest(soap*, _ns1__InviteToConferenceRequest*) serialize to a stream
/// - _ns1__InviteToConferenceRequest* _ns1__InviteToConferenceRequest::soap_dup(soap*) returns deep copy of _ns1__InviteToConferenceRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InviteToConferenceRequest::soap_del() deep deletes _ns1__InviteToConferenceRequest data members, use only after _ns1__InviteToConferenceRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InviteToConferenceRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_InviteToConferenceRequest;	///< Union _ns1__union_InviteToConferenceRequest selector: set to SOAP_UNION__ns1__union_InviteToConferenceRequest_<fieldname>
    union _ns1__union_InviteToConferenceRequest
    {
/// Element "entityID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        entityID                       1;	///< Required element.
/// Element "invite" of XSD type xs:string.
    char*                                invite                         1;	///< Required element.
    }                                    union_InviteToConferenceRequest;
//  END OF CHOICE
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":InviteToConferenceResponse
/// @brief "http://portal.vidyo.com/user/v1_1":InviteToConferenceResponse is a complexType.
///
/// class _ns1__InviteToConferenceResponse operations:
/// - _ns1__InviteToConferenceResponse* soap_new__ns1__InviteToConferenceResponse(soap*) allocate
/// - _ns1__InviteToConferenceResponse* soap_new__ns1__InviteToConferenceResponse(soap*, int num) allocate array
/// - _ns1__InviteToConferenceResponse* soap_new_req__ns1__InviteToConferenceResponse(soap*, ...) allocate, set required members
/// - _ns1__InviteToConferenceResponse* soap_new_set__ns1__InviteToConferenceResponse(soap*, ...) allocate, set all public members
/// - _ns1__InviteToConferenceResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__InviteToConferenceResponse(soap*, _ns1__InviteToConferenceResponse*) deserialize from a stream
/// - int soap_write__ns1__InviteToConferenceResponse(soap*, _ns1__InviteToConferenceResponse*) serialize to a stream
/// - _ns1__InviteToConferenceResponse* _ns1__InviteToConferenceResponse::soap_dup(soap*) returns deep copy of _ns1__InviteToConferenceResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InviteToConferenceResponse::soap_del() deep deletes _ns1__InviteToConferenceResponse data members, use only after _ns1__InviteToConferenceResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InviteToConferenceResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CancelOutboundCallRequest
/// <PRE><BLOCKQUOTE>
///   A moderator has invited a user to join the conference but immediately after making the call, the moderator decides to cancel the invitation.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":CancelOutboundCallRequest is a complexType.
///
/// class _ns1__CancelOutboundCallRequest operations:
/// - _ns1__CancelOutboundCallRequest* soap_new__ns1__CancelOutboundCallRequest(soap*) allocate
/// - _ns1__CancelOutboundCallRequest* soap_new__ns1__CancelOutboundCallRequest(soap*, int num) allocate array
/// - _ns1__CancelOutboundCallRequest* soap_new_req__ns1__CancelOutboundCallRequest(soap*, ...) allocate, set required members
/// - _ns1__CancelOutboundCallRequest* soap_new_set__ns1__CancelOutboundCallRequest(soap*, ...) allocate, set all public members
/// - _ns1__CancelOutboundCallRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CancelOutboundCallRequest(soap*, _ns1__CancelOutboundCallRequest*) deserialize from a stream
/// - int soap_write__ns1__CancelOutboundCallRequest(soap*, _ns1__CancelOutboundCallRequest*) serialize to a stream
/// - _ns1__CancelOutboundCallRequest* _ns1__CancelOutboundCallRequest::soap_dup(soap*) returns deep copy of _ns1__CancelOutboundCallRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CancelOutboundCallRequest::soap_del() deep deletes _ns1__CancelOutboundCallRequest data members, use only after _ns1__CancelOutboundCallRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CancelOutboundCallRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "entityID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        entityID                       1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CancelOutboundCallResponse
/// @brief "http://portal.vidyo.com/user/v1_1":CancelOutboundCallResponse is a complexType.
///
/// class _ns1__CancelOutboundCallResponse operations:
/// - _ns1__CancelOutboundCallResponse* soap_new__ns1__CancelOutboundCallResponse(soap*) allocate
/// - _ns1__CancelOutboundCallResponse* soap_new__ns1__CancelOutboundCallResponse(soap*, int num) allocate array
/// - _ns1__CancelOutboundCallResponse* soap_new_req__ns1__CancelOutboundCallResponse(soap*, ...) allocate, set required members
/// - _ns1__CancelOutboundCallResponse* soap_new_set__ns1__CancelOutboundCallResponse(soap*, ...) allocate, set all public members
/// - _ns1__CancelOutboundCallResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CancelOutboundCallResponse(soap*, _ns1__CancelOutboundCallResponse*) deserialize from a stream
/// - int soap_write__ns1__CancelOutboundCallResponse(soap*, _ns1__CancelOutboundCallResponse*) serialize to a stream
/// - _ns1__CancelOutboundCallResponse* _ns1__CancelOutboundCallResponse::soap_dup(soap*) returns deep copy of _ns1__CancelOutboundCallResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CancelOutboundCallResponse::soap_del() deep deletes _ns1__CancelOutboundCallResponse data members, use only after _ns1__CancelOutboundCallResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CancelOutboundCallResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":JoinConferenceRequest
/// <PRE><BLOCKQUOTE>
///   Request by a member to join a meeting room identified by EntityId.
///   To join the personal room belonging to a member, the EntityID must the set to the Member's EntityID.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":JoinConferenceRequest is a complexType.
///
/// class _ns1__JoinConferenceRequest operations:
/// - _ns1__JoinConferenceRequest* soap_new__ns1__JoinConferenceRequest(soap*) allocate
/// - _ns1__JoinConferenceRequest* soap_new__ns1__JoinConferenceRequest(soap*, int num) allocate array
/// - _ns1__JoinConferenceRequest* soap_new_req__ns1__JoinConferenceRequest(soap*, ...) allocate, set required members
/// - _ns1__JoinConferenceRequest* soap_new_set__ns1__JoinConferenceRequest(soap*, ...) allocate, set all public members
/// - _ns1__JoinConferenceRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__JoinConferenceRequest(soap*, _ns1__JoinConferenceRequest*) deserialize from a stream
/// - int soap_write__ns1__JoinConferenceRequest(soap*, _ns1__JoinConferenceRequest*) serialize to a stream
/// - _ns1__JoinConferenceRequest* _ns1__JoinConferenceRequest::soap_dup(soap*) returns deep copy of _ns1__JoinConferenceRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__JoinConferenceRequest::soap_del() deep deletes _ns1__JoinConferenceRequest data members, use only after _ns1__JoinConferenceRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__JoinConferenceRequest
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_JoinConferenceRequest ;	///< Union _ns1__union_JoinConferenceRequest selector: set to SOAP_UNION__ns1__union_JoinConferenceRequest_<fieldname>
    union _ns1__union_JoinConferenceRequest
    {
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "extension" of XSD type xs:string.
    char*                                extension                      1;	///< Required element.
    }                                    union_JoinConferenceRequest   ;
//  END OF CHOICE
/// Element "PIN" of XSD type xs:string.
    char*                                PIN                            0;	///< Optional element.
/// Element "referenceNumber" of XSD type xs:string.
    char*                                referenceNumber                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":JoinConferenceResponse
/// @brief "http://portal.vidyo.com/user/v1_1":JoinConferenceResponse is a complexType.
///
/// class _ns1__JoinConferenceResponse operations:
/// - _ns1__JoinConferenceResponse* soap_new__ns1__JoinConferenceResponse(soap*) allocate
/// - _ns1__JoinConferenceResponse* soap_new__ns1__JoinConferenceResponse(soap*, int num) allocate array
/// - _ns1__JoinConferenceResponse* soap_new_req__ns1__JoinConferenceResponse(soap*, ...) allocate, set required members
/// - _ns1__JoinConferenceResponse* soap_new_set__ns1__JoinConferenceResponse(soap*, ...) allocate, set all public members
/// - _ns1__JoinConferenceResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__JoinConferenceResponse(soap*, _ns1__JoinConferenceResponse*) deserialize from a stream
/// - int soap_write__ns1__JoinConferenceResponse(soap*, _ns1__JoinConferenceResponse*) serialize to a stream
/// - _ns1__JoinConferenceResponse* _ns1__JoinConferenceResponse::soap_dup(soap*) returns deep copy of _ns1__JoinConferenceResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__JoinConferenceResponse::soap_del() deep deletes _ns1__JoinConferenceResponse data members, use only after _ns1__JoinConferenceResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__JoinConferenceResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":JoinIPCConferenceRequest
/// <PRE><BLOCKQUOTE>
///   Request by a member to join a meeting room on different portal - IPC (Inter-Portal Communication).
///   Three parameters required for IPC:
///   - 'local-part' - adress of room (username for private room, roomname for public room or extension);
///   - 'domain' - FQDN or IP address of remote VidyoPortal;
///   - 'PIN' - (optional) required if remote room is pinned;
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":JoinIPCConferenceRequest is a complexType.
///
/// class _ns1__JoinIPCConferenceRequest operations:
/// - _ns1__JoinIPCConferenceRequest* soap_new__ns1__JoinIPCConferenceRequest(soap*) allocate
/// - _ns1__JoinIPCConferenceRequest* soap_new__ns1__JoinIPCConferenceRequest(soap*, int num) allocate array
/// - _ns1__JoinIPCConferenceRequest* soap_new_req__ns1__JoinIPCConferenceRequest(soap*, ...) allocate, set required members
/// - _ns1__JoinIPCConferenceRequest* soap_new_set__ns1__JoinIPCConferenceRequest(soap*, ...) allocate, set all public members
/// - _ns1__JoinIPCConferenceRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__JoinIPCConferenceRequest(soap*, _ns1__JoinIPCConferenceRequest*) deserialize from a stream
/// - int soap_write__ns1__JoinIPCConferenceRequest(soap*, _ns1__JoinIPCConferenceRequest*) serialize to a stream
/// - _ns1__JoinIPCConferenceRequest* _ns1__JoinIPCConferenceRequest::soap_dup(soap*) returns deep copy of _ns1__JoinIPCConferenceRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__JoinIPCConferenceRequest::soap_del() deep deletes _ns1__JoinIPCConferenceRequest data members, use only after _ns1__JoinIPCConferenceRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__JoinIPCConferenceRequest
{ public:
/// Element "local-part" of XSD type xs:string.
    char*                                local_part                     1;	///< Required element.
/// Element "domain" of XSD type xs:string.
    char*                                domain                         1;	///< Required element.
/// Element "PIN" of XSD type xs:string.
    char*                                PIN                            0;	///< Optional element.
/// Element "referenceNumber" of XSD type xs:string.
    char*                                referenceNumber                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":JoinIPCConferenceResponse
/// @brief "http://portal.vidyo.com/user/v1_1":JoinIPCConferenceResponse is a complexType.
///
/// class _ns1__JoinIPCConferenceResponse operations:
/// - _ns1__JoinIPCConferenceResponse* soap_new__ns1__JoinIPCConferenceResponse(soap*) allocate
/// - _ns1__JoinIPCConferenceResponse* soap_new__ns1__JoinIPCConferenceResponse(soap*, int num) allocate array
/// - _ns1__JoinIPCConferenceResponse* soap_new_req__ns1__JoinIPCConferenceResponse(soap*, ...) allocate, set required members
/// - _ns1__JoinIPCConferenceResponse* soap_new_set__ns1__JoinIPCConferenceResponse(soap*, ...) allocate, set all public members
/// - _ns1__JoinIPCConferenceResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__JoinIPCConferenceResponse(soap*, _ns1__JoinIPCConferenceResponse*) deserialize from a stream
/// - int soap_write__ns1__JoinIPCConferenceResponse(soap*, _ns1__JoinIPCConferenceResponse*) serialize to a stream
/// - _ns1__JoinIPCConferenceResponse* _ns1__JoinIPCConferenceResponse::soap_dup(soap*) returns deep copy of _ns1__JoinIPCConferenceResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__JoinIPCConferenceResponse::soap_del() deep deletes _ns1__JoinIPCConferenceResponse data members, use only after _ns1__JoinIPCConferenceResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__JoinIPCConferenceResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DirectCallRequest
/// <PRE><BLOCKQUOTE>
///   Request by a member to place a direct call to another member as idenfied by EntityId.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":DirectCallRequest is a complexType.
///
/// class _ns1__DirectCallRequest operations:
/// - _ns1__DirectCallRequest* soap_new__ns1__DirectCallRequest(soap*) allocate
/// - _ns1__DirectCallRequest* soap_new__ns1__DirectCallRequest(soap*, int num) allocate array
/// - _ns1__DirectCallRequest* soap_new_req__ns1__DirectCallRequest(soap*, ...) allocate, set required members
/// - _ns1__DirectCallRequest* soap_new_set__ns1__DirectCallRequest(soap*, ...) allocate, set all public members
/// - _ns1__DirectCallRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DirectCallRequest(soap*, _ns1__DirectCallRequest*) deserialize from a stream
/// - int soap_write__ns1__DirectCallRequest(soap*, _ns1__DirectCallRequest*) serialize to a stream
/// - _ns1__DirectCallRequest* _ns1__DirectCallRequest::soap_dup(soap*) returns deep copy of _ns1__DirectCallRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DirectCallRequest::soap_del() deep deletes _ns1__DirectCallRequest data members, use only after _ns1__DirectCallRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DirectCallRequest
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_DirectCallRequest     ;	///< Union _ns1__union_DirectCallRequest selector: set to SOAP_UNION__ns1__union_DirectCallRequest_<fieldname>
    union _ns1__union_DirectCallRequest
    {
/// Element "entityID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        entityID                       1;	///< Required element.
/// Element "invite" of XSD type xs:string.
    char*                                invite                         1;	///< Required element.
    }                                    union_DirectCallRequest       ;
//  END OF CHOICE
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DirectCallResponse
/// @brief "http://portal.vidyo.com/user/v1_1":DirectCallResponse is a complexType.
///
/// class _ns1__DirectCallResponse operations:
/// - _ns1__DirectCallResponse* soap_new__ns1__DirectCallResponse(soap*) allocate
/// - _ns1__DirectCallResponse* soap_new__ns1__DirectCallResponse(soap*, int num) allocate array
/// - _ns1__DirectCallResponse* soap_new_req__ns1__DirectCallResponse(soap*, ...) allocate, set required members
/// - _ns1__DirectCallResponse* soap_new_set__ns1__DirectCallResponse(soap*, ...) allocate, set all public members
/// - _ns1__DirectCallResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DirectCallResponse(soap*, _ns1__DirectCallResponse*) deserialize from a stream
/// - int soap_write__ns1__DirectCallResponse(soap*, _ns1__DirectCallResponse*) serialize to a stream
/// - _ns1__DirectCallResponse* _ns1__DirectCallResponse::soap_dup(soap*) returns deep copy of _ns1__DirectCallResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DirectCallResponse::soap_del() deep deletes _ns1__DirectCallResponse data members, use only after _ns1__DirectCallResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DirectCallResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetParticipantsRequest
/// <PRE><BLOCKQUOTE>
///   Request to list the participants in a meeting as idenfied by EntityId.
///   To list the participants in a personal room belonging to a Member, the EntityID must be set to the Member.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetParticipantsRequest is a complexType.
///
/// class _ns1__GetParticipantsRequest operations:
/// - _ns1__GetParticipantsRequest* soap_new__ns1__GetParticipantsRequest(soap*) allocate
/// - _ns1__GetParticipantsRequest* soap_new__ns1__GetParticipantsRequest(soap*, int num) allocate array
/// - _ns1__GetParticipantsRequest* soap_new_req__ns1__GetParticipantsRequest(soap*, ...) allocate, set required members
/// - _ns1__GetParticipantsRequest* soap_new_set__ns1__GetParticipantsRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetParticipantsRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetParticipantsRequest(soap*, _ns1__GetParticipantsRequest*) deserialize from a stream
/// - int soap_write__ns1__GetParticipantsRequest(soap*, _ns1__GetParticipantsRequest*) serialize to a stream
/// - _ns1__GetParticipantsRequest* _ns1__GetParticipantsRequest::soap_dup(soap*) returns deep copy of _ns1__GetParticipantsRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetParticipantsRequest::soap_del() deep deletes _ns1__GetParticipantsRequest data members, use only after _ns1__GetParticipantsRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetParticipantsRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Filter for search queries.
///   A SOAP fault will be thrown if limit exceeds 200. Default value for limit is 40.
///   Anything higher than 40 may result in poor system performance.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Filter.
    _ns1__Filter*                        Filter                         0;	///< Optional element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetParticipantsResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetParticipantsResponse is a complexType.
///
/// class _ns1__GetParticipantsResponse operations:
/// - _ns1__GetParticipantsResponse* soap_new__ns1__GetParticipantsResponse(soap*) allocate
/// - _ns1__GetParticipantsResponse* soap_new__ns1__GetParticipantsResponse(soap*, int num) allocate array
/// - _ns1__GetParticipantsResponse* soap_new_req__ns1__GetParticipantsResponse(soap*, ...) allocate, set required members
/// - _ns1__GetParticipantsResponse* soap_new_set__ns1__GetParticipantsResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetParticipantsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetParticipantsResponse(soap*, _ns1__GetParticipantsResponse*) deserialize from a stream
/// - int soap_write__ns1__GetParticipantsResponse(soap*, _ns1__GetParticipantsResponse*) serialize to a stream
/// - _ns1__GetParticipantsResponse* _ns1__GetParticipantsResponse::soap_dup(soap*) returns deep copy of _ns1__GetParticipantsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetParticipantsResponse::soap_del() deep deletes _ns1__GetParticipantsResponse data members, use only after _ns1__GetParticipantsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetParticipantsResponse
{ public:
/// Element "total" of XSD type xs:int.
    int                                  total                          1;	///< Required element.
/// Element "recorderID" of XSD type xs:int.
    int*                                 recorderID                     0;	///< Optional element.
/// Element "recorderName" of XSD type xs:string.
    char*                                recorderName                   0;	///< Optional element.
/// Element "paused" of XSD type xs:boolean.
    bool*                                paused                         0;	///< Optional element.
/// Element "webcast" of XSD type xs:boolean.
    bool*                                webcast                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Size of the dynamic array of _ns1__Entity* is 0..unbounded.
   $int                                  __sizeEntity                   0;
/// Pointer to array _ns1__Entity* of size 0..unbounded.
    _ns1__Entity*                       *Entity                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetLectureModeParticipantsRequest
/// <PRE><BLOCKQUOTE>
///   Request to list the participants in a meeting as identified by EntityId.
///   To list the participants in a personal room belonging to a Member, the EntityID must be set to the Member.
///   Similar to GetParticipants but supports Lecture Mode.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetLectureModeParticipantsRequest is a complexType.
///
/// class _ns1__GetLectureModeParticipantsRequest operations:
/// - _ns1__GetLectureModeParticipantsRequest* soap_new__ns1__GetLectureModeParticipantsRequest(soap*) allocate
/// - _ns1__GetLectureModeParticipantsRequest* soap_new__ns1__GetLectureModeParticipantsRequest(soap*, int num) allocate array
/// - _ns1__GetLectureModeParticipantsRequest* soap_new_req__ns1__GetLectureModeParticipantsRequest(soap*, ...) allocate, set required members
/// - _ns1__GetLectureModeParticipantsRequest* soap_new_set__ns1__GetLectureModeParticipantsRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetLectureModeParticipantsRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetLectureModeParticipantsRequest(soap*, _ns1__GetLectureModeParticipantsRequest*) deserialize from a stream
/// - int soap_write__ns1__GetLectureModeParticipantsRequest(soap*, _ns1__GetLectureModeParticipantsRequest*) serialize to a stream
/// - _ns1__GetLectureModeParticipantsRequest* _ns1__GetLectureModeParticipantsRequest::soap_dup(soap*) returns deep copy of _ns1__GetLectureModeParticipantsRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetLectureModeParticipantsRequest::soap_del() deep deletes _ns1__GetLectureModeParticipantsRequest data members, use only after _ns1__GetLectureModeParticipantsRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetLectureModeParticipantsRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Filter for search queries.
///   A SOAP fault will be thrown if limit exceeds 200. Default value for limit is 40.
///   Anything higher than 40 may result in poor system performance.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Filter.
    _ns1__Filter*                        Filter                         0;	///< Optional element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetLectureModeParticipantsResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetLectureModeParticipantsResponse is a complexType.
///
/// class _ns1__GetLectureModeParticipantsResponse operations:
/// - _ns1__GetLectureModeParticipantsResponse* soap_new__ns1__GetLectureModeParticipantsResponse(soap*) allocate
/// - _ns1__GetLectureModeParticipantsResponse* soap_new__ns1__GetLectureModeParticipantsResponse(soap*, int num) allocate array
/// - _ns1__GetLectureModeParticipantsResponse* soap_new_req__ns1__GetLectureModeParticipantsResponse(soap*, ...) allocate, set required members
/// - _ns1__GetLectureModeParticipantsResponse* soap_new_set__ns1__GetLectureModeParticipantsResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetLectureModeParticipantsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetLectureModeParticipantsResponse(soap*, _ns1__GetLectureModeParticipantsResponse*) deserialize from a stream
/// - int soap_write__ns1__GetLectureModeParticipantsResponse(soap*, _ns1__GetLectureModeParticipantsResponse*) serialize to a stream
/// - _ns1__GetLectureModeParticipantsResponse* _ns1__GetLectureModeParticipantsResponse::soap_dup(soap*) returns deep copy of _ns1__GetLectureModeParticipantsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetLectureModeParticipantsResponse::soap_del() deep deletes _ns1__GetLectureModeParticipantsResponse data members, use only after _ns1__GetLectureModeParticipantsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetLectureModeParticipantsResponse
{ public:
/// Element "total" of XSD type xs:int.
    int                                  total                          1;	///< Required element.
/// Element "recorderID" of XSD type xs:int.
    int*                                 recorderID                     0;	///< Optional element.
/// Element "recorderName" of XSD type xs:string.
    char*                                recorderName                   0;	///< Optional element.
/// Element "paused" of XSD type xs:boolean.
    bool*                                paused                         0;	///< Optional element.
/// Element "webcast" of XSD type xs:boolean.
    bool*                                webcast                        0;	///< Optional element.
/// Element "lectureMode" of XSD type xs:boolean.
    bool*                                lectureMode                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of getLectureModeParticipants
/// </BLOCKQUOTE></PRE>
/// Size of the dynamic array of _ns1__LectureModeParticipant* is 0..unbounded.
   $int                                  __sizeLectureModeParticipant   0;
/// Pointer to array _ns1__LectureModeParticipant* of size 0..unbounded.
    _ns1__LectureModeParticipant*       *LectureModeParticipant         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LeaveConferenceRequest
/// <PRE><BLOCKQUOTE>
///   Request to remove the participantID (Endpoint) from the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":LeaveConferenceRequest is a complexType.
///
/// class _ns1__LeaveConferenceRequest operations:
/// - _ns1__LeaveConferenceRequest* soap_new__ns1__LeaveConferenceRequest(soap*) allocate
/// - _ns1__LeaveConferenceRequest* soap_new__ns1__LeaveConferenceRequest(soap*, int num) allocate array
/// - _ns1__LeaveConferenceRequest* soap_new_req__ns1__LeaveConferenceRequest(soap*, ...) allocate, set required members
/// - _ns1__LeaveConferenceRequest* soap_new_set__ns1__LeaveConferenceRequest(soap*, ...) allocate, set all public members
/// - _ns1__LeaveConferenceRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LeaveConferenceRequest(soap*, _ns1__LeaveConferenceRequest*) deserialize from a stream
/// - int soap_write__ns1__LeaveConferenceRequest(soap*, _ns1__LeaveConferenceRequest*) serialize to a stream
/// - _ns1__LeaveConferenceRequest* _ns1__LeaveConferenceRequest::soap_dup(soap*) returns deep copy of _ns1__LeaveConferenceRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LeaveConferenceRequest::soap_del() deep deletes _ns1__LeaveConferenceRequest data members, use only after _ns1__LeaveConferenceRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LeaveConferenceRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LeaveConferenceResponse
/// @brief "http://portal.vidyo.com/user/v1_1":LeaveConferenceResponse is a complexType.
///
/// class _ns1__LeaveConferenceResponse operations:
/// - _ns1__LeaveConferenceResponse* soap_new__ns1__LeaveConferenceResponse(soap*) allocate
/// - _ns1__LeaveConferenceResponse* soap_new__ns1__LeaveConferenceResponse(soap*, int num) allocate array
/// - _ns1__LeaveConferenceResponse* soap_new_req__ns1__LeaveConferenceResponse(soap*, ...) allocate, set required members
/// - _ns1__LeaveConferenceResponse* soap_new_set__ns1__LeaveConferenceResponse(soap*, ...) allocate, set all public members
/// - _ns1__LeaveConferenceResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LeaveConferenceResponse(soap*, _ns1__LeaveConferenceResponse*) deserialize from a stream
/// - int soap_write__ns1__LeaveConferenceResponse(soap*, _ns1__LeaveConferenceResponse*) serialize to a stream
/// - _ns1__LeaveConferenceResponse* _ns1__LeaveConferenceResponse::soap_dup(soap*) returns deep copy of _ns1__LeaveConferenceResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LeaveConferenceResponse::soap_del() deep deletes _ns1__LeaveConferenceResponse data members, use only after _ns1__LeaveConferenceResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LeaveConferenceResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":MuteAudioRequest
/// <PRE><BLOCKQUOTE>
///   Request to mute the audio for a given participantID (Endpoint) in the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":MuteAudioRequest is a complexType.
///
/// class _ns1__MuteAudioRequest operations:
/// - _ns1__MuteAudioRequest* soap_new__ns1__MuteAudioRequest(soap*) allocate
/// - _ns1__MuteAudioRequest* soap_new__ns1__MuteAudioRequest(soap*, int num) allocate array
/// - _ns1__MuteAudioRequest* soap_new_req__ns1__MuteAudioRequest(soap*, ...) allocate, set required members
/// - _ns1__MuteAudioRequest* soap_new_set__ns1__MuteAudioRequest(soap*, ...) allocate, set all public members
/// - _ns1__MuteAudioRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__MuteAudioRequest(soap*, _ns1__MuteAudioRequest*) deserialize from a stream
/// - int soap_write__ns1__MuteAudioRequest(soap*, _ns1__MuteAudioRequest*) serialize to a stream
/// - _ns1__MuteAudioRequest* _ns1__MuteAudioRequest::soap_dup(soap*) returns deep copy of _ns1__MuteAudioRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MuteAudioRequest::soap_del() deep deletes _ns1__MuteAudioRequest data members, use only after _ns1__MuteAudioRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MuteAudioRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":MuteAudioResponse
/// @brief "http://portal.vidyo.com/user/v1_1":MuteAudioResponse is a complexType.
///
/// class _ns1__MuteAudioResponse operations:
/// - _ns1__MuteAudioResponse* soap_new__ns1__MuteAudioResponse(soap*) allocate
/// - _ns1__MuteAudioResponse* soap_new__ns1__MuteAudioResponse(soap*, int num) allocate array
/// - _ns1__MuteAudioResponse* soap_new_req__ns1__MuteAudioResponse(soap*, ...) allocate, set required members
/// - _ns1__MuteAudioResponse* soap_new_set__ns1__MuteAudioResponse(soap*, ...) allocate, set all public members
/// - _ns1__MuteAudioResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__MuteAudioResponse(soap*, _ns1__MuteAudioResponse*) deserialize from a stream
/// - int soap_write__ns1__MuteAudioResponse(soap*, _ns1__MuteAudioResponse*) serialize to a stream
/// - _ns1__MuteAudioResponse* _ns1__MuteAudioResponse::soap_dup(soap*) returns deep copy of _ns1__MuteAudioResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MuteAudioResponse::soap_del() deep deletes _ns1__MuteAudioResponse data members, use only after _ns1__MuteAudioResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MuteAudioResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UnmuteAudioRequest
/// <PRE><BLOCKQUOTE>
///   Request to unmute the audio for a given participantID (Endpoint) in the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":UnmuteAudioRequest is a complexType.
///
/// class _ns1__UnmuteAudioRequest operations:
/// - _ns1__UnmuteAudioRequest* soap_new__ns1__UnmuteAudioRequest(soap*) allocate
/// - _ns1__UnmuteAudioRequest* soap_new__ns1__UnmuteAudioRequest(soap*, int num) allocate array
/// - _ns1__UnmuteAudioRequest* soap_new_req__ns1__UnmuteAudioRequest(soap*, ...) allocate, set required members
/// - _ns1__UnmuteAudioRequest* soap_new_set__ns1__UnmuteAudioRequest(soap*, ...) allocate, set all public members
/// - _ns1__UnmuteAudioRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UnmuteAudioRequest(soap*, _ns1__UnmuteAudioRequest*) deserialize from a stream
/// - int soap_write__ns1__UnmuteAudioRequest(soap*, _ns1__UnmuteAudioRequest*) serialize to a stream
/// - _ns1__UnmuteAudioRequest* _ns1__UnmuteAudioRequest::soap_dup(soap*) returns deep copy of _ns1__UnmuteAudioRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UnmuteAudioRequest::soap_del() deep deletes _ns1__UnmuteAudioRequest data members, use only after _ns1__UnmuteAudioRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UnmuteAudioRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UnmuteAudioResponse
/// @brief "http://portal.vidyo.com/user/v1_1":UnmuteAudioResponse is a complexType.
///
/// class _ns1__UnmuteAudioResponse operations:
/// - _ns1__UnmuteAudioResponse* soap_new__ns1__UnmuteAudioResponse(soap*) allocate
/// - _ns1__UnmuteAudioResponse* soap_new__ns1__UnmuteAudioResponse(soap*, int num) allocate array
/// - _ns1__UnmuteAudioResponse* soap_new_req__ns1__UnmuteAudioResponse(soap*, ...) allocate, set required members
/// - _ns1__UnmuteAudioResponse* soap_new_set__ns1__UnmuteAudioResponse(soap*, ...) allocate, set all public members
/// - _ns1__UnmuteAudioResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UnmuteAudioResponse(soap*, _ns1__UnmuteAudioResponse*) deserialize from a stream
/// - int soap_write__ns1__UnmuteAudioResponse(soap*, _ns1__UnmuteAudioResponse*) serialize to a stream
/// - _ns1__UnmuteAudioResponse* _ns1__UnmuteAudioResponse::soap_dup(soap*) returns deep copy of _ns1__UnmuteAudioResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UnmuteAudioResponse::soap_del() deep deletes _ns1__UnmuteAudioResponse data members, use only after _ns1__UnmuteAudioResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UnmuteAudioResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StartVideoRequest
/// <PRE><BLOCKQUOTE>
///   Request to start the video for a given participantID (Endpoint) in the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":StartVideoRequest is a complexType.
///
/// class _ns1__StartVideoRequest operations:
/// - _ns1__StartVideoRequest* soap_new__ns1__StartVideoRequest(soap*) allocate
/// - _ns1__StartVideoRequest* soap_new__ns1__StartVideoRequest(soap*, int num) allocate array
/// - _ns1__StartVideoRequest* soap_new_req__ns1__StartVideoRequest(soap*, ...) allocate, set required members
/// - _ns1__StartVideoRequest* soap_new_set__ns1__StartVideoRequest(soap*, ...) allocate, set all public members
/// - _ns1__StartVideoRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StartVideoRequest(soap*, _ns1__StartVideoRequest*) deserialize from a stream
/// - int soap_write__ns1__StartVideoRequest(soap*, _ns1__StartVideoRequest*) serialize to a stream
/// - _ns1__StartVideoRequest* _ns1__StartVideoRequest::soap_dup(soap*) returns deep copy of _ns1__StartVideoRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StartVideoRequest::soap_del() deep deletes _ns1__StartVideoRequest data members, use only after _ns1__StartVideoRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StartVideoRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StartVideoResponse
/// @brief "http://portal.vidyo.com/user/v1_1":StartVideoResponse is a complexType.
///
/// class _ns1__StartVideoResponse operations:
/// - _ns1__StartVideoResponse* soap_new__ns1__StartVideoResponse(soap*) allocate
/// - _ns1__StartVideoResponse* soap_new__ns1__StartVideoResponse(soap*, int num) allocate array
/// - _ns1__StartVideoResponse* soap_new_req__ns1__StartVideoResponse(soap*, ...) allocate, set required members
/// - _ns1__StartVideoResponse* soap_new_set__ns1__StartVideoResponse(soap*, ...) allocate, set all public members
/// - _ns1__StartVideoResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StartVideoResponse(soap*, _ns1__StartVideoResponse*) deserialize from a stream
/// - int soap_write__ns1__StartVideoResponse(soap*, _ns1__StartVideoResponse*) serialize to a stream
/// - _ns1__StartVideoResponse* _ns1__StartVideoResponse::soap_dup(soap*) returns deep copy of _ns1__StartVideoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StartVideoResponse::soap_del() deep deletes _ns1__StartVideoResponse data members, use only after _ns1__StartVideoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StartVideoResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StopVideoRequest
/// <PRE><BLOCKQUOTE>
///   Request to stop the video for a given EntityID (Endpoint) in the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":StopVideoRequest is a complexType.
///
/// class _ns1__StopVideoRequest operations:
/// - _ns1__StopVideoRequest* soap_new__ns1__StopVideoRequest(soap*) allocate
/// - _ns1__StopVideoRequest* soap_new__ns1__StopVideoRequest(soap*, int num) allocate array
/// - _ns1__StopVideoRequest* soap_new_req__ns1__StopVideoRequest(soap*, ...) allocate, set required members
/// - _ns1__StopVideoRequest* soap_new_set__ns1__StopVideoRequest(soap*, ...) allocate, set all public members
/// - _ns1__StopVideoRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StopVideoRequest(soap*, _ns1__StopVideoRequest*) deserialize from a stream
/// - int soap_write__ns1__StopVideoRequest(soap*, _ns1__StopVideoRequest*) serialize to a stream
/// - _ns1__StopVideoRequest* _ns1__StopVideoRequest::soap_dup(soap*) returns deep copy of _ns1__StopVideoRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StopVideoRequest::soap_del() deep deletes _ns1__StopVideoRequest data members, use only after _ns1__StopVideoRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StopVideoRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StopVideoResponse
/// @brief "http://portal.vidyo.com/user/v1_1":StopVideoResponse is a complexType.
///
/// class _ns1__StopVideoResponse operations:
/// - _ns1__StopVideoResponse* soap_new__ns1__StopVideoResponse(soap*) allocate
/// - _ns1__StopVideoResponse* soap_new__ns1__StopVideoResponse(soap*, int num) allocate array
/// - _ns1__StopVideoResponse* soap_new_req__ns1__StopVideoResponse(soap*, ...) allocate, set required members
/// - _ns1__StopVideoResponse* soap_new_set__ns1__StopVideoResponse(soap*, ...) allocate, set all public members
/// - _ns1__StopVideoResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StopVideoResponse(soap*, _ns1__StopVideoResponse*) deserialize from a stream
/// - int soap_write__ns1__StopVideoResponse(soap*, _ns1__StopVideoResponse*) serialize to a stream
/// - _ns1__StopVideoResponse* _ns1__StopVideoResponse::soap_dup(soap*) returns deep copy of _ns1__StopVideoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StopVideoResponse::soap_del() deep deletes _ns1__StopVideoResponse data members, use only after _ns1__StopVideoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StopVideoResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":MyAccountRequest
/// <PRE><BLOCKQUOTE>
///   Request to retrieve Member entity.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":MyAccountRequest is a complexType.
///
/// class _ns1__MyAccountRequest operations:
/// - _ns1__MyAccountRequest* soap_new__ns1__MyAccountRequest(soap*) allocate
/// - _ns1__MyAccountRequest* soap_new__ns1__MyAccountRequest(soap*, int num) allocate array
/// - _ns1__MyAccountRequest* soap_new_req__ns1__MyAccountRequest(soap*, ...) allocate, set required members
/// - _ns1__MyAccountRequest* soap_new_set__ns1__MyAccountRequest(soap*, ...) allocate, set all public members
/// - _ns1__MyAccountRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__MyAccountRequest(soap*, _ns1__MyAccountRequest*) deserialize from a stream
/// - int soap_write__ns1__MyAccountRequest(soap*, _ns1__MyAccountRequest*) serialize to a stream
/// - _ns1__MyAccountRequest* _ns1__MyAccountRequest::soap_dup(soap*) returns deep copy of _ns1__MyAccountRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MyAccountRequest::soap_del() deep deletes _ns1__MyAccountRequest data members, use only after _ns1__MyAccountRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MyAccountRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":MyAccountResponse
/// @brief "http://portal.vidyo.com/user/v1_1":MyAccountResponse is a complexType.
///
/// class _ns1__MyAccountResponse operations:
/// - _ns1__MyAccountResponse* soap_new__ns1__MyAccountResponse(soap*) allocate
/// - _ns1__MyAccountResponse* soap_new__ns1__MyAccountResponse(soap*, int num) allocate array
/// - _ns1__MyAccountResponse* soap_new_req__ns1__MyAccountResponse(soap*, ...) allocate, set required members
/// - _ns1__MyAccountResponse* soap_new_set__ns1__MyAccountResponse(soap*, ...) allocate, set all public members
/// - _ns1__MyAccountResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__MyAccountResponse(soap*, _ns1__MyAccountResponse*) deserialize from a stream
/// - int soap_write__ns1__MyAccountResponse(soap*, _ns1__MyAccountResponse*) serialize to a stream
/// - _ns1__MyAccountResponse* _ns1__MyAccountResponse::soap_dup(soap*) returns deep copy of _ns1__MyAccountResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MyAccountResponse::soap_del() deep deletes _ns1__MyAccountResponse data members, use only after _ns1__MyAccountResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MyAccountResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Entity.
    _ns1__Entity*                        Entity                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateRoomRequest
/// <PRE><BLOCKQUOTE>
///   Request to create a Public Room belongs to Member.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":CreateRoomRequest is a complexType.
///
/// class _ns1__CreateRoomRequest operations:
/// - _ns1__CreateRoomRequest* soap_new__ns1__CreateRoomRequest(soap*) allocate
/// - _ns1__CreateRoomRequest* soap_new__ns1__CreateRoomRequest(soap*, int num) allocate array
/// - _ns1__CreateRoomRequest* soap_new_req__ns1__CreateRoomRequest(soap*, ...) allocate, set required members
/// - _ns1__CreateRoomRequest* soap_new_set__ns1__CreateRoomRequest(soap*, ...) allocate, set all public members
/// - _ns1__CreateRoomRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateRoomRequest(soap*, _ns1__CreateRoomRequest*) deserialize from a stream
/// - int soap_write__ns1__CreateRoomRequest(soap*, _ns1__CreateRoomRequest*) serialize to a stream
/// - _ns1__CreateRoomRequest* _ns1__CreateRoomRequest::soap_dup(soap*) returns deep copy of _ns1__CreateRoomRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateRoomRequest::soap_del() deep deletes _ns1__CreateRoomRequest data members, use only after _ns1__CreateRoomRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateRoomRequest
{ public:
/// Element "name" of XSD type xs:string.
    char*                                name                           1;	///< Required element.
/// Element "extension" of XSD type xs:string.
    char*                                extension                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateRoomResponse
/// @brief "http://portal.vidyo.com/user/v1_1":CreateRoomResponse is a complexType.
///
/// class _ns1__CreateRoomResponse operations:
/// - _ns1__CreateRoomResponse* soap_new__ns1__CreateRoomResponse(soap*) allocate
/// - _ns1__CreateRoomResponse* soap_new__ns1__CreateRoomResponse(soap*, int num) allocate array
/// - _ns1__CreateRoomResponse* soap_new_req__ns1__CreateRoomResponse(soap*, ...) allocate, set required members
/// - _ns1__CreateRoomResponse* soap_new_set__ns1__CreateRoomResponse(soap*, ...) allocate, set all public members
/// - _ns1__CreateRoomResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateRoomResponse(soap*, _ns1__CreateRoomResponse*) deserialize from a stream
/// - int soap_write__ns1__CreateRoomResponse(soap*, _ns1__CreateRoomResponse*) serialize to a stream
/// - _ns1__CreateRoomResponse* _ns1__CreateRoomResponse::soap_dup(soap*) returns deep copy of _ns1__CreateRoomResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateRoomResponse::soap_del() deep deletes _ns1__CreateRoomResponse data members, use only after _ns1__CreateRoomResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateRoomResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Entity.
    _ns1__Entity*                        Entity                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DeleteRoomRequest
/// <PRE><BLOCKQUOTE>
///   Request to delete a Public Room belongs to Member.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":DeleteRoomRequest is a complexType.
///
/// class _ns1__DeleteRoomRequest operations:
/// - _ns1__DeleteRoomRequest* soap_new__ns1__DeleteRoomRequest(soap*) allocate
/// - _ns1__DeleteRoomRequest* soap_new__ns1__DeleteRoomRequest(soap*, int num) allocate array
/// - _ns1__DeleteRoomRequest* soap_new_req__ns1__DeleteRoomRequest(soap*, ...) allocate, set required members
/// - _ns1__DeleteRoomRequest* soap_new_set__ns1__DeleteRoomRequest(soap*, ...) allocate, set all public members
/// - _ns1__DeleteRoomRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DeleteRoomRequest(soap*, _ns1__DeleteRoomRequest*) deserialize from a stream
/// - int soap_write__ns1__DeleteRoomRequest(soap*, _ns1__DeleteRoomRequest*) serialize to a stream
/// - _ns1__DeleteRoomRequest* _ns1__DeleteRoomRequest::soap_dup(soap*) returns deep copy of _ns1__DeleteRoomRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DeleteRoomRequest::soap_del() deep deletes _ns1__DeleteRoomRequest data members, use only after _ns1__DeleteRoomRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DeleteRoomRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DeleteRoomResponse
/// @brief "http://portal.vidyo.com/user/v1_1":DeleteRoomResponse is a complexType.
///
/// class _ns1__DeleteRoomResponse operations:
/// - _ns1__DeleteRoomResponse* soap_new__ns1__DeleteRoomResponse(soap*) allocate
/// - _ns1__DeleteRoomResponse* soap_new__ns1__DeleteRoomResponse(soap*, int num) allocate array
/// - _ns1__DeleteRoomResponse* soap_new_req__ns1__DeleteRoomResponse(soap*, ...) allocate, set required members
/// - _ns1__DeleteRoomResponse* soap_new_set__ns1__DeleteRoomResponse(soap*, ...) allocate, set all public members
/// - _ns1__DeleteRoomResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DeleteRoomResponse(soap*, _ns1__DeleteRoomResponse*) deserialize from a stream
/// - int soap_write__ns1__DeleteRoomResponse(soap*, _ns1__DeleteRoomResponse*) serialize to a stream
/// - _ns1__DeleteRoomResponse* _ns1__DeleteRoomResponse::soap_dup(soap*) returns deep copy of _ns1__DeleteRoomResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DeleteRoomResponse::soap_del() deep deletes _ns1__DeleteRoomResponse data members, use only after _ns1__DeleteRoomResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DeleteRoomResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateRoomURLRequest
/// <PRE><BLOCKQUOTE>
///   Request to create a URL for a Room or a Member's personal room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":CreateRoomURLRequest is a complexType.
///
/// class _ns1__CreateRoomURLRequest operations:
/// - _ns1__CreateRoomURLRequest* soap_new__ns1__CreateRoomURLRequest(soap*) allocate
/// - _ns1__CreateRoomURLRequest* soap_new__ns1__CreateRoomURLRequest(soap*, int num) allocate array
/// - _ns1__CreateRoomURLRequest* soap_new_req__ns1__CreateRoomURLRequest(soap*, ...) allocate, set required members
/// - _ns1__CreateRoomURLRequest* soap_new_set__ns1__CreateRoomURLRequest(soap*, ...) allocate, set all public members
/// - _ns1__CreateRoomURLRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateRoomURLRequest(soap*, _ns1__CreateRoomURLRequest*) deserialize from a stream
/// - int soap_write__ns1__CreateRoomURLRequest(soap*, _ns1__CreateRoomURLRequest*) serialize to a stream
/// - _ns1__CreateRoomURLRequest* _ns1__CreateRoomURLRequest::soap_dup(soap*) returns deep copy of _ns1__CreateRoomURLRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateRoomURLRequest::soap_del() deep deletes _ns1__CreateRoomURLRequest data members, use only after _ns1__CreateRoomURLRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateRoomURLRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateRoomURLResponse
/// @brief "http://portal.vidyo.com/user/v1_1":CreateRoomURLResponse is a complexType.
///
/// class _ns1__CreateRoomURLResponse operations:
/// - _ns1__CreateRoomURLResponse* soap_new__ns1__CreateRoomURLResponse(soap*) allocate
/// - _ns1__CreateRoomURLResponse* soap_new__ns1__CreateRoomURLResponse(soap*, int num) allocate array
/// - _ns1__CreateRoomURLResponse* soap_new_req__ns1__CreateRoomURLResponse(soap*, ...) allocate, set required members
/// - _ns1__CreateRoomURLResponse* soap_new_set__ns1__CreateRoomURLResponse(soap*, ...) allocate, set all public members
/// - _ns1__CreateRoomURLResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateRoomURLResponse(soap*, _ns1__CreateRoomURLResponse*) deserialize from a stream
/// - int soap_write__ns1__CreateRoomURLResponse(soap*, _ns1__CreateRoomURLResponse*) serialize to a stream
/// - _ns1__CreateRoomURLResponse* _ns1__CreateRoomURLResponse::soap_dup(soap*) returns deep copy of _ns1__CreateRoomURLResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateRoomURLResponse::soap_del() deep deletes _ns1__CreateRoomURLResponse data members, use only after _ns1__CreateRoomURLResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateRoomURLResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveRoomURLRequest
/// <PRE><BLOCKQUOTE>
///   Request to delete a URL for a Room or a Member's personal room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveRoomURLRequest is a complexType.
///
/// class _ns1__RemoveRoomURLRequest operations:
/// - _ns1__RemoveRoomURLRequest* soap_new__ns1__RemoveRoomURLRequest(soap*) allocate
/// - _ns1__RemoveRoomURLRequest* soap_new__ns1__RemoveRoomURLRequest(soap*, int num) allocate array
/// - _ns1__RemoveRoomURLRequest* soap_new_req__ns1__RemoveRoomURLRequest(soap*, ...) allocate, set required members
/// - _ns1__RemoveRoomURLRequest* soap_new_set__ns1__RemoveRoomURLRequest(soap*, ...) allocate, set all public members
/// - _ns1__RemoveRoomURLRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveRoomURLRequest(soap*, _ns1__RemoveRoomURLRequest*) deserialize from a stream
/// - int soap_write__ns1__RemoveRoomURLRequest(soap*, _ns1__RemoveRoomURLRequest*) serialize to a stream
/// - _ns1__RemoveRoomURLRequest* _ns1__RemoveRoomURLRequest::soap_dup(soap*) returns deep copy of _ns1__RemoveRoomURLRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveRoomURLRequest::soap_del() deep deletes _ns1__RemoveRoomURLRequest data members, use only after _ns1__RemoveRoomURLRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveRoomURLRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveRoomURLResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveRoomURLResponse is a complexType.
///
/// class _ns1__RemoveRoomURLResponse operations:
/// - _ns1__RemoveRoomURLResponse* soap_new__ns1__RemoveRoomURLResponse(soap*) allocate
/// - _ns1__RemoveRoomURLResponse* soap_new__ns1__RemoveRoomURLResponse(soap*, int num) allocate array
/// - _ns1__RemoveRoomURLResponse* soap_new_req__ns1__RemoveRoomURLResponse(soap*, ...) allocate, set required members
/// - _ns1__RemoveRoomURLResponse* soap_new_set__ns1__RemoveRoomURLResponse(soap*, ...) allocate, set all public members
/// - _ns1__RemoveRoomURLResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveRoomURLResponse(soap*, _ns1__RemoveRoomURLResponse*) deserialize from a stream
/// - int soap_write__ns1__RemoveRoomURLResponse(soap*, _ns1__RemoveRoomURLResponse*) serialize to a stream
/// - _ns1__RemoveRoomURLResponse* _ns1__RemoveRoomURLResponse::soap_dup(soap*) returns deep copy of _ns1__RemoveRoomURLResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveRoomURLResponse::soap_del() deep deletes _ns1__RemoveRoomURLResponse data members, use only after _ns1__RemoveRoomURLResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveRoomURLResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateRoomPINRequest
/// <PRE><BLOCKQUOTE>
///   Create a PIN for a Room or a Member's personal room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":CreateRoomPINRequest is a complexType.
///
/// class _ns1__CreateRoomPINRequest operations:
/// - _ns1__CreateRoomPINRequest* soap_new__ns1__CreateRoomPINRequest(soap*) allocate
/// - _ns1__CreateRoomPINRequest* soap_new__ns1__CreateRoomPINRequest(soap*, int num) allocate array
/// - _ns1__CreateRoomPINRequest* soap_new_req__ns1__CreateRoomPINRequest(soap*, ...) allocate, set required members
/// - _ns1__CreateRoomPINRequest* soap_new_set__ns1__CreateRoomPINRequest(soap*, ...) allocate, set all public members
/// - _ns1__CreateRoomPINRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateRoomPINRequest(soap*, _ns1__CreateRoomPINRequest*) deserialize from a stream
/// - int soap_write__ns1__CreateRoomPINRequest(soap*, _ns1__CreateRoomPINRequest*) serialize to a stream
/// - _ns1__CreateRoomPINRequest* _ns1__CreateRoomPINRequest::soap_dup(soap*) returns deep copy of _ns1__CreateRoomPINRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateRoomPINRequest::soap_del() deep deletes _ns1__CreateRoomPINRequest data members, use only after _ns1__CreateRoomPINRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateRoomPINRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// Element "PIN" of XSD type xs:string.
    char*                                PIN                            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateRoomPINResponse
/// @brief "http://portal.vidyo.com/user/v1_1":CreateRoomPINResponse is a complexType.
///
/// class _ns1__CreateRoomPINResponse operations:
/// - _ns1__CreateRoomPINResponse* soap_new__ns1__CreateRoomPINResponse(soap*) allocate
/// - _ns1__CreateRoomPINResponse* soap_new__ns1__CreateRoomPINResponse(soap*, int num) allocate array
/// - _ns1__CreateRoomPINResponse* soap_new_req__ns1__CreateRoomPINResponse(soap*, ...) allocate, set required members
/// - _ns1__CreateRoomPINResponse* soap_new_set__ns1__CreateRoomPINResponse(soap*, ...) allocate, set all public members
/// - _ns1__CreateRoomPINResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateRoomPINResponse(soap*, _ns1__CreateRoomPINResponse*) deserialize from a stream
/// - int soap_write__ns1__CreateRoomPINResponse(soap*, _ns1__CreateRoomPINResponse*) serialize to a stream
/// - _ns1__CreateRoomPINResponse* _ns1__CreateRoomPINResponse::soap_dup(soap*) returns deep copy of _ns1__CreateRoomPINResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateRoomPINResponse::soap_del() deep deletes _ns1__CreateRoomPINResponse data members, use only after _ns1__CreateRoomPINResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateRoomPINResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveRoomPINRequest
/// <PRE><BLOCKQUOTE>
///   Removes a PIN for a Room or a Member's personal room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveRoomPINRequest is a complexType.
///
/// class _ns1__RemoveRoomPINRequest operations:
/// - _ns1__RemoveRoomPINRequest* soap_new__ns1__RemoveRoomPINRequest(soap*) allocate
/// - _ns1__RemoveRoomPINRequest* soap_new__ns1__RemoveRoomPINRequest(soap*, int num) allocate array
/// - _ns1__RemoveRoomPINRequest* soap_new_req__ns1__RemoveRoomPINRequest(soap*, ...) allocate, set required members
/// - _ns1__RemoveRoomPINRequest* soap_new_set__ns1__RemoveRoomPINRequest(soap*, ...) allocate, set all public members
/// - _ns1__RemoveRoomPINRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveRoomPINRequest(soap*, _ns1__RemoveRoomPINRequest*) deserialize from a stream
/// - int soap_write__ns1__RemoveRoomPINRequest(soap*, _ns1__RemoveRoomPINRequest*) serialize to a stream
/// - _ns1__RemoveRoomPINRequest* _ns1__RemoveRoomPINRequest::soap_dup(soap*) returns deep copy of _ns1__RemoveRoomPINRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveRoomPINRequest::soap_del() deep deletes _ns1__RemoveRoomPINRequest data members, use only after _ns1__RemoveRoomPINRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveRoomPINRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveRoomPINResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveRoomPINResponse is a complexType.
///
/// class _ns1__RemoveRoomPINResponse operations:
/// - _ns1__RemoveRoomPINResponse* soap_new__ns1__RemoveRoomPINResponse(soap*) allocate
/// - _ns1__RemoveRoomPINResponse* soap_new__ns1__RemoveRoomPINResponse(soap*, int num) allocate array
/// - _ns1__RemoveRoomPINResponse* soap_new_req__ns1__RemoveRoomPINResponse(soap*, ...) allocate, set required members
/// - _ns1__RemoveRoomPINResponse* soap_new_set__ns1__RemoveRoomPINResponse(soap*, ...) allocate, set all public members
/// - _ns1__RemoveRoomPINResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveRoomPINResponse(soap*, _ns1__RemoveRoomPINResponse*) deserialize from a stream
/// - int soap_write__ns1__RemoveRoomPINResponse(soap*, _ns1__RemoveRoomPINResponse*) serialize to a stream
/// - _ns1__RemoveRoomPINResponse* _ns1__RemoveRoomPINResponse::soap_dup(soap*) returns deep copy of _ns1__RemoveRoomPINResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveRoomPINResponse::soap_del() deep deletes _ns1__RemoveRoomPINResponse data members, use only after _ns1__RemoveRoomPINResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveRoomPINResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UpdatePasswordRequest
/// <PRE><BLOCKQUOTE>
///   Updates a Member's password.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":UpdatePasswordRequest is a complexType.
///
/// class _ns1__UpdatePasswordRequest operations:
/// - _ns1__UpdatePasswordRequest* soap_new__ns1__UpdatePasswordRequest(soap*) allocate
/// - _ns1__UpdatePasswordRequest* soap_new__ns1__UpdatePasswordRequest(soap*, int num) allocate array
/// - _ns1__UpdatePasswordRequest* soap_new_req__ns1__UpdatePasswordRequest(soap*, ...) allocate, set required members
/// - _ns1__UpdatePasswordRequest* soap_new_set__ns1__UpdatePasswordRequest(soap*, ...) allocate, set all public members
/// - _ns1__UpdatePasswordRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UpdatePasswordRequest(soap*, _ns1__UpdatePasswordRequest*) deserialize from a stream
/// - int soap_write__ns1__UpdatePasswordRequest(soap*, _ns1__UpdatePasswordRequest*) serialize to a stream
/// - _ns1__UpdatePasswordRequest* _ns1__UpdatePasswordRequest::soap_dup(soap*) returns deep copy of _ns1__UpdatePasswordRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdatePasswordRequest::soap_del() deep deletes _ns1__UpdatePasswordRequest data members, use only after _ns1__UpdatePasswordRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdatePasswordRequest
{ public:
/// Element "password" of XSD type xs:string.
    char*                                password                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UpdatePasswordResponse
/// @brief "http://portal.vidyo.com/user/v1_1":UpdatePasswordResponse is a complexType.
///
/// class _ns1__UpdatePasswordResponse operations:
/// - _ns1__UpdatePasswordResponse* soap_new__ns1__UpdatePasswordResponse(soap*) allocate
/// - _ns1__UpdatePasswordResponse* soap_new__ns1__UpdatePasswordResponse(soap*, int num) allocate array
/// - _ns1__UpdatePasswordResponse* soap_new_req__ns1__UpdatePasswordResponse(soap*, ...) allocate, set required members
/// - _ns1__UpdatePasswordResponse* soap_new_set__ns1__UpdatePasswordResponse(soap*, ...) allocate, set all public members
/// - _ns1__UpdatePasswordResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UpdatePasswordResponse(soap*, _ns1__UpdatePasswordResponse*) deserialize from a stream
/// - int soap_write__ns1__UpdatePasswordResponse(soap*, _ns1__UpdatePasswordResponse*) serialize to a stream
/// - _ns1__UpdatePasswordResponse* _ns1__UpdatePasswordResponse::soap_dup(soap*) returns deep copy of _ns1__UpdatePasswordResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdatePasswordResponse::soap_del() deep deletes _ns1__UpdatePasswordResponse data members, use only after _ns1__UpdatePasswordResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdatePasswordResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UpdateLanguageRequest
/// <PRE><BLOCKQUOTE>
///   Updates a Member's language settings.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":UpdateLanguageRequest is a complexType.
///
/// class _ns1__UpdateLanguageRequest operations:
/// - _ns1__UpdateLanguageRequest* soap_new__ns1__UpdateLanguageRequest(soap*) allocate
/// - _ns1__UpdateLanguageRequest* soap_new__ns1__UpdateLanguageRequest(soap*, int num) allocate array
/// - _ns1__UpdateLanguageRequest* soap_new_req__ns1__UpdateLanguageRequest(soap*, ...) allocate, set required members
/// - _ns1__UpdateLanguageRequest* soap_new_set__ns1__UpdateLanguageRequest(soap*, ...) allocate, set all public members
/// - _ns1__UpdateLanguageRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UpdateLanguageRequest(soap*, _ns1__UpdateLanguageRequest*) deserialize from a stream
/// - int soap_write__ns1__UpdateLanguageRequest(soap*, _ns1__UpdateLanguageRequest*) serialize to a stream
/// - _ns1__UpdateLanguageRequest* _ns1__UpdateLanguageRequest::soap_dup(soap*) returns deep copy of _ns1__UpdateLanguageRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdateLanguageRequest::soap_del() deep deletes _ns1__UpdateLanguageRequest data members, use only after _ns1__UpdateLanguageRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdateLanguageRequest
{ public:
/// <PRE><BLOCKQUOTE>
///   Languages supported by VidyoPortal
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Language.
    enum _ns1__Language                  Language                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UpdateLanguageResponse
/// @brief "http://portal.vidyo.com/user/v1_1":UpdateLanguageResponse is a complexType.
///
/// class _ns1__UpdateLanguageResponse operations:
/// - _ns1__UpdateLanguageResponse* soap_new__ns1__UpdateLanguageResponse(soap*) allocate
/// - _ns1__UpdateLanguageResponse* soap_new__ns1__UpdateLanguageResponse(soap*, int num) allocate array
/// - _ns1__UpdateLanguageResponse* soap_new_req__ns1__UpdateLanguageResponse(soap*, ...) allocate, set required members
/// - _ns1__UpdateLanguageResponse* soap_new_set__ns1__UpdateLanguageResponse(soap*, ...) allocate, set all public members
/// - _ns1__UpdateLanguageResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UpdateLanguageResponse(soap*, _ns1__UpdateLanguageResponse*) deserialize from a stream
/// - int soap_write__ns1__UpdateLanguageResponse(soap*, _ns1__UpdateLanguageResponse*) serialize to a stream
/// - _ns1__UpdateLanguageResponse* _ns1__UpdateLanguageResponse::soap_dup(soap*) returns deep copy of _ns1__UpdateLanguageResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdateLanguageResponse::soap_del() deep deletes _ns1__UpdateLanguageResponse data members, use only after _ns1__UpdateLanguageResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdateLanguageResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LockRoomRequest
/// <PRE><BLOCKQUOTE>
///   Lock a public or personal room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":LockRoomRequest is a complexType.
///
/// class _ns1__LockRoomRequest operations:
/// - _ns1__LockRoomRequest* soap_new__ns1__LockRoomRequest(soap*) allocate
/// - _ns1__LockRoomRequest* soap_new__ns1__LockRoomRequest(soap*, int num) allocate array
/// - _ns1__LockRoomRequest* soap_new_req__ns1__LockRoomRequest(soap*, ...) allocate, set required members
/// - _ns1__LockRoomRequest* soap_new_set__ns1__LockRoomRequest(soap*, ...) allocate, set all public members
/// - _ns1__LockRoomRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LockRoomRequest(soap*, _ns1__LockRoomRequest*) deserialize from a stream
/// - int soap_write__ns1__LockRoomRequest(soap*, _ns1__LockRoomRequest*) serialize to a stream
/// - _ns1__LockRoomRequest* _ns1__LockRoomRequest::soap_dup(soap*) returns deep copy of _ns1__LockRoomRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LockRoomRequest::soap_del() deep deletes _ns1__LockRoomRequest data members, use only after _ns1__LockRoomRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LockRoomRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LockRoomResponse
/// @brief "http://portal.vidyo.com/user/v1_1":LockRoomResponse is a complexType.
///
/// class _ns1__LockRoomResponse operations:
/// - _ns1__LockRoomResponse* soap_new__ns1__LockRoomResponse(soap*) allocate
/// - _ns1__LockRoomResponse* soap_new__ns1__LockRoomResponse(soap*, int num) allocate array
/// - _ns1__LockRoomResponse* soap_new_req__ns1__LockRoomResponse(soap*, ...) allocate, set required members
/// - _ns1__LockRoomResponse* soap_new_set__ns1__LockRoomResponse(soap*, ...) allocate, set all public members
/// - _ns1__LockRoomResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LockRoomResponse(soap*, _ns1__LockRoomResponse*) deserialize from a stream
/// - int soap_write__ns1__LockRoomResponse(soap*, _ns1__LockRoomResponse*) serialize to a stream
/// - _ns1__LockRoomResponse* _ns1__LockRoomResponse::soap_dup(soap*) returns deep copy of _ns1__LockRoomResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LockRoomResponse::soap_del() deep deletes _ns1__LockRoomResponse data members, use only after _ns1__LockRoomResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LockRoomResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UnlockRoomRequest
/// <PRE><BLOCKQUOTE>
///   Lock a public or personal room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":UnlockRoomRequest is a complexType.
///
/// class _ns1__UnlockRoomRequest operations:
/// - _ns1__UnlockRoomRequest* soap_new__ns1__UnlockRoomRequest(soap*) allocate
/// - _ns1__UnlockRoomRequest* soap_new__ns1__UnlockRoomRequest(soap*, int num) allocate array
/// - _ns1__UnlockRoomRequest* soap_new_req__ns1__UnlockRoomRequest(soap*, ...) allocate, set required members
/// - _ns1__UnlockRoomRequest* soap_new_set__ns1__UnlockRoomRequest(soap*, ...) allocate, set all public members
/// - _ns1__UnlockRoomRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UnlockRoomRequest(soap*, _ns1__UnlockRoomRequest*) deserialize from a stream
/// - int soap_write__ns1__UnlockRoomRequest(soap*, _ns1__UnlockRoomRequest*) serialize to a stream
/// - _ns1__UnlockRoomRequest* _ns1__UnlockRoomRequest::soap_dup(soap*) returns deep copy of _ns1__UnlockRoomRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UnlockRoomRequest::soap_del() deep deletes _ns1__UnlockRoomRequest data members, use only after _ns1__UnlockRoomRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UnlockRoomRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UnlockRoomResponse
/// @brief "http://portal.vidyo.com/user/v1_1":UnlockRoomResponse is a complexType.
///
/// class _ns1__UnlockRoomResponse operations:
/// - _ns1__UnlockRoomResponse* soap_new__ns1__UnlockRoomResponse(soap*) allocate
/// - _ns1__UnlockRoomResponse* soap_new__ns1__UnlockRoomResponse(soap*, int num) allocate array
/// - _ns1__UnlockRoomResponse* soap_new_req__ns1__UnlockRoomResponse(soap*, ...) allocate, set required members
/// - _ns1__UnlockRoomResponse* soap_new_set__ns1__UnlockRoomResponse(soap*, ...) allocate, set all public members
/// - _ns1__UnlockRoomResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UnlockRoomResponse(soap*, _ns1__UnlockRoomResponse*) deserialize from a stream
/// - int soap_write__ns1__UnlockRoomResponse(soap*, _ns1__UnlockRoomResponse*) serialize to a stream
/// - _ns1__UnlockRoomResponse* _ns1__UnlockRoomResponse::soap_dup(soap*) returns deep copy of _ns1__UnlockRoomResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UnlockRoomResponse::soap_del() deep deletes _ns1__UnlockRoomResponse data members, use only after _ns1__UnlockRoomResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UnlockRoomResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SetMemberModeRequest
/// <PRE><BLOCKQUOTE>
///   Mode of member:
///   - Available
///   - Away
///   - DoNotDisturb
///   etc.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":SetMemberModeRequest is a complexType.
///
/// class _ns1__SetMemberModeRequest operations:
/// - _ns1__SetMemberModeRequest* soap_new__ns1__SetMemberModeRequest(soap*) allocate
/// - _ns1__SetMemberModeRequest* soap_new__ns1__SetMemberModeRequest(soap*, int num) allocate array
/// - _ns1__SetMemberModeRequest* soap_new_req__ns1__SetMemberModeRequest(soap*, ...) allocate, set required members
/// - _ns1__SetMemberModeRequest* soap_new_set__ns1__SetMemberModeRequest(soap*, ...) allocate, set all public members
/// - _ns1__SetMemberModeRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SetMemberModeRequest(soap*, _ns1__SetMemberModeRequest*) deserialize from a stream
/// - int soap_write__ns1__SetMemberModeRequest(soap*, _ns1__SetMemberModeRequest*) serialize to a stream
/// - _ns1__SetMemberModeRequest* _ns1__SetMemberModeRequest::soap_dup(soap*) returns deep copy of _ns1__SetMemberModeRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetMemberModeRequest::soap_del() deep deletes _ns1__SetMemberModeRequest data members, use only after _ns1__SetMemberModeRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetMemberModeRequest
{ public:
/// <PRE><BLOCKQUOTE>
///   The Member can override the current status with these possible values. Changing a mode will impact VidyoPortal operations.
///   For e.g. if the mode is set to DoNotDisturb for a member, this member will not get any incoming requests to join a meeting or a direct call.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":MemberMode.
    enum _ns1__MemberMode                MemberMode                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SetMemberModeResponse
/// @brief "http://portal.vidyo.com/user/v1_1":SetMemberModeResponse is a complexType.
///
/// class _ns1__SetMemberModeResponse operations:
/// - _ns1__SetMemberModeResponse* soap_new__ns1__SetMemberModeResponse(soap*) allocate
/// - _ns1__SetMemberModeResponse* soap_new__ns1__SetMemberModeResponse(soap*, int num) allocate array
/// - _ns1__SetMemberModeResponse* soap_new_req__ns1__SetMemberModeResponse(soap*, ...) allocate, set required members
/// - _ns1__SetMemberModeResponse* soap_new_set__ns1__SetMemberModeResponse(soap*, ...) allocate, set all public members
/// - _ns1__SetMemberModeResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SetMemberModeResponse(soap*, _ns1__SetMemberModeResponse*) deserialize from a stream
/// - int soap_write__ns1__SetMemberModeResponse(soap*, _ns1__SetMemberModeResponse*) serialize to a stream
/// - _ns1__SetMemberModeResponse* _ns1__SetMemberModeResponse::soap_dup(soap*) returns deep copy of _ns1__SetMemberModeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetMemberModeResponse::soap_del() deep deletes _ns1__SetMemberModeResponse data members, use only after _ns1__SetMemberModeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetMemberModeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetRecordingProfilesRequest
/// <PRE><BLOCKQUOTE>
///   Recording Profiles Request
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetRecordingProfilesRequest is a complexType.
///
/// class _ns1__GetRecordingProfilesRequest operations:
/// - _ns1__GetRecordingProfilesRequest* soap_new__ns1__GetRecordingProfilesRequest(soap*) allocate
/// - _ns1__GetRecordingProfilesRequest* soap_new__ns1__GetRecordingProfilesRequest(soap*, int num) allocate array
/// - _ns1__GetRecordingProfilesRequest* soap_new_req__ns1__GetRecordingProfilesRequest(soap*, ...) allocate, set required members
/// - _ns1__GetRecordingProfilesRequest* soap_new_set__ns1__GetRecordingProfilesRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetRecordingProfilesRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetRecordingProfilesRequest(soap*, _ns1__GetRecordingProfilesRequest*) deserialize from a stream
/// - int soap_write__ns1__GetRecordingProfilesRequest(soap*, _ns1__GetRecordingProfilesRequest*) serialize to a stream
/// - _ns1__GetRecordingProfilesRequest* _ns1__GetRecordingProfilesRequest::soap_dup(soap*) returns deep copy of _ns1__GetRecordingProfilesRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetRecordingProfilesRequest::soap_del() deep deletes _ns1__GetRecordingProfilesRequest data members, use only after _ns1__GetRecordingProfilesRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetRecordingProfilesRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetRecordingProfilesResponse
/// <PRE><BLOCKQUOTE>
///   Recording Profiles Response
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetRecordingProfilesResponse is a complexType.
///
/// class _ns1__GetRecordingProfilesResponse operations:
/// - _ns1__GetRecordingProfilesResponse* soap_new__ns1__GetRecordingProfilesResponse(soap*) allocate
/// - _ns1__GetRecordingProfilesResponse* soap_new__ns1__GetRecordingProfilesResponse(soap*, int num) allocate array
/// - _ns1__GetRecordingProfilesResponse* soap_new_req__ns1__GetRecordingProfilesResponse(soap*, ...) allocate, set required members
/// - _ns1__GetRecordingProfilesResponse* soap_new_set__ns1__GetRecordingProfilesResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetRecordingProfilesResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetRecordingProfilesResponse(soap*, _ns1__GetRecordingProfilesResponse*) deserialize from a stream
/// - int soap_write__ns1__GetRecordingProfilesResponse(soap*, _ns1__GetRecordingProfilesResponse*) serialize to a stream
/// - _ns1__GetRecordingProfilesResponse* _ns1__GetRecordingProfilesResponse::soap_dup(soap*) returns deep copy of _ns1__GetRecordingProfilesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetRecordingProfilesResponse::soap_del() deep deletes _ns1__GetRecordingProfilesResponse data members, use only after _ns1__GetRecordingProfilesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetRecordingProfilesResponse
{ public:
/// Element "total" of XSD type xs:int.
    int                                  total                          1;	///< Required element.
/// Size of array of ns1__Recorder* is 0..unbounded.
   $int                                  __sizerecorder                 0;
/// Pointer to array ns1__Recorder* of size 0..unbounded.
    ns1__Recorder*                      *recorder                       0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StartRecordingRequest
/// <PRE><BLOCKQUOTE>
///   Request to record the video for a given roomId and profileId.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":StartRecordingRequest is a complexType.
///
/// class _ns1__StartRecordingRequest operations:
/// - _ns1__StartRecordingRequest* soap_new__ns1__StartRecordingRequest(soap*) allocate
/// - _ns1__StartRecordingRequest* soap_new__ns1__StartRecordingRequest(soap*, int num) allocate array
/// - _ns1__StartRecordingRequest* soap_new_req__ns1__StartRecordingRequest(soap*, ...) allocate, set required members
/// - _ns1__StartRecordingRequest* soap_new_set__ns1__StartRecordingRequest(soap*, ...) allocate, set all public members
/// - _ns1__StartRecordingRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StartRecordingRequest(soap*, _ns1__StartRecordingRequest*) deserialize from a stream
/// - int soap_write__ns1__StartRecordingRequest(soap*, _ns1__StartRecordingRequest*) serialize to a stream
/// - _ns1__StartRecordingRequest* _ns1__StartRecordingRequest::soap_dup(soap*) returns deep copy of _ns1__StartRecordingRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StartRecordingRequest::soap_del() deep deletes _ns1__StartRecordingRequest data members, use only after _ns1__StartRecordingRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StartRecordingRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "recorderPrefix" of XSD type xs:string.
    char*                                recorderPrefix                 1;	///< Required element.
/// Element "webcast" of XSD type xs:boolean.
    bool                                 webcast                        1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StartRecordingResponse
/// @brief "http://portal.vidyo.com/user/v1_1":StartRecordingResponse is a complexType.
///
/// class _ns1__StartRecordingResponse operations:
/// - _ns1__StartRecordingResponse* soap_new__ns1__StartRecordingResponse(soap*) allocate
/// - _ns1__StartRecordingResponse* soap_new__ns1__StartRecordingResponse(soap*, int num) allocate array
/// - _ns1__StartRecordingResponse* soap_new_req__ns1__StartRecordingResponse(soap*, ...) allocate, set required members
/// - _ns1__StartRecordingResponse* soap_new_set__ns1__StartRecordingResponse(soap*, ...) allocate, set all public members
/// - _ns1__StartRecordingResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StartRecordingResponse(soap*, _ns1__StartRecordingResponse*) deserialize from a stream
/// - int soap_write__ns1__StartRecordingResponse(soap*, _ns1__StartRecordingResponse*) serialize to a stream
/// - _ns1__StartRecordingResponse* _ns1__StartRecordingResponse::soap_dup(soap*) returns deep copy of _ns1__StartRecordingResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StartRecordingResponse::soap_del() deep deletes _ns1__StartRecordingResponse data members, use only after _ns1__StartRecordingResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StartRecordingResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetPortalVersionRequest
/// <PRE><BLOCKQUOTE>
///   Portal Version Request
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetPortalVersionRequest is a complexType.
///
/// class _ns1__GetPortalVersionRequest operations:
/// - _ns1__GetPortalVersionRequest* soap_new__ns1__GetPortalVersionRequest(soap*) allocate
/// - _ns1__GetPortalVersionRequest* soap_new__ns1__GetPortalVersionRequest(soap*, int num) allocate array
/// - _ns1__GetPortalVersionRequest* soap_new_req__ns1__GetPortalVersionRequest(soap*, ...) allocate, set required members
/// - _ns1__GetPortalVersionRequest* soap_new_set__ns1__GetPortalVersionRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetPortalVersionRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetPortalVersionRequest(soap*, _ns1__GetPortalVersionRequest*) deserialize from a stream
/// - int soap_write__ns1__GetPortalVersionRequest(soap*, _ns1__GetPortalVersionRequest*) serialize to a stream
/// - _ns1__GetPortalVersionRequest* _ns1__GetPortalVersionRequest::soap_dup(soap*) returns deep copy of _ns1__GetPortalVersionRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPortalVersionRequest::soap_del() deep deletes _ns1__GetPortalVersionRequest data members, use only after _ns1__GetPortalVersionRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPortalVersionRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetPortalVersionResponse
/// <PRE><BLOCKQUOTE>
///   Portal Version Response
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetPortalVersionResponse is a complexType.
///
/// class _ns1__GetPortalVersionResponse operations:
/// - _ns1__GetPortalVersionResponse* soap_new__ns1__GetPortalVersionResponse(soap*) allocate
/// - _ns1__GetPortalVersionResponse* soap_new__ns1__GetPortalVersionResponse(soap*, int num) allocate array
/// - _ns1__GetPortalVersionResponse* soap_new_req__ns1__GetPortalVersionResponse(soap*, ...) allocate, set required members
/// - _ns1__GetPortalVersionResponse* soap_new_set__ns1__GetPortalVersionResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetPortalVersionResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetPortalVersionResponse(soap*, _ns1__GetPortalVersionResponse*) deserialize from a stream
/// - int soap_write__ns1__GetPortalVersionResponse(soap*, _ns1__GetPortalVersionResponse*) serialize to a stream
/// - _ns1__GetPortalVersionResponse* _ns1__GetPortalVersionResponse::soap_dup(soap*) returns deep copy of _ns1__GetPortalVersionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPortalVersionResponse::soap_del() deep deletes _ns1__GetPortalVersionResponse data members, use only after _ns1__GetPortalVersionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPortalVersionResponse
{ public:
/// Element "portalVersion" of XSD type xs:string.
    char*                                portalVersion                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":PauseRecordingRequest
/// <PRE><BLOCKQUOTE>
///   Request to pause the recording for a given participantID (Endpoint) in the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":PauseRecordingRequest is a complexType.
///
/// class _ns1__PauseRecordingRequest operations:
/// - _ns1__PauseRecordingRequest* soap_new__ns1__PauseRecordingRequest(soap*) allocate
/// - _ns1__PauseRecordingRequest* soap_new__ns1__PauseRecordingRequest(soap*, int num) allocate array
/// - _ns1__PauseRecordingRequest* soap_new_req__ns1__PauseRecordingRequest(soap*, ...) allocate, set required members
/// - _ns1__PauseRecordingRequest* soap_new_set__ns1__PauseRecordingRequest(soap*, ...) allocate, set all public members
/// - _ns1__PauseRecordingRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__PauseRecordingRequest(soap*, _ns1__PauseRecordingRequest*) deserialize from a stream
/// - int soap_write__ns1__PauseRecordingRequest(soap*, _ns1__PauseRecordingRequest*) serialize to a stream
/// - _ns1__PauseRecordingRequest* _ns1__PauseRecordingRequest::soap_dup(soap*) returns deep copy of _ns1__PauseRecordingRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__PauseRecordingRequest::soap_del() deep deletes _ns1__PauseRecordingRequest data members, use only after _ns1__PauseRecordingRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__PauseRecordingRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "recorderID" of XSD type xs:int.
    int                                  recorderID                     1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":PauseRecordingResponse
/// @brief "http://portal.vidyo.com/user/v1_1":PauseRecordingResponse is a complexType.
///
/// class _ns1__PauseRecordingResponse operations:
/// - _ns1__PauseRecordingResponse* soap_new__ns1__PauseRecordingResponse(soap*) allocate
/// - _ns1__PauseRecordingResponse* soap_new__ns1__PauseRecordingResponse(soap*, int num) allocate array
/// - _ns1__PauseRecordingResponse* soap_new_req__ns1__PauseRecordingResponse(soap*, ...) allocate, set required members
/// - _ns1__PauseRecordingResponse* soap_new_set__ns1__PauseRecordingResponse(soap*, ...) allocate, set all public members
/// - _ns1__PauseRecordingResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__PauseRecordingResponse(soap*, _ns1__PauseRecordingResponse*) deserialize from a stream
/// - int soap_write__ns1__PauseRecordingResponse(soap*, _ns1__PauseRecordingResponse*) serialize to a stream
/// - _ns1__PauseRecordingResponse* _ns1__PauseRecordingResponse::soap_dup(soap*) returns deep copy of _ns1__PauseRecordingResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__PauseRecordingResponse::soap_del() deep deletes _ns1__PauseRecordingResponse data members, use only after _ns1__PauseRecordingResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__PauseRecordingResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":ResumeRecordingRequest
/// <PRE><BLOCKQUOTE>
///   Request to resume the recording for a given participantID (Endpoint) in the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":ResumeRecordingRequest is a complexType.
///
/// class _ns1__ResumeRecordingRequest operations:
/// - _ns1__ResumeRecordingRequest* soap_new__ns1__ResumeRecordingRequest(soap*) allocate
/// - _ns1__ResumeRecordingRequest* soap_new__ns1__ResumeRecordingRequest(soap*, int num) allocate array
/// - _ns1__ResumeRecordingRequest* soap_new_req__ns1__ResumeRecordingRequest(soap*, ...) allocate, set required members
/// - _ns1__ResumeRecordingRequest* soap_new_set__ns1__ResumeRecordingRequest(soap*, ...) allocate, set all public members
/// - _ns1__ResumeRecordingRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ResumeRecordingRequest(soap*, _ns1__ResumeRecordingRequest*) deserialize from a stream
/// - int soap_write__ns1__ResumeRecordingRequest(soap*, _ns1__ResumeRecordingRequest*) serialize to a stream
/// - _ns1__ResumeRecordingRequest* _ns1__ResumeRecordingRequest::soap_dup(soap*) returns deep copy of _ns1__ResumeRecordingRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ResumeRecordingRequest::soap_del() deep deletes _ns1__ResumeRecordingRequest data members, use only after _ns1__ResumeRecordingRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ResumeRecordingRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "recorderID" of XSD type xs:int.
    int                                  recorderID                     1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":ResumeRecordingResponse
/// @brief "http://portal.vidyo.com/user/v1_1":ResumeRecordingResponse is a complexType.
///
/// class _ns1__ResumeRecordingResponse operations:
/// - _ns1__ResumeRecordingResponse* soap_new__ns1__ResumeRecordingResponse(soap*) allocate
/// - _ns1__ResumeRecordingResponse* soap_new__ns1__ResumeRecordingResponse(soap*, int num) allocate array
/// - _ns1__ResumeRecordingResponse* soap_new_req__ns1__ResumeRecordingResponse(soap*, ...) allocate, set required members
/// - _ns1__ResumeRecordingResponse* soap_new_set__ns1__ResumeRecordingResponse(soap*, ...) allocate, set all public members
/// - _ns1__ResumeRecordingResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ResumeRecordingResponse(soap*, _ns1__ResumeRecordingResponse*) deserialize from a stream
/// - int soap_write__ns1__ResumeRecordingResponse(soap*, _ns1__ResumeRecordingResponse*) serialize to a stream
/// - _ns1__ResumeRecordingResponse* _ns1__ResumeRecordingResponse::soap_dup(soap*) returns deep copy of _ns1__ResumeRecordingResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ResumeRecordingResponse::soap_del() deep deletes _ns1__ResumeRecordingResponse data members, use only after _ns1__ResumeRecordingResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ResumeRecordingResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StopRecordingRequest
/// <PRE><BLOCKQUOTE>
///   Request to stop the recording for a given participantID (Endpoint) in the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":StopRecordingRequest is a complexType.
///
/// class _ns1__StopRecordingRequest operations:
/// - _ns1__StopRecordingRequest* soap_new__ns1__StopRecordingRequest(soap*) allocate
/// - _ns1__StopRecordingRequest* soap_new__ns1__StopRecordingRequest(soap*, int num) allocate array
/// - _ns1__StopRecordingRequest* soap_new_req__ns1__StopRecordingRequest(soap*, ...) allocate, set required members
/// - _ns1__StopRecordingRequest* soap_new_set__ns1__StopRecordingRequest(soap*, ...) allocate, set all public members
/// - _ns1__StopRecordingRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StopRecordingRequest(soap*, _ns1__StopRecordingRequest*) deserialize from a stream
/// - int soap_write__ns1__StopRecordingRequest(soap*, _ns1__StopRecordingRequest*) serialize to a stream
/// - _ns1__StopRecordingRequest* _ns1__StopRecordingRequest::soap_dup(soap*) returns deep copy of _ns1__StopRecordingRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StopRecordingRequest::soap_del() deep deletes _ns1__StopRecordingRequest data members, use only after _ns1__StopRecordingRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StopRecordingRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "recorderID" of XSD type xs:int.
    int                                  recorderID                     1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StopRecordingResponse
/// @brief "http://portal.vidyo.com/user/v1_1":StopRecordingResponse is a complexType.
///
/// class _ns1__StopRecordingResponse operations:
/// - _ns1__StopRecordingResponse* soap_new__ns1__StopRecordingResponse(soap*) allocate
/// - _ns1__StopRecordingResponse* soap_new__ns1__StopRecordingResponse(soap*, int num) allocate array
/// - _ns1__StopRecordingResponse* soap_new_req__ns1__StopRecordingResponse(soap*, ...) allocate, set required members
/// - _ns1__StopRecordingResponse* soap_new_set__ns1__StopRecordingResponse(soap*, ...) allocate, set all public members
/// - _ns1__StopRecordingResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StopRecordingResponse(soap*, _ns1__StopRecordingResponse*) deserialize from a stream
/// - int soap_write__ns1__StopRecordingResponse(soap*, _ns1__StopRecordingResponse*) serialize to a stream
/// - _ns1__StopRecordingResponse* _ns1__StopRecordingResponse::soap_dup(soap*) returns deep copy of _ns1__StopRecordingResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StopRecordingResponse::soap_del() deep deletes _ns1__StopRecordingResponse data members, use only after _ns1__StopRecordingResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StopRecordingResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateWebcastURLRequest
/// <PRE><BLOCKQUOTE>
///   Request to create a URL for a Webcast
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":CreateWebcastURLRequest is a complexType.
///
/// class _ns1__CreateWebcastURLRequest operations:
/// - _ns1__CreateWebcastURLRequest* soap_new__ns1__CreateWebcastURLRequest(soap*) allocate
/// - _ns1__CreateWebcastURLRequest* soap_new__ns1__CreateWebcastURLRequest(soap*, int num) allocate array
/// - _ns1__CreateWebcastURLRequest* soap_new_req__ns1__CreateWebcastURLRequest(soap*, ...) allocate, set required members
/// - _ns1__CreateWebcastURLRequest* soap_new_set__ns1__CreateWebcastURLRequest(soap*, ...) allocate, set all public members
/// - _ns1__CreateWebcastURLRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateWebcastURLRequest(soap*, _ns1__CreateWebcastURLRequest*) deserialize from a stream
/// - int soap_write__ns1__CreateWebcastURLRequest(soap*, _ns1__CreateWebcastURLRequest*) serialize to a stream
/// - _ns1__CreateWebcastURLRequest* _ns1__CreateWebcastURLRequest::soap_dup(soap*) returns deep copy of _ns1__CreateWebcastURLRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateWebcastURLRequest::soap_del() deep deletes _ns1__CreateWebcastURLRequest data members, use only after _ns1__CreateWebcastURLRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateWebcastURLRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateWebcastURLResponse
/// @brief "http://portal.vidyo.com/user/v1_1":CreateWebcastURLResponse is a complexType.
///
/// class _ns1__CreateWebcastURLResponse operations:
/// - _ns1__CreateWebcastURLResponse* soap_new__ns1__CreateWebcastURLResponse(soap*) allocate
/// - _ns1__CreateWebcastURLResponse* soap_new__ns1__CreateWebcastURLResponse(soap*, int num) allocate array
/// - _ns1__CreateWebcastURLResponse* soap_new_req__ns1__CreateWebcastURLResponse(soap*, ...) allocate, set required members
/// - _ns1__CreateWebcastURLResponse* soap_new_set__ns1__CreateWebcastURLResponse(soap*, ...) allocate, set all public members
/// - _ns1__CreateWebcastURLResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateWebcastURLResponse(soap*, _ns1__CreateWebcastURLResponse*) deserialize from a stream
/// - int soap_write__ns1__CreateWebcastURLResponse(soap*, _ns1__CreateWebcastURLResponse*) serialize to a stream
/// - _ns1__CreateWebcastURLResponse* _ns1__CreateWebcastURLResponse::soap_dup(soap*) returns deep copy of _ns1__CreateWebcastURLResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateWebcastURLResponse::soap_del() deep deletes _ns1__CreateWebcastURLResponse data members, use only after _ns1__CreateWebcastURLResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateWebcastURLResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateWebcastPINRequest
/// <PRE><BLOCKQUOTE>
///   Request to create a PIN for a Webcast
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":CreateWebcastPINRequest is a complexType.
///
/// class _ns1__CreateWebcastPINRequest operations:
/// - _ns1__CreateWebcastPINRequest* soap_new__ns1__CreateWebcastPINRequest(soap*) allocate
/// - _ns1__CreateWebcastPINRequest* soap_new__ns1__CreateWebcastPINRequest(soap*, int num) allocate array
/// - _ns1__CreateWebcastPINRequest* soap_new_req__ns1__CreateWebcastPINRequest(soap*, ...) allocate, set required members
/// - _ns1__CreateWebcastPINRequest* soap_new_set__ns1__CreateWebcastPINRequest(soap*, ...) allocate, set all public members
/// - _ns1__CreateWebcastPINRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateWebcastPINRequest(soap*, _ns1__CreateWebcastPINRequest*) deserialize from a stream
/// - int soap_write__ns1__CreateWebcastPINRequest(soap*, _ns1__CreateWebcastPINRequest*) serialize to a stream
/// - _ns1__CreateWebcastPINRequest* _ns1__CreateWebcastPINRequest::soap_dup(soap*) returns deep copy of _ns1__CreateWebcastPINRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateWebcastPINRequest::soap_del() deep deletes _ns1__CreateWebcastPINRequest data members, use only after _ns1__CreateWebcastPINRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateWebcastPINRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// Element "PIN" of XSD type xs:string.
    char*                                PIN                            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateWebcastPINResponse
/// @brief "http://portal.vidyo.com/user/v1_1":CreateWebcastPINResponse is a complexType.
///
/// class _ns1__CreateWebcastPINResponse operations:
/// - _ns1__CreateWebcastPINResponse* soap_new__ns1__CreateWebcastPINResponse(soap*) allocate
/// - _ns1__CreateWebcastPINResponse* soap_new__ns1__CreateWebcastPINResponse(soap*, int num) allocate array
/// - _ns1__CreateWebcastPINResponse* soap_new_req__ns1__CreateWebcastPINResponse(soap*, ...) allocate, set required members
/// - _ns1__CreateWebcastPINResponse* soap_new_set__ns1__CreateWebcastPINResponse(soap*, ...) allocate, set all public members
/// - _ns1__CreateWebcastPINResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateWebcastPINResponse(soap*, _ns1__CreateWebcastPINResponse*) deserialize from a stream
/// - int soap_write__ns1__CreateWebcastPINResponse(soap*, _ns1__CreateWebcastPINResponse*) serialize to a stream
/// - _ns1__CreateWebcastPINResponse* _ns1__CreateWebcastPINResponse::soap_dup(soap*) returns deep copy of _ns1__CreateWebcastPINResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateWebcastPINResponse::soap_del() deep deletes _ns1__CreateWebcastPINResponse data members, use only after _ns1__CreateWebcastPINResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateWebcastPINResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveWebcastURLRequest
/// <PRE><BLOCKQUOTE>
///   Request to remove Webcast URL for a Room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveWebcastURLRequest is a complexType.
///
/// class _ns1__RemoveWebcastURLRequest operations:
/// - _ns1__RemoveWebcastURLRequest* soap_new__ns1__RemoveWebcastURLRequest(soap*) allocate
/// - _ns1__RemoveWebcastURLRequest* soap_new__ns1__RemoveWebcastURLRequest(soap*, int num) allocate array
/// - _ns1__RemoveWebcastURLRequest* soap_new_req__ns1__RemoveWebcastURLRequest(soap*, ...) allocate, set required members
/// - _ns1__RemoveWebcastURLRequest* soap_new_set__ns1__RemoveWebcastURLRequest(soap*, ...) allocate, set all public members
/// - _ns1__RemoveWebcastURLRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveWebcastURLRequest(soap*, _ns1__RemoveWebcastURLRequest*) deserialize from a stream
/// - int soap_write__ns1__RemoveWebcastURLRequest(soap*, _ns1__RemoveWebcastURLRequest*) serialize to a stream
/// - _ns1__RemoveWebcastURLRequest* _ns1__RemoveWebcastURLRequest::soap_dup(soap*) returns deep copy of _ns1__RemoveWebcastURLRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveWebcastURLRequest::soap_del() deep deletes _ns1__RemoveWebcastURLRequest data members, use only after _ns1__RemoveWebcastURLRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveWebcastURLRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveWebcastURLResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveWebcastURLResponse is a complexType.
///
/// class _ns1__RemoveWebcastURLResponse operations:
/// - _ns1__RemoveWebcastURLResponse* soap_new__ns1__RemoveWebcastURLResponse(soap*) allocate
/// - _ns1__RemoveWebcastURLResponse* soap_new__ns1__RemoveWebcastURLResponse(soap*, int num) allocate array
/// - _ns1__RemoveWebcastURLResponse* soap_new_req__ns1__RemoveWebcastURLResponse(soap*, ...) allocate, set required members
/// - _ns1__RemoveWebcastURLResponse* soap_new_set__ns1__RemoveWebcastURLResponse(soap*, ...) allocate, set all public members
/// - _ns1__RemoveWebcastURLResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveWebcastURLResponse(soap*, _ns1__RemoveWebcastURLResponse*) deserialize from a stream
/// - int soap_write__ns1__RemoveWebcastURLResponse(soap*, _ns1__RemoveWebcastURLResponse*) serialize to a stream
/// - _ns1__RemoveWebcastURLResponse* _ns1__RemoveWebcastURLResponse::soap_dup(soap*) returns deep copy of _ns1__RemoveWebcastURLResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveWebcastURLResponse::soap_del() deep deletes _ns1__RemoveWebcastURLResponse data members, use only after _ns1__RemoveWebcastURLResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveWebcastURLResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveWebcastPINRequest
/// <PRE><BLOCKQUOTE>
///   Request to remove PIN for a Webcast
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveWebcastPINRequest is a complexType.
///
/// class _ns1__RemoveWebcastPINRequest operations:
/// - _ns1__RemoveWebcastPINRequest* soap_new__ns1__RemoveWebcastPINRequest(soap*) allocate
/// - _ns1__RemoveWebcastPINRequest* soap_new__ns1__RemoveWebcastPINRequest(soap*, int num) allocate array
/// - _ns1__RemoveWebcastPINRequest* soap_new_req__ns1__RemoveWebcastPINRequest(soap*, ...) allocate, set required members
/// - _ns1__RemoveWebcastPINRequest* soap_new_set__ns1__RemoveWebcastPINRequest(soap*, ...) allocate, set all public members
/// - _ns1__RemoveWebcastPINRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveWebcastPINRequest(soap*, _ns1__RemoveWebcastPINRequest*) deserialize from a stream
/// - int soap_write__ns1__RemoveWebcastPINRequest(soap*, _ns1__RemoveWebcastPINRequest*) serialize to a stream
/// - _ns1__RemoveWebcastPINRequest* _ns1__RemoveWebcastPINRequest::soap_dup(soap*) returns deep copy of _ns1__RemoveWebcastPINRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveWebcastPINRequest::soap_del() deep deletes _ns1__RemoveWebcastPINRequest data members, use only after _ns1__RemoveWebcastPINRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveWebcastPINRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveWebcastPINResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveWebcastPINResponse is a complexType.
///
/// class _ns1__RemoveWebcastPINResponse operations:
/// - _ns1__RemoveWebcastPINResponse* soap_new__ns1__RemoveWebcastPINResponse(soap*) allocate
/// - _ns1__RemoveWebcastPINResponse* soap_new__ns1__RemoveWebcastPINResponse(soap*, int num) allocate array
/// - _ns1__RemoveWebcastPINResponse* soap_new_req__ns1__RemoveWebcastPINResponse(soap*, ...) allocate, set required members
/// - _ns1__RemoveWebcastPINResponse* soap_new_set__ns1__RemoveWebcastPINResponse(soap*, ...) allocate, set all public members
/// - _ns1__RemoveWebcastPINResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveWebcastPINResponse(soap*, _ns1__RemoveWebcastPINResponse*) deserialize from a stream
/// - int soap_write__ns1__RemoveWebcastPINResponse(soap*, _ns1__RemoveWebcastPINResponse*) serialize to a stream
/// - _ns1__RemoveWebcastPINResponse* _ns1__RemoveWebcastPINResponse::soap_dup(soap*) returns deep copy of _ns1__RemoveWebcastPINResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveWebcastPINResponse::soap_del() deep deletes _ns1__RemoveWebcastPINResponse data members, use only after _ns1__RemoveWebcastPINResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveWebcastPINResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetWebcastURLRequest
/// <PRE><BLOCKQUOTE>
///   Request to get the Webcast URL and PIN Indicator for a Room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetWebcastURLRequest is a complexType.
///
/// class _ns1__GetWebcastURLRequest operations:
/// - _ns1__GetWebcastURLRequest* soap_new__ns1__GetWebcastURLRequest(soap*) allocate
/// - _ns1__GetWebcastURLRequest* soap_new__ns1__GetWebcastURLRequest(soap*, int num) allocate array
/// - _ns1__GetWebcastURLRequest* soap_new_req__ns1__GetWebcastURLRequest(soap*, ...) allocate, set required members
/// - _ns1__GetWebcastURLRequest* soap_new_set__ns1__GetWebcastURLRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetWebcastURLRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetWebcastURLRequest(soap*, _ns1__GetWebcastURLRequest*) deserialize from a stream
/// - int soap_write__ns1__GetWebcastURLRequest(soap*, _ns1__GetWebcastURLRequest*) serialize to a stream
/// - _ns1__GetWebcastURLRequest* _ns1__GetWebcastURLRequest::soap_dup(soap*) returns deep copy of _ns1__GetWebcastURLRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetWebcastURLRequest::soap_del() deep deletes _ns1__GetWebcastURLRequest data members, use only after _ns1__GetWebcastURLRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetWebcastURLRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetWebcastURLResponse
/// <PRE><BLOCKQUOTE>
///   Response containing the Webcast URL and PIN Indicator for a Room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetWebcastURLResponse is a complexType.
///
/// class _ns1__GetWebcastURLResponse operations:
/// - _ns1__GetWebcastURLResponse* soap_new__ns1__GetWebcastURLResponse(soap*) allocate
/// - _ns1__GetWebcastURLResponse* soap_new__ns1__GetWebcastURLResponse(soap*, int num) allocate array
/// - _ns1__GetWebcastURLResponse* soap_new_req__ns1__GetWebcastURLResponse(soap*, ...) allocate, set required members
/// - _ns1__GetWebcastURLResponse* soap_new_set__ns1__GetWebcastURLResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetWebcastURLResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetWebcastURLResponse(soap*, _ns1__GetWebcastURLResponse*) deserialize from a stream
/// - int soap_write__ns1__GetWebcastURLResponse(soap*, _ns1__GetWebcastURLResponse*) serialize to a stream
/// - _ns1__GetWebcastURLResponse* _ns1__GetWebcastURLResponse::soap_dup(soap*) returns deep copy of _ns1__GetWebcastURLResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetWebcastURLResponse::soap_del() deep deletes _ns1__GetWebcastURLResponse data members, use only after _ns1__GetWebcastURLResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetWebcastURLResponse
{ public:
/// Element "webCastURL" of XSD type xs:string.
    char*                                webCastURL                     0;	///< Optional element.
/// Element "hasWebCastPIN" of XSD type xs:boolean.
    bool*                                hasWebCastPIN                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetUserNameRequest
/// <PRE><BLOCKQUOTE>
///   Get a real username as was created by admin and saved in DB. User identified in Http Authentication header
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetUserNameRequest is a complexType.
///
/// class _ns1__GetUserNameRequest operations:
/// - _ns1__GetUserNameRequest* soap_new__ns1__GetUserNameRequest(soap*) allocate
/// - _ns1__GetUserNameRequest* soap_new__ns1__GetUserNameRequest(soap*, int num) allocate array
/// - _ns1__GetUserNameRequest* soap_new_req__ns1__GetUserNameRequest(soap*, ...) allocate, set required members
/// - _ns1__GetUserNameRequest* soap_new_set__ns1__GetUserNameRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetUserNameRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetUserNameRequest(soap*, _ns1__GetUserNameRequest*) deserialize from a stream
/// - int soap_write__ns1__GetUserNameRequest(soap*, _ns1__GetUserNameRequest*) serialize to a stream
/// - _ns1__GetUserNameRequest* _ns1__GetUserNameRequest::soap_dup(soap*) returns deep copy of _ns1__GetUserNameRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUserNameRequest::soap_del() deep deletes _ns1__GetUserNameRequest data members, use only after _ns1__GetUserNameRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUserNameRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetUserNameResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetUserNameResponse is a complexType.
///
/// class _ns1__GetUserNameResponse operations:
/// - _ns1__GetUserNameResponse* soap_new__ns1__GetUserNameResponse(soap*) allocate
/// - _ns1__GetUserNameResponse* soap_new__ns1__GetUserNameResponse(soap*, int num) allocate array
/// - _ns1__GetUserNameResponse* soap_new_req__ns1__GetUserNameResponse(soap*, ...) allocate, set required members
/// - _ns1__GetUserNameResponse* soap_new_set__ns1__GetUserNameResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetUserNameResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetUserNameResponse(soap*, _ns1__GetUserNameResponse*) deserialize from a stream
/// - int soap_write__ns1__GetUserNameResponse(soap*, _ns1__GetUserNameResponse*) serialize to a stream
/// - _ns1__GetUserNameResponse* _ns1__GetUserNameResponse::soap_dup(soap*) returns deep copy of _ns1__GetUserNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetUserNameResponse::soap_del() deep deletes _ns1__GetUserNameResponse data members, use only after _ns1__GetUserNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetUserNameResponse
{ public:
/// Element "realUserName" of XSD type xs:string.
    char*                                realUserName                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetEntityByRoomKeyRequest
/// <PRE><BLOCKQUOTE>
///   Get an entity by roomKey provided in guest URL
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetEntityByRoomKeyRequest is a complexType.
///
/// class _ns1__GetEntityByRoomKeyRequest operations:
/// - _ns1__GetEntityByRoomKeyRequest* soap_new__ns1__GetEntityByRoomKeyRequest(soap*) allocate
/// - _ns1__GetEntityByRoomKeyRequest* soap_new__ns1__GetEntityByRoomKeyRequest(soap*, int num) allocate array
/// - _ns1__GetEntityByRoomKeyRequest* soap_new_req__ns1__GetEntityByRoomKeyRequest(soap*, ...) allocate, set required members
/// - _ns1__GetEntityByRoomKeyRequest* soap_new_set__ns1__GetEntityByRoomKeyRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetEntityByRoomKeyRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetEntityByRoomKeyRequest(soap*, _ns1__GetEntityByRoomKeyRequest*) deserialize from a stream
/// - int soap_write__ns1__GetEntityByRoomKeyRequest(soap*, _ns1__GetEntityByRoomKeyRequest*) serialize to a stream
/// - _ns1__GetEntityByRoomKeyRequest* _ns1__GetEntityByRoomKeyRequest::soap_dup(soap*) returns deep copy of _ns1__GetEntityByRoomKeyRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetEntityByRoomKeyRequest::soap_del() deep deletes _ns1__GetEntityByRoomKeyRequest data members, use only after _ns1__GetEntityByRoomKeyRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetEntityByRoomKeyRequest
{ public:
/// Element "roomKey" of XSD type xs:string.
    char*                                roomKey                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetEntityByRoomKeyResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetEntityByRoomKeyResponse is a complexType.
///
/// class _ns1__GetEntityByRoomKeyResponse operations:
/// - _ns1__GetEntityByRoomKeyResponse* soap_new__ns1__GetEntityByRoomKeyResponse(soap*) allocate
/// - _ns1__GetEntityByRoomKeyResponse* soap_new__ns1__GetEntityByRoomKeyResponse(soap*, int num) allocate array
/// - _ns1__GetEntityByRoomKeyResponse* soap_new_req__ns1__GetEntityByRoomKeyResponse(soap*, ...) allocate, set required members
/// - _ns1__GetEntityByRoomKeyResponse* soap_new_set__ns1__GetEntityByRoomKeyResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetEntityByRoomKeyResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetEntityByRoomKeyResponse(soap*, _ns1__GetEntityByRoomKeyResponse*) deserialize from a stream
/// - int soap_write__ns1__GetEntityByRoomKeyResponse(soap*, _ns1__GetEntityByRoomKeyResponse*) serialize to a stream
/// - _ns1__GetEntityByRoomKeyResponse* _ns1__GetEntityByRoomKeyResponse::soap_dup(soap*) returns deep copy of _ns1__GetEntityByRoomKeyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetEntityByRoomKeyResponse::soap_del() deep deletes _ns1__GetEntityByRoomKeyResponse data members, use only after _ns1__GetEntityByRoomKeyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetEntityByRoomKeyResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   This object is returned as a result of search for member, public room, or legacy device.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":Entity.
    _ns1__Entity*                        Entity                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetInviteContentRequest
/// <PRE><BLOCKQUOTE>
///   Get an invite content for email message for specific room.
///   - roomID is optional parameter.
///   In case of roomID not provided - invitation content will be generated for personal room of user.
///   User identified in Http Authentication header
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetInviteContentRequest is a complexType.
///
/// class _ns1__GetInviteContentRequest operations:
/// - _ns1__GetInviteContentRequest* soap_new__ns1__GetInviteContentRequest(soap*) allocate
/// - _ns1__GetInviteContentRequest* soap_new__ns1__GetInviteContentRequest(soap*, int num) allocate array
/// - _ns1__GetInviteContentRequest* soap_new_req__ns1__GetInviteContentRequest(soap*, ...) allocate, set required members
/// - _ns1__GetInviteContentRequest* soap_new_set__ns1__GetInviteContentRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetInviteContentRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetInviteContentRequest(soap*, _ns1__GetInviteContentRequest*) deserialize from a stream
/// - int soap_write__ns1__GetInviteContentRequest(soap*, _ns1__GetInviteContentRequest*) serialize to a stream
/// - _ns1__GetInviteContentRequest* _ns1__GetInviteContentRequest::soap_dup(soap*) returns deep copy of _ns1__GetInviteContentRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetInviteContentRequest::soap_del() deep deletes _ns1__GetInviteContentRequest data members, use only after _ns1__GetInviteContentRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetInviteContentRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetInviteContentResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetInviteContentResponse is a complexType.
///
/// class _ns1__GetInviteContentResponse operations:
/// - _ns1__GetInviteContentResponse* soap_new__ns1__GetInviteContentResponse(soap*) allocate
/// - _ns1__GetInviteContentResponse* soap_new__ns1__GetInviteContentResponse(soap*, int num) allocate array
/// - _ns1__GetInviteContentResponse* soap_new_req__ns1__GetInviteContentResponse(soap*, ...) allocate, set required members
/// - _ns1__GetInviteContentResponse* soap_new_set__ns1__GetInviteContentResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetInviteContentResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetInviteContentResponse(soap*, _ns1__GetInviteContentResponse*) deserialize from a stream
/// - int soap_write__ns1__GetInviteContentResponse(soap*, _ns1__GetInviteContentResponse*) serialize to a stream
/// - _ns1__GetInviteContentResponse* _ns1__GetInviteContentResponse::soap_dup(soap*) returns deep copy of _ns1__GetInviteContentResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetInviteContentResponse::soap_del() deep deletes _ns1__GetInviteContentResponse data members, use only after _ns1__GetInviteContentResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetInviteContentResponse
{ public:
/// Element "content" of XSD type xs:string.
    char*                                content                        1;	///< Required element.
/// Element "subject" of XSD type xs:string.
    char*                                subject                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetRoomProfilesResponse
/// <PRE><BLOCKQUOTE>
///   Room Profiles Response
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetRoomProfilesResponse is a complexType.
///
/// class _ns1__GetRoomProfilesResponse operations:
/// - _ns1__GetRoomProfilesResponse* soap_new__ns1__GetRoomProfilesResponse(soap*) allocate
/// - _ns1__GetRoomProfilesResponse* soap_new__ns1__GetRoomProfilesResponse(soap*, int num) allocate array
/// - _ns1__GetRoomProfilesResponse* soap_new_req__ns1__GetRoomProfilesResponse(soap*, ...) allocate, set required members
/// - _ns1__GetRoomProfilesResponse* soap_new_set__ns1__GetRoomProfilesResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetRoomProfilesResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetRoomProfilesResponse(soap*, _ns1__GetRoomProfilesResponse*) deserialize from a stream
/// - int soap_write__ns1__GetRoomProfilesResponse(soap*, _ns1__GetRoomProfilesResponse*) serialize to a stream
/// - _ns1__GetRoomProfilesResponse* _ns1__GetRoomProfilesResponse::soap_dup(soap*) returns deep copy of _ns1__GetRoomProfilesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetRoomProfilesResponse::soap_del() deep deletes _ns1__GetRoomProfilesResponse data members, use only after _ns1__GetRoomProfilesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetRoomProfilesResponse
{ public:
/// Element "total" of XSD type xs:int.
    int                                  total                          1;	///< Required element.
/// Size of array of ns1__RoomProfile* is 0..unbounded.
   $int                                  __sizeroomProfile              0;
/// Pointer to array ns1__RoomProfile* of size 0..unbounded.
    ns1__RoomProfile*                   *roomProfile                    0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetRoomProfileRequest
/// <PRE><BLOCKQUOTE>
///   Request to get a Profile for a room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetRoomProfileRequest is a complexType.
///
/// class _ns1__GetRoomProfileRequest operations:
/// - _ns1__GetRoomProfileRequest* soap_new__ns1__GetRoomProfileRequest(soap*) allocate
/// - _ns1__GetRoomProfileRequest* soap_new__ns1__GetRoomProfileRequest(soap*, int num) allocate array
/// - _ns1__GetRoomProfileRequest* soap_new_req__ns1__GetRoomProfileRequest(soap*, ...) allocate, set required members
/// - _ns1__GetRoomProfileRequest* soap_new_set__ns1__GetRoomProfileRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetRoomProfileRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetRoomProfileRequest(soap*, _ns1__GetRoomProfileRequest*) deserialize from a stream
/// - int soap_write__ns1__GetRoomProfileRequest(soap*, _ns1__GetRoomProfileRequest*) serialize to a stream
/// - _ns1__GetRoomProfileRequest* _ns1__GetRoomProfileRequest::soap_dup(soap*) returns deep copy of _ns1__GetRoomProfileRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetRoomProfileRequest::soap_del() deep deletes _ns1__GetRoomProfileRequest data members, use only after _ns1__GetRoomProfileRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetRoomProfileRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetRoomProfileResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetRoomProfileResponse is a complexType.
///
/// class _ns1__GetRoomProfileResponse operations:
/// - _ns1__GetRoomProfileResponse* soap_new__ns1__GetRoomProfileResponse(soap*) allocate
/// - _ns1__GetRoomProfileResponse* soap_new__ns1__GetRoomProfileResponse(soap*, int num) allocate array
/// - _ns1__GetRoomProfileResponse* soap_new_req__ns1__GetRoomProfileResponse(soap*, ...) allocate, set required members
/// - _ns1__GetRoomProfileResponse* soap_new_set__ns1__GetRoomProfileResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetRoomProfileResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetRoomProfileResponse(soap*, _ns1__GetRoomProfileResponse*) deserialize from a stream
/// - int soap_write__ns1__GetRoomProfileResponse(soap*, _ns1__GetRoomProfileResponse*) serialize to a stream
/// - _ns1__GetRoomProfileResponse* _ns1__GetRoomProfileResponse::soap_dup(soap*) returns deep copy of _ns1__GetRoomProfileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetRoomProfileResponse::soap_del() deep deletes _ns1__GetRoomProfileResponse data members, use only after _ns1__GetRoomProfileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetRoomProfileResponse
{ public:
/// Element "roomProfile" of XSD type "http://portal.vidyo.com/user/v1_1":RoomProfile.
    ns1__RoomProfile*                    roomProfile                    1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SetRoomProfileRequest
/// <PRE><BLOCKQUOTE>
///   Request to set a Profile for a room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":SetRoomProfileRequest is a complexType.
///
/// class _ns1__SetRoomProfileRequest operations:
/// - _ns1__SetRoomProfileRequest* soap_new__ns1__SetRoomProfileRequest(soap*) allocate
/// - _ns1__SetRoomProfileRequest* soap_new__ns1__SetRoomProfileRequest(soap*, int num) allocate array
/// - _ns1__SetRoomProfileRequest* soap_new_req__ns1__SetRoomProfileRequest(soap*, ...) allocate, set required members
/// - _ns1__SetRoomProfileRequest* soap_new_set__ns1__SetRoomProfileRequest(soap*, ...) allocate, set all public members
/// - _ns1__SetRoomProfileRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SetRoomProfileRequest(soap*, _ns1__SetRoomProfileRequest*) deserialize from a stream
/// - int soap_write__ns1__SetRoomProfileRequest(soap*, _ns1__SetRoomProfileRequest*) serialize to a stream
/// - _ns1__SetRoomProfileRequest* _ns1__SetRoomProfileRequest::soap_dup(soap*) returns deep copy of _ns1__SetRoomProfileRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetRoomProfileRequest::soap_del() deep deletes _ns1__SetRoomProfileRequest data members, use only after _ns1__SetRoomProfileRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetRoomProfileRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// Element "roomProfileName" of XSD type xs:string.
    char*                                roomProfileName                1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SetRoomProfileResponse
/// @brief "http://portal.vidyo.com/user/v1_1":SetRoomProfileResponse is a complexType.
///
/// class _ns1__SetRoomProfileResponse operations:
/// - _ns1__SetRoomProfileResponse* soap_new__ns1__SetRoomProfileResponse(soap*) allocate
/// - _ns1__SetRoomProfileResponse* soap_new__ns1__SetRoomProfileResponse(soap*, int num) allocate array
/// - _ns1__SetRoomProfileResponse* soap_new_req__ns1__SetRoomProfileResponse(soap*, ...) allocate, set required members
/// - _ns1__SetRoomProfileResponse* soap_new_set__ns1__SetRoomProfileResponse(soap*, ...) allocate, set all public members
/// - _ns1__SetRoomProfileResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SetRoomProfileResponse(soap*, _ns1__SetRoomProfileResponse*) deserialize from a stream
/// - int soap_write__ns1__SetRoomProfileResponse(soap*, _ns1__SetRoomProfileResponse*) serialize to a stream
/// - _ns1__SetRoomProfileResponse* _ns1__SetRoomProfileResponse::soap_dup(soap*) returns deep copy of _ns1__SetRoomProfileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetRoomProfileResponse::soap_del() deep deletes _ns1__SetRoomProfileResponse data members, use only after _ns1__SetRoomProfileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetRoomProfileResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveRoomProfileRequest
/// <PRE><BLOCKQUOTE>
///   Request to remove RoomProfile for a room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveRoomProfileRequest is a complexType.
///
/// class _ns1__RemoveRoomProfileRequest operations:
/// - _ns1__RemoveRoomProfileRequest* soap_new__ns1__RemoveRoomProfileRequest(soap*) allocate
/// - _ns1__RemoveRoomProfileRequest* soap_new__ns1__RemoveRoomProfileRequest(soap*, int num) allocate array
/// - _ns1__RemoveRoomProfileRequest* soap_new_req__ns1__RemoveRoomProfileRequest(soap*, ...) allocate, set required members
/// - _ns1__RemoveRoomProfileRequest* soap_new_set__ns1__RemoveRoomProfileRequest(soap*, ...) allocate, set all public members
/// - _ns1__RemoveRoomProfileRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveRoomProfileRequest(soap*, _ns1__RemoveRoomProfileRequest*) deserialize from a stream
/// - int soap_write__ns1__RemoveRoomProfileRequest(soap*, _ns1__RemoveRoomProfileRequest*) serialize to a stream
/// - _ns1__RemoveRoomProfileRequest* _ns1__RemoveRoomProfileRequest::soap_dup(soap*) returns deep copy of _ns1__RemoveRoomProfileRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveRoomProfileRequest::soap_del() deep deletes _ns1__RemoveRoomProfileRequest data members, use only after _ns1__RemoveRoomProfileRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveRoomProfileRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveRoomProfileResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveRoomProfileResponse is a complexType.
///
/// class _ns1__RemoveRoomProfileResponse operations:
/// - _ns1__RemoveRoomProfileResponse* soap_new__ns1__RemoveRoomProfileResponse(soap*) allocate
/// - _ns1__RemoveRoomProfileResponse* soap_new__ns1__RemoveRoomProfileResponse(soap*, int num) allocate array
/// - _ns1__RemoveRoomProfileResponse* soap_new_req__ns1__RemoveRoomProfileResponse(soap*, ...) allocate, set required members
/// - _ns1__RemoveRoomProfileResponse* soap_new_set__ns1__RemoveRoomProfileResponse(soap*, ...) allocate, set all public members
/// - _ns1__RemoveRoomProfileResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveRoomProfileResponse(soap*, _ns1__RemoveRoomProfileResponse*) deserialize from a stream
/// - int soap_write__ns1__RemoveRoomProfileResponse(soap*, _ns1__RemoveRoomProfileResponse*) serialize to a stream
/// - _ns1__RemoveRoomProfileResponse* _ns1__RemoveRoomProfileResponse::soap_dup(soap*) returns deep copy of _ns1__RemoveRoomProfileResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveRoomProfileResponse::soap_del() deep deletes _ns1__RemoveRoomProfileResponse data members, use only after _ns1__RemoveRoomProfileResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveRoomProfileResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateModeratorURLRequest
/// <PRE><BLOCKQUOTE>
///   Request to create a URL for a Moderator (Control Meeting)
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":CreateModeratorURLRequest is a complexType.
///
/// class _ns1__CreateModeratorURLRequest operations:
/// - _ns1__CreateModeratorURLRequest* soap_new__ns1__CreateModeratorURLRequest(soap*) allocate
/// - _ns1__CreateModeratorURLRequest* soap_new__ns1__CreateModeratorURLRequest(soap*, int num) allocate array
/// - _ns1__CreateModeratorURLRequest* soap_new_req__ns1__CreateModeratorURLRequest(soap*, ...) allocate, set required members
/// - _ns1__CreateModeratorURLRequest* soap_new_set__ns1__CreateModeratorURLRequest(soap*, ...) allocate, set all public members
/// - _ns1__CreateModeratorURLRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateModeratorURLRequest(soap*, _ns1__CreateModeratorURLRequest*) deserialize from a stream
/// - int soap_write__ns1__CreateModeratorURLRequest(soap*, _ns1__CreateModeratorURLRequest*) serialize to a stream
/// - _ns1__CreateModeratorURLRequest* _ns1__CreateModeratorURLRequest::soap_dup(soap*) returns deep copy of _ns1__CreateModeratorURLRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateModeratorURLRequest::soap_del() deep deletes _ns1__CreateModeratorURLRequest data members, use only after _ns1__CreateModeratorURLRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateModeratorURLRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateModeratorURLResponse
/// @brief "http://portal.vidyo.com/user/v1_1":CreateModeratorURLResponse is a complexType.
///
/// class _ns1__CreateModeratorURLResponse operations:
/// - _ns1__CreateModeratorURLResponse* soap_new__ns1__CreateModeratorURLResponse(soap*) allocate
/// - _ns1__CreateModeratorURLResponse* soap_new__ns1__CreateModeratorURLResponse(soap*, int num) allocate array
/// - _ns1__CreateModeratorURLResponse* soap_new_req__ns1__CreateModeratorURLResponse(soap*, ...) allocate, set required members
/// - _ns1__CreateModeratorURLResponse* soap_new_set__ns1__CreateModeratorURLResponse(soap*, ...) allocate, set all public members
/// - _ns1__CreateModeratorURLResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateModeratorURLResponse(soap*, _ns1__CreateModeratorURLResponse*) deserialize from a stream
/// - int soap_write__ns1__CreateModeratorURLResponse(soap*, _ns1__CreateModeratorURLResponse*) serialize to a stream
/// - _ns1__CreateModeratorURLResponse* _ns1__CreateModeratorURLResponse::soap_dup(soap*) returns deep copy of _ns1__CreateModeratorURLResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateModeratorURLResponse::soap_del() deep deletes _ns1__CreateModeratorURLResponse data members, use only after _ns1__CreateModeratorURLResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateModeratorURLResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveModeratorURLRequest
/// <PRE><BLOCKQUOTE>
///   Request to remove Moderator (Control Meeting) URL for a Room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveModeratorURLRequest is a complexType.
///
/// class _ns1__RemoveModeratorURLRequest operations:
/// - _ns1__RemoveModeratorURLRequest* soap_new__ns1__RemoveModeratorURLRequest(soap*) allocate
/// - _ns1__RemoveModeratorURLRequest* soap_new__ns1__RemoveModeratorURLRequest(soap*, int num) allocate array
/// - _ns1__RemoveModeratorURLRequest* soap_new_req__ns1__RemoveModeratorURLRequest(soap*, ...) allocate, set required members
/// - _ns1__RemoveModeratorURLRequest* soap_new_set__ns1__RemoveModeratorURLRequest(soap*, ...) allocate, set all public members
/// - _ns1__RemoveModeratorURLRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveModeratorURLRequest(soap*, _ns1__RemoveModeratorURLRequest*) deserialize from a stream
/// - int soap_write__ns1__RemoveModeratorURLRequest(soap*, _ns1__RemoveModeratorURLRequest*) serialize to a stream
/// - _ns1__RemoveModeratorURLRequest* _ns1__RemoveModeratorURLRequest::soap_dup(soap*) returns deep copy of _ns1__RemoveModeratorURLRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveModeratorURLRequest::soap_del() deep deletes _ns1__RemoveModeratorURLRequest data members, use only after _ns1__RemoveModeratorURLRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveModeratorURLRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveModeratorURLResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveModeratorURLResponse is a complexType.
///
/// class _ns1__RemoveModeratorURLResponse operations:
/// - _ns1__RemoveModeratorURLResponse* soap_new__ns1__RemoveModeratorURLResponse(soap*) allocate
/// - _ns1__RemoveModeratorURLResponse* soap_new__ns1__RemoveModeratorURLResponse(soap*, int num) allocate array
/// - _ns1__RemoveModeratorURLResponse* soap_new_req__ns1__RemoveModeratorURLResponse(soap*, ...) allocate, set required members
/// - _ns1__RemoveModeratorURLResponse* soap_new_set__ns1__RemoveModeratorURLResponse(soap*, ...) allocate, set all public members
/// - _ns1__RemoveModeratorURLResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveModeratorURLResponse(soap*, _ns1__RemoveModeratorURLResponse*) deserialize from a stream
/// - int soap_write__ns1__RemoveModeratorURLResponse(soap*, _ns1__RemoveModeratorURLResponse*) serialize to a stream
/// - _ns1__RemoveModeratorURLResponse* _ns1__RemoveModeratorURLResponse::soap_dup(soap*) returns deep copy of _ns1__RemoveModeratorURLResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveModeratorURLResponse::soap_del() deep deletes _ns1__RemoveModeratorURLResponse data members, use only after _ns1__RemoveModeratorURLResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveModeratorURLResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetModeratorURLRequest
/// <PRE><BLOCKQUOTE>
///   Request to get the Moderator (Control Meeting) URL and PIN Indicator for a Room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetModeratorURLRequest is a complexType.
///
/// class _ns1__GetModeratorURLRequest operations:
/// - _ns1__GetModeratorURLRequest* soap_new__ns1__GetModeratorURLRequest(soap*) allocate
/// - _ns1__GetModeratorURLRequest* soap_new__ns1__GetModeratorURLRequest(soap*, int num) allocate array
/// - _ns1__GetModeratorURLRequest* soap_new_req__ns1__GetModeratorURLRequest(soap*, ...) allocate, set required members
/// - _ns1__GetModeratorURLRequest* soap_new_set__ns1__GetModeratorURLRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetModeratorURLRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetModeratorURLRequest(soap*, _ns1__GetModeratorURLRequest*) deserialize from a stream
/// - int soap_write__ns1__GetModeratorURLRequest(soap*, _ns1__GetModeratorURLRequest*) serialize to a stream
/// - _ns1__GetModeratorURLRequest* _ns1__GetModeratorURLRequest::soap_dup(soap*) returns deep copy of _ns1__GetModeratorURLRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetModeratorURLRequest::soap_del() deep deletes _ns1__GetModeratorURLRequest data members, use only after _ns1__GetModeratorURLRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetModeratorURLRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetModeratorURLResponse
/// <PRE><BLOCKQUOTE>
///   Response containing the Moderator (Control Meeting) URL and PIN Indicator for a Room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetModeratorURLResponse is a complexType.
///
/// class _ns1__GetModeratorURLResponse operations:
/// - _ns1__GetModeratorURLResponse* soap_new__ns1__GetModeratorURLResponse(soap*) allocate
/// - _ns1__GetModeratorURLResponse* soap_new__ns1__GetModeratorURLResponse(soap*, int num) allocate array
/// - _ns1__GetModeratorURLResponse* soap_new_req__ns1__GetModeratorURLResponse(soap*, ...) allocate, set required members
/// - _ns1__GetModeratorURLResponse* soap_new_set__ns1__GetModeratorURLResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetModeratorURLResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetModeratorURLResponse(soap*, _ns1__GetModeratorURLResponse*) deserialize from a stream
/// - int soap_write__ns1__GetModeratorURLResponse(soap*, _ns1__GetModeratorURLResponse*) serialize to a stream
/// - _ns1__GetModeratorURLResponse* _ns1__GetModeratorURLResponse::soap_dup(soap*) returns deep copy of _ns1__GetModeratorURLResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetModeratorURLResponse::soap_del() deep deletes _ns1__GetModeratorURLResponse data members, use only after _ns1__GetModeratorURLResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetModeratorURLResponse
{ public:
/// Element "moderatorURL" of XSD type xs:string.
    char*                                moderatorURL                   0;	///< Optional element.
/// Element "hasModeratorPIN" of XSD type xs:boolean.
    bool*                                hasModeratorPIN                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetModeratorURLWithTokenRequest
/// <PRE><BLOCKQUOTE>
///   Request to get the Moderator (Control Meeting) URL with an onetime authentication token for a Room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetModeratorURLWithTokenRequest is a complexType.
///
/// class _ns1__GetModeratorURLWithTokenRequest operations:
/// - _ns1__GetModeratorURLWithTokenRequest* soap_new__ns1__GetModeratorURLWithTokenRequest(soap*) allocate
/// - _ns1__GetModeratorURLWithTokenRequest* soap_new__ns1__GetModeratorURLWithTokenRequest(soap*, int num) allocate array
/// - _ns1__GetModeratorURLWithTokenRequest* soap_new_req__ns1__GetModeratorURLWithTokenRequest(soap*, ...) allocate, set required members
/// - _ns1__GetModeratorURLWithTokenRequest* soap_new_set__ns1__GetModeratorURLWithTokenRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetModeratorURLWithTokenRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetModeratorURLWithTokenRequest(soap*, _ns1__GetModeratorURLWithTokenRequest*) deserialize from a stream
/// - int soap_write__ns1__GetModeratorURLWithTokenRequest(soap*, _ns1__GetModeratorURLWithTokenRequest*) serialize to a stream
/// - _ns1__GetModeratorURLWithTokenRequest* _ns1__GetModeratorURLWithTokenRequest::soap_dup(soap*) returns deep copy of _ns1__GetModeratorURLWithTokenRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetModeratorURLWithTokenRequest::soap_del() deep deletes _ns1__GetModeratorURLWithTokenRequest data members, use only after _ns1__GetModeratorURLWithTokenRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetModeratorURLWithTokenRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetModeratorURLWithTokenResponse
/// <PRE><BLOCKQUOTE>
///   Response containing the Moderator (Control Meeting) URL with an onetime authentication token for a Room
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetModeratorURLWithTokenResponse is a complexType.
///
/// class _ns1__GetModeratorURLWithTokenResponse operations:
/// - _ns1__GetModeratorURLWithTokenResponse* soap_new__ns1__GetModeratorURLWithTokenResponse(soap*) allocate
/// - _ns1__GetModeratorURLWithTokenResponse* soap_new__ns1__GetModeratorURLWithTokenResponse(soap*, int num) allocate array
/// - _ns1__GetModeratorURLWithTokenResponse* soap_new_req__ns1__GetModeratorURLWithTokenResponse(soap*, ...) allocate, set required members
/// - _ns1__GetModeratorURLWithTokenResponse* soap_new_set__ns1__GetModeratorURLWithTokenResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetModeratorURLWithTokenResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetModeratorURLWithTokenResponse(soap*, _ns1__GetModeratorURLWithTokenResponse*) deserialize from a stream
/// - int soap_write__ns1__GetModeratorURLWithTokenResponse(soap*, _ns1__GetModeratorURLWithTokenResponse*) serialize to a stream
/// - _ns1__GetModeratorURLWithTokenResponse* _ns1__GetModeratorURLWithTokenResponse::soap_dup(soap*) returns deep copy of _ns1__GetModeratorURLWithTokenResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetModeratorURLWithTokenResponse::soap_del() deep deletes _ns1__GetModeratorURLWithTokenResponse data members, use only after _ns1__GetModeratorURLWithTokenResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetModeratorURLWithTokenResponse
{ public:
/// Element "moderatorURL" of XSD type xs:string.
    char*                                moderatorURL                   1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateModeratorPINRequest
/// <PRE><BLOCKQUOTE>
///   Create a Moderator PIN for a Room or a Member's personal room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":CreateModeratorPINRequest is a complexType.
///
/// class _ns1__CreateModeratorPINRequest operations:
/// - _ns1__CreateModeratorPINRequest* soap_new__ns1__CreateModeratorPINRequest(soap*) allocate
/// - _ns1__CreateModeratorPINRequest* soap_new__ns1__CreateModeratorPINRequest(soap*, int num) allocate array
/// - _ns1__CreateModeratorPINRequest* soap_new_req__ns1__CreateModeratorPINRequest(soap*, ...) allocate, set required members
/// - _ns1__CreateModeratorPINRequest* soap_new_set__ns1__CreateModeratorPINRequest(soap*, ...) allocate, set all public members
/// - _ns1__CreateModeratorPINRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateModeratorPINRequest(soap*, _ns1__CreateModeratorPINRequest*) deserialize from a stream
/// - int soap_write__ns1__CreateModeratorPINRequest(soap*, _ns1__CreateModeratorPINRequest*) serialize to a stream
/// - _ns1__CreateModeratorPINRequest* _ns1__CreateModeratorPINRequest::soap_dup(soap*) returns deep copy of _ns1__CreateModeratorPINRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateModeratorPINRequest::soap_del() deep deletes _ns1__CreateModeratorPINRequest data members, use only after _ns1__CreateModeratorPINRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateModeratorPINRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// Element "PIN" of XSD type xs:string.
    char*                                PIN                            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateModeratorPINResponse
/// @brief "http://portal.vidyo.com/user/v1_1":CreateModeratorPINResponse is a complexType.
///
/// class _ns1__CreateModeratorPINResponse operations:
/// - _ns1__CreateModeratorPINResponse* soap_new__ns1__CreateModeratorPINResponse(soap*) allocate
/// - _ns1__CreateModeratorPINResponse* soap_new__ns1__CreateModeratorPINResponse(soap*, int num) allocate array
/// - _ns1__CreateModeratorPINResponse* soap_new_req__ns1__CreateModeratorPINResponse(soap*, ...) allocate, set required members
/// - _ns1__CreateModeratorPINResponse* soap_new_set__ns1__CreateModeratorPINResponse(soap*, ...) allocate, set all public members
/// - _ns1__CreateModeratorPINResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateModeratorPINResponse(soap*, _ns1__CreateModeratorPINResponse*) deserialize from a stream
/// - int soap_write__ns1__CreateModeratorPINResponse(soap*, _ns1__CreateModeratorPINResponse*) serialize to a stream
/// - _ns1__CreateModeratorPINResponse* _ns1__CreateModeratorPINResponse::soap_dup(soap*) returns deep copy of _ns1__CreateModeratorPINResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateModeratorPINResponse::soap_del() deep deletes _ns1__CreateModeratorPINResponse data members, use only after _ns1__CreateModeratorPINResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateModeratorPINResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveModeratorPINRequest
/// <PRE><BLOCKQUOTE>
///   Removes a Moderator PIN for a Room or a Member's personal room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveModeratorPINRequest is a complexType.
///
/// class _ns1__RemoveModeratorPINRequest operations:
/// - _ns1__RemoveModeratorPINRequest* soap_new__ns1__RemoveModeratorPINRequest(soap*) allocate
/// - _ns1__RemoveModeratorPINRequest* soap_new__ns1__RemoveModeratorPINRequest(soap*, int num) allocate array
/// - _ns1__RemoveModeratorPINRequest* soap_new_req__ns1__RemoveModeratorPINRequest(soap*, ...) allocate, set required members
/// - _ns1__RemoveModeratorPINRequest* soap_new_set__ns1__RemoveModeratorPINRequest(soap*, ...) allocate, set all public members
/// - _ns1__RemoveModeratorPINRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveModeratorPINRequest(soap*, _ns1__RemoveModeratorPINRequest*) deserialize from a stream
/// - int soap_write__ns1__RemoveModeratorPINRequest(soap*, _ns1__RemoveModeratorPINRequest*) serialize to a stream
/// - _ns1__RemoveModeratorPINRequest* _ns1__RemoveModeratorPINRequest::soap_dup(soap*) returns deep copy of _ns1__RemoveModeratorPINRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveModeratorPINRequest::soap_del() deep deletes _ns1__RemoveModeratorPINRequest data members, use only after _ns1__RemoveModeratorPINRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveModeratorPINRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemoveModeratorPINResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RemoveModeratorPINResponse is a complexType.
///
/// class _ns1__RemoveModeratorPINResponse operations:
/// - _ns1__RemoveModeratorPINResponse* soap_new__ns1__RemoveModeratorPINResponse(soap*) allocate
/// - _ns1__RemoveModeratorPINResponse* soap_new__ns1__RemoveModeratorPINResponse(soap*, int num) allocate array
/// - _ns1__RemoveModeratorPINResponse* soap_new_req__ns1__RemoveModeratorPINResponse(soap*, ...) allocate, set required members
/// - _ns1__RemoveModeratorPINResponse* soap_new_set__ns1__RemoveModeratorPINResponse(soap*, ...) allocate, set all public members
/// - _ns1__RemoveModeratorPINResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemoveModeratorPINResponse(soap*, _ns1__RemoveModeratorPINResponse*) deserialize from a stream
/// - int soap_write__ns1__RemoveModeratorPINResponse(soap*, _ns1__RemoveModeratorPINResponse*) serialize to a stream
/// - _ns1__RemoveModeratorPINResponse* _ns1__RemoveModeratorPINResponse::soap_dup(soap*) returns deep copy of _ns1__RemoveModeratorPINResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemoveModeratorPINResponse::soap_del() deep deletes _ns1__RemoveModeratorPINResponse data members, use only after _ns1__RemoveModeratorPINResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemoveModeratorPINResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetConferenceIDRequest
/// <PRE><BLOCKQUOTE>
///   Provides the user the Conference ID to which the user is associated.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetConferenceIDRequest is a complexType.
///
/// class _ns1__GetConferenceIDRequest operations:
/// - _ns1__GetConferenceIDRequest* soap_new__ns1__GetConferenceIDRequest(soap*) allocate
/// - _ns1__GetConferenceIDRequest* soap_new__ns1__GetConferenceIDRequest(soap*, int num) allocate array
/// - _ns1__GetConferenceIDRequest* soap_new_req__ns1__GetConferenceIDRequest(soap*, ...) allocate, set required members
/// - _ns1__GetConferenceIDRequest* soap_new_set__ns1__GetConferenceIDRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetConferenceIDRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetConferenceIDRequest(soap*, _ns1__GetConferenceIDRequest*) deserialize from a stream
/// - int soap_write__ns1__GetConferenceIDRequest(soap*, _ns1__GetConferenceIDRequest*) serialize to a stream
/// - _ns1__GetConferenceIDRequest* _ns1__GetConferenceIDRequest::soap_dup(soap*) returns deep copy of _ns1__GetConferenceIDRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetConferenceIDRequest::soap_del() deep deletes _ns1__GetConferenceIDRequest data members, use only after _ns1__GetConferenceIDRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetConferenceIDRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetConferenceIDResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetConferenceIDResponse is a complexType.
///
/// class _ns1__GetConferenceIDResponse operations:
/// - _ns1__GetConferenceIDResponse* soap_new__ns1__GetConferenceIDResponse(soap*) allocate
/// - _ns1__GetConferenceIDResponse* soap_new__ns1__GetConferenceIDResponse(soap*, int num) allocate array
/// - _ns1__GetConferenceIDResponse* soap_new_req__ns1__GetConferenceIDResponse(soap*, ...) allocate, set required members
/// - _ns1__GetConferenceIDResponse* soap_new_set__ns1__GetConferenceIDResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetConferenceIDResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetConferenceIDResponse(soap*, _ns1__GetConferenceIDResponse*) deserialize from a stream
/// - int soap_write__ns1__GetConferenceIDResponse(soap*, _ns1__GetConferenceIDResponse*) serialize to a stream
/// - _ns1__GetConferenceIDResponse* _ns1__GetConferenceIDResponse::soap_dup(soap*) returns deep copy of _ns1__GetConferenceIDResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetConferenceIDResponse::soap_del() deep deletes _ns1__GetConferenceIDResponse data members, use only after _ns1__GetConferenceIDResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetConferenceIDResponse
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GenerateAuthTokenRequest
/// <PRE><BLOCKQUOTE>
///   Request to generate authentication token valid for the specified time.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GenerateAuthTokenRequest is a complexType.
///
/// class _ns1__GenerateAuthTokenRequest operations:
/// - _ns1__GenerateAuthTokenRequest* soap_new__ns1__GenerateAuthTokenRequest(soap*) allocate
/// - _ns1__GenerateAuthTokenRequest* soap_new__ns1__GenerateAuthTokenRequest(soap*, int num) allocate array
/// - _ns1__GenerateAuthTokenRequest* soap_new_req__ns1__GenerateAuthTokenRequest(soap*, ...) allocate, set required members
/// - _ns1__GenerateAuthTokenRequest* soap_new_set__ns1__GenerateAuthTokenRequest(soap*, ...) allocate, set all public members
/// - _ns1__GenerateAuthTokenRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GenerateAuthTokenRequest(soap*, _ns1__GenerateAuthTokenRequest*) deserialize from a stream
/// - int soap_write__ns1__GenerateAuthTokenRequest(soap*, _ns1__GenerateAuthTokenRequest*) serialize to a stream
/// - _ns1__GenerateAuthTokenRequest* _ns1__GenerateAuthTokenRequest::soap_dup(soap*) returns deep copy of _ns1__GenerateAuthTokenRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GenerateAuthTokenRequest::soap_del() deep deletes _ns1__GenerateAuthTokenRequest data members, use only after _ns1__GenerateAuthTokenRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GenerateAuthTokenRequest
{ public:
/// Value range is 0 to highest.
    int                                                                
                                         validityTime                   1;	///< Required element.
/// Element "endpointId" of XSD type xs:string.
    char*                                endpointId                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GenerateAuthTokenResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GenerateAuthTokenResponse is a complexType.
///
/// class _ns1__GenerateAuthTokenResponse operations:
/// - _ns1__GenerateAuthTokenResponse* soap_new__ns1__GenerateAuthTokenResponse(soap*) allocate
/// - _ns1__GenerateAuthTokenResponse* soap_new__ns1__GenerateAuthTokenResponse(soap*, int num) allocate array
/// - _ns1__GenerateAuthTokenResponse* soap_new_req__ns1__GenerateAuthTokenResponse(soap*, ...) allocate, set required members
/// - _ns1__GenerateAuthTokenResponse* soap_new_set__ns1__GenerateAuthTokenResponse(soap*, ...) allocate, set all public members
/// - _ns1__GenerateAuthTokenResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GenerateAuthTokenResponse(soap*, _ns1__GenerateAuthTokenResponse*) deserialize from a stream
/// - int soap_write__ns1__GenerateAuthTokenResponse(soap*, _ns1__GenerateAuthTokenResponse*) serialize to a stream
/// - _ns1__GenerateAuthTokenResponse* _ns1__GenerateAuthTokenResponse::soap_dup(soap*) returns deep copy of _ns1__GenerateAuthTokenResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GenerateAuthTokenResponse::soap_del() deep deletes _ns1__GenerateAuthTokenResponse data members, use only after _ns1__GenerateAuthTokenResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GenerateAuthTokenResponse
{ public:
/// Element "authToken" of XSD type xs:string.
    char*                                authToken                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateScheduledRoomRequest
/// <PRE><BLOCKQUOTE>
///   Request to create a Scheduled Room for the Member.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":CreateScheduledRoomRequest is a complexType.
///
/// class _ns1__CreateScheduledRoomRequest operations:
/// - _ns1__CreateScheduledRoomRequest* soap_new__ns1__CreateScheduledRoomRequest(soap*) allocate
/// - _ns1__CreateScheduledRoomRequest* soap_new__ns1__CreateScheduledRoomRequest(soap*, int num) allocate array
/// - _ns1__CreateScheduledRoomRequest* soap_new_req__ns1__CreateScheduledRoomRequest(soap*, ...) allocate, set required members
/// - _ns1__CreateScheduledRoomRequest* soap_new_set__ns1__CreateScheduledRoomRequest(soap*, ...) allocate, set all public members
/// - _ns1__CreateScheduledRoomRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateScheduledRoomRequest(soap*, _ns1__CreateScheduledRoomRequest*) deserialize from a stream
/// - int soap_write__ns1__CreateScheduledRoomRequest(soap*, _ns1__CreateScheduledRoomRequest*) serialize to a stream
/// - _ns1__CreateScheduledRoomRequest* _ns1__CreateScheduledRoomRequest::soap_dup(soap*) returns deep copy of _ns1__CreateScheduledRoomRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateScheduledRoomRequest::soap_del() deep deletes _ns1__CreateScheduledRoomRequest data members, use only after _ns1__CreateScheduledRoomRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateScheduledRoomRequest
{ public:
/// Value range is 0 to 400.
    int                                                                
                                        *recurring                      0;	///< Optional element.
/// Element "setPIN" of XSD type xs:boolean.
    bool*                                setPIN                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":CreateScheduledRoomResponse
/// @brief "http://portal.vidyo.com/user/v1_1":CreateScheduledRoomResponse is a complexType.
///
/// class _ns1__CreateScheduledRoomResponse operations:
/// - _ns1__CreateScheduledRoomResponse* soap_new__ns1__CreateScheduledRoomResponse(soap*) allocate
/// - _ns1__CreateScheduledRoomResponse* soap_new__ns1__CreateScheduledRoomResponse(soap*, int num) allocate array
/// - _ns1__CreateScheduledRoomResponse* soap_new_req__ns1__CreateScheduledRoomResponse(soap*, ...) allocate, set required members
/// - _ns1__CreateScheduledRoomResponse* soap_new_set__ns1__CreateScheduledRoomResponse(soap*, ...) allocate, set all public members
/// - _ns1__CreateScheduledRoomResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CreateScheduledRoomResponse(soap*, _ns1__CreateScheduledRoomResponse*) deserialize from a stream
/// - int soap_write__ns1__CreateScheduledRoomResponse(soap*, _ns1__CreateScheduledRoomResponse*) serialize to a stream
/// - _ns1__CreateScheduledRoomResponse* _ns1__CreateScheduledRoomResponse::soap_dup(soap*) returns deep copy of _ns1__CreateScheduledRoomResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CreateScheduledRoomResponse::soap_del() deep deletes _ns1__CreateScheduledRoomResponse data members, use only after _ns1__CreateScheduledRoomResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CreateScheduledRoomResponse
{ public:
/// Length of this string is 1 to unbounded.
    char*                                                              
                                         extension                      1;	///< Required element.
/// Length of this string is 1 to unbounded.
    char*                                                              
                                        *pin                            0;	///< Optional element.
/// Element "inviteContent" of XSD type xs:string.
    char*                                inviteContent                  1;	///< Required element.
/// Element "roomURL" of XSD type xs:anyURI.
    xsd__anyURI                          roomURL                        1;	///< Required element.
/// Element "inviteSubject" of XSD type xs:string.
    char*                                inviteSubject                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DeleteScheduledRoomRequest
/// <PRE><BLOCKQUOTE>
///   Request to delete a Scheduled Room.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":DeleteScheduledRoomRequest is a complexType.
///
/// class _ns1__DeleteScheduledRoomRequest operations:
/// - _ns1__DeleteScheduledRoomRequest* soap_new__ns1__DeleteScheduledRoomRequest(soap*) allocate
/// - _ns1__DeleteScheduledRoomRequest* soap_new__ns1__DeleteScheduledRoomRequest(soap*, int num) allocate array
/// - _ns1__DeleteScheduledRoomRequest* soap_new_req__ns1__DeleteScheduledRoomRequest(soap*, ...) allocate, set required members
/// - _ns1__DeleteScheduledRoomRequest* soap_new_set__ns1__DeleteScheduledRoomRequest(soap*, ...) allocate, set all public members
/// - _ns1__DeleteScheduledRoomRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DeleteScheduledRoomRequest(soap*, _ns1__DeleteScheduledRoomRequest*) deserialize from a stream
/// - int soap_write__ns1__DeleteScheduledRoomRequest(soap*, _ns1__DeleteScheduledRoomRequest*) serialize to a stream
/// - _ns1__DeleteScheduledRoomRequest* _ns1__DeleteScheduledRoomRequest::soap_dup(soap*) returns deep copy of _ns1__DeleteScheduledRoomRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DeleteScheduledRoomRequest::soap_del() deep deletes _ns1__DeleteScheduledRoomRequest data members, use only after _ns1__DeleteScheduledRoomRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DeleteScheduledRoomRequest
{ public:
/// Length of this string is 1 to unbounded.
    char*                                                              
                                         extension                      1;	///< Required element.
/// Length of this string is 1 to unbounded.
    char*                                                              
                                        *pin                            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DeleteScheduledRoomResponse
/// @brief "http://portal.vidyo.com/user/v1_1":DeleteScheduledRoomResponse is a complexType.
///
/// class _ns1__DeleteScheduledRoomResponse operations:
/// - _ns1__DeleteScheduledRoomResponse* soap_new__ns1__DeleteScheduledRoomResponse(soap*) allocate
/// - _ns1__DeleteScheduledRoomResponse* soap_new__ns1__DeleteScheduledRoomResponse(soap*, int num) allocate array
/// - _ns1__DeleteScheduledRoomResponse* soap_new_req__ns1__DeleteScheduledRoomResponse(soap*, ...) allocate, set required members
/// - _ns1__DeleteScheduledRoomResponse* soap_new_set__ns1__DeleteScheduledRoomResponse(soap*, ...) allocate, set all public members
/// - _ns1__DeleteScheduledRoomResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DeleteScheduledRoomResponse(soap*, _ns1__DeleteScheduledRoomResponse*) deserialize from a stream
/// - int soap_write__ns1__DeleteScheduledRoomResponse(soap*, _ns1__DeleteScheduledRoomResponse*) serialize to a stream
/// - _ns1__DeleteScheduledRoomResponse* _ns1__DeleteScheduledRoomResponse::soap_dup(soap*) returns deep copy of _ns1__DeleteScheduledRoomResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DeleteScheduledRoomResponse::soap_del() deep deletes _ns1__DeleteScheduledRoomResponse data members, use only after _ns1__DeleteScheduledRoomResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DeleteScheduledRoomResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":PortalFeature
/// @brief "http://portal.vidyo.com/user/v1_1":PortalFeature is a complexType.
///
/// class _ns1__PortalFeature operations:
/// - _ns1__PortalFeature* soap_new__ns1__PortalFeature(soap*) allocate
/// - _ns1__PortalFeature* soap_new__ns1__PortalFeature(soap*, int num) allocate array
/// - _ns1__PortalFeature* soap_new_req__ns1__PortalFeature(soap*, ...) allocate, set required members
/// - _ns1__PortalFeature* soap_new_set__ns1__PortalFeature(soap*, ...) allocate, set all public members
/// - _ns1__PortalFeature::soap_default(soap*) reset members to default
/// - int soap_read__ns1__PortalFeature(soap*, _ns1__PortalFeature*) deserialize from a stream
/// - int soap_write__ns1__PortalFeature(soap*, _ns1__PortalFeature*) serialize to a stream
/// - _ns1__PortalFeature* _ns1__PortalFeature::soap_dup(soap*) returns deep copy of _ns1__PortalFeature, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__PortalFeature::soap_del() deep deletes _ns1__PortalFeature data members, use only after _ns1__PortalFeature::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__PortalFeature
{ public:
/// Element "feature" of XSD type "http://portal.vidyo.com/user/v1_1":PortalFeatureName.
    ns1__PortalFeatureName               feature                        1;	///< Required element.
/// Element "enable" of XSD type xs:boolean.
    bool                                 enable                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetPortalFeaturesResponse
/// <PRE><BLOCKQUOTE>
///   Portal Feature Names are:
///   ScheduledRoom
///   Guest
///   IPCoutbound
///   IPCinbound
///   ModeratorURL
///   TlsTunneling
///   LoginBanner
///   WelcomeBanner
///   EndpointPrivateChat
///   EndpointPublicChat
///   CDR2_1
///   EndpointDetails
///   16TILES
///   HTMLChangePswd
///   RouterParticipantInformation
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetPortalFeaturesResponse is a complexType.
///
/// class _ns1__GetPortalFeaturesResponse operations:
/// - _ns1__GetPortalFeaturesResponse* soap_new__ns1__GetPortalFeaturesResponse(soap*) allocate
/// - _ns1__GetPortalFeaturesResponse* soap_new__ns1__GetPortalFeaturesResponse(soap*, int num) allocate array
/// - _ns1__GetPortalFeaturesResponse* soap_new_req__ns1__GetPortalFeaturesResponse(soap*, ...) allocate, set required members
/// - _ns1__GetPortalFeaturesResponse* soap_new_set__ns1__GetPortalFeaturesResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetPortalFeaturesResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetPortalFeaturesResponse(soap*, _ns1__GetPortalFeaturesResponse*) deserialize from a stream
/// - int soap_write__ns1__GetPortalFeaturesResponse(soap*, _ns1__GetPortalFeaturesResponse*) serialize to a stream
/// - _ns1__GetPortalFeaturesResponse* _ns1__GetPortalFeaturesResponse::soap_dup(soap*) returns deep copy of _ns1__GetPortalFeaturesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetPortalFeaturesResponse::soap_del() deep deletes _ns1__GetPortalFeaturesResponse data members, use only after _ns1__GetPortalFeaturesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetPortalFeaturesResponse
{ public:
/// Size of the dynamic array of _ns1__PortalFeature* is 1..unbounded.
   $int                                  __sizePortalFeature            1;
/// Pointer to array _ns1__PortalFeature* of size 1..unbounded.
    _ns1__PortalFeature*                *PortalFeature                  1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":EndpointFeature
/// @brief "http://portal.vidyo.com/user/v1_1":EndpointFeature is a complexType.
///
/// class _ns1__EndpointFeature operations:
/// - _ns1__EndpointFeature* soap_new__ns1__EndpointFeature(soap*) allocate
/// - _ns1__EndpointFeature* soap_new__ns1__EndpointFeature(soap*, int num) allocate array
/// - _ns1__EndpointFeature* soap_new_req__ns1__EndpointFeature(soap*, ...) allocate, set required members
/// - _ns1__EndpointFeature* soap_new_set__ns1__EndpointFeature(soap*, ...) allocate, set all public members
/// - _ns1__EndpointFeature::soap_default(soap*) reset members to default
/// - int soap_read__ns1__EndpointFeature(soap*, _ns1__EndpointFeature*) deserialize from a stream
/// - int soap_write__ns1__EndpointFeature(soap*, _ns1__EndpointFeature*) serialize to a stream
/// - _ns1__EndpointFeature* _ns1__EndpointFeature::soap_dup(soap*) returns deep copy of _ns1__EndpointFeature, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__EndpointFeature::soap_del() deep deletes _ns1__EndpointFeature data members, use only after _ns1__EndpointFeature::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__EndpointFeature
{ public:
/// Element "feature" of XSD type "http://portal.vidyo.com/user/v1_1":EndpointFeatureName.
    ns1__EndpointFeatureName             feature                        1;	///< Required element.
/// Element "enable" of XSD type xs:boolean.
    bool                                 enable                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SetEndpointDetailsRequest
/// <PRE><BLOCKQUOTE>
///   Request to send a list of endpoint's supported features with flag - enable/disable.
///   Endpoint Feature Names are:
///   LectureMode
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":SetEndpointDetailsRequest is a complexType.
///
/// class _ns1__SetEndpointDetailsRequest operations:
/// - _ns1__SetEndpointDetailsRequest* soap_new__ns1__SetEndpointDetailsRequest(soap*) allocate
/// - _ns1__SetEndpointDetailsRequest* soap_new__ns1__SetEndpointDetailsRequest(soap*, int num) allocate array
/// - _ns1__SetEndpointDetailsRequest* soap_new_req__ns1__SetEndpointDetailsRequest(soap*, ...) allocate, set required members
/// - _ns1__SetEndpointDetailsRequest* soap_new_set__ns1__SetEndpointDetailsRequest(soap*, ...) allocate, set all public members
/// - _ns1__SetEndpointDetailsRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SetEndpointDetailsRequest(soap*, _ns1__SetEndpointDetailsRequest*) deserialize from a stream
/// - int soap_write__ns1__SetEndpointDetailsRequest(soap*, _ns1__SetEndpointDetailsRequest*) serialize to a stream
/// - _ns1__SetEndpointDetailsRequest* _ns1__SetEndpointDetailsRequest::soap_dup(soap*) returns deep copy of _ns1__SetEndpointDetailsRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetEndpointDetailsRequest::soap_del() deep deletes _ns1__SetEndpointDetailsRequest data members, use only after _ns1__SetEndpointDetailsRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetEndpointDetailsRequest
{ public:
/// Element "EID" of XSD type xs:string.
    char*                                EID                            1;	///< Required element.
/// Size of the dynamic array of _ns1__EndpointFeature* is 1..unbounded.
   $int                                  __sizeEndpointFeature          1;
/// Pointer to array _ns1__EndpointFeature* of size 1..unbounded.
    _ns1__EndpointFeature*              *EndpointFeature                1;
/// Element "applicationName" of XSD type xs:string.
    char*                                applicationName                0;	///< Optional element.
/// Element "applicationVersion" of XSD type xs:string.
    char*                                applicationVersion             0;	///< Optional element.
/// Element "applicationOs" of XSD type xs:string.
    char*                                applicationOs                  0;	///< Optional element.
/// Element "deviceModel" of XSD type xs:string.
    char*                                deviceModel                    0;	///< Optional element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
   $int                                  __size                        0;
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SetEndpointDetailsResponse
/// @brief "http://portal.vidyo.com/user/v1_1":SetEndpointDetailsResponse is a complexType.
///
/// class _ns1__SetEndpointDetailsResponse operations:
/// - _ns1__SetEndpointDetailsResponse* soap_new__ns1__SetEndpointDetailsResponse(soap*) allocate
/// - _ns1__SetEndpointDetailsResponse* soap_new__ns1__SetEndpointDetailsResponse(soap*, int num) allocate array
/// - _ns1__SetEndpointDetailsResponse* soap_new_req__ns1__SetEndpointDetailsResponse(soap*, ...) allocate, set required members
/// - _ns1__SetEndpointDetailsResponse* soap_new_set__ns1__SetEndpointDetailsResponse(soap*, ...) allocate, set all public members
/// - _ns1__SetEndpointDetailsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SetEndpointDetailsResponse(soap*, _ns1__SetEndpointDetailsResponse*) deserialize from a stream
/// - int soap_write__ns1__SetEndpointDetailsResponse(soap*, _ns1__SetEndpointDetailsResponse*) serialize to a stream
/// - _ns1__SetEndpointDetailsResponse* _ns1__SetEndpointDetailsResponse::soap_dup(soap*) returns deep copy of _ns1__SetEndpointDetailsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetEndpointDetailsResponse::soap_del() deep deletes _ns1__SetEndpointDetailsResponse data members, use only after _ns1__SetEndpointDetailsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetEndpointDetailsResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetActiveSessionsResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetActiveSessionsResponse is a complexType.
///
/// class _ns1__GetActiveSessionsResponse operations:
/// - _ns1__GetActiveSessionsResponse* soap_new__ns1__GetActiveSessionsResponse(soap*) allocate
/// - _ns1__GetActiveSessionsResponse* soap_new__ns1__GetActiveSessionsResponse(soap*, int num) allocate array
/// - _ns1__GetActiveSessionsResponse* soap_new_req__ns1__GetActiveSessionsResponse(soap*, ...) allocate, set required members
/// - _ns1__GetActiveSessionsResponse* soap_new_set__ns1__GetActiveSessionsResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetActiveSessionsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetActiveSessionsResponse(soap*, _ns1__GetActiveSessionsResponse*) deserialize from a stream
/// - int soap_write__ns1__GetActiveSessionsResponse(soap*, _ns1__GetActiveSessionsResponse*) serialize to a stream
/// - _ns1__GetActiveSessionsResponse* _ns1__GetActiveSessionsResponse::soap_dup(soap*) returns deep copy of _ns1__GetActiveSessionsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetActiveSessionsResponse::soap_del() deep deletes _ns1__GetActiveSessionsResponse data members, use only after _ns1__GetActiveSessionsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetActiveSessionsResponse
{ public:
/// Element "count" of XSD type xs:int.
    int                                  count                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":LogoutAllOtherSessionsResponse
/// @brief "http://portal.vidyo.com/user/v1_1":LogoutAllOtherSessionsResponse is a complexType.
///
/// class _ns1__LogoutAllOtherSessionsResponse operations:
/// - _ns1__LogoutAllOtherSessionsResponse* soap_new__ns1__LogoutAllOtherSessionsResponse(soap*) allocate
/// - _ns1__LogoutAllOtherSessionsResponse* soap_new__ns1__LogoutAllOtherSessionsResponse(soap*, int num) allocate array
/// - _ns1__LogoutAllOtherSessionsResponse* soap_new_req__ns1__LogoutAllOtherSessionsResponse(soap*, ...) allocate, set required members
/// - _ns1__LogoutAllOtherSessionsResponse* soap_new_set__ns1__LogoutAllOtherSessionsResponse(soap*, ...) allocate, set all public members
/// - _ns1__LogoutAllOtherSessionsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LogoutAllOtherSessionsResponse(soap*, _ns1__LogoutAllOtherSessionsResponse*) deserialize from a stream
/// - int soap_write__ns1__LogoutAllOtherSessionsResponse(soap*, _ns1__LogoutAllOtherSessionsResponse*) serialize to a stream
/// - _ns1__LogoutAllOtherSessionsResponse* _ns1__LogoutAllOtherSessionsResponse::soap_dup(soap*) returns deep copy of _ns1__LogoutAllOtherSessionsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LogoutAllOtherSessionsResponse::soap_del() deep deletes _ns1__LogoutAllOtherSessionsResponse data members, use only after _ns1__LogoutAllOtherSessionsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LogoutAllOtherSessionsResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":disconnectConferenceAllRequest
/// <PRE><BLOCKQUOTE>
///   Request to disconnect all participant from a specified conference room, including the conference moderator / the person controlling the room..
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":disconnectConferenceAllRequest is a complexType.
///
/// class _ns1__disconnectConferenceAllRequest operations:
/// - _ns1__disconnectConferenceAllRequest* soap_new__ns1__disconnectConferenceAllRequest(soap*) allocate
/// - _ns1__disconnectConferenceAllRequest* soap_new__ns1__disconnectConferenceAllRequest(soap*, int num) allocate array
/// - _ns1__disconnectConferenceAllRequest* soap_new_req__ns1__disconnectConferenceAllRequest(soap*, ...) allocate, set required members
/// - _ns1__disconnectConferenceAllRequest* soap_new_set__ns1__disconnectConferenceAllRequest(soap*, ...) allocate, set all public members
/// - _ns1__disconnectConferenceAllRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__disconnectConferenceAllRequest(soap*, _ns1__disconnectConferenceAllRequest*) deserialize from a stream
/// - int soap_write__ns1__disconnectConferenceAllRequest(soap*, _ns1__disconnectConferenceAllRequest*) serialize to a stream
/// - _ns1__disconnectConferenceAllRequest* _ns1__disconnectConferenceAllRequest::soap_dup(soap*) returns deep copy of _ns1__disconnectConferenceAllRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__disconnectConferenceAllRequest::soap_del() deep deletes _ns1__disconnectConferenceAllRequest data members, use only after _ns1__disconnectConferenceAllRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__disconnectConferenceAllRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":disconnectConferenceAllResponse
/// @brief "http://portal.vidyo.com/user/v1_1":disconnectConferenceAllResponse is a complexType.
///
/// class _ns1__disconnectConferenceAllResponse operations:
/// - _ns1__disconnectConferenceAllResponse* soap_new__ns1__disconnectConferenceAllResponse(soap*) allocate
/// - _ns1__disconnectConferenceAllResponse* soap_new__ns1__disconnectConferenceAllResponse(soap*, int num) allocate array
/// - _ns1__disconnectConferenceAllResponse* soap_new_req__ns1__disconnectConferenceAllResponse(soap*, ...) allocate, set required members
/// - _ns1__disconnectConferenceAllResponse* soap_new_set__ns1__disconnectConferenceAllResponse(soap*, ...) allocate, set all public members
/// - _ns1__disconnectConferenceAllResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__disconnectConferenceAllResponse(soap*, _ns1__disconnectConferenceAllResponse*) deserialize from a stream
/// - int soap_write__ns1__disconnectConferenceAllResponse(soap*, _ns1__disconnectConferenceAllResponse*) serialize to a stream
/// - _ns1__disconnectConferenceAllResponse* _ns1__disconnectConferenceAllResponse::soap_dup(soap*) returns deep copy of _ns1__disconnectConferenceAllResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__disconnectConferenceAllResponse::soap_del() deep deletes _ns1__disconnectConferenceAllResponse data members, use only after _ns1__disconnectConferenceAllResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__disconnectConferenceAllResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":muteAudioServerAllRequest
/// <PRE><BLOCKQUOTE>
///   Mute all participants in the specified conference, including the conference moderator / the person controlling the room. Unmute the participants will have to be performed by the conference moderator in order to revert the audio state. The participants will not be able to unmute themselves.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":muteAudioServerAllRequest is a complexType.
///
/// class _ns1__muteAudioServerAllRequest operations:
/// - _ns1__muteAudioServerAllRequest* soap_new__ns1__muteAudioServerAllRequest(soap*) allocate
/// - _ns1__muteAudioServerAllRequest* soap_new__ns1__muteAudioServerAllRequest(soap*, int num) allocate array
/// - _ns1__muteAudioServerAllRequest* soap_new_req__ns1__muteAudioServerAllRequest(soap*, ...) allocate, set required members
/// - _ns1__muteAudioServerAllRequest* soap_new_set__ns1__muteAudioServerAllRequest(soap*, ...) allocate, set all public members
/// - _ns1__muteAudioServerAllRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__muteAudioServerAllRequest(soap*, _ns1__muteAudioServerAllRequest*) deserialize from a stream
/// - int soap_write__ns1__muteAudioServerAllRequest(soap*, _ns1__muteAudioServerAllRequest*) serialize to a stream
/// - _ns1__muteAudioServerAllRequest* _ns1__muteAudioServerAllRequest::soap_dup(soap*) returns deep copy of _ns1__muteAudioServerAllRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__muteAudioServerAllRequest::soap_del() deep deletes _ns1__muteAudioServerAllRequest data members, use only after _ns1__muteAudioServerAllRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__muteAudioServerAllRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "muteState" of XSD type xs:boolean.
    bool                                 muteState                      1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":muteAudioServerAllResponse
/// @brief "http://portal.vidyo.com/user/v1_1":muteAudioServerAllResponse is a complexType.
///
/// class _ns1__muteAudioServerAllResponse operations:
/// - _ns1__muteAudioServerAllResponse* soap_new__ns1__muteAudioServerAllResponse(soap*) allocate
/// - _ns1__muteAudioServerAllResponse* soap_new__ns1__muteAudioServerAllResponse(soap*, int num) allocate array
/// - _ns1__muteAudioServerAllResponse* soap_new_req__ns1__muteAudioServerAllResponse(soap*, ...) allocate, set required members
/// - _ns1__muteAudioServerAllResponse* soap_new_set__ns1__muteAudioServerAllResponse(soap*, ...) allocate, set all public members
/// - _ns1__muteAudioServerAllResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__muteAudioServerAllResponse(soap*, _ns1__muteAudioServerAllResponse*) deserialize from a stream
/// - int soap_write__ns1__muteAudioServerAllResponse(soap*, _ns1__muteAudioServerAllResponse*) serialize to a stream
/// - _ns1__muteAudioServerAllResponse* _ns1__muteAudioServerAllResponse::soap_dup(soap*) returns deep copy of _ns1__muteAudioServerAllResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__muteAudioServerAllResponse::soap_del() deep deletes _ns1__muteAudioServerAllResponse data members, use only after _ns1__muteAudioServerAllResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__muteAudioServerAllResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":muteAudioClientAllRequest
/// <PRE><BLOCKQUOTE>
///   Silence all participants in the specified conference, including the conference moderator / the person controlling the room. The participants will be able to unmute themselves from their client user interface.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":muteAudioClientAllRequest is a complexType.
///
/// class _ns1__muteAudioClientAllRequest operations:
/// - _ns1__muteAudioClientAllRequest* soap_new__ns1__muteAudioClientAllRequest(soap*) allocate
/// - _ns1__muteAudioClientAllRequest* soap_new__ns1__muteAudioClientAllRequest(soap*, int num) allocate array
/// - _ns1__muteAudioClientAllRequest* soap_new_req__ns1__muteAudioClientAllRequest(soap*, ...) allocate, set required members
/// - _ns1__muteAudioClientAllRequest* soap_new_set__ns1__muteAudioClientAllRequest(soap*, ...) allocate, set all public members
/// - _ns1__muteAudioClientAllRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__muteAudioClientAllRequest(soap*, _ns1__muteAudioClientAllRequest*) deserialize from a stream
/// - int soap_write__ns1__muteAudioClientAllRequest(soap*, _ns1__muteAudioClientAllRequest*) serialize to a stream
/// - _ns1__muteAudioClientAllRequest* _ns1__muteAudioClientAllRequest::soap_dup(soap*) returns deep copy of _ns1__muteAudioClientAllRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__muteAudioClientAllRequest::soap_del() deep deletes _ns1__muteAudioClientAllRequest data members, use only after _ns1__muteAudioClientAllRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__muteAudioClientAllRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":muteAudioClientAllResponse
/// @brief "http://portal.vidyo.com/user/v1_1":muteAudioClientAllResponse is a complexType.
///
/// class _ns1__muteAudioClientAllResponse operations:
/// - _ns1__muteAudioClientAllResponse* soap_new__ns1__muteAudioClientAllResponse(soap*) allocate
/// - _ns1__muteAudioClientAllResponse* soap_new__ns1__muteAudioClientAllResponse(soap*, int num) allocate array
/// - _ns1__muteAudioClientAllResponse* soap_new_req__ns1__muteAudioClientAllResponse(soap*, ...) allocate, set required members
/// - _ns1__muteAudioClientAllResponse* soap_new_set__ns1__muteAudioClientAllResponse(soap*, ...) allocate, set all public members
/// - _ns1__muteAudioClientAllResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__muteAudioClientAllResponse(soap*, _ns1__muteAudioClientAllResponse*) deserialize from a stream
/// - int soap_write__ns1__muteAudioClientAllResponse(soap*, _ns1__muteAudioClientAllResponse*) serialize to a stream
/// - _ns1__muteAudioClientAllResponse* _ns1__muteAudioClientAllResponse::soap_dup(soap*) returns deep copy of _ns1__muteAudioClientAllResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__muteAudioClientAllResponse::soap_del() deep deletes _ns1__muteAudioClientAllResponse data members, use only after _ns1__muteAudioClientAllResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__muteAudioClientAllResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":muteVideoServerAllRequest
/// <PRE><BLOCKQUOTE>
///   Put in privacy mode all participants in the specified conference, including the conference moderator / the person controlling the room. The participants will not be able to un-mute their video by themselves. The participants will not be able to unmute themselves.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":muteVideoServerAllRequest is a complexType.
///
/// class _ns1__muteVideoServerAllRequest operations:
/// - _ns1__muteVideoServerAllRequest* soap_new__ns1__muteVideoServerAllRequest(soap*) allocate
/// - _ns1__muteVideoServerAllRequest* soap_new__ns1__muteVideoServerAllRequest(soap*, int num) allocate array
/// - _ns1__muteVideoServerAllRequest* soap_new_req__ns1__muteVideoServerAllRequest(soap*, ...) allocate, set required members
/// - _ns1__muteVideoServerAllRequest* soap_new_set__ns1__muteVideoServerAllRequest(soap*, ...) allocate, set all public members
/// - _ns1__muteVideoServerAllRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__muteVideoServerAllRequest(soap*, _ns1__muteVideoServerAllRequest*) deserialize from a stream
/// - int soap_write__ns1__muteVideoServerAllRequest(soap*, _ns1__muteVideoServerAllRequest*) serialize to a stream
/// - _ns1__muteVideoServerAllRequest* _ns1__muteVideoServerAllRequest::soap_dup(soap*) returns deep copy of _ns1__muteVideoServerAllRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__muteVideoServerAllRequest::soap_del() deep deletes _ns1__muteVideoServerAllRequest data members, use only after _ns1__muteVideoServerAllRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__muteVideoServerAllRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "muteState" of XSD type xs:boolean.
    bool                                 muteState                      1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":muteVideoServerAllResponse
/// @brief "http://portal.vidyo.com/user/v1_1":muteVideoServerAllResponse is a complexType.
///
/// class _ns1__muteVideoServerAllResponse operations:
/// - _ns1__muteVideoServerAllResponse* soap_new__ns1__muteVideoServerAllResponse(soap*) allocate
/// - _ns1__muteVideoServerAllResponse* soap_new__ns1__muteVideoServerAllResponse(soap*, int num) allocate array
/// - _ns1__muteVideoServerAllResponse* soap_new_req__ns1__muteVideoServerAllResponse(soap*, ...) allocate, set required members
/// - _ns1__muteVideoServerAllResponse* soap_new_set__ns1__muteVideoServerAllResponse(soap*, ...) allocate, set all public members
/// - _ns1__muteVideoServerAllResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__muteVideoServerAllResponse(soap*, _ns1__muteVideoServerAllResponse*) deserialize from a stream
/// - int soap_write__ns1__muteVideoServerAllResponse(soap*, _ns1__muteVideoServerAllResponse*) serialize to a stream
/// - _ns1__muteVideoServerAllResponse* _ns1__muteVideoServerAllResponse::soap_dup(soap*) returns deep copy of _ns1__muteVideoServerAllResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__muteVideoServerAllResponse::soap_del() deep deletes _ns1__muteVideoServerAllResponse data members, use only after _ns1__muteVideoServerAllResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__muteVideoServerAllResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":muteVideoClientAllRequest
/// <PRE><BLOCKQUOTE>
///   Put in privacy mode all participants in the specified conference, including the conference moderator / the person controlling the room. The participants will be able to un-mute their video by themselves from their client user interface.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":muteVideoClientAllRequest is a complexType.
///
/// class _ns1__muteVideoClientAllRequest operations:
/// - _ns1__muteVideoClientAllRequest* soap_new__ns1__muteVideoClientAllRequest(soap*) allocate
/// - _ns1__muteVideoClientAllRequest* soap_new__ns1__muteVideoClientAllRequest(soap*, int num) allocate array
/// - _ns1__muteVideoClientAllRequest* soap_new_req__ns1__muteVideoClientAllRequest(soap*, ...) allocate, set required members
/// - _ns1__muteVideoClientAllRequest* soap_new_set__ns1__muteVideoClientAllRequest(soap*, ...) allocate, set all public members
/// - _ns1__muteVideoClientAllRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__muteVideoClientAllRequest(soap*, _ns1__muteVideoClientAllRequest*) deserialize from a stream
/// - int soap_write__ns1__muteVideoClientAllRequest(soap*, _ns1__muteVideoClientAllRequest*) serialize to a stream
/// - _ns1__muteVideoClientAllRequest* _ns1__muteVideoClientAllRequest::soap_dup(soap*) returns deep copy of _ns1__muteVideoClientAllRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__muteVideoClientAllRequest::soap_del() deep deletes _ns1__muteVideoClientAllRequest data members, use only after _ns1__muteVideoClientAllRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__muteVideoClientAllRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":muteVideoClientAllResponse
/// @brief "http://portal.vidyo.com/user/v1_1":muteVideoClientAllResponse is a complexType.
///
/// class _ns1__muteVideoClientAllResponse operations:
/// - _ns1__muteVideoClientAllResponse* soap_new__ns1__muteVideoClientAllResponse(soap*) allocate
/// - _ns1__muteVideoClientAllResponse* soap_new__ns1__muteVideoClientAllResponse(soap*, int num) allocate array
/// - _ns1__muteVideoClientAllResponse* soap_new_req__ns1__muteVideoClientAllResponse(soap*, ...) allocate, set required members
/// - _ns1__muteVideoClientAllResponse* soap_new_set__ns1__muteVideoClientAllResponse(soap*, ...) allocate, set all public members
/// - _ns1__muteVideoClientAllResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__muteVideoClientAllResponse(soap*, _ns1__muteVideoClientAllResponse*) deserialize from a stream
/// - int soap_write__ns1__muteVideoClientAllResponse(soap*, _ns1__muteVideoClientAllResponse*) serialize to a stream
/// - _ns1__muteVideoClientAllResponse* _ns1__muteVideoClientAllResponse::soap_dup(soap*) returns deep copy of _ns1__muteVideoClientAllResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__muteVideoClientAllResponse::soap_del() deep deletes _ns1__muteVideoClientAllResponse data members, use only after _ns1__muteVideoClientAllResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__muteVideoClientAllResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":OnetimeAccessResponse
/// @brief "http://portal.vidyo.com/user/v1_1":OnetimeAccessResponse is a complexType.
///
/// class _ns1__OnetimeAccessResponse operations:
/// - _ns1__OnetimeAccessResponse* soap_new__ns1__OnetimeAccessResponse(soap*) allocate
/// - _ns1__OnetimeAccessResponse* soap_new__ns1__OnetimeAccessResponse(soap*, int num) allocate array
/// - _ns1__OnetimeAccessResponse* soap_new_req__ns1__OnetimeAccessResponse(soap*, ...) allocate, set required members
/// - _ns1__OnetimeAccessResponse* soap_new_set__ns1__OnetimeAccessResponse(soap*, ...) allocate, set all public members
/// - _ns1__OnetimeAccessResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__OnetimeAccessResponse(soap*, _ns1__OnetimeAccessResponse*) deserialize from a stream
/// - int soap_write__ns1__OnetimeAccessResponse(soap*, _ns1__OnetimeAccessResponse*) serialize to a stream
/// - _ns1__OnetimeAccessResponse* _ns1__OnetimeAccessResponse::soap_dup(soap*) returns deep copy of _ns1__OnetimeAccessResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__OnetimeAccessResponse::soap_del() deep deletes _ns1__OnetimeAccessResponse data members, use only after _ns1__OnetimeAccessResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__OnetimeAccessResponse
{ public:
/// Element "url" of XSD type xs:anyURI.
    xsd__anyURI                          url                            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RoomAccessOption
/// @brief "http://portal.vidyo.com/user/v1_1":RoomAccessOption is a complexType.
///
/// class _ns1__RoomAccessOption operations:
/// - _ns1__RoomAccessOption* soap_new__ns1__RoomAccessOption(soap*) allocate
/// - _ns1__RoomAccessOption* soap_new__ns1__RoomAccessOption(soap*, int num) allocate array
/// - _ns1__RoomAccessOption* soap_new_req__ns1__RoomAccessOption(soap*, ...) allocate, set required members
/// - _ns1__RoomAccessOption* soap_new_set__ns1__RoomAccessOption(soap*, ...) allocate, set all public members
/// - _ns1__RoomAccessOption::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RoomAccessOption(soap*, _ns1__RoomAccessOption*) deserialize from a stream
/// - int soap_write__ns1__RoomAccessOption(soap*, _ns1__RoomAccessOption*) serialize to a stream
/// - _ns1__RoomAccessOption* _ns1__RoomAccessOption::soap_dup(soap*) returns deep copy of _ns1__RoomAccessOption, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RoomAccessOption::soap_del() deep deletes _ns1__RoomAccessOption data members, use only after _ns1__RoomAccessOption::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RoomAccessOption
{ public:
/// Element "accessOption" of XSD type "http://portal.vidyo.com/user/v1_1":AccessOptionName.
    enum ns1__AccessOptionName           accessOption                   1;	///< Required element.
/// Element "value" of XSD type xs:string.
    char*                                value                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RoomAccessOptionsRequest
/// <PRE><BLOCKQUOTE>
///   Request to get Room Access Options
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RoomAccessOptionsRequest is a complexType.
///
/// class _ns1__RoomAccessOptionsRequest operations:
/// - _ns1__RoomAccessOptionsRequest* soap_new__ns1__RoomAccessOptionsRequest(soap*) allocate
/// - _ns1__RoomAccessOptionsRequest* soap_new__ns1__RoomAccessOptionsRequest(soap*, int num) allocate array
/// - _ns1__RoomAccessOptionsRequest* soap_new_req__ns1__RoomAccessOptionsRequest(soap*, ...) allocate, set required members
/// - _ns1__RoomAccessOptionsRequest* soap_new_set__ns1__RoomAccessOptionsRequest(soap*, ...) allocate, set all public members
/// - _ns1__RoomAccessOptionsRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RoomAccessOptionsRequest(soap*, _ns1__RoomAccessOptionsRequest*) deserialize from a stream
/// - int soap_write__ns1__RoomAccessOptionsRequest(soap*, _ns1__RoomAccessOptionsRequest*) serialize to a stream
/// - _ns1__RoomAccessOptionsRequest* _ns1__RoomAccessOptionsRequest::soap_dup(soap*) returns deep copy of _ns1__RoomAccessOptionsRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RoomAccessOptionsRequest::soap_del() deep deletes _ns1__RoomAccessOptionsRequest data members, use only after _ns1__RoomAccessOptionsRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RoomAccessOptionsRequest
{ public:
/// Element "roomID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        roomID                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RoomAccessOptionsResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RoomAccessOptionsResponse is a complexType.
///
/// class _ns1__RoomAccessOptionsResponse operations:
/// - _ns1__RoomAccessOptionsResponse* soap_new__ns1__RoomAccessOptionsResponse(soap*) allocate
/// - _ns1__RoomAccessOptionsResponse* soap_new__ns1__RoomAccessOptionsResponse(soap*, int num) allocate array
/// - _ns1__RoomAccessOptionsResponse* soap_new_req__ns1__RoomAccessOptionsResponse(soap*, ...) allocate, set required members
/// - _ns1__RoomAccessOptionsResponse* soap_new_set__ns1__RoomAccessOptionsResponse(soap*, ...) allocate, set all public members
/// - _ns1__RoomAccessOptionsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RoomAccessOptionsResponse(soap*, _ns1__RoomAccessOptionsResponse*) deserialize from a stream
/// - int soap_write__ns1__RoomAccessOptionsResponse(soap*, _ns1__RoomAccessOptionsResponse*) serialize to a stream
/// - _ns1__RoomAccessOptionsResponse* _ns1__RoomAccessOptionsResponse::soap_dup(soap*) returns deep copy of _ns1__RoomAccessOptionsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RoomAccessOptionsResponse::soap_del() deep deletes _ns1__RoomAccessOptionsResponse data members, use only after _ns1__RoomAccessOptionsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RoomAccessOptionsResponse
{ public:
/// Size of the dynamic array of _ns1__RoomAccessOption* is 1..unbounded.
   $int                                  __sizeRoomAccessOption         1;
/// Pointer to array _ns1__RoomAccessOption* of size 1..unbounded.
    _ns1__RoomAccessOption*             *RoomAccessOption               1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":PortalPrefixResponse
/// @brief "http://portal.vidyo.com/user/v1_1":PortalPrefixResponse is a complexType.
///
/// class _ns1__PortalPrefixResponse operations:
/// - _ns1__PortalPrefixResponse* soap_new__ns1__PortalPrefixResponse(soap*) allocate
/// - _ns1__PortalPrefixResponse* soap_new__ns1__PortalPrefixResponse(soap*, int num) allocate array
/// - _ns1__PortalPrefixResponse* soap_new_req__ns1__PortalPrefixResponse(soap*, ...) allocate, set required members
/// - _ns1__PortalPrefixResponse* soap_new_set__ns1__PortalPrefixResponse(soap*, ...) allocate, set all public members
/// - _ns1__PortalPrefixResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__PortalPrefixResponse(soap*, _ns1__PortalPrefixResponse*) deserialize from a stream
/// - int soap_write__ns1__PortalPrefixResponse(soap*, _ns1__PortalPrefixResponse*) serialize to a stream
/// - _ns1__PortalPrefixResponse* _ns1__PortalPrefixResponse::soap_dup(soap*) returns deep copy of _ns1__PortalPrefixResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__PortalPrefixResponse::soap_del() deep deletes _ns1__PortalPrefixResponse data members, use only after _ns1__PortalPrefixResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__PortalPrefixResponse
{ public:
/// Element "portalPrefix" of XSD type xs:string.
    char*                                portalPrefix                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":PrefixNotConfiguredFault
/// <PRE><BLOCKQUOTE>
///   Error returned when the portal prefix is not configured.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":PrefixNotConfiguredFault is a complexType.
///
/// class _ns1__PrefixNotConfiguredFault operations:
/// - _ns1__PrefixNotConfiguredFault* soap_new__ns1__PrefixNotConfiguredFault(soap*) allocate
/// - _ns1__PrefixNotConfiguredFault* soap_new__ns1__PrefixNotConfiguredFault(soap*, int num) allocate array
/// - _ns1__PrefixNotConfiguredFault* soap_new_req__ns1__PrefixNotConfiguredFault(soap*, ...) allocate, set required members
/// - _ns1__PrefixNotConfiguredFault* soap_new_set__ns1__PrefixNotConfiguredFault(soap*, ...) allocate, set all public members
/// - _ns1__PrefixNotConfiguredFault::soap_default(soap*) reset members to default
/// - int soap_read__ns1__PrefixNotConfiguredFault(soap*, _ns1__PrefixNotConfiguredFault*) deserialize from a stream
/// - int soap_write__ns1__PrefixNotConfiguredFault(soap*, _ns1__PrefixNotConfiguredFault*) serialize to a stream
/// - _ns1__PrefixNotConfiguredFault* _ns1__PrefixNotConfiguredFault::soap_dup(soap*) returns deep copy of _ns1__PrefixNotConfiguredFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__PrefixNotConfiguredFault::soap_del() deep deletes _ns1__PrefixNotConfiguredFault data members, use only after _ns1__PrefixNotConfiguredFault::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__PrefixNotConfiguredFault
{ public:
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":ErrorMessage.
    char*                                ErrorMessage                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":getLoginAndWelcomeBannerRequest
/// <PRE><BLOCKQUOTE>
///   This API returns login and welcome banners.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":getLoginAndWelcomeBannerRequest is a complexType.
///
/// class _ns1__getLoginAndWelcomeBannerRequest operations:
/// - _ns1__getLoginAndWelcomeBannerRequest* soap_new__ns1__getLoginAndWelcomeBannerRequest(soap*) allocate
/// - _ns1__getLoginAndWelcomeBannerRequest* soap_new__ns1__getLoginAndWelcomeBannerRequest(soap*, int num) allocate array
/// - _ns1__getLoginAndWelcomeBannerRequest* soap_new_req__ns1__getLoginAndWelcomeBannerRequest(soap*, ...) allocate, set required members
/// - _ns1__getLoginAndWelcomeBannerRequest* soap_new_set__ns1__getLoginAndWelcomeBannerRequest(soap*, ...) allocate, set all public members
/// - _ns1__getLoginAndWelcomeBannerRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getLoginAndWelcomeBannerRequest(soap*, _ns1__getLoginAndWelcomeBannerRequest*) deserialize from a stream
/// - int soap_write__ns1__getLoginAndWelcomeBannerRequest(soap*, _ns1__getLoginAndWelcomeBannerRequest*) serialize to a stream
/// - _ns1__getLoginAndWelcomeBannerRequest* _ns1__getLoginAndWelcomeBannerRequest::soap_dup(soap*) returns deep copy of _ns1__getLoginAndWelcomeBannerRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getLoginAndWelcomeBannerRequest::soap_del() deep deletes _ns1__getLoginAndWelcomeBannerRequest data members, use only after _ns1__getLoginAndWelcomeBannerRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getLoginAndWelcomeBannerRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":getLoginAndWelcomeBannerResponse
/// @brief "http://portal.vidyo.com/user/v1_1":getLoginAndWelcomeBannerResponse is a complexType.
///
/// class _ns1__getLoginAndWelcomeBannerResponse operations:
/// - _ns1__getLoginAndWelcomeBannerResponse* soap_new__ns1__getLoginAndWelcomeBannerResponse(soap*) allocate
/// - _ns1__getLoginAndWelcomeBannerResponse* soap_new__ns1__getLoginAndWelcomeBannerResponse(soap*, int num) allocate array
/// - _ns1__getLoginAndWelcomeBannerResponse* soap_new_req__ns1__getLoginAndWelcomeBannerResponse(soap*, ...) allocate, set required members
/// - _ns1__getLoginAndWelcomeBannerResponse* soap_new_set__ns1__getLoginAndWelcomeBannerResponse(soap*, ...) allocate, set all public members
/// - _ns1__getLoginAndWelcomeBannerResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getLoginAndWelcomeBannerResponse(soap*, _ns1__getLoginAndWelcomeBannerResponse*) deserialize from a stream
/// - int soap_write__ns1__getLoginAndWelcomeBannerResponse(soap*, _ns1__getLoginAndWelcomeBannerResponse*) serialize to a stream
/// - _ns1__getLoginAndWelcomeBannerResponse* _ns1__getLoginAndWelcomeBannerResponse::soap_dup(soap*) returns deep copy of _ns1__getLoginAndWelcomeBannerResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getLoginAndWelcomeBannerResponse::soap_del() deep deletes _ns1__getLoginAndWelcomeBannerResponse data members, use only after _ns1__getLoginAndWelcomeBannerResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getLoginAndWelcomeBannerResponse
{ public:
/// Element "loginBannerText" of XSD type xs:string.
    char*                                loginBannerText                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   WelcomeBannerContent for a text based message to be used on the endpoints upon successful login with the last 5 login attempts (successful and unsuccessful) for that particular user.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":WelcomeBannerContent.
    _ns1__WelcomeBannerContent*          WelcomeBannerContent           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":getUserAccountTypeRequest
/// <PRE><BLOCKQUOTE>
///   This API returns logged in user acount type.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":getUserAccountTypeRequest is a complexType.
///
/// class _ns1__getUserAccountTypeRequest operations:
/// - _ns1__getUserAccountTypeRequest* soap_new__ns1__getUserAccountTypeRequest(soap*) allocate
/// - _ns1__getUserAccountTypeRequest* soap_new__ns1__getUserAccountTypeRequest(soap*, int num) allocate array
/// - _ns1__getUserAccountTypeRequest* soap_new_req__ns1__getUserAccountTypeRequest(soap*, ...) allocate, set required members
/// - _ns1__getUserAccountTypeRequest* soap_new_set__ns1__getUserAccountTypeRequest(soap*, ...) allocate, set all public members
/// - _ns1__getUserAccountTypeRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getUserAccountTypeRequest(soap*, _ns1__getUserAccountTypeRequest*) deserialize from a stream
/// - int soap_write__ns1__getUserAccountTypeRequest(soap*, _ns1__getUserAccountTypeRequest*) serialize to a stream
/// - _ns1__getUserAccountTypeRequest* _ns1__getUserAccountTypeRequest::soap_dup(soap*) returns deep copy of _ns1__getUserAccountTypeRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getUserAccountTypeRequest::soap_del() deep deletes _ns1__getUserAccountTypeRequest data members, use only after _ns1__getUserAccountTypeRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getUserAccountTypeRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":getUserAccountTypeResponse
/// @brief "http://portal.vidyo.com/user/v1_1":getUserAccountTypeResponse is a complexType.
///
/// class _ns1__getUserAccountTypeResponse operations:
/// - _ns1__getUserAccountTypeResponse* soap_new__ns1__getUserAccountTypeResponse(soap*) allocate
/// - _ns1__getUserAccountTypeResponse* soap_new__ns1__getUserAccountTypeResponse(soap*, int num) allocate array
/// - _ns1__getUserAccountTypeResponse* soap_new_req__ns1__getUserAccountTypeResponse(soap*, ...) allocate, set required members
/// - _ns1__getUserAccountTypeResponse* soap_new_set__ns1__getUserAccountTypeResponse(soap*, ...) allocate, set all public members
/// - _ns1__getUserAccountTypeResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getUserAccountTypeResponse(soap*, _ns1__getUserAccountTypeResponse*) deserialize from a stream
/// - int soap_write__ns1__getUserAccountTypeResponse(soap*, _ns1__getUserAccountTypeResponse*) serialize to a stream
/// - _ns1__getUserAccountTypeResponse* _ns1__getUserAccountTypeResponse::soap_dup(soap*) returns deep copy of _ns1__getUserAccountTypeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getUserAccountTypeResponse::soap_del() deep deletes _ns1__getUserAccountTypeResponse data members, use only after _ns1__getUserAccountTypeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getUserAccountTypeResponse
{ public:
/// Element "userAccountType" of XSD type xs:string.
    char*                                userAccountType                1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StartLectureModeRequest
/// <PRE><BLOCKQUOTE>
///   Request to start lecture mode for the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":StartLectureModeRequest is a complexType.
///
/// class _ns1__StartLectureModeRequest operations:
/// - _ns1__StartLectureModeRequest* soap_new__ns1__StartLectureModeRequest(soap*) allocate
/// - _ns1__StartLectureModeRequest* soap_new__ns1__StartLectureModeRequest(soap*, int num) allocate array
/// - _ns1__StartLectureModeRequest* soap_new_req__ns1__StartLectureModeRequest(soap*, ...) allocate, set required members
/// - _ns1__StartLectureModeRequest* soap_new_set__ns1__StartLectureModeRequest(soap*, ...) allocate, set all public members
/// - _ns1__StartLectureModeRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StartLectureModeRequest(soap*, _ns1__StartLectureModeRequest*) deserialize from a stream
/// - int soap_write__ns1__StartLectureModeRequest(soap*, _ns1__StartLectureModeRequest*) serialize to a stream
/// - _ns1__StartLectureModeRequest* _ns1__StartLectureModeRequest::soap_dup(soap*) returns deep copy of _ns1__StartLectureModeRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StartLectureModeRequest::soap_del() deep deletes _ns1__StartLectureModeRequest data members, use only after _ns1__StartLectureModeRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StartLectureModeRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StartLectureModeResponse
/// @brief "http://portal.vidyo.com/user/v1_1":StartLectureModeResponse is a complexType.
///
/// class _ns1__StartLectureModeResponse operations:
/// - _ns1__StartLectureModeResponse* soap_new__ns1__StartLectureModeResponse(soap*) allocate
/// - _ns1__StartLectureModeResponse* soap_new__ns1__StartLectureModeResponse(soap*, int num) allocate array
/// - _ns1__StartLectureModeResponse* soap_new_req__ns1__StartLectureModeResponse(soap*, ...) allocate, set required members
/// - _ns1__StartLectureModeResponse* soap_new_set__ns1__StartLectureModeResponse(soap*, ...) allocate, set all public members
/// - _ns1__StartLectureModeResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StartLectureModeResponse(soap*, _ns1__StartLectureModeResponse*) deserialize from a stream
/// - int soap_write__ns1__StartLectureModeResponse(soap*, _ns1__StartLectureModeResponse*) serialize to a stream
/// - _ns1__StartLectureModeResponse* _ns1__StartLectureModeResponse::soap_dup(soap*) returns deep copy of _ns1__StartLectureModeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StartLectureModeResponse::soap_del() deep deletes _ns1__StartLectureModeResponse data members, use only after _ns1__StartLectureModeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StartLectureModeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StopLectureModeRequest
/// <PRE><BLOCKQUOTE>
///   Request to stop lecture mode for the conference.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":StopLectureModeRequest is a complexType.
///
/// class _ns1__StopLectureModeRequest operations:
/// - _ns1__StopLectureModeRequest* soap_new__ns1__StopLectureModeRequest(soap*) allocate
/// - _ns1__StopLectureModeRequest* soap_new__ns1__StopLectureModeRequest(soap*, int num) allocate array
/// - _ns1__StopLectureModeRequest* soap_new_req__ns1__StopLectureModeRequest(soap*, ...) allocate, set required members
/// - _ns1__StopLectureModeRequest* soap_new_set__ns1__StopLectureModeRequest(soap*, ...) allocate, set all public members
/// - _ns1__StopLectureModeRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StopLectureModeRequest(soap*, _ns1__StopLectureModeRequest*) deserialize from a stream
/// - int soap_write__ns1__StopLectureModeRequest(soap*, _ns1__StopLectureModeRequest*) serialize to a stream
/// - _ns1__StopLectureModeRequest* _ns1__StopLectureModeRequest::soap_dup(soap*) returns deep copy of _ns1__StopLectureModeRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StopLectureModeRequest::soap_del() deep deletes _ns1__StopLectureModeRequest data members, use only after _ns1__StopLectureModeRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StopLectureModeRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":StopLectureModeResponse
/// @brief "http://portal.vidyo.com/user/v1_1":StopLectureModeResponse is a complexType.
///
/// class _ns1__StopLectureModeResponse operations:
/// - _ns1__StopLectureModeResponse* soap_new__ns1__StopLectureModeResponse(soap*) allocate
/// - _ns1__StopLectureModeResponse* soap_new__ns1__StopLectureModeResponse(soap*, int num) allocate array
/// - _ns1__StopLectureModeResponse* soap_new_req__ns1__StopLectureModeResponse(soap*, ...) allocate, set required members
/// - _ns1__StopLectureModeResponse* soap_new_set__ns1__StopLectureModeResponse(soap*, ...) allocate, set all public members
/// - _ns1__StopLectureModeResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__StopLectureModeResponse(soap*, _ns1__StopLectureModeResponse*) deserialize from a stream
/// - int soap_write__ns1__StopLectureModeResponse(soap*, _ns1__StopLectureModeResponse*) serialize to a stream
/// - _ns1__StopLectureModeResponse* _ns1__StopLectureModeResponse::soap_dup(soap*) returns deep copy of _ns1__StopLectureModeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StopLectureModeResponse::soap_del() deep deletes _ns1__StopLectureModeResponse data members, use only after _ns1__StopLectureModeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__StopLectureModeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RaiseHandResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RaiseHandResponse is a complexType.
///
/// class _ns1__RaiseHandResponse operations:
/// - _ns1__RaiseHandResponse* soap_new__ns1__RaiseHandResponse(soap*) allocate
/// - _ns1__RaiseHandResponse* soap_new__ns1__RaiseHandResponse(soap*, int num) allocate array
/// - _ns1__RaiseHandResponse* soap_new_req__ns1__RaiseHandResponse(soap*, ...) allocate, set required members
/// - _ns1__RaiseHandResponse* soap_new_set__ns1__RaiseHandResponse(soap*, ...) allocate, set all public members
/// - _ns1__RaiseHandResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RaiseHandResponse(soap*, _ns1__RaiseHandResponse*) deserialize from a stream
/// - int soap_write__ns1__RaiseHandResponse(soap*, _ns1__RaiseHandResponse*) serialize to a stream
/// - _ns1__RaiseHandResponse* _ns1__RaiseHandResponse::soap_dup(soap*) returns deep copy of _ns1__RaiseHandResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RaiseHandResponse::soap_del() deep deletes _ns1__RaiseHandResponse data members, use only after _ns1__RaiseHandResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RaiseHandResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":UnraiseHandResponse
/// @brief "http://portal.vidyo.com/user/v1_1":UnraiseHandResponse is a complexType.
///
/// class _ns1__UnraiseHandResponse operations:
/// - _ns1__UnraiseHandResponse* soap_new__ns1__UnraiseHandResponse(soap*) allocate
/// - _ns1__UnraiseHandResponse* soap_new__ns1__UnraiseHandResponse(soap*, int num) allocate array
/// - _ns1__UnraiseHandResponse* soap_new_req__ns1__UnraiseHandResponse(soap*, ...) allocate, set required members
/// - _ns1__UnraiseHandResponse* soap_new_set__ns1__UnraiseHandResponse(soap*, ...) allocate, set all public members
/// - _ns1__UnraiseHandResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UnraiseHandResponse(soap*, _ns1__UnraiseHandResponse*) deserialize from a stream
/// - int soap_write__ns1__UnraiseHandResponse(soap*, _ns1__UnraiseHandResponse*) serialize to a stream
/// - _ns1__UnraiseHandResponse* _ns1__UnraiseHandResponse::soap_dup(soap*) returns deep copy of _ns1__UnraiseHandResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UnraiseHandResponse::soap_del() deep deletes _ns1__UnraiseHandResponse data members, use only after _ns1__UnraiseHandResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UnraiseHandResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DismissRaisedHandRequest
/// <PRE><BLOCKQUOTE>
///   Request to dismiss hand of given participantID (Endpoint) in the conference in lecture mode.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":DismissRaisedHandRequest is a complexType.
///
/// class _ns1__DismissRaisedHandRequest operations:
/// - _ns1__DismissRaisedHandRequest* soap_new__ns1__DismissRaisedHandRequest(soap*) allocate
/// - _ns1__DismissRaisedHandRequest* soap_new__ns1__DismissRaisedHandRequest(soap*, int num) allocate array
/// - _ns1__DismissRaisedHandRequest* soap_new_req__ns1__DismissRaisedHandRequest(soap*, ...) allocate, set required members
/// - _ns1__DismissRaisedHandRequest* soap_new_set__ns1__DismissRaisedHandRequest(soap*, ...) allocate, set all public members
/// - _ns1__DismissRaisedHandRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DismissRaisedHandRequest(soap*, _ns1__DismissRaisedHandRequest*) deserialize from a stream
/// - int soap_write__ns1__DismissRaisedHandRequest(soap*, _ns1__DismissRaisedHandRequest*) serialize to a stream
/// - _ns1__DismissRaisedHandRequest* _ns1__DismissRaisedHandRequest::soap_dup(soap*) returns deep copy of _ns1__DismissRaisedHandRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DismissRaisedHandRequest::soap_del() deep deletes _ns1__DismissRaisedHandRequest data members, use only after _ns1__DismissRaisedHandRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DismissRaisedHandRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DismissRaisedHandResponse
/// @brief "http://portal.vidyo.com/user/v1_1":DismissRaisedHandResponse is a complexType.
///
/// class _ns1__DismissRaisedHandResponse operations:
/// - _ns1__DismissRaisedHandResponse* soap_new__ns1__DismissRaisedHandResponse(soap*) allocate
/// - _ns1__DismissRaisedHandResponse* soap_new__ns1__DismissRaisedHandResponse(soap*, int num) allocate array
/// - _ns1__DismissRaisedHandResponse* soap_new_req__ns1__DismissRaisedHandResponse(soap*, ...) allocate, set required members
/// - _ns1__DismissRaisedHandResponse* soap_new_set__ns1__DismissRaisedHandResponse(soap*, ...) allocate, set all public members
/// - _ns1__DismissRaisedHandResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DismissRaisedHandResponse(soap*, _ns1__DismissRaisedHandResponse*) deserialize from a stream
/// - int soap_write__ns1__DismissRaisedHandResponse(soap*, _ns1__DismissRaisedHandResponse*) serialize to a stream
/// - _ns1__DismissRaisedHandResponse* _ns1__DismissRaisedHandResponse::soap_dup(soap*) returns deep copy of _ns1__DismissRaisedHandResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DismissRaisedHandResponse::soap_del() deep deletes _ns1__DismissRaisedHandResponse data members, use only after _ns1__DismissRaisedHandResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DismissRaisedHandResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DismissAllRaisedHandRequest
/// <PRE><BLOCKQUOTE>
///   Request to dismiss all hands of given participantID (Endpoint) in the conference in lecture mode.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":DismissAllRaisedHandRequest is a complexType.
///
/// class _ns1__DismissAllRaisedHandRequest operations:
/// - _ns1__DismissAllRaisedHandRequest* soap_new__ns1__DismissAllRaisedHandRequest(soap*) allocate
/// - _ns1__DismissAllRaisedHandRequest* soap_new__ns1__DismissAllRaisedHandRequest(soap*, int num) allocate array
/// - _ns1__DismissAllRaisedHandRequest* soap_new_req__ns1__DismissAllRaisedHandRequest(soap*, ...) allocate, set required members
/// - _ns1__DismissAllRaisedHandRequest* soap_new_set__ns1__DismissAllRaisedHandRequest(soap*, ...) allocate, set all public members
/// - _ns1__DismissAllRaisedHandRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DismissAllRaisedHandRequest(soap*, _ns1__DismissAllRaisedHandRequest*) deserialize from a stream
/// - int soap_write__ns1__DismissAllRaisedHandRequest(soap*, _ns1__DismissAllRaisedHandRequest*) serialize to a stream
/// - _ns1__DismissAllRaisedHandRequest* _ns1__DismissAllRaisedHandRequest::soap_dup(soap*) returns deep copy of _ns1__DismissAllRaisedHandRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DismissAllRaisedHandRequest::soap_del() deep deletes _ns1__DismissAllRaisedHandRequest data members, use only after _ns1__DismissAllRaisedHandRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DismissAllRaisedHandRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":DismissAllRaisedHandResponse
/// @brief "http://portal.vidyo.com/user/v1_1":DismissAllRaisedHandResponse is a complexType.
///
/// class _ns1__DismissAllRaisedHandResponse operations:
/// - _ns1__DismissAllRaisedHandResponse* soap_new__ns1__DismissAllRaisedHandResponse(soap*) allocate
/// - _ns1__DismissAllRaisedHandResponse* soap_new__ns1__DismissAllRaisedHandResponse(soap*, int num) allocate array
/// - _ns1__DismissAllRaisedHandResponse* soap_new_req__ns1__DismissAllRaisedHandResponse(soap*, ...) allocate, set required members
/// - _ns1__DismissAllRaisedHandResponse* soap_new_set__ns1__DismissAllRaisedHandResponse(soap*, ...) allocate, set all public members
/// - _ns1__DismissAllRaisedHandResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DismissAllRaisedHandResponse(soap*, _ns1__DismissAllRaisedHandResponse*) deserialize from a stream
/// - int soap_write__ns1__DismissAllRaisedHandResponse(soap*, _ns1__DismissAllRaisedHandResponse*) serialize to a stream
/// - _ns1__DismissAllRaisedHandResponse* _ns1__DismissAllRaisedHandResponse::soap_dup(soap*) returns deep copy of _ns1__DismissAllRaisedHandResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DismissAllRaisedHandResponse::soap_del() deep deletes _ns1__DismissAllRaisedHandResponse data members, use only after _ns1__DismissAllRaisedHandResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DismissAllRaisedHandResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SetPresenterRequest
/// <PRE><BLOCKQUOTE>
///   Request to make a given participantID (Endpoint) presenter for the conference in lecture mode.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":SetPresenterRequest is a complexType.
///
/// class _ns1__SetPresenterRequest operations:
/// - _ns1__SetPresenterRequest* soap_new__ns1__SetPresenterRequest(soap*) allocate
/// - _ns1__SetPresenterRequest* soap_new__ns1__SetPresenterRequest(soap*, int num) allocate array
/// - _ns1__SetPresenterRequest* soap_new_req__ns1__SetPresenterRequest(soap*, ...) allocate, set required members
/// - _ns1__SetPresenterRequest* soap_new_set__ns1__SetPresenterRequest(soap*, ...) allocate, set all public members
/// - _ns1__SetPresenterRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SetPresenterRequest(soap*, _ns1__SetPresenterRequest*) deserialize from a stream
/// - int soap_write__ns1__SetPresenterRequest(soap*, _ns1__SetPresenterRequest*) serialize to a stream
/// - _ns1__SetPresenterRequest* _ns1__SetPresenterRequest::soap_dup(soap*) returns deep copy of _ns1__SetPresenterRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetPresenterRequest::soap_del() deep deletes _ns1__SetPresenterRequest data members, use only after _ns1__SetPresenterRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetPresenterRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":SetPresenterResponse
/// @brief "http://portal.vidyo.com/user/v1_1":SetPresenterResponse is a complexType.
///
/// class _ns1__SetPresenterResponse operations:
/// - _ns1__SetPresenterResponse* soap_new__ns1__SetPresenterResponse(soap*) allocate
/// - _ns1__SetPresenterResponse* soap_new__ns1__SetPresenterResponse(soap*, int num) allocate array
/// - _ns1__SetPresenterResponse* soap_new_req__ns1__SetPresenterResponse(soap*, ...) allocate, set required members
/// - _ns1__SetPresenterResponse* soap_new_set__ns1__SetPresenterResponse(soap*, ...) allocate, set all public members
/// - _ns1__SetPresenterResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SetPresenterResponse(soap*, _ns1__SetPresenterResponse*) deserialize from a stream
/// - int soap_write__ns1__SetPresenterResponse(soap*, _ns1__SetPresenterResponse*) serialize to a stream
/// - _ns1__SetPresenterResponse* _ns1__SetPresenterResponse::soap_dup(soap*) returns deep copy of _ns1__SetPresenterResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SetPresenterResponse::soap_del() deep deletes _ns1__SetPresenterResponse data members, use only after _ns1__SetPresenterResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SetPresenterResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemovePresenterRequest
/// <PRE><BLOCKQUOTE>
///   Request to remove a given participantID (Endpoint) as presenter for the conference in lecture mode.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":RemovePresenterRequest is a complexType.
///
/// class _ns1__RemovePresenterRequest operations:
/// - _ns1__RemovePresenterRequest* soap_new__ns1__RemovePresenterRequest(soap*) allocate
/// - _ns1__RemovePresenterRequest* soap_new__ns1__RemovePresenterRequest(soap*, int num) allocate array
/// - _ns1__RemovePresenterRequest* soap_new_req__ns1__RemovePresenterRequest(soap*, ...) allocate, set required members
/// - _ns1__RemovePresenterRequest* soap_new_set__ns1__RemovePresenterRequest(soap*, ...) allocate, set all public members
/// - _ns1__RemovePresenterRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemovePresenterRequest(soap*, _ns1__RemovePresenterRequest*) deserialize from a stream
/// - int soap_write__ns1__RemovePresenterRequest(soap*, _ns1__RemovePresenterRequest*) serialize to a stream
/// - _ns1__RemovePresenterRequest* _ns1__RemovePresenterRequest::soap_dup(soap*) returns deep copy of _ns1__RemovePresenterRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemovePresenterRequest::soap_del() deep deletes _ns1__RemovePresenterRequest data members, use only after _ns1__RemovePresenterRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemovePresenterRequest
{ public:
/// Element "conferenceID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        conferenceID                   1;	///< Required element.
/// Element "participantID" of XSD type "http://portal.vidyo.com/user/v1_1":EntityID.
    ns1__EntityID                        participantID                  1;	///< Required element.
/// Element "moderatorPIN" of XSD type xs:string.
    char*                                moderatorPIN                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":RemovePresenterResponse
/// @brief "http://portal.vidyo.com/user/v1_1":RemovePresenterResponse is a complexType.
///
/// class _ns1__RemovePresenterResponse operations:
/// - _ns1__RemovePresenterResponse* soap_new__ns1__RemovePresenterResponse(soap*) allocate
/// - _ns1__RemovePresenterResponse* soap_new__ns1__RemovePresenterResponse(soap*, int num) allocate array
/// - _ns1__RemovePresenterResponse* soap_new_req__ns1__RemovePresenterResponse(soap*, ...) allocate, set required members
/// - _ns1__RemovePresenterResponse* soap_new_set__ns1__RemovePresenterResponse(soap*, ...) allocate, set all public members
/// - _ns1__RemovePresenterResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__RemovePresenterResponse(soap*, _ns1__RemovePresenterResponse*) deserialize from a stream
/// - int soap_write__ns1__RemovePresenterResponse(soap*, _ns1__RemovePresenterResponse*) serialize to a stream
/// - _ns1__RemovePresenterResponse* _ns1__RemovePresenterResponse::soap_dup(soap*) returns deep copy of _ns1__RemovePresenterResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RemovePresenterResponse::soap_del() deep deletes _ns1__RemovePresenterResponse data members, use only after _ns1__RemovePresenterResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RemovePresenterResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   string representation of successful operation - 'ok'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://portal.vidyo.com/user/v1_1:""http://portal.vidyo.com/user/v1_1":OK.
    enum _ns1__OK                        OK                             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetVidyoReplayLibraryRequest
/// <PRE><BLOCKQUOTE>
///   This API provides registered users with the link to the VidyoReplay library which hosts all the recordings on a particular tenant on the VidyoPortal.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetVidyoReplayLibraryRequest is a complexType.
///
/// class _ns1__GetVidyoReplayLibraryRequest operations:
/// - _ns1__GetVidyoReplayLibraryRequest* soap_new__ns1__GetVidyoReplayLibraryRequest(soap*) allocate
/// - _ns1__GetVidyoReplayLibraryRequest* soap_new__ns1__GetVidyoReplayLibraryRequest(soap*, int num) allocate array
/// - _ns1__GetVidyoReplayLibraryRequest* soap_new_req__ns1__GetVidyoReplayLibraryRequest(soap*, ...) allocate, set required members
/// - _ns1__GetVidyoReplayLibraryRequest* soap_new_set__ns1__GetVidyoReplayLibraryRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetVidyoReplayLibraryRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetVidyoReplayLibraryRequest(soap*, _ns1__GetVidyoReplayLibraryRequest*) deserialize from a stream
/// - int soap_write__ns1__GetVidyoReplayLibraryRequest(soap*, _ns1__GetVidyoReplayLibraryRequest*) serialize to a stream
/// - _ns1__GetVidyoReplayLibraryRequest* _ns1__GetVidyoReplayLibraryRequest::soap_dup(soap*) returns deep copy of _ns1__GetVidyoReplayLibraryRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetVidyoReplayLibraryRequest::soap_del() deep deletes _ns1__GetVidyoReplayLibraryRequest data members, use only after _ns1__GetVidyoReplayLibraryRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetVidyoReplayLibraryRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetVidyoReplayLibraryResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetVidyoReplayLibraryResponse is a complexType.
///
/// class _ns1__GetVidyoReplayLibraryResponse operations:
/// - _ns1__GetVidyoReplayLibraryResponse* soap_new__ns1__GetVidyoReplayLibraryResponse(soap*) allocate
/// - _ns1__GetVidyoReplayLibraryResponse* soap_new__ns1__GetVidyoReplayLibraryResponse(soap*, int num) allocate array
/// - _ns1__GetVidyoReplayLibraryResponse* soap_new_req__ns1__GetVidyoReplayLibraryResponse(soap*, ...) allocate, set required members
/// - _ns1__GetVidyoReplayLibraryResponse* soap_new_set__ns1__GetVidyoReplayLibraryResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetVidyoReplayLibraryResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetVidyoReplayLibraryResponse(soap*, _ns1__GetVidyoReplayLibraryResponse*) deserialize from a stream
/// - int soap_write__ns1__GetVidyoReplayLibraryResponse(soap*, _ns1__GetVidyoReplayLibraryResponse*) serialize to a stream
/// - _ns1__GetVidyoReplayLibraryResponse* _ns1__GetVidyoReplayLibraryResponse::soap_dup(soap*) returns deep copy of _ns1__GetVidyoReplayLibraryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetVidyoReplayLibraryResponse::soap_del() deep deletes _ns1__GetVidyoReplayLibraryResponse data members, use only after _ns1__GetVidyoReplayLibraryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetVidyoReplayLibraryResponse
{ public:
/// Element "authToken" of XSD type xs:string.
    char*                                authToken                      1;	///< Required element.
/// Element "vidyoReplayLibraryUrl" of XSD type xs:string.
    char*                                vidyoReplayLibraryUrl          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":WhatIsMyIPAddressRequest
/// <PRE><BLOCKQUOTE>
///   This API provides the IP address of the endpoint as seen by VidyoPortal.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":WhatIsMyIPAddressRequest is a complexType.
///
/// class _ns1__WhatIsMyIPAddressRequest operations:
/// - _ns1__WhatIsMyIPAddressRequest* soap_new__ns1__WhatIsMyIPAddressRequest(soap*) allocate
/// - _ns1__WhatIsMyIPAddressRequest* soap_new__ns1__WhatIsMyIPAddressRequest(soap*, int num) allocate array
/// - _ns1__WhatIsMyIPAddressRequest* soap_new_req__ns1__WhatIsMyIPAddressRequest(soap*, ...) allocate, set required members
/// - _ns1__WhatIsMyIPAddressRequest* soap_new_set__ns1__WhatIsMyIPAddressRequest(soap*, ...) allocate, set all public members
/// - _ns1__WhatIsMyIPAddressRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__WhatIsMyIPAddressRequest(soap*, _ns1__WhatIsMyIPAddressRequest*) deserialize from a stream
/// - int soap_write__ns1__WhatIsMyIPAddressRequest(soap*, _ns1__WhatIsMyIPAddressRequest*) serialize to a stream
/// - _ns1__WhatIsMyIPAddressRequest* _ns1__WhatIsMyIPAddressRequest::soap_dup(soap*) returns deep copy of _ns1__WhatIsMyIPAddressRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__WhatIsMyIPAddressRequest::soap_del() deep deletes _ns1__WhatIsMyIPAddressRequest data members, use only after _ns1__WhatIsMyIPAddressRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__WhatIsMyIPAddressRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":WhatIsMyIPAddressResponse
/// @brief "http://portal.vidyo.com/user/v1_1":WhatIsMyIPAddressResponse is a complexType.
///
/// class _ns1__WhatIsMyIPAddressResponse operations:
/// - _ns1__WhatIsMyIPAddressResponse* soap_new__ns1__WhatIsMyIPAddressResponse(soap*) allocate
/// - _ns1__WhatIsMyIPAddressResponse* soap_new__ns1__WhatIsMyIPAddressResponse(soap*, int num) allocate array
/// - _ns1__WhatIsMyIPAddressResponse* soap_new_req__ns1__WhatIsMyIPAddressResponse(soap*, ...) allocate, set required members
/// - _ns1__WhatIsMyIPAddressResponse* soap_new_set__ns1__WhatIsMyIPAddressResponse(soap*, ...) allocate, set all public members
/// - _ns1__WhatIsMyIPAddressResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__WhatIsMyIPAddressResponse(soap*, _ns1__WhatIsMyIPAddressResponse*) deserialize from a stream
/// - int soap_write__ns1__WhatIsMyIPAddressResponse(soap*, _ns1__WhatIsMyIPAddressResponse*) serialize to a stream
/// - _ns1__WhatIsMyIPAddressResponse* _ns1__WhatIsMyIPAddressResponse::soap_dup(soap*) returns deep copy of _ns1__WhatIsMyIPAddressResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__WhatIsMyIPAddressResponse::soap_del() deep deletes _ns1__WhatIsMyIPAddressResponse data members, use only after _ns1__WhatIsMyIPAddressResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__WhatIsMyIPAddressResponse
{ public:
/// Element "endpointExternalIPAddress" of XSD type xs:string.
    char*                                endpointExternalIPAddress      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetChangePasswordHtmlUrlWithTokenRequest
/// <PRE><BLOCKQUOTE>
///   This API provides the client with the URL of the HTML page for password changing.
/// </BLOCKQUOTE></PRE>
/// @brief "http://portal.vidyo.com/user/v1_1":GetChangePasswordHtmlUrlWithTokenRequest is a complexType.
///
/// class _ns1__GetChangePasswordHtmlUrlWithTokenRequest operations:
/// - _ns1__GetChangePasswordHtmlUrlWithTokenRequest* soap_new__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap*) allocate
/// - _ns1__GetChangePasswordHtmlUrlWithTokenRequest* soap_new__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap*, int num) allocate array
/// - _ns1__GetChangePasswordHtmlUrlWithTokenRequest* soap_new_req__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap*, ...) allocate, set required members
/// - _ns1__GetChangePasswordHtmlUrlWithTokenRequest* soap_new_set__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap*, ...) allocate, set all public members
/// - _ns1__GetChangePasswordHtmlUrlWithTokenRequest::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest*) deserialize from a stream
/// - int soap_write__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest*) serialize to a stream
/// - _ns1__GetChangePasswordHtmlUrlWithTokenRequest* _ns1__GetChangePasswordHtmlUrlWithTokenRequest::soap_dup(soap*) returns deep copy of _ns1__GetChangePasswordHtmlUrlWithTokenRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetChangePasswordHtmlUrlWithTokenRequest::soap_del() deep deletes _ns1__GetChangePasswordHtmlUrlWithTokenRequest data members, use only after _ns1__GetChangePasswordHtmlUrlWithTokenRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetChangePasswordHtmlUrlWithTokenRequest
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":GetChangePasswordHtmlUrlWithTokenResponse
/// @brief "http://portal.vidyo.com/user/v1_1":GetChangePasswordHtmlUrlWithTokenResponse is a complexType.
///
/// class _ns1__GetChangePasswordHtmlUrlWithTokenResponse operations:
/// - _ns1__GetChangePasswordHtmlUrlWithTokenResponse* soap_new__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap*) allocate
/// - _ns1__GetChangePasswordHtmlUrlWithTokenResponse* soap_new__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap*, int num) allocate array
/// - _ns1__GetChangePasswordHtmlUrlWithTokenResponse* soap_new_req__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap*, ...) allocate, set required members
/// - _ns1__GetChangePasswordHtmlUrlWithTokenResponse* soap_new_set__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetChangePasswordHtmlUrlWithTokenResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap*, _ns1__GetChangePasswordHtmlUrlWithTokenResponse*) deserialize from a stream
/// - int soap_write__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap*, _ns1__GetChangePasswordHtmlUrlWithTokenResponse*) serialize to a stream
/// - _ns1__GetChangePasswordHtmlUrlWithTokenResponse* _ns1__GetChangePasswordHtmlUrlWithTokenResponse::soap_dup(soap*) returns deep copy of _ns1__GetChangePasswordHtmlUrlWithTokenResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetChangePasswordHtmlUrlWithTokenResponse::soap_del() deep deletes _ns1__GetChangePasswordHtmlUrlWithTokenResponse data members, use only after _ns1__GetChangePasswordHtmlUrlWithTokenResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetChangePasswordHtmlUrlWithTokenResponse
{ public:
/// Element "changePasswordHtmlUrlWithToken" of XSD type xs:string.
    char*                                changePasswordHtmlUrlWithToken 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://portal.vidyo.com/user/v1_1                                        *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://portal.vidyo.com/user/v1_1":ErrorMessage of XSD type xs:string.
/// <PRE><BLOCKQUOTE>
///   String presentation of fault
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://portal.vidyo.com/user/v1_1                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	VidyoPortalUserServiceBinding 
//gsoap ns1  service type:	VidyoPortalUserServicePortType 
//gsoap ns1  service port:	http://v.vf365.cn/services/v1_1/VidyoPortalUserService/ 
//gsoap ns1  service namespace:	http://portal.vidyo.com/user/v1_1 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage VidyoPortalUserService Definitions

@section VidyoPortalUserService_bindings Service Bindings

  - @ref VidyoPortalUserServiceBinding

@section VidyoPortalUserService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page VidyoPortalUserServiceBinding Binding "VidyoPortalUserServiceBinding"

@section VidyoPortalUserServiceBinding_operations Operations of Binding "VidyoPortalUserServiceBinding"

  - @ref __ns1__logIn

  - @ref __ns1__linkEndpoint

  - @ref __ns1__logOut

  - @ref __ns1__myEndpointStatus

  - @ref __ns1__searchMyContacts

  - @ref __ns1__addToMyContacts

  - @ref __ns1__removeFromMyContacts

  - @ref __ns1__search

  - @ref __ns1__searchByEntityID

  - @ref __ns1__searchByEmail

  - @ref __ns1__getEntityByEntityID

  - @ref __ns1__inviteToConference

  - @ref __ns1__cancelOutboundCall

  - @ref __ns1__joinConference

  - @ref __ns1__joinIPCConference

  - @ref __ns1__directCall

  - @ref __ns1__getParticipants

  - @ref __ns1__getLectureModeParticipants

  - @ref __ns1__leaveConference

  - @ref __ns1__muteAudio

  - @ref __ns1__unmuteAudio

  - @ref __ns1__startVideo

  - @ref __ns1__stopVideo

  - @ref __ns1__myAccount

  - @ref __ns1__createRoomURL

  - @ref __ns1__removeRoomURL

  - @ref __ns1__createRoomPIN

  - @ref __ns1__removeRoomPIN

  - @ref __ns1__createRoom

  - @ref __ns1__deleteRoom

  - @ref __ns1__updatePassword

  - @ref __ns1__updateLanguage

  - @ref __ns1__lockRoom

  - @ref __ns1__unlockRoom

  - @ref __ns1__setMemberMode

  - @ref __ns1__getRecordingProfiles

  - @ref __ns1__startRecording

  - @ref __ns1__getPortalVersion

  - @ref __ns1__pauseRecording

  - @ref __ns1__resumeRecording

  - @ref __ns1__stopRecording

  - @ref __ns1__createWebcastURL

  - @ref __ns1__createWebcastPIN

  - @ref __ns1__removeWebcastURL

  - @ref __ns1__removeWebcastPIN

  - @ref __ns1__getWebcastURL

  - @ref __ns1__getUserName

  - @ref __ns1__getEntityByRoomKey

  - @ref __ns1__getInviteContent

  - @ref __ns1__getRoomProfiles

  - @ref __ns1__getRoomProfile

  - @ref __ns1__setRoomProfile

  - @ref __ns1__removeRoomProfile

  - @ref __ns1__createModeratorURL

  - @ref __ns1__removeModeratorURL

  - @ref __ns1__getModeratorURL

  - @ref __ns1__getModeratorURLWithToken

  - @ref __ns1__createModeratorPIN

  - @ref __ns1__removeModeratorPIN

  - @ref __ns1__getConferenceID

  - @ref __ns1__generateAuthToken

  - @ref __ns1__createScheduledRoom

  - @ref __ns1__deleteScheduledRoom

  - @ref __ns1__getPortalFeatures

  - @ref __ns1__setEndpointDetails

  - @ref __ns1__getActiveSessions

  - @ref __ns1__logoutAllOtherSessions

  - @ref __ns1__disconnectConferenceAll

  - @ref __ns1__muteAudioServerAll

  - @ref __ns1__muteAudioClientAll

  - @ref __ns1__muteVideoServerAll

  - @ref __ns1__muteVideoClientAll

  - @ref __ns1__getOnetimeAccessUrl

  - @ref __ns1__getRoomAccessOptions

  - @ref __ns1__getPortalPrefix

  - @ref __ns1__getLoginAndWelcomeBanner

  - @ref __ns1__getUserAccountType

  - @ref __ns1__startLectureMode

  - @ref __ns1__stopLectureMode

  - @ref __ns1__raiseHand

  - @ref __ns1__unraiseHand

  - @ref __ns1__dismissRaisedHand

  - @ref __ns1__dismissAllRaisedHand

  - @ref __ns1__setPresenter

  - @ref __ns1__removePresenter

  - @ref __ns1__getVidyoReplayLibrary

  - @ref __ns1__whatIsMyIPAddress

  - @ref __ns1__getChangePasswordHtmlUrlWithToken

@section VidyoPortalUserServiceBinding_ports Endpoints of Binding "VidyoPortalUserServiceBinding"

  - http://v.vf365.cn/services/v1_1/VidyoPortalUserService/

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use wsdl2h option -j to omit these declarations.

*/
mutable struct SOAP_ENV__Detail
{
/// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
/// SOAP Fault message "AccessRestrictedFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":AccessRestrictedFault".
    _ns1__AccessRestrictedFault*         ns1__AccessRestrictedFault    ;
/// SOAP Fault message "ConferenceLockedFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":ConferenceLockedFault".
    _ns1__ConferenceLockedFault*         ns1__ConferenceLockedFault    ;
/// SOAP Fault message "ControlMeetingFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":ControlMeetingFault".
    _ns1__ControlMeetingFault*           ns1__ControlMeetingFault      ;
/// SOAP Fault message "EndpointNotBoundFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":EndpointNotBoundFault".
    _ns1__EndpointNotBoundFault*         ns1__EndpointNotBoundFault    ;
/// SOAP Fault message "FeatureNotAvailableFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":FeatureNotAvailableFault".
    _ns1__FeatureNotAvailableFault*      ns1__FeatureNotAvailableFault ;
/// SOAP Fault message "GeneralFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":GeneralFault".
    _ns1__GeneralFault*                  ns1__GeneralFault             ;
/// SOAP Fault message "InPointToPointCallFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":InPointToPointCallFault".
    _ns1__InPointToPointCallFault*       ns1__InPointToPointCallFault  ;
/// SOAP Fault message "InvalidArgumentFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":InvalidArgumentFault".
    _ns1__InvalidArgumentFault*          ns1__InvalidArgumentFault     ;
/// SOAP Fault message "InvalidModeratorPINFormatFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":InvalidModeratorPINFormatFault".
    _ns1__InvalidModeratorPINFormatFault*  ns1__InvalidModeratorPINFormatFault;
/// SOAP Fault message "NotLicensedFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":NotLicensedFault".
    _ns1__NotLicensedFault*              ns1__NotLicensedFault         ;
/// SOAP Fault message "PrefixNotConfiguredFault" part "prefixNotConfiguredFault" element ""http://portal.vidyo.com/user/v1_1":PrefixNotConfiguredFault".
    _ns1__PrefixNotConfiguredFault*      ns1__PrefixNotConfiguredFault ;
/// SOAP Fault message "ResourceNotAvailableFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":ResourceNotAvailableFault".
    _ns1__ResourceNotAvailableFault*     ns1__ResourceNotAvailableFault;
/// SOAP Fault message "RoomNotFoundFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":RoomNotFoundFault".
    _ns1__RoomNotFoundFault*             ns1__RoomNotFoundFault        ;
/// SOAP Fault message "ScheduledRoomCreationFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":ScheduledRoomCreationFault".
    _ns1__ScheduledRoomCreationFault*    ns1__ScheduledRoomCreationFault;
/// SOAP Fault message "SeatLicenseExpiredFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault".
    _ns1__SeatLicenseExpiredFault*       ns1__SeatLicenseExpiredFault  ;
/// SOAP Fault message "VidyoReplayNotAvailableFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":VidyoReplayNotAvailableFault".
    _ns1__VidyoReplayNotAvailableFault*  ns1__VidyoReplayNotAvailableFault;
/// SOAP Fault message "WrongPINFault" part "fault" element ""http://portal.vidyo.com/user/v1_1":WrongPINFault".
    _ns1__WrongPINFault*                 ns1__WrongPINFault            ;
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object of type X or NULL
    _XML                                 __any                         ;	///< Catch any other content in XML string.
};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   VidyoPortalUserServiceBinding                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__logIn                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__logIn" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "logIn"

  - Addressing input action: "logIn"

  - Addressing output action: "logInResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__logIn(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__LogInRequest*                 ns1__LogInRequest,
    // output parameters:
    _ns1__LogInResponse                &ns1__LogInResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__logIn(
    struct soap *soap,
    // input parameters:
    _ns1__LogInRequest*                 ns1__LogInRequest,
    // output parameters:
    _ns1__LogInResponse                &ns1__LogInResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	logIn SOAP
//gsoap ns1  service method-style:	logIn document
//gsoap ns1  service method-encoding:	logIn literal
//gsoap ns1  service method-input-action:	logIn logIn
//gsoap ns1  service method-output-action:	logIn logInResponse
//gsoap ns1  service method-fault:	logIn ns1__NotLicensedFault
//gsoap ns1  service method-fault:	logIn ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	logIn ns1__GeneralFault
//gsoap ns1  service method-fault:	logIn ns1__SeatLicenseExpiredFault
int __ns1__logIn(
    _ns1__LogInRequest*                 ns1__LogInRequest,	///< Input parameter
    _ns1__LogInResponse                &ns1__LogInResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__linkEndpoint                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__linkEndpoint" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "linkEndpoint"

  - Addressing input action: "linkEndpoint"

  - Addressing output action: "linkEndpointResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":AccessRestrictedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__linkEndpoint(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__LinkEndpointRequest*          ns1__LinkEndpointRequest,
    // output parameters:
    _ns1__LinkEndpointResponse         &ns1__LinkEndpointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__linkEndpoint(
    struct soap *soap,
    // input parameters:
    _ns1__LinkEndpointRequest*          ns1__LinkEndpointRequest,
    // output parameters:
    _ns1__LinkEndpointResponse         &ns1__LinkEndpointResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	linkEndpoint SOAP
//gsoap ns1  service method-style:	linkEndpoint document
//gsoap ns1  service method-encoding:	linkEndpoint literal
//gsoap ns1  service method-input-action:	linkEndpoint linkEndpoint
//gsoap ns1  service method-output-action:	linkEndpoint linkEndpointResponse
//gsoap ns1  service method-fault:	linkEndpoint ns1__NotLicensedFault
//gsoap ns1  service method-fault:	linkEndpoint ns1__AccessRestrictedFault
//gsoap ns1  service method-fault:	linkEndpoint ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	linkEndpoint ns1__GeneralFault
//gsoap ns1  service method-fault:	linkEndpoint ns1__SeatLicenseExpiredFault
int __ns1__linkEndpoint(
    _ns1__LinkEndpointRequest*          ns1__LinkEndpointRequest,	///< Input parameter
    _ns1__LinkEndpointResponse         &ns1__LinkEndpointResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__logOut                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__logOut" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "logOut"

  - Addressing input action: "logOut"

  - Addressing output action: "logOutResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__logOut(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__LogOutRequest*                ns1__LogOutRequest,
    // output parameters:
    _ns1__LogOutResponse               &ns1__LogOutResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__logOut(
    struct soap *soap,
    // input parameters:
    _ns1__LogOutRequest*                ns1__LogOutRequest,
    // output parameters:
    _ns1__LogOutResponse               &ns1__LogOutResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	logOut SOAP
//gsoap ns1  service method-style:	logOut document
//gsoap ns1  service method-encoding:	logOut literal
//gsoap ns1  service method-input-action:	logOut logOut
//gsoap ns1  service method-output-action:	logOut logOutResponse
//gsoap ns1  service method-fault:	logOut ns1__NotLicensedFault
//gsoap ns1  service method-fault:	logOut ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	logOut ns1__GeneralFault
//gsoap ns1  service method-fault:	logOut ns1__SeatLicenseExpiredFault
int __ns1__logOut(
    _ns1__LogOutRequest*                ns1__LogOutRequest,	///< Input parameter
    _ns1__LogOutResponse               &ns1__LogOutResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__myEndpointStatus                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__myEndpointStatus" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "myEndpointStatus"

  - Addressing input action: "myEndpointStatus"

  - Addressing output action: "myEndpointStatusResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__myEndpointStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__MyEndpointStatusRequest*      ns1__MyEndpointStatusRequest,
    // output parameters:
    _ns1__MyEndpointStatusResponse     &ns1__MyEndpointStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__myEndpointStatus(
    struct soap *soap,
    // input parameters:
    _ns1__MyEndpointStatusRequest*      ns1__MyEndpointStatusRequest,
    // output parameters:
    _ns1__MyEndpointStatusResponse     &ns1__MyEndpointStatusResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	myEndpointStatus SOAP
//gsoap ns1  service method-style:	myEndpointStatus document
//gsoap ns1  service method-encoding:	myEndpointStatus literal
//gsoap ns1  service method-input-action:	myEndpointStatus myEndpointStatus
//gsoap ns1  service method-output-action:	myEndpointStatus myEndpointStatusResponse
//gsoap ns1  service method-fault:	myEndpointStatus ns1__NotLicensedFault
//gsoap ns1  service method-fault:	myEndpointStatus ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	myEndpointStatus ns1__GeneralFault
//gsoap ns1  service method-fault:	myEndpointStatus ns1__SeatLicenseExpiredFault
int __ns1__myEndpointStatus(
    _ns1__MyEndpointStatusRequest*      ns1__MyEndpointStatusRequest,	///< Input parameter
    _ns1__MyEndpointStatusResponse     &ns1__MyEndpointStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__searchMyContacts                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__searchMyContacts" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "searchMyContacts"

  - Addressing input action: "searchMyContacts"

  - Addressing output action: "searchMyContactsResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__searchMyContacts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SearchMyContactsRequest*      ns1__SearchMyContactsRequest,
    // output parameters:
    _ns1__SearchMyContactsResponse     &ns1__SearchMyContactsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__searchMyContacts(
    struct soap *soap,
    // input parameters:
    _ns1__SearchMyContactsRequest*      ns1__SearchMyContactsRequest,
    // output parameters:
    _ns1__SearchMyContactsResponse     &ns1__SearchMyContactsResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	searchMyContacts SOAP
//gsoap ns1  service method-style:	searchMyContacts document
//gsoap ns1  service method-encoding:	searchMyContacts literal
//gsoap ns1  service method-input-action:	searchMyContacts searchMyContacts
//gsoap ns1  service method-output-action:	searchMyContacts searchMyContactsResponse
//gsoap ns1  service method-fault:	searchMyContacts ns1__NotLicensedFault
//gsoap ns1  service method-fault:	searchMyContacts ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	searchMyContacts ns1__GeneralFault
//gsoap ns1  service method-fault:	searchMyContacts ns1__SeatLicenseExpiredFault
int __ns1__searchMyContacts(
    _ns1__SearchMyContactsRequest*      ns1__SearchMyContactsRequest,	///< Input parameter
    _ns1__SearchMyContactsResponse     &ns1__SearchMyContactsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__addToMyContacts                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__addToMyContacts" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "addToMyContacts"

  - Addressing input action: "addToMyContacts"

  - Addressing output action: "addToMyContactsResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__addToMyContacts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddToMyContactsRequest*       ns1__AddToMyContactsRequest,
    // output parameters:
    _ns1__AddToMyContactsResponse      &ns1__AddToMyContactsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__addToMyContacts(
    struct soap *soap,
    // input parameters:
    _ns1__AddToMyContactsRequest*       ns1__AddToMyContactsRequest,
    // output parameters:
    _ns1__AddToMyContactsResponse      &ns1__AddToMyContactsResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addToMyContacts SOAP
//gsoap ns1  service method-style:	addToMyContacts document
//gsoap ns1  service method-encoding:	addToMyContacts literal
//gsoap ns1  service method-input-action:	addToMyContacts addToMyContacts
//gsoap ns1  service method-output-action:	addToMyContacts addToMyContactsResponse
//gsoap ns1  service method-fault:	addToMyContacts ns1__NotLicensedFault
//gsoap ns1  service method-fault:	addToMyContacts ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	addToMyContacts ns1__GeneralFault
//gsoap ns1  service method-fault:	addToMyContacts ns1__SeatLicenseExpiredFault
int __ns1__addToMyContacts(
    _ns1__AddToMyContactsRequest*       ns1__AddToMyContactsRequest,	///< Input parameter
    _ns1__AddToMyContactsResponse      &ns1__AddToMyContactsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeFromMyContacts                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__removeFromMyContacts" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "removeFromMyContacts"

  - Addressing input action: "removeFromMyContacts"

  - Addressing output action: "removeFromMyContactsResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeFromMyContacts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RemoveFromMyContactsRequest*  ns1__RemoveFromMyContactsRequest,
    // output parameters:
    _ns1__RemoveFromMyContactsResponse &ns1__RemoveFromMyContactsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeFromMyContacts(
    struct soap *soap,
    // input parameters:
    _ns1__RemoveFromMyContactsRequest*  ns1__RemoveFromMyContactsRequest,
    // output parameters:
    _ns1__RemoveFromMyContactsResponse &ns1__RemoveFromMyContactsResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removeFromMyContacts SOAP
//gsoap ns1  service method-style:	removeFromMyContacts document
//gsoap ns1  service method-encoding:	removeFromMyContacts literal
//gsoap ns1  service method-input-action:	removeFromMyContacts removeFromMyContacts
//gsoap ns1  service method-output-action:	removeFromMyContacts removeFromMyContactsResponse
//gsoap ns1  service method-fault:	removeFromMyContacts ns1__NotLicensedFault
//gsoap ns1  service method-fault:	removeFromMyContacts ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removeFromMyContacts ns1__GeneralFault
//gsoap ns1  service method-fault:	removeFromMyContacts ns1__SeatLicenseExpiredFault
int __ns1__removeFromMyContacts(
    _ns1__RemoveFromMyContactsRequest*  ns1__RemoveFromMyContactsRequest,	///< Input parameter
    _ns1__RemoveFromMyContactsResponse &ns1__RemoveFromMyContactsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__search                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__search" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "search"

  - Addressing input action: "search"

  - Addressing output action: "searchResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__search(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SearchRequest*                ns1__SearchRequest,
    // output parameters:
    _ns1__SearchResponse               &ns1__SearchResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__search(
    struct soap *soap,
    // input parameters:
    _ns1__SearchRequest*                ns1__SearchRequest,
    // output parameters:
    _ns1__SearchResponse               &ns1__SearchResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	search SOAP
//gsoap ns1  service method-style:	search document
//gsoap ns1  service method-encoding:	search literal
//gsoap ns1  service method-input-action:	search search
//gsoap ns1  service method-output-action:	search searchResponse
//gsoap ns1  service method-fault:	search ns1__NotLicensedFault
//gsoap ns1  service method-fault:	search ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	search ns1__GeneralFault
//gsoap ns1  service method-fault:	search ns1__SeatLicenseExpiredFault
int __ns1__search(
    _ns1__SearchRequest*                ns1__SearchRequest,	///< Input parameter
    _ns1__SearchResponse               &ns1__SearchResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__searchByEntityID                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__searchByEntityID" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "searchByEntityID"

  - Addressing input action: "searchByEntityID"

  - Addressing output action: "searchByEntityIDResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__searchByEntityID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SearchByEntityIDRequest*      ns1__SearchByEntityIDRequest,
    // output parameters:
    _ns1__SearchByEntityIDResponse     &ns1__SearchByEntityIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__searchByEntityID(
    struct soap *soap,
    // input parameters:
    _ns1__SearchByEntityIDRequest*      ns1__SearchByEntityIDRequest,
    // output parameters:
    _ns1__SearchByEntityIDResponse     &ns1__SearchByEntityIDResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	searchByEntityID SOAP
//gsoap ns1  service method-style:	searchByEntityID document
//gsoap ns1  service method-encoding:	searchByEntityID literal
//gsoap ns1  service method-input-action:	searchByEntityID searchByEntityID
//gsoap ns1  service method-output-action:	searchByEntityID searchByEntityIDResponse
//gsoap ns1  service method-fault:	searchByEntityID ns1__NotLicensedFault
//gsoap ns1  service method-fault:	searchByEntityID ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	searchByEntityID ns1__GeneralFault
//gsoap ns1  service method-fault:	searchByEntityID ns1__SeatLicenseExpiredFault
int __ns1__searchByEntityID(
    _ns1__SearchByEntityIDRequest*      ns1__SearchByEntityIDRequest,	///< Input parameter
    _ns1__SearchByEntityIDResponse     &ns1__SearchByEntityIDResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__searchByEmail                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__searchByEmail" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "searchByEmail"

  - Addressing input action: "searchByEmail"

  - Addressing output action: "searchByEmailResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__searchByEmail(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SearchByEmailRequest*         ns1__SearchByEmailRequest,
    // output parameters:
    _ns1__SearchByEmailResponse        &ns1__SearchByEmailResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__searchByEmail(
    struct soap *soap,
    // input parameters:
    _ns1__SearchByEmailRequest*         ns1__SearchByEmailRequest,
    // output parameters:
    _ns1__SearchByEmailResponse        &ns1__SearchByEmailResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	searchByEmail SOAP
//gsoap ns1  service method-style:	searchByEmail document
//gsoap ns1  service method-encoding:	searchByEmail literal
//gsoap ns1  service method-input-action:	searchByEmail searchByEmail
//gsoap ns1  service method-output-action:	searchByEmail searchByEmailResponse
//gsoap ns1  service method-fault:	searchByEmail ns1__NotLicensedFault
//gsoap ns1  service method-fault:	searchByEmail ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	searchByEmail ns1__GeneralFault
//gsoap ns1  service method-fault:	searchByEmail ns1__SeatLicenseExpiredFault
int __ns1__searchByEmail(
    _ns1__SearchByEmailRequest*         ns1__SearchByEmailRequest,	///< Input parameter
    _ns1__SearchByEmailResponse        &ns1__SearchByEmailResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getEntityByEntityID                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getEntityByEntityID" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getEntityByEntityID"

  - Addressing input action: "getEntityByEntityID"

  - Addressing output action: "getEntityByEntityIDResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getEntityByEntityID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetEntityByEntityIDRequest*   ns1__GetEntityByEntityIDRequest,
    // output parameters:
    _ns1__GetEntityByEntityIDResponse  &ns1__GetEntityByEntityIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getEntityByEntityID(
    struct soap *soap,
    // input parameters:
    _ns1__GetEntityByEntityIDRequest*   ns1__GetEntityByEntityIDRequest,
    // output parameters:
    _ns1__GetEntityByEntityIDResponse  &ns1__GetEntityByEntityIDResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getEntityByEntityID SOAP
//gsoap ns1  service method-style:	getEntityByEntityID document
//gsoap ns1  service method-encoding:	getEntityByEntityID literal
//gsoap ns1  service method-input-action:	getEntityByEntityID getEntityByEntityID
//gsoap ns1  service method-output-action:	getEntityByEntityID getEntityByEntityIDResponse
//gsoap ns1  service method-fault:	getEntityByEntityID ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getEntityByEntityID ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getEntityByEntityID ns1__GeneralFault
//gsoap ns1  service method-fault:	getEntityByEntityID ns1__SeatLicenseExpiredFault
int __ns1__getEntityByEntityID(
    _ns1__GetEntityByEntityIDRequest*   ns1__GetEntityByEntityIDRequest,	///< Input parameter
    _ns1__GetEntityByEntityIDResponse  &ns1__GetEntityByEntityIDResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__inviteToConference                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__inviteToConference" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "inviteToConference"

  - Addressing input action: "inviteToConference"

  - Addressing output action: "inviteToConferenceResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__inviteToConference(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__InviteToConferenceRequest*    ns1__InviteToConferenceRequest,
    // output parameters:
    _ns1__InviteToConferenceResponse   &ns1__InviteToConferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__inviteToConference(
    struct soap *soap,
    // input parameters:
    _ns1__InviteToConferenceRequest*    ns1__InviteToConferenceRequest,
    // output parameters:
    _ns1__InviteToConferenceResponse   &ns1__InviteToConferenceResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	inviteToConference SOAP
//gsoap ns1  service method-style:	inviteToConference document
//gsoap ns1  service method-encoding:	inviteToConference literal
//gsoap ns1  service method-input-action:	inviteToConference inviteToConference
//gsoap ns1  service method-output-action:	inviteToConference inviteToConferenceResponse
//gsoap ns1  service method-fault:	inviteToConference ns1__NotLicensedFault
//gsoap ns1  service method-fault:	inviteToConference ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	inviteToConference ns1__GeneralFault
//gsoap ns1  service method-fault:	inviteToConference ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	inviteToConference ns1__SeatLicenseExpiredFault
int __ns1__inviteToConference(
    _ns1__InviteToConferenceRequest*    ns1__InviteToConferenceRequest,	///< Input parameter
    _ns1__InviteToConferenceResponse   &ns1__InviteToConferenceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cancelOutboundCall                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__cancelOutboundCall" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "cancelOutboundCall"

  - Addressing input action: "cancelOutboundCall"

  - Addressing output action: "cancelOutboundCallResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cancelOutboundCall(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CancelOutboundCallRequest*    ns1__CancelOutboundCallRequest,
    // output parameters:
    _ns1__CancelOutboundCallResponse   &ns1__CancelOutboundCallResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cancelOutboundCall(
    struct soap *soap,
    // input parameters:
    _ns1__CancelOutboundCallRequest*    ns1__CancelOutboundCallRequest,
    // output parameters:
    _ns1__CancelOutboundCallResponse   &ns1__CancelOutboundCallResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelOutboundCall SOAP
//gsoap ns1  service method-style:	cancelOutboundCall document
//gsoap ns1  service method-encoding:	cancelOutboundCall literal
//gsoap ns1  service method-input-action:	cancelOutboundCall cancelOutboundCall
//gsoap ns1  service method-output-action:	cancelOutboundCall cancelOutboundCallResponse
//gsoap ns1  service method-fault:	cancelOutboundCall ns1__NotLicensedFault
//gsoap ns1  service method-fault:	cancelOutboundCall ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	cancelOutboundCall ns1__GeneralFault
//gsoap ns1  service method-fault:	cancelOutboundCall ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	cancelOutboundCall ns1__SeatLicenseExpiredFault
int __ns1__cancelOutboundCall(
    _ns1__CancelOutboundCallRequest*    ns1__CancelOutboundCallRequest,	///< Input parameter
    _ns1__CancelOutboundCallResponse   &ns1__CancelOutboundCallResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__joinConference                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__joinConference" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "joinConference"

  - Addressing input action: "joinConference"

  - Addressing output action: "joinConferenceResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ConferenceLockedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":WrongPINFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__joinConference(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__JoinConferenceRequest*        ns1__JoinConferenceRequest,
    // output parameters:
    _ns1__JoinConferenceResponse       &ns1__JoinConferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__joinConference(
    struct soap *soap,
    // input parameters:
    _ns1__JoinConferenceRequest*        ns1__JoinConferenceRequest,
    // output parameters:
    _ns1__JoinConferenceResponse       &ns1__JoinConferenceResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	joinConference SOAP
//gsoap ns1  service method-style:	joinConference document
//gsoap ns1  service method-encoding:	joinConference literal
//gsoap ns1  service method-input-action:	joinConference joinConference
//gsoap ns1  service method-output-action:	joinConference joinConferenceResponse
//gsoap ns1  service method-fault:	joinConference ns1__NotLicensedFault
//gsoap ns1  service method-fault:	joinConference ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	joinConference ns1__GeneralFault
//gsoap ns1  service method-fault:	joinConference ns1__ConferenceLockedFault
//gsoap ns1  service method-fault:	joinConference ns1__SeatLicenseExpiredFault
//gsoap ns1  service method-fault:	joinConference ns1__WrongPINFault
int __ns1__joinConference(
    _ns1__JoinConferenceRequest*        ns1__JoinConferenceRequest,	///< Input parameter
    _ns1__JoinConferenceResponse       &ns1__JoinConferenceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__joinIPCConference                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__joinIPCConference" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "joinIPCConference"

  - Addressing input action: "joinIPCConference"

  - Addressing output action: "joinIPCConferenceResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ConferenceLockedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":WrongPINFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__joinIPCConference(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__JoinIPCConferenceRequest*     ns1__JoinIPCConferenceRequest,
    // output parameters:
    _ns1__JoinIPCConferenceResponse    &ns1__JoinIPCConferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__joinIPCConference(
    struct soap *soap,
    // input parameters:
    _ns1__JoinIPCConferenceRequest*     ns1__JoinIPCConferenceRequest,
    // output parameters:
    _ns1__JoinIPCConferenceResponse    &ns1__JoinIPCConferenceResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	joinIPCConference SOAP
//gsoap ns1  service method-style:	joinIPCConference document
//gsoap ns1  service method-encoding:	joinIPCConference literal
//gsoap ns1  service method-input-action:	joinIPCConference joinIPCConference
//gsoap ns1  service method-output-action:	joinIPCConference joinIPCConferenceResponse
//gsoap ns1  service method-fault:	joinIPCConference ns1__NotLicensedFault
//gsoap ns1  service method-fault:	joinIPCConference ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	joinIPCConference ns1__GeneralFault
//gsoap ns1  service method-fault:	joinIPCConference ns1__ConferenceLockedFault
//gsoap ns1  service method-fault:	joinIPCConference ns1__SeatLicenseExpiredFault
//gsoap ns1  service method-fault:	joinIPCConference ns1__WrongPINFault
int __ns1__joinIPCConference(
    _ns1__JoinIPCConferenceRequest*     ns1__JoinIPCConferenceRequest,	///< Input parameter
    _ns1__JoinIPCConferenceResponse    &ns1__JoinIPCConferenceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__directCall                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__directCall" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "directCall"

  - Addressing input action: "directCall"

  - Addressing output action: "directCallResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__directCall(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DirectCallRequest*            ns1__DirectCallRequest,
    // output parameters:
    _ns1__DirectCallResponse           &ns1__DirectCallResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__directCall(
    struct soap *soap,
    // input parameters:
    _ns1__DirectCallRequest*            ns1__DirectCallRequest,
    // output parameters:
    _ns1__DirectCallResponse           &ns1__DirectCallResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	directCall SOAP
//gsoap ns1  service method-style:	directCall document
//gsoap ns1  service method-encoding:	directCall literal
//gsoap ns1  service method-input-action:	directCall directCall
//gsoap ns1  service method-output-action:	directCall directCallResponse
//gsoap ns1  service method-fault:	directCall ns1__NotLicensedFault
//gsoap ns1  service method-fault:	directCall ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	directCall ns1__GeneralFault
//gsoap ns1  service method-fault:	directCall ns1__SeatLicenseExpiredFault
int __ns1__directCall(
    _ns1__DirectCallRequest*            ns1__DirectCallRequest,	///< Input parameter
    _ns1__DirectCallResponse           &ns1__DirectCallResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getParticipants                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getParticipants" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getParticipants"

  - Addressing input action: "getParticipants"

  - Addressing output action: "getParticipantsResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getParticipants(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetParticipantsRequest*       ns1__GetParticipantsRequest,
    // output parameters:
    _ns1__GetParticipantsResponse      &ns1__GetParticipantsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getParticipants(
    struct soap *soap,
    // input parameters:
    _ns1__GetParticipantsRequest*       ns1__GetParticipantsRequest,
    // output parameters:
    _ns1__GetParticipantsResponse      &ns1__GetParticipantsResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getParticipants SOAP
//gsoap ns1  service method-style:	getParticipants document
//gsoap ns1  service method-encoding:	getParticipants literal
//gsoap ns1  service method-input-action:	getParticipants getParticipants
//gsoap ns1  service method-output-action:	getParticipants getParticipantsResponse
//gsoap ns1  service method-fault:	getParticipants ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getParticipants ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getParticipants ns1__GeneralFault
//gsoap ns1  service method-fault:	getParticipants ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	getParticipants ns1__SeatLicenseExpiredFault
int __ns1__getParticipants(
    _ns1__GetParticipantsRequest*       ns1__GetParticipantsRequest,	///< Input parameter
    _ns1__GetParticipantsResponse      &ns1__GetParticipantsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getLectureModeParticipants                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getLectureModeParticipants" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getLectureModeParticipants"

  - Addressing input action: "getLectureModeParticipants"

  - Addressing output action: "getLectureModeParticipantsResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getLectureModeParticipants(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetLectureModeParticipantsRequest* ns1__GetLectureModeParticipantsRequest,
    // output parameters:
    _ns1__GetLectureModeParticipantsResponse&ns1__GetLectureModeParticipantsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getLectureModeParticipants(
    struct soap *soap,
    // input parameters:
    _ns1__GetLectureModeParticipantsRequest* ns1__GetLectureModeParticipantsRequest,
    // output parameters:
    _ns1__GetLectureModeParticipantsResponse&ns1__GetLectureModeParticipantsResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getLectureModeParticipants SOAP
//gsoap ns1  service method-style:	getLectureModeParticipants document
//gsoap ns1  service method-encoding:	getLectureModeParticipants literal
//gsoap ns1  service method-input-action:	getLectureModeParticipants getLectureModeParticipants
//gsoap ns1  service method-output-action:	getLectureModeParticipants getLectureModeParticipantsResponse
//gsoap ns1  service method-fault:	getLectureModeParticipants ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getLectureModeParticipants ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getLectureModeParticipants ns1__GeneralFault
//gsoap ns1  service method-fault:	getLectureModeParticipants ns1__ControlMeetingFault
int __ns1__getLectureModeParticipants(
    _ns1__GetLectureModeParticipantsRequest* ns1__GetLectureModeParticipantsRequest,	///< Input parameter
    _ns1__GetLectureModeParticipantsResponse&ns1__GetLectureModeParticipantsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__leaveConference                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__leaveConference" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "leaveConference"

  - Addressing input action: "leaveConference"

  - Addressing output action: "leaveConferenceResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__leaveConference(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__LeaveConferenceRequest*       ns1__LeaveConferenceRequest,
    // output parameters:
    _ns1__LeaveConferenceResponse      &ns1__LeaveConferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__leaveConference(
    struct soap *soap,
    // input parameters:
    _ns1__LeaveConferenceRequest*       ns1__LeaveConferenceRequest,
    // output parameters:
    _ns1__LeaveConferenceResponse      &ns1__LeaveConferenceResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	leaveConference SOAP
//gsoap ns1  service method-style:	leaveConference document
//gsoap ns1  service method-encoding:	leaveConference literal
//gsoap ns1  service method-input-action:	leaveConference leaveConference
//gsoap ns1  service method-output-action:	leaveConference leaveConferenceResponse
//gsoap ns1  service method-fault:	leaveConference ns1__NotLicensedFault
//gsoap ns1  service method-fault:	leaveConference ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	leaveConference ns1__GeneralFault
//gsoap ns1  service method-fault:	leaveConference ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	leaveConference ns1__SeatLicenseExpiredFault
int __ns1__leaveConference(
    _ns1__LeaveConferenceRequest*       ns1__LeaveConferenceRequest,	///< Input parameter
    _ns1__LeaveConferenceResponse      &ns1__LeaveConferenceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__muteAudio                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__muteAudio" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "muteAudio"

  - Addressing input action: "muteAudio"

  - Addressing output action: "muteAudioResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__muteAudio(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__MuteAudioRequest*             ns1__MuteAudioRequest,
    // output parameters:
    _ns1__MuteAudioResponse            &ns1__MuteAudioResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__muteAudio(
    struct soap *soap,
    // input parameters:
    _ns1__MuteAudioRequest*             ns1__MuteAudioRequest,
    // output parameters:
    _ns1__MuteAudioResponse            &ns1__MuteAudioResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	muteAudio SOAP
//gsoap ns1  service method-style:	muteAudio document
//gsoap ns1  service method-encoding:	muteAudio literal
//gsoap ns1  service method-input-action:	muteAudio muteAudio
//gsoap ns1  service method-output-action:	muteAudio muteAudioResponse
//gsoap ns1  service method-fault:	muteAudio ns1__NotLicensedFault
//gsoap ns1  service method-fault:	muteAudio ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	muteAudio ns1__GeneralFault
//gsoap ns1  service method-fault:	muteAudio ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	muteAudio ns1__SeatLicenseExpiredFault
int __ns1__muteAudio(
    _ns1__MuteAudioRequest*             ns1__MuteAudioRequest,	///< Input parameter
    _ns1__MuteAudioResponse            &ns1__MuteAudioResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__unmuteAudio                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__unmuteAudio" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "unmuteAudio"

  - Addressing input action: "unmuteAudio"

  - Addressing output action: "unmuteAudioResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__unmuteAudio(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UnmuteAudioRequest*           ns1__UnmuteAudioRequest,
    // output parameters:
    _ns1__UnmuteAudioResponse          &ns1__UnmuteAudioResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__unmuteAudio(
    struct soap *soap,
    // input parameters:
    _ns1__UnmuteAudioRequest*           ns1__UnmuteAudioRequest,
    // output parameters:
    _ns1__UnmuteAudioResponse          &ns1__UnmuteAudioResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	unmuteAudio SOAP
//gsoap ns1  service method-style:	unmuteAudio document
//gsoap ns1  service method-encoding:	unmuteAudio literal
//gsoap ns1  service method-input-action:	unmuteAudio unmuteAudio
//gsoap ns1  service method-output-action:	unmuteAudio unmuteAudioResponse
//gsoap ns1  service method-fault:	unmuteAudio ns1__NotLicensedFault
//gsoap ns1  service method-fault:	unmuteAudio ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	unmuteAudio ns1__GeneralFault
//gsoap ns1  service method-fault:	unmuteAudio ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	unmuteAudio ns1__SeatLicenseExpiredFault
int __ns1__unmuteAudio(
    _ns1__UnmuteAudioRequest*           ns1__UnmuteAudioRequest,	///< Input parameter
    _ns1__UnmuteAudioResponse          &ns1__UnmuteAudioResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__startVideo                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__startVideo" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "startVideo"

  - Addressing input action: "startVideo"

  - Addressing output action: "startVideoResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__startVideo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StartVideoRequest*            ns1__StartVideoRequest,
    // output parameters:
    _ns1__StartVideoResponse           &ns1__StartVideoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__startVideo(
    struct soap *soap,
    // input parameters:
    _ns1__StartVideoRequest*            ns1__StartVideoRequest,
    // output parameters:
    _ns1__StartVideoResponse           &ns1__StartVideoResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	startVideo SOAP
//gsoap ns1  service method-style:	startVideo document
//gsoap ns1  service method-encoding:	startVideo literal
//gsoap ns1  service method-input-action:	startVideo startVideo
//gsoap ns1  service method-output-action:	startVideo startVideoResponse
//gsoap ns1  service method-fault:	startVideo ns1__NotLicensedFault
//gsoap ns1  service method-fault:	startVideo ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	startVideo ns1__GeneralFault
//gsoap ns1  service method-fault:	startVideo ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	startVideo ns1__SeatLicenseExpiredFault
int __ns1__startVideo(
    _ns1__StartVideoRequest*            ns1__StartVideoRequest,	///< Input parameter
    _ns1__StartVideoResponse           &ns1__StartVideoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__stopVideo                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__stopVideo" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "stopVideo"

  - Addressing input action: "stopVideo"

  - Addressing output action: "stopVideoResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__stopVideo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StopVideoRequest*             ns1__StopVideoRequest,
    // output parameters:
    _ns1__StopVideoResponse            &ns1__StopVideoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__stopVideo(
    struct soap *soap,
    // input parameters:
    _ns1__StopVideoRequest*             ns1__StopVideoRequest,
    // output parameters:
    _ns1__StopVideoResponse            &ns1__StopVideoResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	stopVideo SOAP
//gsoap ns1  service method-style:	stopVideo document
//gsoap ns1  service method-encoding:	stopVideo literal
//gsoap ns1  service method-input-action:	stopVideo stopVideo
//gsoap ns1  service method-output-action:	stopVideo stopVideoResponse
//gsoap ns1  service method-fault:	stopVideo ns1__NotLicensedFault
//gsoap ns1  service method-fault:	stopVideo ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	stopVideo ns1__GeneralFault
//gsoap ns1  service method-fault:	stopVideo ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	stopVideo ns1__SeatLicenseExpiredFault
int __ns1__stopVideo(
    _ns1__StopVideoRequest*             ns1__StopVideoRequest,	///< Input parameter
    _ns1__StopVideoResponse            &ns1__StopVideoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__myAccount                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__myAccount" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "myAccount"

  - Addressing input action: "myAccount"

  - Addressing output action: "myAccountResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__myAccount(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__MyAccountRequest*             ns1__MyAccountRequest,
    // output parameters:
    _ns1__MyAccountResponse            &ns1__MyAccountResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__myAccount(
    struct soap *soap,
    // input parameters:
    _ns1__MyAccountRequest*             ns1__MyAccountRequest,
    // output parameters:
    _ns1__MyAccountResponse            &ns1__MyAccountResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	myAccount SOAP
//gsoap ns1  service method-style:	myAccount document
//gsoap ns1  service method-encoding:	myAccount literal
//gsoap ns1  service method-input-action:	myAccount myAccount
//gsoap ns1  service method-output-action:	myAccount myAccountResponse
//gsoap ns1  service method-fault:	myAccount ns1__NotLicensedFault
//gsoap ns1  service method-fault:	myAccount ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	myAccount ns1__GeneralFault
//gsoap ns1  service method-fault:	myAccount ns1__SeatLicenseExpiredFault
int __ns1__myAccount(
    _ns1__MyAccountRequest*             ns1__MyAccountRequest,	///< Input parameter
    _ns1__MyAccountResponse            &ns1__MyAccountResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createRoomURL                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createRoomURL" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "createRoomURL"

  - Addressing input action: "createRoomURL"

  - Addressing output action: "createRoomURLResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createRoomURL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateRoomURLRequest*         ns1__CreateRoomURLRequest,
    // output parameters:
    _ns1__CreateRoomURLResponse        &ns1__CreateRoomURLResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createRoomURL(
    struct soap *soap,
    // input parameters:
    _ns1__CreateRoomURLRequest*         ns1__CreateRoomURLRequest,
    // output parameters:
    _ns1__CreateRoomURLResponse        &ns1__CreateRoomURLResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createRoomURL SOAP
//gsoap ns1  service method-style:	createRoomURL document
//gsoap ns1  service method-encoding:	createRoomURL literal
//gsoap ns1  service method-input-action:	createRoomURL createRoomURL
//gsoap ns1  service method-output-action:	createRoomURL createRoomURLResponse
//gsoap ns1  service method-fault:	createRoomURL ns1__NotLicensedFault
//gsoap ns1  service method-fault:	createRoomURL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	createRoomURL ns1__GeneralFault
//gsoap ns1  service method-fault:	createRoomURL ns1__SeatLicenseExpiredFault
int __ns1__createRoomURL(
    _ns1__CreateRoomURLRequest*         ns1__CreateRoomURLRequest,	///< Input parameter
    _ns1__CreateRoomURLResponse        &ns1__CreateRoomURLResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeRoomURL                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__removeRoomURL" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "removeRoomURL"

  - Addressing input action: "removeRoomURL"

  - Addressing output action: "removeRoomURLResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeRoomURL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RemoveRoomURLRequest*         ns1__RemoveRoomURLRequest,
    // output parameters:
    _ns1__RemoveRoomURLResponse        &ns1__RemoveRoomURLResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeRoomURL(
    struct soap *soap,
    // input parameters:
    _ns1__RemoveRoomURLRequest*         ns1__RemoveRoomURLRequest,
    // output parameters:
    _ns1__RemoveRoomURLResponse        &ns1__RemoveRoomURLResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removeRoomURL SOAP
//gsoap ns1  service method-style:	removeRoomURL document
//gsoap ns1  service method-encoding:	removeRoomURL literal
//gsoap ns1  service method-input-action:	removeRoomURL removeRoomURL
//gsoap ns1  service method-output-action:	removeRoomURL removeRoomURLResponse
//gsoap ns1  service method-fault:	removeRoomURL ns1__NotLicensedFault
//gsoap ns1  service method-fault:	removeRoomURL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removeRoomURL ns1__GeneralFault
//gsoap ns1  service method-fault:	removeRoomURL ns1__SeatLicenseExpiredFault
int __ns1__removeRoomURL(
    _ns1__RemoveRoomURLRequest*         ns1__RemoveRoomURLRequest,	///< Input parameter
    _ns1__RemoveRoomURLResponse        &ns1__RemoveRoomURLResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createRoomPIN                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createRoomPIN" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "createRoomPIN"

  - Addressing input action: "createRoomPIN"

  - Addressing output action: "createRoomPINResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createRoomPIN(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateRoomPINRequest*         ns1__CreateRoomPINRequest,
    // output parameters:
    _ns1__CreateRoomPINResponse        &ns1__CreateRoomPINResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createRoomPIN(
    struct soap *soap,
    // input parameters:
    _ns1__CreateRoomPINRequest*         ns1__CreateRoomPINRequest,
    // output parameters:
    _ns1__CreateRoomPINResponse        &ns1__CreateRoomPINResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createRoomPIN SOAP
//gsoap ns1  service method-style:	createRoomPIN document
//gsoap ns1  service method-encoding:	createRoomPIN literal
//gsoap ns1  service method-input-action:	createRoomPIN createRoomPIN
//gsoap ns1  service method-output-action:	createRoomPIN createRoomPINResponse
//gsoap ns1  service method-fault:	createRoomPIN ns1__NotLicensedFault
//gsoap ns1  service method-fault:	createRoomPIN ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	createRoomPIN ns1__GeneralFault
//gsoap ns1  service method-fault:	createRoomPIN ns1__SeatLicenseExpiredFault
int __ns1__createRoomPIN(
    _ns1__CreateRoomPINRequest*         ns1__CreateRoomPINRequest,	///< Input parameter
    _ns1__CreateRoomPINResponse        &ns1__CreateRoomPINResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeRoomPIN                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__removeRoomPIN" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "removeRoomPIN"

  - Addressing input action: "removeRoomPIN"

  - Addressing output action: "removeRoomPINResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeRoomPIN(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RemoveRoomPINRequest*         ns1__RemoveRoomPINRequest,
    // output parameters:
    _ns1__RemoveRoomPINResponse        &ns1__RemoveRoomPINResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeRoomPIN(
    struct soap *soap,
    // input parameters:
    _ns1__RemoveRoomPINRequest*         ns1__RemoveRoomPINRequest,
    // output parameters:
    _ns1__RemoveRoomPINResponse        &ns1__RemoveRoomPINResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removeRoomPIN SOAP
//gsoap ns1  service method-style:	removeRoomPIN document
//gsoap ns1  service method-encoding:	removeRoomPIN literal
//gsoap ns1  service method-input-action:	removeRoomPIN removeRoomPIN
//gsoap ns1  service method-output-action:	removeRoomPIN removeRoomPINResponse
//gsoap ns1  service method-fault:	removeRoomPIN ns1__NotLicensedFault
//gsoap ns1  service method-fault:	removeRoomPIN ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removeRoomPIN ns1__GeneralFault
//gsoap ns1  service method-fault:	removeRoomPIN ns1__SeatLicenseExpiredFault
int __ns1__removeRoomPIN(
    _ns1__RemoveRoomPINRequest*         ns1__RemoveRoomPINRequest,	///< Input parameter
    _ns1__RemoveRoomPINResponse        &ns1__RemoveRoomPINResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createRoom                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createRoom" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "createRoom"

  - Addressing input action: "createRoom"

  - Addressing output action: "createRoomResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createRoom(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateRoomRequest*            ns1__CreateRoomRequest,
    // output parameters:
    _ns1__CreateRoomResponse           &ns1__CreateRoomResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createRoom(
    struct soap *soap,
    // input parameters:
    _ns1__CreateRoomRequest*            ns1__CreateRoomRequest,
    // output parameters:
    _ns1__CreateRoomResponse           &ns1__CreateRoomResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createRoom SOAP
//gsoap ns1  service method-style:	createRoom document
//gsoap ns1  service method-encoding:	createRoom literal
//gsoap ns1  service method-input-action:	createRoom createRoom
//gsoap ns1  service method-output-action:	createRoom createRoomResponse
//gsoap ns1  service method-fault:	createRoom ns1__NotLicensedFault
//gsoap ns1  service method-fault:	createRoom ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	createRoom ns1__GeneralFault
//gsoap ns1  service method-fault:	createRoom ns1__SeatLicenseExpiredFault
int __ns1__createRoom(
    _ns1__CreateRoomRequest*            ns1__CreateRoomRequest,	///< Input parameter
    _ns1__CreateRoomResponse           &ns1__CreateRoomResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteRoom                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteRoom" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "deleteRoom"

  - Addressing input action: "deleteRoom"

  - Addressing output action: "deleteRoomResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteRoom(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DeleteRoomRequest*            ns1__DeleteRoomRequest,
    // output parameters:
    _ns1__DeleteRoomResponse           &ns1__DeleteRoomResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteRoom(
    struct soap *soap,
    // input parameters:
    _ns1__DeleteRoomRequest*            ns1__DeleteRoomRequest,
    // output parameters:
    _ns1__DeleteRoomResponse           &ns1__DeleteRoomResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteRoom SOAP
//gsoap ns1  service method-style:	deleteRoom document
//gsoap ns1  service method-encoding:	deleteRoom literal
//gsoap ns1  service method-input-action:	deleteRoom deleteRoom
//gsoap ns1  service method-output-action:	deleteRoom deleteRoomResponse
//gsoap ns1  service method-fault:	deleteRoom ns1__NotLicensedFault
//gsoap ns1  service method-fault:	deleteRoom ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	deleteRoom ns1__GeneralFault
//gsoap ns1  service method-fault:	deleteRoom ns1__SeatLicenseExpiredFault
int __ns1__deleteRoom(
    _ns1__DeleteRoomRequest*            ns1__DeleteRoomRequest,	///< Input parameter
    _ns1__DeleteRoomResponse           &ns1__DeleteRoomResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updatePassword                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__updatePassword" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "updatePassword"

  - Addressing input action: "updatePassword"

  - Addressing output action: "updatePasswordResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updatePassword(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdatePasswordRequest*        ns1__UpdatePasswordRequest,
    // output parameters:
    _ns1__UpdatePasswordResponse       &ns1__UpdatePasswordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updatePassword(
    struct soap *soap,
    // input parameters:
    _ns1__UpdatePasswordRequest*        ns1__UpdatePasswordRequest,
    // output parameters:
    _ns1__UpdatePasswordResponse       &ns1__UpdatePasswordResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	updatePassword SOAP
//gsoap ns1  service method-style:	updatePassword document
//gsoap ns1  service method-encoding:	updatePassword literal
//gsoap ns1  service method-input-action:	updatePassword updatePassword
//gsoap ns1  service method-output-action:	updatePassword updatePasswordResponse
//gsoap ns1  service method-fault:	updatePassword ns1__NotLicensedFault
//gsoap ns1  service method-fault:	updatePassword ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	updatePassword ns1__GeneralFault
//gsoap ns1  service method-fault:	updatePassword ns1__SeatLicenseExpiredFault
int __ns1__updatePassword(
    _ns1__UpdatePasswordRequest*        ns1__UpdatePasswordRequest,	///< Input parameter
    _ns1__UpdatePasswordResponse       &ns1__UpdatePasswordResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateLanguage                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__updateLanguage" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "updateLanguage"

  - Addressing input action: "updateLanguage"

  - Addressing output action: "updateLanguageResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateLanguage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateLanguageRequest*        ns1__UpdateLanguageRequest,
    // output parameters:
    _ns1__UpdateLanguageResponse       &ns1__UpdateLanguageResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateLanguage(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateLanguageRequest*        ns1__UpdateLanguageRequest,
    // output parameters:
    _ns1__UpdateLanguageResponse       &ns1__UpdateLanguageResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	updateLanguage SOAP
//gsoap ns1  service method-style:	updateLanguage document
//gsoap ns1  service method-encoding:	updateLanguage literal
//gsoap ns1  service method-input-action:	updateLanguage updateLanguage
//gsoap ns1  service method-output-action:	updateLanguage updateLanguageResponse
//gsoap ns1  service method-fault:	updateLanguage ns1__NotLicensedFault
//gsoap ns1  service method-fault:	updateLanguage ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	updateLanguage ns1__GeneralFault
//gsoap ns1  service method-fault:	updateLanguage ns1__SeatLicenseExpiredFault
int __ns1__updateLanguage(
    _ns1__UpdateLanguageRequest*        ns1__UpdateLanguageRequest,	///< Input parameter
    _ns1__UpdateLanguageResponse       &ns1__UpdateLanguageResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__lockRoom                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__lockRoom" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "lockRoom"

  - Addressing input action: "lockRoom"

  - Addressing output action: "lockRoomResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__lockRoom(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__LockRoomRequest*              ns1__LockRoomRequest,
    // output parameters:
    _ns1__LockRoomResponse             &ns1__LockRoomResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__lockRoom(
    struct soap *soap,
    // input parameters:
    _ns1__LockRoomRequest*              ns1__LockRoomRequest,
    // output parameters:
    _ns1__LockRoomResponse             &ns1__LockRoomResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	lockRoom SOAP
//gsoap ns1  service method-style:	lockRoom document
//gsoap ns1  service method-encoding:	lockRoom literal
//gsoap ns1  service method-input-action:	lockRoom lockRoom
//gsoap ns1  service method-output-action:	lockRoom lockRoomResponse
//gsoap ns1  service method-fault:	lockRoom ns1__NotLicensedFault
//gsoap ns1  service method-fault:	lockRoom ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	lockRoom ns1__GeneralFault
//gsoap ns1  service method-fault:	lockRoom ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	lockRoom ns1__SeatLicenseExpiredFault
int __ns1__lockRoom(
    _ns1__LockRoomRequest*              ns1__LockRoomRequest,	///< Input parameter
    _ns1__LockRoomResponse             &ns1__LockRoomResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__unlockRoom                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__unlockRoom" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "unlockRoom"

  - Addressing input action: "unlockRoom"

  - Addressing output action: "unlockRoomResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__unlockRoom(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UnlockRoomRequest*            ns1__UnlockRoomRequest,
    // output parameters:
    _ns1__UnlockRoomResponse           &ns1__UnlockRoomResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__unlockRoom(
    struct soap *soap,
    // input parameters:
    _ns1__UnlockRoomRequest*            ns1__UnlockRoomRequest,
    // output parameters:
    _ns1__UnlockRoomResponse           &ns1__UnlockRoomResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	unlockRoom SOAP
//gsoap ns1  service method-style:	unlockRoom document
//gsoap ns1  service method-encoding:	unlockRoom literal
//gsoap ns1  service method-input-action:	unlockRoom unlockRoom
//gsoap ns1  service method-output-action:	unlockRoom unlockRoomResponse
//gsoap ns1  service method-fault:	unlockRoom ns1__NotLicensedFault
//gsoap ns1  service method-fault:	unlockRoom ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	unlockRoom ns1__GeneralFault
//gsoap ns1  service method-fault:	unlockRoom ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	unlockRoom ns1__SeatLicenseExpiredFault
int __ns1__unlockRoom(
    _ns1__UnlockRoomRequest*            ns1__UnlockRoomRequest,	///< Input parameter
    _ns1__UnlockRoomResponse           &ns1__UnlockRoomResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setMemberMode                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__setMemberMode" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "setMemberMode"

  - Addressing input action: "setMemberMode"

  - Addressing output action: "setMemberModeResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setMemberMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetMemberModeRequest*         ns1__SetMemberModeRequest,
    // output parameters:
    _ns1__SetMemberModeResponse        &ns1__SetMemberModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setMemberMode(
    struct soap *soap,
    // input parameters:
    _ns1__SetMemberModeRequest*         ns1__SetMemberModeRequest,
    // output parameters:
    _ns1__SetMemberModeResponse        &ns1__SetMemberModeResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	setMemberMode SOAP
//gsoap ns1  service method-style:	setMemberMode document
//gsoap ns1  service method-encoding:	setMemberMode literal
//gsoap ns1  service method-input-action:	setMemberMode setMemberMode
//gsoap ns1  service method-output-action:	setMemberMode setMemberModeResponse
//gsoap ns1  service method-fault:	setMemberMode ns1__NotLicensedFault
//gsoap ns1  service method-fault:	setMemberMode ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	setMemberMode ns1__GeneralFault
//gsoap ns1  service method-fault:	setMemberMode ns1__SeatLicenseExpiredFault
int __ns1__setMemberMode(
    _ns1__SetMemberModeRequest*         ns1__SetMemberModeRequest,	///< Input parameter
    _ns1__SetMemberModeResponse        &ns1__SetMemberModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRecordingProfiles                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRecordingProfiles" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getRecordingProfiles"

  - Addressing input action: "getRecordingProfiles"

  - Addressing output action: "getRecordingProfilesResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRecordingProfiles(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetRecordingProfilesRequest*  ns1__GetRecordingProfilesRequest,
    // output parameters:
    _ns1__GetRecordingProfilesResponse &ns1__GetRecordingProfilesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRecordingProfiles(
    struct soap *soap,
    // input parameters:
    _ns1__GetRecordingProfilesRequest*  ns1__GetRecordingProfilesRequest,
    // output parameters:
    _ns1__GetRecordingProfilesResponse &ns1__GetRecordingProfilesResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRecordingProfiles SOAP
//gsoap ns1  service method-style:	getRecordingProfiles document
//gsoap ns1  service method-encoding:	getRecordingProfiles literal
//gsoap ns1  service method-input-action:	getRecordingProfiles getRecordingProfiles
//gsoap ns1  service method-output-action:	getRecordingProfiles getRecordingProfilesResponse
//gsoap ns1  service method-fault:	getRecordingProfiles ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getRecordingProfiles ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getRecordingProfiles ns1__GeneralFault
//gsoap ns1  service method-fault:	getRecordingProfiles ns1__SeatLicenseExpiredFault
int __ns1__getRecordingProfiles(
    _ns1__GetRecordingProfilesRequest*  ns1__GetRecordingProfilesRequest,	///< Input parameter
    _ns1__GetRecordingProfilesResponse &ns1__GetRecordingProfilesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__startRecording                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__startRecording" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "startRecording"

  - Addressing input action: "startRecording"

  - Addressing output action: "startRecordingResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ResourceNotAvailableFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__startRecording(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StartRecordingRequest*        ns1__StartRecordingRequest,
    // output parameters:
    _ns1__StartRecordingResponse       &ns1__StartRecordingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__startRecording(
    struct soap *soap,
    // input parameters:
    _ns1__StartRecordingRequest*        ns1__StartRecordingRequest,
    // output parameters:
    _ns1__StartRecordingResponse       &ns1__StartRecordingResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	startRecording SOAP
//gsoap ns1  service method-style:	startRecording document
//gsoap ns1  service method-encoding:	startRecording literal
//gsoap ns1  service method-input-action:	startRecording startRecording
//gsoap ns1  service method-output-action:	startRecording startRecordingResponse
//gsoap ns1  service method-fault:	startRecording ns1__NotLicensedFault
//gsoap ns1  service method-fault:	startRecording ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	startRecording ns1__ResourceNotAvailableFault
//gsoap ns1  service method-fault:	startRecording ns1__GeneralFault
//gsoap ns1  service method-fault:	startRecording ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	startRecording ns1__SeatLicenseExpiredFault
int __ns1__startRecording(
    _ns1__StartRecordingRequest*        ns1__StartRecordingRequest,	///< Input parameter
    _ns1__StartRecordingResponse       &ns1__StartRecordingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getPortalVersion                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getPortalVersion" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getPortalVersion"

  - Addressing input action: "getPortalVersion"

  - Addressing output action: "getPortalVersionResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getPortalVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetPortalVersionRequest*      ns1__GetPortalVersionRequest,
    // output parameters:
    _ns1__GetPortalVersionResponse     &ns1__GetPortalVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getPortalVersion(
    struct soap *soap,
    // input parameters:
    _ns1__GetPortalVersionRequest*      ns1__GetPortalVersionRequest,
    // output parameters:
    _ns1__GetPortalVersionResponse     &ns1__GetPortalVersionResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getPortalVersion SOAP
//gsoap ns1  service method-style:	getPortalVersion document
//gsoap ns1  service method-encoding:	getPortalVersion literal
//gsoap ns1  service method-input-action:	getPortalVersion getPortalVersion
//gsoap ns1  service method-output-action:	getPortalVersion getPortalVersionResponse
//gsoap ns1  service method-fault:	getPortalVersion ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getPortalVersion ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getPortalVersion ns1__GeneralFault
//gsoap ns1  service method-fault:	getPortalVersion ns1__SeatLicenseExpiredFault
int __ns1__getPortalVersion(
    _ns1__GetPortalVersionRequest*      ns1__GetPortalVersionRequest,	///< Input parameter
    _ns1__GetPortalVersionResponse     &ns1__GetPortalVersionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__pauseRecording                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__pauseRecording" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "pauseRecording"

  - Addressing input action: "pauseRecording"

  - Addressing output action: "pauseRecordingResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__pauseRecording(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__PauseRecordingRequest*        ns1__PauseRecordingRequest,
    // output parameters:
    _ns1__PauseRecordingResponse       &ns1__PauseRecordingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__pauseRecording(
    struct soap *soap,
    // input parameters:
    _ns1__PauseRecordingRequest*        ns1__PauseRecordingRequest,
    // output parameters:
    _ns1__PauseRecordingResponse       &ns1__PauseRecordingResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	pauseRecording SOAP
//gsoap ns1  service method-style:	pauseRecording document
//gsoap ns1  service method-encoding:	pauseRecording literal
//gsoap ns1  service method-input-action:	pauseRecording pauseRecording
//gsoap ns1  service method-output-action:	pauseRecording pauseRecordingResponse
//gsoap ns1  service method-fault:	pauseRecording ns1__NotLicensedFault
//gsoap ns1  service method-fault:	pauseRecording ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	pauseRecording ns1__GeneralFault
//gsoap ns1  service method-fault:	pauseRecording ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	pauseRecording ns1__SeatLicenseExpiredFault
int __ns1__pauseRecording(
    _ns1__PauseRecordingRequest*        ns1__PauseRecordingRequest,	///< Input parameter
    _ns1__PauseRecordingResponse       &ns1__PauseRecordingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__resumeRecording                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__resumeRecording" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "resumeRecording"

  - Addressing input action: "resumeRecording"

  - Addressing output action: "resumeRecordingResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__resumeRecording(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ResumeRecordingRequest*       ns1__ResumeRecordingRequest,
    // output parameters:
    _ns1__ResumeRecordingResponse      &ns1__ResumeRecordingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__resumeRecording(
    struct soap *soap,
    // input parameters:
    _ns1__ResumeRecordingRequest*       ns1__ResumeRecordingRequest,
    // output parameters:
    _ns1__ResumeRecordingResponse      &ns1__ResumeRecordingResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	resumeRecording SOAP
//gsoap ns1  service method-style:	resumeRecording document
//gsoap ns1  service method-encoding:	resumeRecording literal
//gsoap ns1  service method-input-action:	resumeRecording resumeRecording
//gsoap ns1  service method-output-action:	resumeRecording resumeRecordingResponse
//gsoap ns1  service method-fault:	resumeRecording ns1__NotLicensedFault
//gsoap ns1  service method-fault:	resumeRecording ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	resumeRecording ns1__GeneralFault
//gsoap ns1  service method-fault:	resumeRecording ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	resumeRecording ns1__SeatLicenseExpiredFault
int __ns1__resumeRecording(
    _ns1__ResumeRecordingRequest*       ns1__ResumeRecordingRequest,	///< Input parameter
    _ns1__ResumeRecordingResponse      &ns1__ResumeRecordingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__stopRecording                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__stopRecording" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "stopRecording"

  - Addressing input action: "stopRecording"

  - Addressing output action: "stopRecordingResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__stopRecording(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StopRecordingRequest*         ns1__StopRecordingRequest,
    // output parameters:
    _ns1__StopRecordingResponse        &ns1__StopRecordingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__stopRecording(
    struct soap *soap,
    // input parameters:
    _ns1__StopRecordingRequest*         ns1__StopRecordingRequest,
    // output parameters:
    _ns1__StopRecordingResponse        &ns1__StopRecordingResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	stopRecording SOAP
//gsoap ns1  service method-style:	stopRecording document
//gsoap ns1  service method-encoding:	stopRecording literal
//gsoap ns1  service method-input-action:	stopRecording stopRecording
//gsoap ns1  service method-output-action:	stopRecording stopRecordingResponse
//gsoap ns1  service method-fault:	stopRecording ns1__NotLicensedFault
//gsoap ns1  service method-fault:	stopRecording ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	stopRecording ns1__GeneralFault
//gsoap ns1  service method-fault:	stopRecording ns1__ControlMeetingFault
//gsoap ns1  service method-fault:	stopRecording ns1__SeatLicenseExpiredFault
int __ns1__stopRecording(
    _ns1__StopRecordingRequest*         ns1__StopRecordingRequest,	///< Input parameter
    _ns1__StopRecordingResponse        &ns1__StopRecordingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createWebcastURL                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createWebcastURL" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "createWebcastURL"

  - Addressing input action: "createWebcastURL"

  - Addressing output action: "createWebcastURLResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createWebcastURL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateWebcastURLRequest*      ns1__CreateWebcastURLRequest,
    // output parameters:
    _ns1__CreateWebcastURLResponse     &ns1__CreateWebcastURLResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createWebcastURL(
    struct soap *soap,
    // input parameters:
    _ns1__CreateWebcastURLRequest*      ns1__CreateWebcastURLRequest,
    // output parameters:
    _ns1__CreateWebcastURLResponse     &ns1__CreateWebcastURLResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createWebcastURL SOAP
//gsoap ns1  service method-style:	createWebcastURL document
//gsoap ns1  service method-encoding:	createWebcastURL literal
//gsoap ns1  service method-input-action:	createWebcastURL createWebcastURL
//gsoap ns1  service method-output-action:	createWebcastURL createWebcastURLResponse
//gsoap ns1  service method-fault:	createWebcastURL ns1__NotLicensedFault
//gsoap ns1  service method-fault:	createWebcastURL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	createWebcastURL ns1__GeneralFault
//gsoap ns1  service method-fault:	createWebcastURL ns1__SeatLicenseExpiredFault
int __ns1__createWebcastURL(
    _ns1__CreateWebcastURLRequest*      ns1__CreateWebcastURLRequest,	///< Input parameter
    _ns1__CreateWebcastURLResponse     &ns1__CreateWebcastURLResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createWebcastPIN                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createWebcastPIN" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "createWebcastPIN"

  - Addressing input action: "createWebcastPIN"

  - Addressing output action: "createWebcastPINResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createWebcastPIN(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateWebcastPINRequest*      ns1__CreateWebcastPINRequest,
    // output parameters:
    _ns1__CreateWebcastPINResponse     &ns1__CreateWebcastPINResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createWebcastPIN(
    struct soap *soap,
    // input parameters:
    _ns1__CreateWebcastPINRequest*      ns1__CreateWebcastPINRequest,
    // output parameters:
    _ns1__CreateWebcastPINResponse     &ns1__CreateWebcastPINResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createWebcastPIN SOAP
//gsoap ns1  service method-style:	createWebcastPIN document
//gsoap ns1  service method-encoding:	createWebcastPIN literal
//gsoap ns1  service method-input-action:	createWebcastPIN createWebcastPIN
//gsoap ns1  service method-output-action:	createWebcastPIN createWebcastPINResponse
//gsoap ns1  service method-fault:	createWebcastPIN ns1__NotLicensedFault
//gsoap ns1  service method-fault:	createWebcastPIN ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	createWebcastPIN ns1__GeneralFault
//gsoap ns1  service method-fault:	createWebcastPIN ns1__SeatLicenseExpiredFault
int __ns1__createWebcastPIN(
    _ns1__CreateWebcastPINRequest*      ns1__CreateWebcastPINRequest,	///< Input parameter
    _ns1__CreateWebcastPINResponse     &ns1__CreateWebcastPINResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeWebcastURL                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__removeWebcastURL" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "removeWebcastURL"

  - Addressing input action: "removeWebcastURL"

  - Addressing output action: "removeWebcastURLResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeWebcastURL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RemoveWebcastURLRequest*      ns1__RemoveWebcastURLRequest,
    // output parameters:
    _ns1__RemoveWebcastURLResponse     &ns1__RemoveWebcastURLResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeWebcastURL(
    struct soap *soap,
    // input parameters:
    _ns1__RemoveWebcastURLRequest*      ns1__RemoveWebcastURLRequest,
    // output parameters:
    _ns1__RemoveWebcastURLResponse     &ns1__RemoveWebcastURLResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removeWebcastURL SOAP
//gsoap ns1  service method-style:	removeWebcastURL document
//gsoap ns1  service method-encoding:	removeWebcastURL literal
//gsoap ns1  service method-input-action:	removeWebcastURL removeWebcastURL
//gsoap ns1  service method-output-action:	removeWebcastURL removeWebcastURLResponse
//gsoap ns1  service method-fault:	removeWebcastURL ns1__NotLicensedFault
//gsoap ns1  service method-fault:	removeWebcastURL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removeWebcastURL ns1__GeneralFault
//gsoap ns1  service method-fault:	removeWebcastURL ns1__SeatLicenseExpiredFault
int __ns1__removeWebcastURL(
    _ns1__RemoveWebcastURLRequest*      ns1__RemoveWebcastURLRequest,	///< Input parameter
    _ns1__RemoveWebcastURLResponse     &ns1__RemoveWebcastURLResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeWebcastPIN                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__removeWebcastPIN" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "removeWebcastPIN"

  - Addressing input action: "removeWebcastPIN"

  - Addressing output action: "removeWebcastPINResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeWebcastPIN(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RemoveWebcastPINRequest*      ns1__RemoveWebcastPINRequest,
    // output parameters:
    _ns1__RemoveWebcastPINResponse     &ns1__RemoveWebcastPINResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeWebcastPIN(
    struct soap *soap,
    // input parameters:
    _ns1__RemoveWebcastPINRequest*      ns1__RemoveWebcastPINRequest,
    // output parameters:
    _ns1__RemoveWebcastPINResponse     &ns1__RemoveWebcastPINResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removeWebcastPIN SOAP
//gsoap ns1  service method-style:	removeWebcastPIN document
//gsoap ns1  service method-encoding:	removeWebcastPIN literal
//gsoap ns1  service method-input-action:	removeWebcastPIN removeWebcastPIN
//gsoap ns1  service method-output-action:	removeWebcastPIN removeWebcastPINResponse
//gsoap ns1  service method-fault:	removeWebcastPIN ns1__NotLicensedFault
//gsoap ns1  service method-fault:	removeWebcastPIN ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removeWebcastPIN ns1__GeneralFault
//gsoap ns1  service method-fault:	removeWebcastPIN ns1__SeatLicenseExpiredFault
int __ns1__removeWebcastPIN(
    _ns1__RemoveWebcastPINRequest*      ns1__RemoveWebcastPINRequest,	///< Input parameter
    _ns1__RemoveWebcastPINResponse     &ns1__RemoveWebcastPINResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWebcastURL                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getWebcastURL" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getWebcastURL"

  - Addressing input action: "getWebcastURL"

  - Addressing output action: "getWebcastURLResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWebcastURL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetWebcastURLRequest*         ns1__GetWebcastURLRequest,
    // output parameters:
    _ns1__GetWebcastURLResponse        &ns1__GetWebcastURLResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWebcastURL(
    struct soap *soap,
    // input parameters:
    _ns1__GetWebcastURLRequest*         ns1__GetWebcastURLRequest,
    // output parameters:
    _ns1__GetWebcastURLResponse        &ns1__GetWebcastURLResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getWebcastURL SOAP
//gsoap ns1  service method-style:	getWebcastURL document
//gsoap ns1  service method-encoding:	getWebcastURL literal
//gsoap ns1  service method-input-action:	getWebcastURL getWebcastURL
//gsoap ns1  service method-output-action:	getWebcastURL getWebcastURLResponse
//gsoap ns1  service method-fault:	getWebcastURL ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getWebcastURL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getWebcastURL ns1__GeneralFault
//gsoap ns1  service method-fault:	getWebcastURL ns1__SeatLicenseExpiredFault
int __ns1__getWebcastURL(
    _ns1__GetWebcastURLRequest*         ns1__GetWebcastURLRequest,	///< Input parameter
    _ns1__GetWebcastURLResponse        &ns1__GetWebcastURLResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getUserName                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getUserName" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getUserName"

  - Addressing input action: "getUserName"

  - Addressing output action: "getUserNameResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getUserName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetUserNameRequest*           ns1__GetUserNameRequest,
    // output parameters:
    _ns1__GetUserNameResponse          &ns1__GetUserNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getUserName(
    struct soap *soap,
    // input parameters:
    _ns1__GetUserNameRequest*           ns1__GetUserNameRequest,
    // output parameters:
    _ns1__GetUserNameResponse          &ns1__GetUserNameResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getUserName SOAP
//gsoap ns1  service method-style:	getUserName document
//gsoap ns1  service method-encoding:	getUserName literal
//gsoap ns1  service method-input-action:	getUserName getUserName
//gsoap ns1  service method-output-action:	getUserName getUserNameResponse
//gsoap ns1  service method-fault:	getUserName ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getUserName ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getUserName ns1__GeneralFault
int __ns1__getUserName(
    _ns1__GetUserNameRequest*           ns1__GetUserNameRequest,	///< Input parameter
    _ns1__GetUserNameResponse          &ns1__GetUserNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getEntityByRoomKey                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getEntityByRoomKey" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getEntityByRoomKey"

  - Addressing input action: "getEntityByRoomKey"

  - Addressing output action: "getEntityByRoomKeyResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getEntityByRoomKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetEntityByRoomKeyRequest*    ns1__GetEntityByRoomKeyRequest,
    // output parameters:
    _ns1__GetEntityByRoomKeyResponse   &ns1__GetEntityByRoomKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getEntityByRoomKey(
    struct soap *soap,
    // input parameters:
    _ns1__GetEntityByRoomKeyRequest*    ns1__GetEntityByRoomKeyRequest,
    // output parameters:
    _ns1__GetEntityByRoomKeyResponse   &ns1__GetEntityByRoomKeyResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getEntityByRoomKey SOAP
//gsoap ns1  service method-style:	getEntityByRoomKey document
//gsoap ns1  service method-encoding:	getEntityByRoomKey literal
//gsoap ns1  service method-input-action:	getEntityByRoomKey getEntityByRoomKey
//gsoap ns1  service method-output-action:	getEntityByRoomKey getEntityByRoomKeyResponse
//gsoap ns1  service method-fault:	getEntityByRoomKey ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getEntityByRoomKey ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getEntityByRoomKey ns1__GeneralFault
int __ns1__getEntityByRoomKey(
    _ns1__GetEntityByRoomKeyRequest*    ns1__GetEntityByRoomKeyRequest,	///< Input parameter
    _ns1__GetEntityByRoomKeyResponse   &ns1__GetEntityByRoomKeyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getInviteContent                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getInviteContent" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getInviteContent"

  - Addressing input action: "getInviteContent"

  - Addressing output action: "getInviteContentResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getInviteContent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetInviteContentRequest*      ns1__GetInviteContentRequest,
    // output parameters:
    _ns1__GetInviteContentResponse     &ns1__GetInviteContentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getInviteContent(
    struct soap *soap,
    // input parameters:
    _ns1__GetInviteContentRequest*      ns1__GetInviteContentRequest,
    // output parameters:
    _ns1__GetInviteContentResponse     &ns1__GetInviteContentResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getInviteContent SOAP
//gsoap ns1  service method-style:	getInviteContent document
//gsoap ns1  service method-encoding:	getInviteContent literal
//gsoap ns1  service method-input-action:	getInviteContent getInviteContent
//gsoap ns1  service method-output-action:	getInviteContent getInviteContentResponse
//gsoap ns1  service method-fault:	getInviteContent ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getInviteContent ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getInviteContent ns1__GeneralFault
int __ns1__getInviteContent(
    _ns1__GetInviteContentRequest*      ns1__GetInviteContentRequest,	///< Input parameter
    _ns1__GetInviteContentResponse     &ns1__GetInviteContentResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRoomProfiles                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRoomProfiles" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getRoomProfiles"

  - Addressing input action: "getRoomProfiles"

  - Addressing output action: "getRoomProfilesResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRoomProfiles(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                ns1__GetRoomProfilesRequest,
    // output parameters:
    _ns1__GetRoomProfilesResponse      &ns1__GetRoomProfilesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRoomProfiles(
    struct soap *soap,
    // input parameters:
    _XML                                ns1__GetRoomProfilesRequest,
    // output parameters:
    _ns1__GetRoomProfilesResponse      &ns1__GetRoomProfilesResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRoomProfiles SOAP
//gsoap ns1  service method-style:	getRoomProfiles document
//gsoap ns1  service method-encoding:	getRoomProfiles literal
//gsoap ns1  service method-input-action:	getRoomProfiles getRoomProfiles
//gsoap ns1  service method-output-action:	getRoomProfiles getRoomProfilesResponse
//gsoap ns1  service method-fault:	getRoomProfiles ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getRoomProfiles ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getRoomProfiles ns1__GeneralFault
int __ns1__getRoomProfiles(
    _XML                                ns1__GetRoomProfilesRequest,	///< Input parameter
    _ns1__GetRoomProfilesResponse      &ns1__GetRoomProfilesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRoomProfile                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRoomProfile" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getRoomProfile"

  - Addressing input action: "getRoomProfile"

  - Addressing output action: "getRoomProfileResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRoomProfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetRoomProfileRequest*        ns1__GetRoomProfileRequest,
    // output parameters:
    _ns1__GetRoomProfileResponse       &ns1__GetRoomProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRoomProfile(
    struct soap *soap,
    // input parameters:
    _ns1__GetRoomProfileRequest*        ns1__GetRoomProfileRequest,
    // output parameters:
    _ns1__GetRoomProfileResponse       &ns1__GetRoomProfileResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRoomProfile SOAP
//gsoap ns1  service method-style:	getRoomProfile document
//gsoap ns1  service method-encoding:	getRoomProfile literal
//gsoap ns1  service method-input-action:	getRoomProfile getRoomProfile
//gsoap ns1  service method-output-action:	getRoomProfile getRoomProfileResponse
//gsoap ns1  service method-fault:	getRoomProfile ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getRoomProfile ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getRoomProfile ns1__GeneralFault
int __ns1__getRoomProfile(
    _ns1__GetRoomProfileRequest*        ns1__GetRoomProfileRequest,	///< Input parameter
    _ns1__GetRoomProfileResponse       &ns1__GetRoomProfileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setRoomProfile                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__setRoomProfile" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "setRoomProfile"

  - Addressing input action: "setRoomProfile"

  - Addressing output action: "setRoomProfileResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setRoomProfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetRoomProfileRequest*        ns1__SetRoomProfileRequest,
    // output parameters:
    _ns1__SetRoomProfileResponse       &ns1__SetRoomProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setRoomProfile(
    struct soap *soap,
    // input parameters:
    _ns1__SetRoomProfileRequest*        ns1__SetRoomProfileRequest,
    // output parameters:
    _ns1__SetRoomProfileResponse       &ns1__SetRoomProfileResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	setRoomProfile SOAP
//gsoap ns1  service method-style:	setRoomProfile document
//gsoap ns1  service method-encoding:	setRoomProfile literal
//gsoap ns1  service method-input-action:	setRoomProfile setRoomProfile
//gsoap ns1  service method-output-action:	setRoomProfile setRoomProfileResponse
//gsoap ns1  service method-fault:	setRoomProfile ns1__NotLicensedFault
//gsoap ns1  service method-fault:	setRoomProfile ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	setRoomProfile ns1__GeneralFault
int __ns1__setRoomProfile(
    _ns1__SetRoomProfileRequest*        ns1__SetRoomProfileRequest,	///< Input parameter
    _ns1__SetRoomProfileResponse       &ns1__SetRoomProfileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeRoomProfile                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__removeRoomProfile" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "removeRoomProfile"

  - Addressing input action: "removeRoomProfile"

  - Addressing output action: "removeRoomProfileResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeRoomProfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RemoveRoomProfileRequest*     ns1__RemoveRoomProfileRequest,
    // output parameters:
    _ns1__RemoveRoomProfileResponse    &ns1__RemoveRoomProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeRoomProfile(
    struct soap *soap,
    // input parameters:
    _ns1__RemoveRoomProfileRequest*     ns1__RemoveRoomProfileRequest,
    // output parameters:
    _ns1__RemoveRoomProfileResponse    &ns1__RemoveRoomProfileResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removeRoomProfile SOAP
//gsoap ns1  service method-style:	removeRoomProfile document
//gsoap ns1  service method-encoding:	removeRoomProfile literal
//gsoap ns1  service method-input-action:	removeRoomProfile removeRoomProfile
//gsoap ns1  service method-output-action:	removeRoomProfile removeRoomProfileResponse
//gsoap ns1  service method-fault:	removeRoomProfile ns1__NotLicensedFault
//gsoap ns1  service method-fault:	removeRoomProfile ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removeRoomProfile ns1__GeneralFault
int __ns1__removeRoomProfile(
    _ns1__RemoveRoomProfileRequest*     ns1__RemoveRoomProfileRequest,	///< Input parameter
    _ns1__RemoveRoomProfileResponse    &ns1__RemoveRoomProfileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createModeratorURL                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createModeratorURL" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "createModeratorURL"

  - Addressing input action: "createModeratorURL"

  - Addressing output action: "createModeratorURLResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createModeratorURL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateModeratorURLRequest*    ns1__CreateModeratorURLRequest,
    // output parameters:
    _ns1__CreateModeratorURLResponse   &ns1__CreateModeratorURLResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createModeratorURL(
    struct soap *soap,
    // input parameters:
    _ns1__CreateModeratorURLRequest*    ns1__CreateModeratorURLRequest,
    // output parameters:
    _ns1__CreateModeratorURLResponse   &ns1__CreateModeratorURLResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createModeratorURL SOAP
//gsoap ns1  service method-style:	createModeratorURL document
//gsoap ns1  service method-encoding:	createModeratorURL literal
//gsoap ns1  service method-input-action:	createModeratorURL createModeratorURL
//gsoap ns1  service method-output-action:	createModeratorURL createModeratorURLResponse
//gsoap ns1  service method-fault:	createModeratorURL ns1__NotLicensedFault
//gsoap ns1  service method-fault:	createModeratorURL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	createModeratorURL ns1__GeneralFault
//gsoap ns1  service method-fault:	createModeratorURL ns1__ControlMeetingFault
int __ns1__createModeratorURL(
    _ns1__CreateModeratorURLRequest*    ns1__CreateModeratorURLRequest,	///< Input parameter
    _ns1__CreateModeratorURLResponse   &ns1__CreateModeratorURLResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeModeratorURL                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__removeModeratorURL" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "removeModeratorURL"

  - Addressing input action: "removeModeratorURL"

  - Addressing output action: "removeModeratorURLResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeModeratorURL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RemoveModeratorURLRequest*    ns1__RemoveModeratorURLRequest,
    // output parameters:
    _ns1__RemoveModeratorURLResponse   &ns1__RemoveModeratorURLResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeModeratorURL(
    struct soap *soap,
    // input parameters:
    _ns1__RemoveModeratorURLRequest*    ns1__RemoveModeratorURLRequest,
    // output parameters:
    _ns1__RemoveModeratorURLResponse   &ns1__RemoveModeratorURLResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removeModeratorURL SOAP
//gsoap ns1  service method-style:	removeModeratorURL document
//gsoap ns1  service method-encoding:	removeModeratorURL literal
//gsoap ns1  service method-input-action:	removeModeratorURL removeModeratorURL
//gsoap ns1  service method-output-action:	removeModeratorURL removeModeratorURLResponse
//gsoap ns1  service method-fault:	removeModeratorURL ns1__NotLicensedFault
//gsoap ns1  service method-fault:	removeModeratorURL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removeModeratorURL ns1__GeneralFault
//gsoap ns1  service method-fault:	removeModeratorURL ns1__ControlMeetingFault
int __ns1__removeModeratorURL(
    _ns1__RemoveModeratorURLRequest*    ns1__RemoveModeratorURLRequest,	///< Input parameter
    _ns1__RemoveModeratorURLResponse   &ns1__RemoveModeratorURLResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getModeratorURL                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getModeratorURL" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getModeratorURL"

  - Addressing input action: "getModeratorURL"

  - Addressing output action: "getModeratorURLResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getModeratorURL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetModeratorURLRequest*       ns1__GetModeratorURLRequest,
    // output parameters:
    _ns1__GetModeratorURLResponse      &ns1__GetModeratorURLResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getModeratorURL(
    struct soap *soap,
    // input parameters:
    _ns1__GetModeratorURLRequest*       ns1__GetModeratorURLRequest,
    // output parameters:
    _ns1__GetModeratorURLResponse      &ns1__GetModeratorURLResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getModeratorURL SOAP
//gsoap ns1  service method-style:	getModeratorURL document
//gsoap ns1  service method-encoding:	getModeratorURL literal
//gsoap ns1  service method-input-action:	getModeratorURL getModeratorURL
//gsoap ns1  service method-output-action:	getModeratorURL getModeratorURLResponse
//gsoap ns1  service method-fault:	getModeratorURL ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getModeratorURL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getModeratorURL ns1__GeneralFault
//gsoap ns1  service method-fault:	getModeratorURL ns1__ControlMeetingFault
int __ns1__getModeratorURL(
    _ns1__GetModeratorURLRequest*       ns1__GetModeratorURLRequest,	///< Input parameter
    _ns1__GetModeratorURLResponse      &ns1__GetModeratorURLResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getModeratorURLWithToken                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getModeratorURLWithToken" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getModeratorURLWithToken"

  - Addressing input action: "getModeratorURLWithToken"

  - Addressing output action: "getModeratorURLWithTokenResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getModeratorURLWithToken(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetModeratorURLWithTokenRequest* ns1__GetModeratorURLWithTokenRequest,
    // output parameters:
    _ns1__GetModeratorURLWithTokenResponse&ns1__GetModeratorURLWithTokenResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getModeratorURLWithToken(
    struct soap *soap,
    // input parameters:
    _ns1__GetModeratorURLWithTokenRequest* ns1__GetModeratorURLWithTokenRequest,
    // output parameters:
    _ns1__GetModeratorURLWithTokenResponse&ns1__GetModeratorURLWithTokenResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getModeratorURLWithToken SOAP
//gsoap ns1  service method-style:	getModeratorURLWithToken document
//gsoap ns1  service method-encoding:	getModeratorURLWithToken literal
//gsoap ns1  service method-input-action:	getModeratorURLWithToken getModeratorURLWithToken
//gsoap ns1  service method-output-action:	getModeratorURLWithToken getModeratorURLWithTokenResponse
//gsoap ns1  service method-fault:	getModeratorURLWithToken ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getModeratorURLWithToken ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getModeratorURLWithToken ns1__GeneralFault
//gsoap ns1  service method-fault:	getModeratorURLWithToken ns1__ControlMeetingFault
int __ns1__getModeratorURLWithToken(
    _ns1__GetModeratorURLWithTokenRequest* ns1__GetModeratorURLWithTokenRequest,	///< Input parameter
    _ns1__GetModeratorURLWithTokenResponse&ns1__GetModeratorURLWithTokenResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createModeratorPIN                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createModeratorPIN" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "createRoomModeratorPIN"

  - Addressing input action: "createRoomModeratorPIN"

  - Addressing output action: "createRoomModeratorPINResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidModeratorPINFormatFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createModeratorPIN(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateModeratorPINRequest*    ns1__CreateModeratorPINRequest,
    // output parameters:
    _ns1__CreateModeratorPINResponse   &ns1__CreateModeratorPINResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createModeratorPIN(
    struct soap *soap,
    // input parameters:
    _ns1__CreateModeratorPINRequest*    ns1__CreateModeratorPINRequest,
    // output parameters:
    _ns1__CreateModeratorPINResponse   &ns1__CreateModeratorPINResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createModeratorPIN SOAP
//gsoap ns1  service method-style:	createModeratorPIN document
//gsoap ns1  service method-encoding:	createModeratorPIN literal
//gsoap ns1  service method-input-action:	createModeratorPIN createRoomModeratorPIN
//gsoap ns1  service method-output-action:	createModeratorPIN createRoomModeratorPINResponse
//gsoap ns1  service method-fault:	createModeratorPIN ns1__NotLicensedFault
//gsoap ns1  service method-fault:	createModeratorPIN ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	createModeratorPIN ns1__InvalidModeratorPINFormatFault
//gsoap ns1  service method-fault:	createModeratorPIN ns1__GeneralFault
//gsoap ns1  service method-fault:	createModeratorPIN ns1__ControlMeetingFault
int __ns1__createModeratorPIN(
    _ns1__CreateModeratorPINRequest*    ns1__CreateModeratorPINRequest,	///< Input parameter
    _ns1__CreateModeratorPINResponse   &ns1__CreateModeratorPINResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeModeratorPIN                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__removeModeratorPIN" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "removeRoomModeratorPIN"

  - Addressing input action: "removeRoomModeratorPIN"

  - Addressing output action: "removeRoomModeratorPINResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeModeratorPIN(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RemoveModeratorPINRequest*    ns1__RemoveModeratorPINRequest,
    // output parameters:
    _ns1__RemoveModeratorPINResponse   &ns1__RemoveModeratorPINResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeModeratorPIN(
    struct soap *soap,
    // input parameters:
    _ns1__RemoveModeratorPINRequest*    ns1__RemoveModeratorPINRequest,
    // output parameters:
    _ns1__RemoveModeratorPINResponse   &ns1__RemoveModeratorPINResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removeModeratorPIN SOAP
//gsoap ns1  service method-style:	removeModeratorPIN document
//gsoap ns1  service method-encoding:	removeModeratorPIN literal
//gsoap ns1  service method-input-action:	removeModeratorPIN removeRoomModeratorPIN
//gsoap ns1  service method-output-action:	removeModeratorPIN removeRoomModeratorPINResponse
//gsoap ns1  service method-fault:	removeModeratorPIN ns1__NotLicensedFault
//gsoap ns1  service method-fault:	removeModeratorPIN ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removeModeratorPIN ns1__GeneralFault
//gsoap ns1  service method-fault:	removeModeratorPIN ns1__ControlMeetingFault
int __ns1__removeModeratorPIN(
    _ns1__RemoveModeratorPINRequest*    ns1__RemoveModeratorPINRequest,	///< Input parameter
    _ns1__RemoveModeratorPINResponse   &ns1__RemoveModeratorPINResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getConferenceID                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getConferenceID" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getConferenceID"

  - Addressing input action: "getConferenceID"

  - Addressing output action: "getConferenceIDResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InPointToPointCallFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getConferenceID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetConferenceIDRequest*       ns1__GetConferenceIDRequest,
    // output parameters:
    _ns1__GetConferenceIDResponse      &ns1__GetConferenceIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getConferenceID(
    struct soap *soap,
    // input parameters:
    _ns1__GetConferenceIDRequest*       ns1__GetConferenceIDRequest,
    // output parameters:
    _ns1__GetConferenceIDResponse      &ns1__GetConferenceIDResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getConferenceID SOAP
//gsoap ns1  service method-style:	getConferenceID document
//gsoap ns1  service method-encoding:	getConferenceID literal
//gsoap ns1  service method-input-action:	getConferenceID getConferenceID
//gsoap ns1  service method-output-action:	getConferenceID getConferenceIDResponse
//gsoap ns1  service method-fault:	getConferenceID ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getConferenceID ns1__InPointToPointCallFault
//gsoap ns1  service method-fault:	getConferenceID ns1__GeneralFault
int __ns1__getConferenceID(
    _ns1__GetConferenceIDRequest*       ns1__GetConferenceIDRequest,	///< Input parameter
    _ns1__GetConferenceIDResponse      &ns1__GetConferenceIDResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__generateAuthToken                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__generateAuthToken" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "generateAuthToken"

  - Addressing input action: "generateAuthToken"

  - Addressing output action: "generateAuthTokenResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":EndpointNotBoundFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__generateAuthToken(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GenerateAuthTokenRequest*     ns1__GenerateAuthTokenRequest,
    // output parameters:
    _ns1__GenerateAuthTokenResponse    &ns1__GenerateAuthTokenResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__generateAuthToken(
    struct soap *soap,
    // input parameters:
    _ns1__GenerateAuthTokenRequest*     ns1__GenerateAuthTokenRequest,
    // output parameters:
    _ns1__GenerateAuthTokenResponse    &ns1__GenerateAuthTokenResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	generateAuthToken SOAP
//gsoap ns1  service method-style:	generateAuthToken document
//gsoap ns1  service method-encoding:	generateAuthToken literal
//gsoap ns1  service method-input-action:	generateAuthToken generateAuthToken
//gsoap ns1  service method-output-action:	generateAuthToken generateAuthTokenResponse
//gsoap ns1  service method-fault:	generateAuthToken ns1__EndpointNotBoundFault
//gsoap ns1  service method-fault:	generateAuthToken ns1__NotLicensedFault
//gsoap ns1  service method-fault:	generateAuthToken ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	generateAuthToken ns1__GeneralFault
//gsoap ns1  service method-fault:	generateAuthToken ns1__SeatLicenseExpiredFault
int __ns1__generateAuthToken(
    _ns1__GenerateAuthTokenRequest*     ns1__GenerateAuthTokenRequest,	///< Input parameter
    _ns1__GenerateAuthTokenResponse    &ns1__GenerateAuthTokenResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createScheduledRoom                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createScheduledRoom" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "createScheduledRoom"

  - Addressing input action: "createScheduledRoom"

  - Addressing output action: "createScheduledRoomResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ScheduledRoomCreationFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":SeatLicenseExpiredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createScheduledRoom(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CreateScheduledRoomRequest*   ns1__CreateScheduledRoomRequest,
    // output parameters:
    _ns1__CreateScheduledRoomResponse  &ns1__CreateScheduledRoomResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createScheduledRoom(
    struct soap *soap,
    // input parameters:
    _ns1__CreateScheduledRoomRequest*   ns1__CreateScheduledRoomRequest,
    // output parameters:
    _ns1__CreateScheduledRoomResponse  &ns1__CreateScheduledRoomResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createScheduledRoom SOAP
//gsoap ns1  service method-style:	createScheduledRoom document
//gsoap ns1  service method-encoding:	createScheduledRoom literal
//gsoap ns1  service method-input-action:	createScheduledRoom createScheduledRoom
//gsoap ns1  service method-output-action:	createScheduledRoom createScheduledRoomResponse
//gsoap ns1  service method-fault:	createScheduledRoom ns1__ScheduledRoomCreationFault
//gsoap ns1  service method-fault:	createScheduledRoom ns1__NotLicensedFault
//gsoap ns1  service method-fault:	createScheduledRoom ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	createScheduledRoom ns1__GeneralFault
//gsoap ns1  service method-fault:	createScheduledRoom ns1__SeatLicenseExpiredFault
int __ns1__createScheduledRoom(
    _ns1__CreateScheduledRoomRequest*   ns1__CreateScheduledRoomRequest,	///< Input parameter
    _ns1__CreateScheduledRoomResponse  &ns1__CreateScheduledRoomResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteScheduledRoom                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteScheduledRoom" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "deleteScheduledRoom"

  - Addressing input action: "deleteScheduledRoom"

  - Addressing output action: "deleteScheduledRoomResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":RoomNotFoundFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteScheduledRoom(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DeleteScheduledRoomRequest*   ns1__DeleteScheduledRoomRequest,
    // output parameters:
    _ns1__DeleteScheduledRoomResponse  &ns1__DeleteScheduledRoomResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteScheduledRoom(
    struct soap *soap,
    // input parameters:
    _ns1__DeleteScheduledRoomRequest*   ns1__DeleteScheduledRoomRequest,
    // output parameters:
    _ns1__DeleteScheduledRoomResponse  &ns1__DeleteScheduledRoomResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteScheduledRoom SOAP
//gsoap ns1  service method-style:	deleteScheduledRoom document
//gsoap ns1  service method-encoding:	deleteScheduledRoom literal
//gsoap ns1  service method-input-action:	deleteScheduledRoom deleteScheduledRoom
//gsoap ns1  service method-output-action:	deleteScheduledRoom deleteScheduledRoomResponse
//gsoap ns1  service method-fault:	deleteScheduledRoom ns1__NotLicensedFault
//gsoap ns1  service method-fault:	deleteScheduledRoom ns1__RoomNotFoundFault
//gsoap ns1  service method-fault:	deleteScheduledRoom ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	deleteScheduledRoom ns1__GeneralFault
int __ns1__deleteScheduledRoom(
    _ns1__DeleteScheduledRoomRequest*   ns1__DeleteScheduledRoomRequest,	///< Input parameter
    _ns1__DeleteScheduledRoomResponse  &ns1__DeleteScheduledRoomResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getPortalFeatures                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getPortalFeatures" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getPortalFeatures"

  - Addressing input action: "getPortalFeatures"

  - Addressing output action: "getPortalFeaturesResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getPortalFeatures(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                ns1__GetPortalFeaturesRequest,
    // output parameters:
    _ns1__GetPortalFeaturesResponse    &ns1__GetPortalFeaturesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getPortalFeatures(
    struct soap *soap,
    // input parameters:
    _XML                                ns1__GetPortalFeaturesRequest,
    // output parameters:
    _ns1__GetPortalFeaturesResponse    &ns1__GetPortalFeaturesResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getPortalFeatures SOAP
//gsoap ns1  service method-style:	getPortalFeatures document
//gsoap ns1  service method-encoding:	getPortalFeatures literal
//gsoap ns1  service method-input-action:	getPortalFeatures getPortalFeatures
//gsoap ns1  service method-output-action:	getPortalFeatures getPortalFeaturesResponse
//gsoap ns1  service method-fault:	getPortalFeatures ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getPortalFeatures ns1__GeneralFault
int __ns1__getPortalFeatures(
    _XML                                ns1__GetPortalFeaturesRequest,	///< Input parameter
    _ns1__GetPortalFeaturesResponse    &ns1__GetPortalFeaturesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setEndpointDetails                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__setEndpointDetails" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "setEndpointDetails"

  - Addressing input action: "setEndpointDetails"

  - Addressing output action: "setEndpointDetailsResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":EndpointNotBoundFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setEndpointDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetEndpointDetailsRequest*    ns1__SetEndpointDetailsRequest,
    // output parameters:
    _ns1__SetEndpointDetailsResponse   &ns1__SetEndpointDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setEndpointDetails(
    struct soap *soap,
    // input parameters:
    _ns1__SetEndpointDetailsRequest*    ns1__SetEndpointDetailsRequest,
    // output parameters:
    _ns1__SetEndpointDetailsResponse   &ns1__SetEndpointDetailsResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	setEndpointDetails SOAP
//gsoap ns1  service method-style:	setEndpointDetails document
//gsoap ns1  service method-encoding:	setEndpointDetails literal
//gsoap ns1  service method-input-action:	setEndpointDetails setEndpointDetails
//gsoap ns1  service method-output-action:	setEndpointDetails setEndpointDetailsResponse
//gsoap ns1  service method-fault:	setEndpointDetails ns1__EndpointNotBoundFault
//gsoap ns1  service method-fault:	setEndpointDetails ns1__NotLicensedFault
//gsoap ns1  service method-fault:	setEndpointDetails ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	setEndpointDetails ns1__GeneralFault
int __ns1__setEndpointDetails(
    _ns1__SetEndpointDetailsRequest*    ns1__SetEndpointDetailsRequest,	///< Input parameter
    _ns1__SetEndpointDetailsResponse   &ns1__SetEndpointDetailsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getActiveSessions                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getActiveSessions" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getActiveSessions"

  - Addressing input action: "getActiveSessions"

  - Addressing output action: "getActiveSessionsResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getActiveSessions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                ns1__GetActiveSessionsRequest,
    // output parameters:
    _ns1__GetActiveSessionsResponse    &ns1__GetActiveSessionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getActiveSessions(
    struct soap *soap,
    // input parameters:
    _XML                                ns1__GetActiveSessionsRequest,
    // output parameters:
    _ns1__GetActiveSessionsResponse    &ns1__GetActiveSessionsResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getActiveSessions SOAP
//gsoap ns1  service method-style:	getActiveSessions document
//gsoap ns1  service method-encoding:	getActiveSessions literal
//gsoap ns1  service method-input-action:	getActiveSessions getActiveSessions
//gsoap ns1  service method-output-action:	getActiveSessions getActiveSessionsResponse
//gsoap ns1  service method-fault:	getActiveSessions ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getActiveSessions ns1__GeneralFault
int __ns1__getActiveSessions(
    _XML                                ns1__GetActiveSessionsRequest,	///< Input parameter
    _ns1__GetActiveSessionsResponse    &ns1__GetActiveSessionsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__logoutAllOtherSessions                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__logoutAllOtherSessions" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "logoutAllOtherSessions"

  - Addressing input action: "logoutAllOtherSessions"

  - Addressing output action: "logoutAllOtherSessionsResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__logoutAllOtherSessions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                ns1__LogoutAllOtherSessionsRequest,
    // output parameters:
    _ns1__LogoutAllOtherSessionsResponse&ns1__LogoutAllOtherSessionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__logoutAllOtherSessions(
    struct soap *soap,
    // input parameters:
    _XML                                ns1__LogoutAllOtherSessionsRequest,
    // output parameters:
    _ns1__LogoutAllOtherSessionsResponse&ns1__LogoutAllOtherSessionsResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	logoutAllOtherSessions SOAP
//gsoap ns1  service method-style:	logoutAllOtherSessions document
//gsoap ns1  service method-encoding:	logoutAllOtherSessions literal
//gsoap ns1  service method-input-action:	logoutAllOtherSessions logoutAllOtherSessions
//gsoap ns1  service method-output-action:	logoutAllOtherSessions logoutAllOtherSessionsResponse
//gsoap ns1  service method-fault:	logoutAllOtherSessions ns1__NotLicensedFault
//gsoap ns1  service method-fault:	logoutAllOtherSessions ns1__GeneralFault
int __ns1__logoutAllOtherSessions(
    _XML                                ns1__LogoutAllOtherSessionsRequest,	///< Input parameter
    _ns1__LogoutAllOtherSessionsResponse&ns1__LogoutAllOtherSessionsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__disconnectConferenceAll                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__disconnectConferenceAll" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "disconnectConferenceAll"

  - Addressing input action: "disconnectConferenceAll"

  - Addressing output action: "disconnectConferenceAllResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__disconnectConferenceAll(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__disconnectConferenceAllRequest* ns1__disconnectConferenceAllRequest,
    // output parameters:
    _ns1__disconnectConferenceAllResponse&ns1__disconnectConferenceAllResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__disconnectConferenceAll(
    struct soap *soap,
    // input parameters:
    _ns1__disconnectConferenceAllRequest* ns1__disconnectConferenceAllRequest,
    // output parameters:
    _ns1__disconnectConferenceAllResponse&ns1__disconnectConferenceAllResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	disconnectConferenceAll SOAP
//gsoap ns1  service method-style:	disconnectConferenceAll document
//gsoap ns1  service method-encoding:	disconnectConferenceAll literal
//gsoap ns1  service method-input-action:	disconnectConferenceAll disconnectConferenceAll
//gsoap ns1  service method-output-action:	disconnectConferenceAll disconnectConferenceAllResponse
//gsoap ns1  service method-fault:	disconnectConferenceAll ns1__NotLicensedFault
//gsoap ns1  service method-fault:	disconnectConferenceAll ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	disconnectConferenceAll ns1__GeneralFault
//gsoap ns1  service method-fault:	disconnectConferenceAll ns1__ControlMeetingFault
int __ns1__disconnectConferenceAll(
    _ns1__disconnectConferenceAllRequest* ns1__disconnectConferenceAllRequest,	///< Input parameter
    _ns1__disconnectConferenceAllResponse&ns1__disconnectConferenceAllResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__muteAudioServerAll                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__muteAudioServerAll" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "muteAudioServerAll"

  - Addressing input action: "muteAudioServerAll"

  - Addressing output action: "muteAudioServerAllResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__muteAudioServerAll(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__muteAudioServerAllRequest*    ns1__muteAudioServerAllRequest,
    // output parameters:
    _ns1__muteAudioServerAllResponse   &ns1__muteAudioServerAllResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__muteAudioServerAll(
    struct soap *soap,
    // input parameters:
    _ns1__muteAudioServerAllRequest*    ns1__muteAudioServerAllRequest,
    // output parameters:
    _ns1__muteAudioServerAllResponse   &ns1__muteAudioServerAllResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	muteAudioServerAll SOAP
//gsoap ns1  service method-style:	muteAudioServerAll document
//gsoap ns1  service method-encoding:	muteAudioServerAll literal
//gsoap ns1  service method-input-action:	muteAudioServerAll muteAudioServerAll
//gsoap ns1  service method-output-action:	muteAudioServerAll muteAudioServerAllResponse
//gsoap ns1  service method-fault:	muteAudioServerAll ns1__NotLicensedFault
//gsoap ns1  service method-fault:	muteAudioServerAll ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	muteAudioServerAll ns1__GeneralFault
//gsoap ns1  service method-fault:	muteAudioServerAll ns1__ControlMeetingFault
int __ns1__muteAudioServerAll(
    _ns1__muteAudioServerAllRequest*    ns1__muteAudioServerAllRequest,	///< Input parameter
    _ns1__muteAudioServerAllResponse   &ns1__muteAudioServerAllResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__muteAudioClientAll                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__muteAudioClientAll" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "muteAudioClientAll"

  - Addressing input action: "muteAudioClientAll"

  - Addressing output action: "muteAudioClientAllResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__muteAudioClientAll(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__muteAudioClientAllRequest*    ns1__muteAudioClientAllRequest,
    // output parameters:
    _ns1__muteAudioClientAllResponse   &ns1__muteAudioClientAllResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__muteAudioClientAll(
    struct soap *soap,
    // input parameters:
    _ns1__muteAudioClientAllRequest*    ns1__muteAudioClientAllRequest,
    // output parameters:
    _ns1__muteAudioClientAllResponse   &ns1__muteAudioClientAllResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	muteAudioClientAll SOAP
//gsoap ns1  service method-style:	muteAudioClientAll document
//gsoap ns1  service method-encoding:	muteAudioClientAll literal
//gsoap ns1  service method-input-action:	muteAudioClientAll muteAudioClientAll
//gsoap ns1  service method-output-action:	muteAudioClientAll muteAudioClientAllResponse
//gsoap ns1  service method-fault:	muteAudioClientAll ns1__NotLicensedFault
//gsoap ns1  service method-fault:	muteAudioClientAll ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	muteAudioClientAll ns1__GeneralFault
//gsoap ns1  service method-fault:	muteAudioClientAll ns1__ControlMeetingFault
int __ns1__muteAudioClientAll(
    _ns1__muteAudioClientAllRequest*    ns1__muteAudioClientAllRequest,	///< Input parameter
    _ns1__muteAudioClientAllResponse   &ns1__muteAudioClientAllResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__muteVideoServerAll                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__muteVideoServerAll" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "muteVideoServerAll"

  - Addressing input action: "muteVideoServerAll"

  - Addressing output action: "muteVideoServerAllResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__muteVideoServerAll(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__muteVideoServerAllRequest*    ns1__muteVideoServerAllRequest,
    // output parameters:
    _ns1__muteVideoServerAllResponse   &ns1__muteVideoServerAllResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__muteVideoServerAll(
    struct soap *soap,
    // input parameters:
    _ns1__muteVideoServerAllRequest*    ns1__muteVideoServerAllRequest,
    // output parameters:
    _ns1__muteVideoServerAllResponse   &ns1__muteVideoServerAllResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	muteVideoServerAll SOAP
//gsoap ns1  service method-style:	muteVideoServerAll document
//gsoap ns1  service method-encoding:	muteVideoServerAll literal
//gsoap ns1  service method-input-action:	muteVideoServerAll muteVideoServerAll
//gsoap ns1  service method-output-action:	muteVideoServerAll muteVideoServerAllResponse
//gsoap ns1  service method-fault:	muteVideoServerAll ns1__NotLicensedFault
//gsoap ns1  service method-fault:	muteVideoServerAll ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	muteVideoServerAll ns1__GeneralFault
//gsoap ns1  service method-fault:	muteVideoServerAll ns1__ControlMeetingFault
int __ns1__muteVideoServerAll(
    _ns1__muteVideoServerAllRequest*    ns1__muteVideoServerAllRequest,	///< Input parameter
    _ns1__muteVideoServerAllResponse   &ns1__muteVideoServerAllResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__muteVideoClientAll                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__muteVideoClientAll" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "muteVideoClientAll"

  - Addressing input action: "muteVideoClientAll"

  - Addressing output action: "muteVideoClientAllResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__muteVideoClientAll(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__muteVideoClientAllRequest*    ns1__muteVideoClientAllRequest,
    // output parameters:
    _ns1__muteVideoClientAllResponse   &ns1__muteVideoClientAllResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__muteVideoClientAll(
    struct soap *soap,
    // input parameters:
    _ns1__muteVideoClientAllRequest*    ns1__muteVideoClientAllRequest,
    // output parameters:
    _ns1__muteVideoClientAllResponse   &ns1__muteVideoClientAllResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	muteVideoClientAll SOAP
//gsoap ns1  service method-style:	muteVideoClientAll document
//gsoap ns1  service method-encoding:	muteVideoClientAll literal
//gsoap ns1  service method-input-action:	muteVideoClientAll muteVideoClientAll
//gsoap ns1  service method-output-action:	muteVideoClientAll muteVideoClientAllResponse
//gsoap ns1  service method-fault:	muteVideoClientAll ns1__NotLicensedFault
//gsoap ns1  service method-fault:	muteVideoClientAll ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	muteVideoClientAll ns1__GeneralFault
//gsoap ns1  service method-fault:	muteVideoClientAll ns1__ControlMeetingFault
int __ns1__muteVideoClientAll(
    _ns1__muteVideoClientAllRequest*    ns1__muteVideoClientAllRequest,	///< Input parameter
    _ns1__muteVideoClientAllResponse   &ns1__muteVideoClientAllResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getOnetimeAccessUrl                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getOnetimeAccessUrl" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getOnetimeAccessUrl"

  - Addressing input action: "getOnetimeAccessUrl"

  - Addressing output action: "getOnetimeAccessUrlResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getOnetimeAccessUrl(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                ns1__OnetimeAccessRequest,
    // output parameters:
    _ns1__OnetimeAccessResponse        &ns1__OnetimeAccessResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getOnetimeAccessUrl(
    struct soap *soap,
    // input parameters:
    _XML                                ns1__OnetimeAccessRequest,
    // output parameters:
    _ns1__OnetimeAccessResponse        &ns1__OnetimeAccessResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getOnetimeAccessUrl SOAP
//gsoap ns1  service method-style:	getOnetimeAccessUrl document
//gsoap ns1  service method-encoding:	getOnetimeAccessUrl literal
//gsoap ns1  service method-input-action:	getOnetimeAccessUrl getOnetimeAccessUrl
//gsoap ns1  service method-output-action:	getOnetimeAccessUrl getOnetimeAccessUrlResponse
//gsoap ns1  service method-fault:	getOnetimeAccessUrl ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getOnetimeAccessUrl ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getOnetimeAccessUrl ns1__GeneralFault
int __ns1__getOnetimeAccessUrl(
    _XML                                ns1__OnetimeAccessRequest,	///< Input parameter
    _ns1__OnetimeAccessResponse        &ns1__OnetimeAccessResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRoomAccessOptions                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRoomAccessOptions" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getRoomAccessOptions"

  - Addressing input action: "getRoomAccessOptions"

  - Addressing output action: "getRoomAccessOptionsResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRoomAccessOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RoomAccessOptionsRequest*     ns1__RoomAccessOptionsRequest,
    // output parameters:
    _ns1__RoomAccessOptionsResponse    &ns1__RoomAccessOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRoomAccessOptions(
    struct soap *soap,
    // input parameters:
    _ns1__RoomAccessOptionsRequest*     ns1__RoomAccessOptionsRequest,
    // output parameters:
    _ns1__RoomAccessOptionsResponse    &ns1__RoomAccessOptionsResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRoomAccessOptions SOAP
//gsoap ns1  service method-style:	getRoomAccessOptions document
//gsoap ns1  service method-encoding:	getRoomAccessOptions literal
//gsoap ns1  service method-input-action:	getRoomAccessOptions getRoomAccessOptions
//gsoap ns1  service method-output-action:	getRoomAccessOptions getRoomAccessOptionsResponse
//gsoap ns1  service method-fault:	getRoomAccessOptions ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getRoomAccessOptions ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getRoomAccessOptions ns1__GeneralFault
int __ns1__getRoomAccessOptions(
    _ns1__RoomAccessOptionsRequest*     ns1__RoomAccessOptionsRequest,	///< Input parameter
    _ns1__RoomAccessOptionsResponse    &ns1__RoomAccessOptionsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getPortalPrefix                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getPortalPrefix" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getPortalPrefix"

  - Addressing input action: "getPortalPrefix"

  - Addressing output action: "getPortalPrefixResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":PrefixNotConfiguredFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getPortalPrefix(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                ns1__PortalPrefixRequest,
    // output parameters:
    _ns1__PortalPrefixResponse         &ns1__PortalPrefixResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getPortalPrefix(
    struct soap *soap,
    // input parameters:
    _XML                                ns1__PortalPrefixRequest,
    // output parameters:
    _ns1__PortalPrefixResponse         &ns1__PortalPrefixResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getPortalPrefix SOAP
//gsoap ns1  service method-style:	getPortalPrefix document
//gsoap ns1  service method-encoding:	getPortalPrefix literal
//gsoap ns1  service method-input-action:	getPortalPrefix getPortalPrefix
//gsoap ns1  service method-output-action:	getPortalPrefix getPortalPrefixResponse
//gsoap ns1  service method-fault:	getPortalPrefix ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getPortalPrefix ns1__GeneralFault
//gsoap ns1  service method-fault:	getPortalPrefix ns1__PrefixNotConfiguredFault
int __ns1__getPortalPrefix(
    _XML                                ns1__PortalPrefixRequest,	///< Input parameter
    _ns1__PortalPrefixResponse         &ns1__PortalPrefixResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getLoginAndWelcomeBanner                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getLoginAndWelcomeBanner" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getLoginAndWelcomeBanner"

  - Addressing input action: "getLoginAndWelcomeBanner"

  - Addressing output action: "getLoginAndWelcomeBannerResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":FeatureNotAvailableFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getLoginAndWelcomeBanner(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getLoginAndWelcomeBannerRequest* ns1__getLoginAndWelcomeBannerRequest,
    // output parameters:
    _ns1__getLoginAndWelcomeBannerResponse&ns1__getLoginAndWelcomeBannerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getLoginAndWelcomeBanner(
    struct soap *soap,
    // input parameters:
    _ns1__getLoginAndWelcomeBannerRequest* ns1__getLoginAndWelcomeBannerRequest,
    // output parameters:
    _ns1__getLoginAndWelcomeBannerResponse&ns1__getLoginAndWelcomeBannerResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getLoginAndWelcomeBanner SOAP
//gsoap ns1  service method-style:	getLoginAndWelcomeBanner document
//gsoap ns1  service method-encoding:	getLoginAndWelcomeBanner literal
//gsoap ns1  service method-input-action:	getLoginAndWelcomeBanner getLoginAndWelcomeBanner
//gsoap ns1  service method-output-action:	getLoginAndWelcomeBanner getLoginAndWelcomeBannerResponse
//gsoap ns1  service method-fault:	getLoginAndWelcomeBanner ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getLoginAndWelcomeBanner ns1__GeneralFault
//gsoap ns1  service method-fault:	getLoginAndWelcomeBanner ns1__FeatureNotAvailableFault
int __ns1__getLoginAndWelcomeBanner(
    _ns1__getLoginAndWelcomeBannerRequest* ns1__getLoginAndWelcomeBannerRequest,	///< Input parameter
    _ns1__getLoginAndWelcomeBannerResponse&ns1__getLoginAndWelcomeBannerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getUserAccountType                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getUserAccountType" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getUserAccountType"

  - Addressing input action: "getUserAccountType"

  - Addressing output action: "getUserAccountTypeResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getUserAccountType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getUserAccountTypeRequest*    ns1__getUserAccountTypeRequest,
    // output parameters:
    _ns1__getUserAccountTypeResponse   &ns1__getUserAccountTypeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getUserAccountType(
    struct soap *soap,
    // input parameters:
    _ns1__getUserAccountTypeRequest*    ns1__getUserAccountTypeRequest,
    // output parameters:
    _ns1__getUserAccountTypeResponse   &ns1__getUserAccountTypeResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getUserAccountType SOAP
//gsoap ns1  service method-style:	getUserAccountType document
//gsoap ns1  service method-encoding:	getUserAccountType literal
//gsoap ns1  service method-input-action:	getUserAccountType getUserAccountType
//gsoap ns1  service method-output-action:	getUserAccountType getUserAccountTypeResponse
//gsoap ns1  service method-fault:	getUserAccountType ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getUserAccountType ns1__GeneralFault
int __ns1__getUserAccountType(
    _ns1__getUserAccountTypeRequest*    ns1__getUserAccountTypeRequest,	///< Input parameter
    _ns1__getUserAccountTypeResponse   &ns1__getUserAccountTypeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__startLectureMode                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__startLectureMode" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "startLectureMode"

  - Addressing input action: "startLectureMode"

  - Addressing output action: "startLectureModeResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__startLectureMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StartLectureModeRequest*      ns1__StartLectureModeRequest,
    // output parameters:
    _ns1__StartLectureModeResponse     &ns1__StartLectureModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__startLectureMode(
    struct soap *soap,
    // input parameters:
    _ns1__StartLectureModeRequest*      ns1__StartLectureModeRequest,
    // output parameters:
    _ns1__StartLectureModeResponse     &ns1__StartLectureModeResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	startLectureMode SOAP
//gsoap ns1  service method-style:	startLectureMode document
//gsoap ns1  service method-encoding:	startLectureMode literal
//gsoap ns1  service method-input-action:	startLectureMode startLectureMode
//gsoap ns1  service method-output-action:	startLectureMode startLectureModeResponse
//gsoap ns1  service method-fault:	startLectureMode ns1__NotLicensedFault
//gsoap ns1  service method-fault:	startLectureMode ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	startLectureMode ns1__GeneralFault
//gsoap ns1  service method-fault:	startLectureMode ns1__ControlMeetingFault
int __ns1__startLectureMode(
    _ns1__StartLectureModeRequest*      ns1__StartLectureModeRequest,	///< Input parameter
    _ns1__StartLectureModeResponse     &ns1__StartLectureModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__stopLectureMode                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__stopLectureMode" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "stopLectureMode"

  - Addressing input action: "stopLectureMode"

  - Addressing output action: "stopLectureModeResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__stopLectureMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StopLectureModeRequest*       ns1__StopLectureModeRequest,
    // output parameters:
    _ns1__StopLectureModeResponse      &ns1__StopLectureModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__stopLectureMode(
    struct soap *soap,
    // input parameters:
    _ns1__StopLectureModeRequest*       ns1__StopLectureModeRequest,
    // output parameters:
    _ns1__StopLectureModeResponse      &ns1__StopLectureModeResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	stopLectureMode SOAP
//gsoap ns1  service method-style:	stopLectureMode document
//gsoap ns1  service method-encoding:	stopLectureMode literal
//gsoap ns1  service method-input-action:	stopLectureMode stopLectureMode
//gsoap ns1  service method-output-action:	stopLectureMode stopLectureModeResponse
//gsoap ns1  service method-fault:	stopLectureMode ns1__NotLicensedFault
//gsoap ns1  service method-fault:	stopLectureMode ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	stopLectureMode ns1__GeneralFault
//gsoap ns1  service method-fault:	stopLectureMode ns1__ControlMeetingFault
int __ns1__stopLectureMode(
    _ns1__StopLectureModeRequest*       ns1__StopLectureModeRequest,	///< Input parameter
    _ns1__StopLectureModeResponse      &ns1__StopLectureModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__raiseHand                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__raiseHand" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "raiseHand"

  - Addressing input action: "raiseHand"

  - Addressing output action: "raiseHandResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__raiseHand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                ns1__RaiseHandRequest,
    // output parameters:
    _ns1__RaiseHandResponse            &ns1__RaiseHandResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__raiseHand(
    struct soap *soap,
    // input parameters:
    _XML                                ns1__RaiseHandRequest,
    // output parameters:
    _ns1__RaiseHandResponse            &ns1__RaiseHandResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	raiseHand SOAP
//gsoap ns1  service method-style:	raiseHand document
//gsoap ns1  service method-encoding:	raiseHand literal
//gsoap ns1  service method-input-action:	raiseHand raiseHand
//gsoap ns1  service method-output-action:	raiseHand raiseHandResponse
//gsoap ns1  service method-fault:	raiseHand ns1__NotLicensedFault
//gsoap ns1  service method-fault:	raiseHand ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	raiseHand ns1__GeneralFault
int __ns1__raiseHand(
    _XML                                ns1__RaiseHandRequest,	///< Input parameter
    _ns1__RaiseHandResponse            &ns1__RaiseHandResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__unraiseHand                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__unraiseHand" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "unraiseHand"

  - Addressing input action: "unraiseHand"

  - Addressing output action: "unraiseHandResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__unraiseHand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                ns1__UnraiseHandRequest,
    // output parameters:
    _ns1__UnraiseHandResponse          &ns1__UnraiseHandResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__unraiseHand(
    struct soap *soap,
    // input parameters:
    _XML                                ns1__UnraiseHandRequest,
    // output parameters:
    _ns1__UnraiseHandResponse          &ns1__UnraiseHandResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	unraiseHand SOAP
//gsoap ns1  service method-style:	unraiseHand document
//gsoap ns1  service method-encoding:	unraiseHand literal
//gsoap ns1  service method-input-action:	unraiseHand unraiseHand
//gsoap ns1  service method-output-action:	unraiseHand unraiseHandResponse
//gsoap ns1  service method-fault:	unraiseHand ns1__NotLicensedFault
//gsoap ns1  service method-fault:	unraiseHand ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	unraiseHand ns1__GeneralFault
int __ns1__unraiseHand(
    _XML                                ns1__UnraiseHandRequest,	///< Input parameter
    _ns1__UnraiseHandResponse          &ns1__UnraiseHandResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__dismissRaisedHand                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__dismissRaisedHand" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "dismissRaisedHand"

  - Addressing input action: "dismissRaisedHand"

  - Addressing output action: "dismissRaisedHandResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__dismissRaisedHand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DismissRaisedHandRequest*     ns1__DismissRaisedHandRequest,
    // output parameters:
    _ns1__DismissRaisedHandResponse    &ns1__DismissRaisedHandResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__dismissRaisedHand(
    struct soap *soap,
    // input parameters:
    _ns1__DismissRaisedHandRequest*     ns1__DismissRaisedHandRequest,
    // output parameters:
    _ns1__DismissRaisedHandResponse    &ns1__DismissRaisedHandResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	dismissRaisedHand SOAP
//gsoap ns1  service method-style:	dismissRaisedHand document
//gsoap ns1  service method-encoding:	dismissRaisedHand literal
//gsoap ns1  service method-input-action:	dismissRaisedHand dismissRaisedHand
//gsoap ns1  service method-output-action:	dismissRaisedHand dismissRaisedHandResponse
//gsoap ns1  service method-fault:	dismissRaisedHand ns1__NotLicensedFault
//gsoap ns1  service method-fault:	dismissRaisedHand ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	dismissRaisedHand ns1__GeneralFault
//gsoap ns1  service method-fault:	dismissRaisedHand ns1__ControlMeetingFault
int __ns1__dismissRaisedHand(
    _ns1__DismissRaisedHandRequest*     ns1__DismissRaisedHandRequest,	///< Input parameter
    _ns1__DismissRaisedHandResponse    &ns1__DismissRaisedHandResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__dismissAllRaisedHand                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__dismissAllRaisedHand" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "dismissAllRaisedHand"

  - Addressing input action: "dismissAllRaisedHand"

  - Addressing output action: "dismissAllRaisedHandResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__dismissAllRaisedHand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DismissAllRaisedHandRequest*  ns1__DismissAllRaisedHandRequest,
    // output parameters:
    _ns1__DismissAllRaisedHandResponse &ns1__DismissAllRaisedHandResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__dismissAllRaisedHand(
    struct soap *soap,
    // input parameters:
    _ns1__DismissAllRaisedHandRequest*  ns1__DismissAllRaisedHandRequest,
    // output parameters:
    _ns1__DismissAllRaisedHandResponse &ns1__DismissAllRaisedHandResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	dismissAllRaisedHand SOAP
//gsoap ns1  service method-style:	dismissAllRaisedHand document
//gsoap ns1  service method-encoding:	dismissAllRaisedHand literal
//gsoap ns1  service method-input-action:	dismissAllRaisedHand dismissAllRaisedHand
//gsoap ns1  service method-output-action:	dismissAllRaisedHand dismissAllRaisedHandResponse
//gsoap ns1  service method-fault:	dismissAllRaisedHand ns1__NotLicensedFault
//gsoap ns1  service method-fault:	dismissAllRaisedHand ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	dismissAllRaisedHand ns1__GeneralFault
//gsoap ns1  service method-fault:	dismissAllRaisedHand ns1__ControlMeetingFault
int __ns1__dismissAllRaisedHand(
    _ns1__DismissAllRaisedHandRequest*  ns1__DismissAllRaisedHandRequest,	///< Input parameter
    _ns1__DismissAllRaisedHandResponse &ns1__DismissAllRaisedHandResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setPresenter                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__setPresenter" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "setPresenter"

  - Addressing input action: "setPresenter"

  - Addressing output action: "setPresenterResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setPresenter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SetPresenterRequest*          ns1__SetPresenterRequest,
    // output parameters:
    _ns1__SetPresenterResponse         &ns1__SetPresenterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setPresenter(
    struct soap *soap,
    // input parameters:
    _ns1__SetPresenterRequest*          ns1__SetPresenterRequest,
    // output parameters:
    _ns1__SetPresenterResponse         &ns1__SetPresenterResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	setPresenter SOAP
//gsoap ns1  service method-style:	setPresenter document
//gsoap ns1  service method-encoding:	setPresenter literal
//gsoap ns1  service method-input-action:	setPresenter setPresenter
//gsoap ns1  service method-output-action:	setPresenter setPresenterResponse
//gsoap ns1  service method-fault:	setPresenter ns1__NotLicensedFault
//gsoap ns1  service method-fault:	setPresenter ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	setPresenter ns1__GeneralFault
//gsoap ns1  service method-fault:	setPresenter ns1__ControlMeetingFault
int __ns1__setPresenter(
    _ns1__SetPresenterRequest*          ns1__SetPresenterRequest,	///< Input parameter
    _ns1__SetPresenterResponse         &ns1__SetPresenterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removePresenter                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__removePresenter" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "removePresenter"

  - Addressing input action: "removePresenter"

  - Addressing output action: "removePresenterResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":InvalidArgumentFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":ControlMeetingFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removePresenter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RemovePresenterRequest*       ns1__RemovePresenterRequest,
    // output parameters:
    _ns1__RemovePresenterResponse      &ns1__RemovePresenterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removePresenter(
    struct soap *soap,
    // input parameters:
    _ns1__RemovePresenterRequest*       ns1__RemovePresenterRequest,
    // output parameters:
    _ns1__RemovePresenterResponse      &ns1__RemovePresenterResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removePresenter SOAP
//gsoap ns1  service method-style:	removePresenter document
//gsoap ns1  service method-encoding:	removePresenter literal
//gsoap ns1  service method-input-action:	removePresenter removePresenter
//gsoap ns1  service method-output-action:	removePresenter removePresenterResponse
//gsoap ns1  service method-fault:	removePresenter ns1__NotLicensedFault
//gsoap ns1  service method-fault:	removePresenter ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removePresenter ns1__GeneralFault
//gsoap ns1  service method-fault:	removePresenter ns1__ControlMeetingFault
int __ns1__removePresenter(
    _ns1__RemovePresenterRequest*       ns1__RemovePresenterRequest,	///< Input parameter
    _ns1__RemovePresenterResponse      &ns1__RemovePresenterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getVidyoReplayLibrary                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getVidyoReplayLibrary" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getVidyoReplayLibrary"

  - Addressing input action: "getVidyoReplayLibrary"

  - Addressing output action: "getVidyoReplayLibraryResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":VidyoReplayNotAvailableFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getVidyoReplayLibrary(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetVidyoReplayLibraryRequest* ns1__GetVidyoReplayLibraryRequest,
    // output parameters:
    _ns1__GetVidyoReplayLibraryResponse&ns1__GetVidyoReplayLibraryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getVidyoReplayLibrary(
    struct soap *soap,
    // input parameters:
    _ns1__GetVidyoReplayLibraryRequest* ns1__GetVidyoReplayLibraryRequest,
    // output parameters:
    _ns1__GetVidyoReplayLibraryResponse&ns1__GetVidyoReplayLibraryResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getVidyoReplayLibrary SOAP
//gsoap ns1  service method-style:	getVidyoReplayLibrary document
//gsoap ns1  service method-encoding:	getVidyoReplayLibrary literal
//gsoap ns1  service method-input-action:	getVidyoReplayLibrary getVidyoReplayLibrary
//gsoap ns1  service method-output-action:	getVidyoReplayLibrary getVidyoReplayLibraryResponse
//gsoap ns1  service method-fault:	getVidyoReplayLibrary ns1__VidyoReplayNotAvailableFault
//gsoap ns1  service method-fault:	getVidyoReplayLibrary ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getVidyoReplayLibrary ns1__GeneralFault
int __ns1__getVidyoReplayLibrary(
    _ns1__GetVidyoReplayLibraryRequest* ns1__GetVidyoReplayLibraryRequest,	///< Input parameter
    _ns1__GetVidyoReplayLibraryResponse&ns1__GetVidyoReplayLibraryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__whatIsMyIPAddress                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__whatIsMyIPAddress" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "whatIsMyIPAddress"

  - Addressing input action: "whatIsMyIPAddress"

  - Addressing output action: "whatIsMyIPAddressResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__whatIsMyIPAddress(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__WhatIsMyIPAddressRequest*     ns1__WhatIsMyIPAddressRequest,
    // output parameters:
    _ns1__WhatIsMyIPAddressResponse    &ns1__WhatIsMyIPAddressResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__whatIsMyIPAddress(
    struct soap *soap,
    // input parameters:
    _ns1__WhatIsMyIPAddressRequest*     ns1__WhatIsMyIPAddressRequest,
    // output parameters:
    _ns1__WhatIsMyIPAddressResponse    &ns1__WhatIsMyIPAddressResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	whatIsMyIPAddress SOAP
//gsoap ns1  service method-style:	whatIsMyIPAddress document
//gsoap ns1  service method-encoding:	whatIsMyIPAddress literal
//gsoap ns1  service method-input-action:	whatIsMyIPAddress whatIsMyIPAddress
//gsoap ns1  service method-output-action:	whatIsMyIPAddress whatIsMyIPAddressResponse
//gsoap ns1  service method-fault:	whatIsMyIPAddress ns1__NotLicensedFault
//gsoap ns1  service method-fault:	whatIsMyIPAddress ns1__GeneralFault
int __ns1__whatIsMyIPAddress(
    _ns1__WhatIsMyIPAddressRequest*     ns1__WhatIsMyIPAddressRequest,	///< Input parameter
    _ns1__WhatIsMyIPAddressResponse    &ns1__WhatIsMyIPAddressResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getChangePasswordHtmlUrlWithToken                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getChangePasswordHtmlUrlWithToken" of service binding "VidyoPortalUserServiceBinding".

  - SOAP document/literal style messaging

  - Action or location: "getChangePasswordHtmlUrlWithToken"

  - Addressing input action: "getChangePasswordHtmlUrlWithToken"

  - Addressing output action: "getChangePasswordHtmlUrlWithTokenResponse"

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":NotLicensedFault (literal)

  - SOAP Output Fault: "http://portal.vidyo.com/user/v1_1":GeneralFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getChangePasswordHtmlUrlWithToken(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetChangePasswordHtmlUrlWithTokenRequest* ns1__GetChangePasswordHtmlUrlWithTokenRequest,
    // output parameters:
    _ns1__GetChangePasswordHtmlUrlWithTokenResponse&ns1__GetChangePasswordHtmlUrlWithTokenResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getChangePasswordHtmlUrlWithToken(
    struct soap *soap,
    // input parameters:
    _ns1__GetChangePasswordHtmlUrlWithTokenRequest* ns1__GetChangePasswordHtmlUrlWithTokenRequest,
    // output parameters:
    _ns1__GetChangePasswordHtmlUrlWithTokenResponse&ns1__GetChangePasswordHtmlUrlWithTokenResponse
  );
@endcode

C++ proxy class (defined in soapVidyoPortalUserServiceBindingProxy.h):
@code
  class VidyoPortalUserServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapVidyoPortalUserServiceBindingService.h):
@code
  class VidyoPortalUserServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getChangePasswordHtmlUrlWithToken SOAP
//gsoap ns1  service method-style:	getChangePasswordHtmlUrlWithToken document
//gsoap ns1  service method-encoding:	getChangePasswordHtmlUrlWithToken literal
//gsoap ns1  service method-input-action:	getChangePasswordHtmlUrlWithToken getChangePasswordHtmlUrlWithToken
//gsoap ns1  service method-output-action:	getChangePasswordHtmlUrlWithToken getChangePasswordHtmlUrlWithTokenResponse
//gsoap ns1  service method-fault:	getChangePasswordHtmlUrlWithToken ns1__NotLicensedFault
//gsoap ns1  service method-fault:	getChangePasswordHtmlUrlWithToken ns1__GeneralFault
int __ns1__getChangePasswordHtmlUrlWithToken(
    _ns1__GetChangePasswordHtmlUrlWithTokenRequest* ns1__GetChangePasswordHtmlUrlWithTokenRequest,	///< Input parameter
    _ns1__GetChangePasswordHtmlUrlWithTokenResponse&ns1__GetChangePasswordHtmlUrlWithTokenResponse	///< Output parameter
);

/**

@page VidyoPortalUserServiceBinding Binding "VidyoPortalUserServiceBinding"

@section VidyoPortalUserServiceBinding_policy_enablers Policy Enablers of Binding "VidyoPortalUserServiceBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://portal.vidyo.com/user/v1_1"

  - <ns1:ClientType> @ref _ns1__ClientType
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ClientType(struct soap*, enum _ns1__ClientType*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ClientType(struct soap*, enum _ns1__ClientType*);
    @endcode

  - <ns1:OK> @ref _ns1__OK
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OK(struct soap*, enum _ns1__OK*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OK(struct soap*, enum _ns1__OK*);
    @endcode

  - <ns1:ErrorMessage> (use wsdl2h option -g to auto-generate type _ns1__ErrorMessage)

  - <ns1:GeneralFault> @ref _ns1__GeneralFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GeneralFault(struct soap*, _ns1__GeneralFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GeneralFault(struct soap*, _ns1__GeneralFault*);
    @endcode

  - <ns1:InvalidArgumentFault> @ref _ns1__InvalidArgumentFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InvalidArgumentFault(struct soap*, _ns1__InvalidArgumentFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InvalidArgumentFault(struct soap*, _ns1__InvalidArgumentFault*);
    @endcode

  - <ns1:SeatLicenseExpiredFault> @ref _ns1__SeatLicenseExpiredFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SeatLicenseExpiredFault(struct soap*, _ns1__SeatLicenseExpiredFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SeatLicenseExpiredFault(struct soap*, _ns1__SeatLicenseExpiredFault*);
    @endcode

  - <ns1:WrongPINFault> @ref _ns1__WrongPINFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WrongPINFault(struct soap*, _ns1__WrongPINFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WrongPINFault(struct soap*, _ns1__WrongPINFault*);
    @endcode

  - <ns1:ConferenceLockedFault> @ref _ns1__ConferenceLockedFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ConferenceLockedFault(struct soap*, _ns1__ConferenceLockedFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ConferenceLockedFault(struct soap*, _ns1__ConferenceLockedFault*);
    @endcode

  - <ns1:NotLicensedFault> @ref _ns1__NotLicensedFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__NotLicensedFault(struct soap*, _ns1__NotLicensedFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__NotLicensedFault(struct soap*, _ns1__NotLicensedFault*);
    @endcode

  - <ns1:ResourceNotAvailableFault> @ref _ns1__ResourceNotAvailableFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ResourceNotAvailableFault(struct soap*, _ns1__ResourceNotAvailableFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ResourceNotAvailableFault(struct soap*, _ns1__ResourceNotAvailableFault*);
    @endcode

  - <ns1:AccessRestrictedFault> @ref _ns1__AccessRestrictedFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AccessRestrictedFault(struct soap*, _ns1__AccessRestrictedFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AccessRestrictedFault(struct soap*, _ns1__AccessRestrictedFault*);
    @endcode

  - <ns1:InvalidModeratorPINFormatFault> @ref _ns1__InvalidModeratorPINFormatFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InvalidModeratorPINFormatFault(struct soap*, _ns1__InvalidModeratorPINFormatFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InvalidModeratorPINFormatFault(struct soap*, _ns1__InvalidModeratorPINFormatFault*);
    @endcode

  - <ns1:ControlMeetingFault> @ref _ns1__ControlMeetingFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ControlMeetingFault(struct soap*, _ns1__ControlMeetingFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ControlMeetingFault(struct soap*, _ns1__ControlMeetingFault*);
    @endcode

  - <ns1:ScheduledRoomCreationFault> @ref _ns1__ScheduledRoomCreationFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ScheduledRoomCreationFault(struct soap*, _ns1__ScheduledRoomCreationFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ScheduledRoomCreationFault(struct soap*, _ns1__ScheduledRoomCreationFault*);
    @endcode

  - <ns1:EndpointNotBoundFault> @ref _ns1__EndpointNotBoundFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EndpointNotBoundFault(struct soap*, _ns1__EndpointNotBoundFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EndpointNotBoundFault(struct soap*, _ns1__EndpointNotBoundFault*);
    @endcode

  - <ns1:InPointToPointCallFault> @ref _ns1__InPointToPointCallFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InPointToPointCallFault(struct soap*, _ns1__InPointToPointCallFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InPointToPointCallFault(struct soap*, _ns1__InPointToPointCallFault*);
    @endcode

  - <ns1:PrefixNotConfiguredException> @ref _ns1__PrefixNotConfiguredException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PrefixNotConfiguredException(struct soap*, _ns1__PrefixNotConfiguredException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PrefixNotConfiguredException(struct soap*, _ns1__PrefixNotConfiguredException*);
    @endcode

  - <ns1:FeatureNotAvailableFault> @ref _ns1__FeatureNotAvailableFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__FeatureNotAvailableFault(struct soap*, _ns1__FeatureNotAvailableFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__FeatureNotAvailableFault(struct soap*, _ns1__FeatureNotAvailableFault*);
    @endcode

  - <ns1:VidyoReplayNotAvailableFault> @ref _ns1__VidyoReplayNotAvailableFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__VidyoReplayNotAvailableFault(struct soap*, _ns1__VidyoReplayNotAvailableFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__VidyoReplayNotAvailableFault(struct soap*, _ns1__VidyoReplayNotAvailableFault*);
    @endcode

  - <ns1:RoomNotFoundFault> @ref _ns1__RoomNotFoundFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RoomNotFoundFault(struct soap*, _ns1__RoomNotFoundFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RoomNotFoundFault(struct soap*, _ns1__RoomNotFoundFault*);
    @endcode

  - <ns1:Language> @ref _ns1__Language
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Language(struct soap*, enum _ns1__Language*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Language(struct soap*, enum _ns1__Language*);
    @endcode

  - <ns1:EntityType> @ref _ns1__EntityType
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EntityType(struct soap*, enum _ns1__EntityType*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EntityType(struct soap*, enum _ns1__EntityType*);
    @endcode

  - <ns1:MemberMode> @ref _ns1__MemberMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MemberMode(struct soap*, enum _ns1__MemberMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MemberMode(struct soap*, enum _ns1__MemberMode*);
    @endcode

  - <ns1:MemberStatus> @ref _ns1__MemberStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MemberStatus(struct soap*, enum _ns1__MemberStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MemberStatus(struct soap*, enum _ns1__MemberStatus*);
    @endcode

  - <ns1:RoomStatus> @ref _ns1__RoomStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RoomStatus(struct soap*, enum _ns1__RoomStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RoomStatus(struct soap*, enum _ns1__RoomStatus*);
    @endcode

  - <ns1:RoomMode> @ref _ns1__RoomMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RoomMode(struct soap*, _ns1__RoomMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RoomMode(struct soap*, _ns1__RoomMode*);
    @endcode

  - <ns1:Filter> @ref _ns1__Filter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Filter(struct soap*, _ns1__Filter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Filter(struct soap*, _ns1__Filter*);
    @endcode

  - <ns1:Entity> @ref _ns1__Entity
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Entity(struct soap*, _ns1__Entity*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Entity(struct soap*, _ns1__Entity*);
    @endcode

  - <ns1:LectureModeParticipant> @ref _ns1__LectureModeParticipant
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LectureModeParticipant(struct soap*, _ns1__LectureModeParticipant*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LectureModeParticipant(struct soap*, _ns1__LectureModeParticipant*);
    @endcode

  - <ns1:LoginAttempt> @ref _ns1__LoginAttempt
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LoginAttempt(struct soap*, _ns1__LoginAttempt*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LoginAttempt(struct soap*, _ns1__LoginAttempt*);
    @endcode

  - <ns1:WelcomeBannerContent> @ref _ns1__WelcomeBannerContent
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WelcomeBannerContent(struct soap*, _ns1__WelcomeBannerContent*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WelcomeBannerContent(struct soap*, _ns1__WelcomeBannerContent*);
    @endcode

  - <ns1:LogInRequest> @ref _ns1__LogInRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LogInRequest(struct soap*, _ns1__LogInRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LogInRequest(struct soap*, _ns1__LogInRequest*);
    @endcode

  - <ns1:LogInResponse> @ref _ns1__LogInResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LogInResponse(struct soap*, _ns1__LogInResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LogInResponse(struct soap*, _ns1__LogInResponse*);
    @endcode

  - <ns1:LinkEndpointRequest> @ref _ns1__LinkEndpointRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LinkEndpointRequest(struct soap*, _ns1__LinkEndpointRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LinkEndpointRequest(struct soap*, _ns1__LinkEndpointRequest*);
    @endcode

  - <ns1:LinkEndpointResponse> @ref _ns1__LinkEndpointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LinkEndpointResponse(struct soap*, _ns1__LinkEndpointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LinkEndpointResponse(struct soap*, _ns1__LinkEndpointResponse*);
    @endcode

  - <ns1:LogOutRequest> @ref _ns1__LogOutRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LogOutRequest(struct soap*, _ns1__LogOutRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LogOutRequest(struct soap*, _ns1__LogOutRequest*);
    @endcode

  - <ns1:LogOutResponse> @ref _ns1__LogOutResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LogOutResponse(struct soap*, _ns1__LogOutResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LogOutResponse(struct soap*, _ns1__LogOutResponse*);
    @endcode

  - <ns1:MyEndpointStatusRequest> @ref _ns1__MyEndpointStatusRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MyEndpointStatusRequest(struct soap*, _ns1__MyEndpointStatusRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MyEndpointStatusRequest(struct soap*, _ns1__MyEndpointStatusRequest*);
    @endcode

  - <ns1:MyEndpointStatusResponse> @ref _ns1__MyEndpointStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MyEndpointStatusResponse(struct soap*, _ns1__MyEndpointStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MyEndpointStatusResponse(struct soap*, _ns1__MyEndpointStatusResponse*);
    @endcode

  - <ns1:SearchMyContactsRequest> @ref _ns1__SearchMyContactsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SearchMyContactsRequest(struct soap*, _ns1__SearchMyContactsRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SearchMyContactsRequest(struct soap*, _ns1__SearchMyContactsRequest*);
    @endcode

  - <ns1:SearchMyContactsResponse> @ref _ns1__SearchMyContactsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SearchMyContactsResponse(struct soap*, _ns1__SearchMyContactsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SearchMyContactsResponse(struct soap*, _ns1__SearchMyContactsResponse*);
    @endcode

  - <ns1:AddToMyContactsRequest> @ref _ns1__AddToMyContactsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddToMyContactsRequest(struct soap*, _ns1__AddToMyContactsRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddToMyContactsRequest(struct soap*, _ns1__AddToMyContactsRequest*);
    @endcode

  - <ns1:AddToMyContactsResponse> @ref _ns1__AddToMyContactsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddToMyContactsResponse(struct soap*, _ns1__AddToMyContactsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddToMyContactsResponse(struct soap*, _ns1__AddToMyContactsResponse*);
    @endcode

  - <ns1:RemoveFromMyContactsRequest> @ref _ns1__RemoveFromMyContactsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveFromMyContactsRequest(struct soap*, _ns1__RemoveFromMyContactsRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveFromMyContactsRequest(struct soap*, _ns1__RemoveFromMyContactsRequest*);
    @endcode

  - <ns1:RemoveFromMyContactsResponse> @ref _ns1__RemoveFromMyContactsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveFromMyContactsResponse(struct soap*, _ns1__RemoveFromMyContactsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveFromMyContactsResponse(struct soap*, _ns1__RemoveFromMyContactsResponse*);
    @endcode

  - <ns1:SearchRequest> @ref _ns1__SearchRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SearchRequest(struct soap*, _ns1__SearchRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SearchRequest(struct soap*, _ns1__SearchRequest*);
    @endcode

  - <ns1:SearchResponse> @ref _ns1__SearchResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SearchResponse(struct soap*, _ns1__SearchResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SearchResponse(struct soap*, _ns1__SearchResponse*);
    @endcode

  - <ns1:SearchByEntityIDRequest> @ref _ns1__SearchByEntityIDRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SearchByEntityIDRequest(struct soap*, _ns1__SearchByEntityIDRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SearchByEntityIDRequest(struct soap*, _ns1__SearchByEntityIDRequest*);
    @endcode

  - <ns1:SearchByEntityIDResponse> @ref _ns1__SearchByEntityIDResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SearchByEntityIDResponse(struct soap*, _ns1__SearchByEntityIDResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SearchByEntityIDResponse(struct soap*, _ns1__SearchByEntityIDResponse*);
    @endcode

  - <ns1:SearchByEmailRequest> @ref _ns1__SearchByEmailRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SearchByEmailRequest(struct soap*, _ns1__SearchByEmailRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SearchByEmailRequest(struct soap*, _ns1__SearchByEmailRequest*);
    @endcode

  - <ns1:SearchByEmailResponse> @ref _ns1__SearchByEmailResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SearchByEmailResponse(struct soap*, _ns1__SearchByEmailResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SearchByEmailResponse(struct soap*, _ns1__SearchByEmailResponse*);
    @endcode

  - <ns1:GetEntityByEntityIDRequest> @ref _ns1__GetEntityByEntityIDRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetEntityByEntityIDRequest(struct soap*, _ns1__GetEntityByEntityIDRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetEntityByEntityIDRequest(struct soap*, _ns1__GetEntityByEntityIDRequest*);
    @endcode

  - <ns1:GetEntityByEntityIDResponse> @ref _ns1__GetEntityByEntityIDResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetEntityByEntityIDResponse(struct soap*, _ns1__GetEntityByEntityIDResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetEntityByEntityIDResponse(struct soap*, _ns1__GetEntityByEntityIDResponse*);
    @endcode

  - <ns1:InviteToConferenceRequest> @ref _ns1__InviteToConferenceRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InviteToConferenceRequest(struct soap*, _ns1__InviteToConferenceRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InviteToConferenceRequest(struct soap*, _ns1__InviteToConferenceRequest*);
    @endcode

  - <ns1:InviteToConferenceResponse> @ref _ns1__InviteToConferenceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InviteToConferenceResponse(struct soap*, _ns1__InviteToConferenceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InviteToConferenceResponse(struct soap*, _ns1__InviteToConferenceResponse*);
    @endcode

  - <ns1:CancelOutboundCallRequest> @ref _ns1__CancelOutboundCallRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CancelOutboundCallRequest(struct soap*, _ns1__CancelOutboundCallRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CancelOutboundCallRequest(struct soap*, _ns1__CancelOutboundCallRequest*);
    @endcode

  - <ns1:CancelOutboundCallResponse> @ref _ns1__CancelOutboundCallResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CancelOutboundCallResponse(struct soap*, _ns1__CancelOutboundCallResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CancelOutboundCallResponse(struct soap*, _ns1__CancelOutboundCallResponse*);
    @endcode

  - <ns1:JoinConferenceRequest> @ref _ns1__JoinConferenceRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__JoinConferenceRequest(struct soap*, _ns1__JoinConferenceRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__JoinConferenceRequest(struct soap*, _ns1__JoinConferenceRequest*);
    @endcode

  - <ns1:JoinConferenceResponse> @ref _ns1__JoinConferenceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__JoinConferenceResponse(struct soap*, _ns1__JoinConferenceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__JoinConferenceResponse(struct soap*, _ns1__JoinConferenceResponse*);
    @endcode

  - <ns1:JoinIPCConferenceRequest> @ref _ns1__JoinIPCConferenceRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__JoinIPCConferenceRequest(struct soap*, _ns1__JoinIPCConferenceRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__JoinIPCConferenceRequest(struct soap*, _ns1__JoinIPCConferenceRequest*);
    @endcode

  - <ns1:JoinIPCConferenceResponse> @ref _ns1__JoinIPCConferenceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__JoinIPCConferenceResponse(struct soap*, _ns1__JoinIPCConferenceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__JoinIPCConferenceResponse(struct soap*, _ns1__JoinIPCConferenceResponse*);
    @endcode

  - <ns1:DirectCallRequest> @ref _ns1__DirectCallRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DirectCallRequest(struct soap*, _ns1__DirectCallRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DirectCallRequest(struct soap*, _ns1__DirectCallRequest*);
    @endcode

  - <ns1:DirectCallResponse> @ref _ns1__DirectCallResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DirectCallResponse(struct soap*, _ns1__DirectCallResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DirectCallResponse(struct soap*, _ns1__DirectCallResponse*);
    @endcode

  - <ns1:GetParticipantsRequest> @ref _ns1__GetParticipantsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetParticipantsRequest(struct soap*, _ns1__GetParticipantsRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetParticipantsRequest(struct soap*, _ns1__GetParticipantsRequest*);
    @endcode

  - <ns1:GetParticipantsResponse> @ref _ns1__GetParticipantsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetParticipantsResponse(struct soap*, _ns1__GetParticipantsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetParticipantsResponse(struct soap*, _ns1__GetParticipantsResponse*);
    @endcode

  - <ns1:GetLectureModeParticipantsRequest> @ref _ns1__GetLectureModeParticipantsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetLectureModeParticipantsRequest(struct soap*, _ns1__GetLectureModeParticipantsRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetLectureModeParticipantsRequest(struct soap*, _ns1__GetLectureModeParticipantsRequest*);
    @endcode

  - <ns1:GetLectureModeParticipantsResponse> @ref _ns1__GetLectureModeParticipantsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetLectureModeParticipantsResponse(struct soap*, _ns1__GetLectureModeParticipantsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetLectureModeParticipantsResponse(struct soap*, _ns1__GetLectureModeParticipantsResponse*);
    @endcode

  - <ns1:LeaveConferenceRequest> @ref _ns1__LeaveConferenceRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LeaveConferenceRequest(struct soap*, _ns1__LeaveConferenceRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LeaveConferenceRequest(struct soap*, _ns1__LeaveConferenceRequest*);
    @endcode

  - <ns1:LeaveConferenceResponse> @ref _ns1__LeaveConferenceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LeaveConferenceResponse(struct soap*, _ns1__LeaveConferenceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LeaveConferenceResponse(struct soap*, _ns1__LeaveConferenceResponse*);
    @endcode

  - <ns1:MuteAudioRequest> @ref _ns1__MuteAudioRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MuteAudioRequest(struct soap*, _ns1__MuteAudioRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MuteAudioRequest(struct soap*, _ns1__MuteAudioRequest*);
    @endcode

  - <ns1:MuteAudioResponse> @ref _ns1__MuteAudioResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MuteAudioResponse(struct soap*, _ns1__MuteAudioResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MuteAudioResponse(struct soap*, _ns1__MuteAudioResponse*);
    @endcode

  - <ns1:UnmuteAudioRequest> @ref _ns1__UnmuteAudioRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UnmuteAudioRequest(struct soap*, _ns1__UnmuteAudioRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UnmuteAudioRequest(struct soap*, _ns1__UnmuteAudioRequest*);
    @endcode

  - <ns1:UnmuteAudioResponse> @ref _ns1__UnmuteAudioResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UnmuteAudioResponse(struct soap*, _ns1__UnmuteAudioResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UnmuteAudioResponse(struct soap*, _ns1__UnmuteAudioResponse*);
    @endcode

  - <ns1:StartVideoRequest> @ref _ns1__StartVideoRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StartVideoRequest(struct soap*, _ns1__StartVideoRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StartVideoRequest(struct soap*, _ns1__StartVideoRequest*);
    @endcode

  - <ns1:StartVideoResponse> @ref _ns1__StartVideoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StartVideoResponse(struct soap*, _ns1__StartVideoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StartVideoResponse(struct soap*, _ns1__StartVideoResponse*);
    @endcode

  - <ns1:StopVideoRequest> @ref _ns1__StopVideoRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopVideoRequest(struct soap*, _ns1__StopVideoRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopVideoRequest(struct soap*, _ns1__StopVideoRequest*);
    @endcode

  - <ns1:StopVideoResponse> @ref _ns1__StopVideoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopVideoResponse(struct soap*, _ns1__StopVideoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopVideoResponse(struct soap*, _ns1__StopVideoResponse*);
    @endcode

  - <ns1:MyAccountRequest> @ref _ns1__MyAccountRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MyAccountRequest(struct soap*, _ns1__MyAccountRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MyAccountRequest(struct soap*, _ns1__MyAccountRequest*);
    @endcode

  - <ns1:MyAccountResponse> @ref _ns1__MyAccountResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MyAccountResponse(struct soap*, _ns1__MyAccountResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MyAccountResponse(struct soap*, _ns1__MyAccountResponse*);
    @endcode

  - <ns1:CreateRoomRequest> @ref _ns1__CreateRoomRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateRoomRequest(struct soap*, _ns1__CreateRoomRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateRoomRequest(struct soap*, _ns1__CreateRoomRequest*);
    @endcode

  - <ns1:CreateRoomResponse> @ref _ns1__CreateRoomResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateRoomResponse(struct soap*, _ns1__CreateRoomResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateRoomResponse(struct soap*, _ns1__CreateRoomResponse*);
    @endcode

  - <ns1:DeleteRoomRequest> @ref _ns1__DeleteRoomRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DeleteRoomRequest(struct soap*, _ns1__DeleteRoomRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DeleteRoomRequest(struct soap*, _ns1__DeleteRoomRequest*);
    @endcode

  - <ns1:DeleteRoomResponse> @ref _ns1__DeleteRoomResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DeleteRoomResponse(struct soap*, _ns1__DeleteRoomResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DeleteRoomResponse(struct soap*, _ns1__DeleteRoomResponse*);
    @endcode

  - <ns1:CreateRoomURLRequest> @ref _ns1__CreateRoomURLRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateRoomURLRequest(struct soap*, _ns1__CreateRoomURLRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateRoomURLRequest(struct soap*, _ns1__CreateRoomURLRequest*);
    @endcode

  - <ns1:CreateRoomURLResponse> @ref _ns1__CreateRoomURLResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateRoomURLResponse(struct soap*, _ns1__CreateRoomURLResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateRoomURLResponse(struct soap*, _ns1__CreateRoomURLResponse*);
    @endcode

  - <ns1:RemoveRoomURLRequest> @ref _ns1__RemoveRoomURLRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveRoomURLRequest(struct soap*, _ns1__RemoveRoomURLRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveRoomURLRequest(struct soap*, _ns1__RemoveRoomURLRequest*);
    @endcode

  - <ns1:RemoveRoomURLResponse> @ref _ns1__RemoveRoomURLResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveRoomURLResponse(struct soap*, _ns1__RemoveRoomURLResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveRoomURLResponse(struct soap*, _ns1__RemoveRoomURLResponse*);
    @endcode

  - <ns1:CreateRoomPINRequest> @ref _ns1__CreateRoomPINRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateRoomPINRequest(struct soap*, _ns1__CreateRoomPINRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateRoomPINRequest(struct soap*, _ns1__CreateRoomPINRequest*);
    @endcode

  - <ns1:CreateRoomPINResponse> @ref _ns1__CreateRoomPINResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateRoomPINResponse(struct soap*, _ns1__CreateRoomPINResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateRoomPINResponse(struct soap*, _ns1__CreateRoomPINResponse*);
    @endcode

  - <ns1:RemoveRoomPINRequest> @ref _ns1__RemoveRoomPINRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveRoomPINRequest(struct soap*, _ns1__RemoveRoomPINRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveRoomPINRequest(struct soap*, _ns1__RemoveRoomPINRequest*);
    @endcode

  - <ns1:RemoveRoomPINResponse> @ref _ns1__RemoveRoomPINResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveRoomPINResponse(struct soap*, _ns1__RemoveRoomPINResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveRoomPINResponse(struct soap*, _ns1__RemoveRoomPINResponse*);
    @endcode

  - <ns1:UpdatePasswordRequest> @ref _ns1__UpdatePasswordRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdatePasswordRequest(struct soap*, _ns1__UpdatePasswordRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdatePasswordRequest(struct soap*, _ns1__UpdatePasswordRequest*);
    @endcode

  - <ns1:UpdatePasswordResponse> @ref _ns1__UpdatePasswordResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdatePasswordResponse(struct soap*, _ns1__UpdatePasswordResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdatePasswordResponse(struct soap*, _ns1__UpdatePasswordResponse*);
    @endcode

  - <ns1:UpdateLanguageRequest> @ref _ns1__UpdateLanguageRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateLanguageRequest(struct soap*, _ns1__UpdateLanguageRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateLanguageRequest(struct soap*, _ns1__UpdateLanguageRequest*);
    @endcode

  - <ns1:UpdateLanguageResponse> @ref _ns1__UpdateLanguageResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateLanguageResponse(struct soap*, _ns1__UpdateLanguageResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateLanguageResponse(struct soap*, _ns1__UpdateLanguageResponse*);
    @endcode

  - <ns1:LockRoomRequest> @ref _ns1__LockRoomRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LockRoomRequest(struct soap*, _ns1__LockRoomRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LockRoomRequest(struct soap*, _ns1__LockRoomRequest*);
    @endcode

  - <ns1:LockRoomResponse> @ref _ns1__LockRoomResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LockRoomResponse(struct soap*, _ns1__LockRoomResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LockRoomResponse(struct soap*, _ns1__LockRoomResponse*);
    @endcode

  - <ns1:UnlockRoomRequest> @ref _ns1__UnlockRoomRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UnlockRoomRequest(struct soap*, _ns1__UnlockRoomRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UnlockRoomRequest(struct soap*, _ns1__UnlockRoomRequest*);
    @endcode

  - <ns1:UnlockRoomResponse> @ref _ns1__UnlockRoomResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UnlockRoomResponse(struct soap*, _ns1__UnlockRoomResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UnlockRoomResponse(struct soap*, _ns1__UnlockRoomResponse*);
    @endcode

  - <ns1:SetMemberModeRequest> @ref _ns1__SetMemberModeRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetMemberModeRequest(struct soap*, _ns1__SetMemberModeRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetMemberModeRequest(struct soap*, _ns1__SetMemberModeRequest*);
    @endcode

  - <ns1:SetMemberModeResponse> @ref _ns1__SetMemberModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetMemberModeResponse(struct soap*, _ns1__SetMemberModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetMemberModeResponse(struct soap*, _ns1__SetMemberModeResponse*);
    @endcode

  - <ns1:GetRecordingProfilesRequest> @ref _ns1__GetRecordingProfilesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRecordingProfilesRequest(struct soap*, _ns1__GetRecordingProfilesRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRecordingProfilesRequest(struct soap*, _ns1__GetRecordingProfilesRequest*);
    @endcode

  - <ns1:GetRecordingProfilesResponse> @ref _ns1__GetRecordingProfilesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRecordingProfilesResponse(struct soap*, _ns1__GetRecordingProfilesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRecordingProfilesResponse(struct soap*, _ns1__GetRecordingProfilesResponse*);
    @endcode

  - <ns1:StartRecordingRequest> @ref _ns1__StartRecordingRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StartRecordingRequest(struct soap*, _ns1__StartRecordingRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StartRecordingRequest(struct soap*, _ns1__StartRecordingRequest*);
    @endcode

  - <ns1:StartRecordingResponse> @ref _ns1__StartRecordingResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StartRecordingResponse(struct soap*, _ns1__StartRecordingResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StartRecordingResponse(struct soap*, _ns1__StartRecordingResponse*);
    @endcode

  - <ns1:GetPortalVersionRequest> @ref _ns1__GetPortalVersionRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPortalVersionRequest(struct soap*, _ns1__GetPortalVersionRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPortalVersionRequest(struct soap*, _ns1__GetPortalVersionRequest*);
    @endcode

  - <ns1:GetPortalVersionResponse> @ref _ns1__GetPortalVersionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPortalVersionResponse(struct soap*, _ns1__GetPortalVersionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPortalVersionResponse(struct soap*, _ns1__GetPortalVersionResponse*);
    @endcode

  - <ns1:PauseRecordingRequest> @ref _ns1__PauseRecordingRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PauseRecordingRequest(struct soap*, _ns1__PauseRecordingRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PauseRecordingRequest(struct soap*, _ns1__PauseRecordingRequest*);
    @endcode

  - <ns1:PauseRecordingResponse> @ref _ns1__PauseRecordingResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PauseRecordingResponse(struct soap*, _ns1__PauseRecordingResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PauseRecordingResponse(struct soap*, _ns1__PauseRecordingResponse*);
    @endcode

  - <ns1:ResumeRecordingRequest> @ref _ns1__ResumeRecordingRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ResumeRecordingRequest(struct soap*, _ns1__ResumeRecordingRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ResumeRecordingRequest(struct soap*, _ns1__ResumeRecordingRequest*);
    @endcode

  - <ns1:ResumeRecordingResponse> @ref _ns1__ResumeRecordingResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ResumeRecordingResponse(struct soap*, _ns1__ResumeRecordingResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ResumeRecordingResponse(struct soap*, _ns1__ResumeRecordingResponse*);
    @endcode

  - <ns1:StopRecordingRequest> @ref _ns1__StopRecordingRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopRecordingRequest(struct soap*, _ns1__StopRecordingRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopRecordingRequest(struct soap*, _ns1__StopRecordingRequest*);
    @endcode

  - <ns1:StopRecordingResponse> @ref _ns1__StopRecordingResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopRecordingResponse(struct soap*, _ns1__StopRecordingResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopRecordingResponse(struct soap*, _ns1__StopRecordingResponse*);
    @endcode

  - <ns1:CreateWebcastURLRequest> @ref _ns1__CreateWebcastURLRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateWebcastURLRequest(struct soap*, _ns1__CreateWebcastURLRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateWebcastURLRequest(struct soap*, _ns1__CreateWebcastURLRequest*);
    @endcode

  - <ns1:CreateWebcastURLResponse> @ref _ns1__CreateWebcastURLResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateWebcastURLResponse(struct soap*, _ns1__CreateWebcastURLResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateWebcastURLResponse(struct soap*, _ns1__CreateWebcastURLResponse*);
    @endcode

  - <ns1:CreateWebcastPINRequest> @ref _ns1__CreateWebcastPINRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateWebcastPINRequest(struct soap*, _ns1__CreateWebcastPINRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateWebcastPINRequest(struct soap*, _ns1__CreateWebcastPINRequest*);
    @endcode

  - <ns1:CreateWebcastPINResponse> @ref _ns1__CreateWebcastPINResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateWebcastPINResponse(struct soap*, _ns1__CreateWebcastPINResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateWebcastPINResponse(struct soap*, _ns1__CreateWebcastPINResponse*);
    @endcode

  - <ns1:RemoveWebcastURLRequest> @ref _ns1__RemoveWebcastURLRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveWebcastURLRequest(struct soap*, _ns1__RemoveWebcastURLRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveWebcastURLRequest(struct soap*, _ns1__RemoveWebcastURLRequest*);
    @endcode

  - <ns1:RemoveWebcastURLResponse> @ref _ns1__RemoveWebcastURLResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveWebcastURLResponse(struct soap*, _ns1__RemoveWebcastURLResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveWebcastURLResponse(struct soap*, _ns1__RemoveWebcastURLResponse*);
    @endcode

  - <ns1:RemoveWebcastPINRequest> @ref _ns1__RemoveWebcastPINRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveWebcastPINRequest(struct soap*, _ns1__RemoveWebcastPINRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveWebcastPINRequest(struct soap*, _ns1__RemoveWebcastPINRequest*);
    @endcode

  - <ns1:RemoveWebcastPINResponse> @ref _ns1__RemoveWebcastPINResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveWebcastPINResponse(struct soap*, _ns1__RemoveWebcastPINResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveWebcastPINResponse(struct soap*, _ns1__RemoveWebcastPINResponse*);
    @endcode

  - <ns1:GetWebcastURLRequest> @ref _ns1__GetWebcastURLRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetWebcastURLRequest(struct soap*, _ns1__GetWebcastURLRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetWebcastURLRequest(struct soap*, _ns1__GetWebcastURLRequest*);
    @endcode

  - <ns1:GetWebcastURLResponse> @ref _ns1__GetWebcastURLResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetWebcastURLResponse(struct soap*, _ns1__GetWebcastURLResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetWebcastURLResponse(struct soap*, _ns1__GetWebcastURLResponse*);
    @endcode

  - <ns1:GetUserNameRequest> @ref _ns1__GetUserNameRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUserNameRequest(struct soap*, _ns1__GetUserNameRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUserNameRequest(struct soap*, _ns1__GetUserNameRequest*);
    @endcode

  - <ns1:GetUserNameResponse> @ref _ns1__GetUserNameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetUserNameResponse(struct soap*, _ns1__GetUserNameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetUserNameResponse(struct soap*, _ns1__GetUserNameResponse*);
    @endcode

  - <ns1:GetEntityByRoomKeyRequest> @ref _ns1__GetEntityByRoomKeyRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetEntityByRoomKeyRequest(struct soap*, _ns1__GetEntityByRoomKeyRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetEntityByRoomKeyRequest(struct soap*, _ns1__GetEntityByRoomKeyRequest*);
    @endcode

  - <ns1:GetEntityByRoomKeyResponse> @ref _ns1__GetEntityByRoomKeyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetEntityByRoomKeyResponse(struct soap*, _ns1__GetEntityByRoomKeyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetEntityByRoomKeyResponse(struct soap*, _ns1__GetEntityByRoomKeyResponse*);
    @endcode

  - <ns1:GetInviteContentRequest> @ref _ns1__GetInviteContentRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInviteContentRequest(struct soap*, _ns1__GetInviteContentRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInviteContentRequest(struct soap*, _ns1__GetInviteContentRequest*);
    @endcode

  - <ns1:GetInviteContentResponse> @ref _ns1__GetInviteContentResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInviteContentResponse(struct soap*, _ns1__GetInviteContentResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInviteContentResponse(struct soap*, _ns1__GetInviteContentResponse*);
    @endcode

  - <ns1:GetRoomProfilesRequest> @ref _ns1__GetRoomProfilesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRoomProfilesRequest(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRoomProfilesRequest(struct soap*, _XML);
    @endcode

  - <ns1:GetRoomProfilesResponse> @ref _ns1__GetRoomProfilesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRoomProfilesResponse(struct soap*, _ns1__GetRoomProfilesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRoomProfilesResponse(struct soap*, _ns1__GetRoomProfilesResponse*);
    @endcode

  - <ns1:GetRoomProfileRequest> @ref _ns1__GetRoomProfileRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRoomProfileRequest(struct soap*, _ns1__GetRoomProfileRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRoomProfileRequest(struct soap*, _ns1__GetRoomProfileRequest*);
    @endcode

  - <ns1:GetRoomProfileResponse> @ref _ns1__GetRoomProfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRoomProfileResponse(struct soap*, _ns1__GetRoomProfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRoomProfileResponse(struct soap*, _ns1__GetRoomProfileResponse*);
    @endcode

  - <ns1:SetRoomProfileRequest> @ref _ns1__SetRoomProfileRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRoomProfileRequest(struct soap*, _ns1__SetRoomProfileRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRoomProfileRequest(struct soap*, _ns1__SetRoomProfileRequest*);
    @endcode

  - <ns1:SetRoomProfileResponse> @ref _ns1__SetRoomProfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRoomProfileResponse(struct soap*, _ns1__SetRoomProfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRoomProfileResponse(struct soap*, _ns1__SetRoomProfileResponse*);
    @endcode

  - <ns1:RemoveRoomProfileRequest> @ref _ns1__RemoveRoomProfileRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveRoomProfileRequest(struct soap*, _ns1__RemoveRoomProfileRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveRoomProfileRequest(struct soap*, _ns1__RemoveRoomProfileRequest*);
    @endcode

  - <ns1:RemoveRoomProfileResponse> @ref _ns1__RemoveRoomProfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveRoomProfileResponse(struct soap*, _ns1__RemoveRoomProfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveRoomProfileResponse(struct soap*, _ns1__RemoveRoomProfileResponse*);
    @endcode

  - <ns1:CreateModeratorURLRequest> @ref _ns1__CreateModeratorURLRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateModeratorURLRequest(struct soap*, _ns1__CreateModeratorURLRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateModeratorURLRequest(struct soap*, _ns1__CreateModeratorURLRequest*);
    @endcode

  - <ns1:CreateModeratorURLResponse> @ref _ns1__CreateModeratorURLResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateModeratorURLResponse(struct soap*, _ns1__CreateModeratorURLResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateModeratorURLResponse(struct soap*, _ns1__CreateModeratorURLResponse*);
    @endcode

  - <ns1:RemoveModeratorURLRequest> @ref _ns1__RemoveModeratorURLRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveModeratorURLRequest(struct soap*, _ns1__RemoveModeratorURLRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveModeratorURLRequest(struct soap*, _ns1__RemoveModeratorURLRequest*);
    @endcode

  - <ns1:RemoveModeratorURLResponse> @ref _ns1__RemoveModeratorURLResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveModeratorURLResponse(struct soap*, _ns1__RemoveModeratorURLResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveModeratorURLResponse(struct soap*, _ns1__RemoveModeratorURLResponse*);
    @endcode

  - <ns1:GetModeratorURLRequest> @ref _ns1__GetModeratorURLRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetModeratorURLRequest(struct soap*, _ns1__GetModeratorURLRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetModeratorURLRequest(struct soap*, _ns1__GetModeratorURLRequest*);
    @endcode

  - <ns1:GetModeratorURLResponse> @ref _ns1__GetModeratorURLResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetModeratorURLResponse(struct soap*, _ns1__GetModeratorURLResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetModeratorURLResponse(struct soap*, _ns1__GetModeratorURLResponse*);
    @endcode

  - <ns1:GetModeratorURLWithTokenRequest> @ref _ns1__GetModeratorURLWithTokenRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetModeratorURLWithTokenRequest(struct soap*, _ns1__GetModeratorURLWithTokenRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetModeratorURLWithTokenRequest(struct soap*, _ns1__GetModeratorURLWithTokenRequest*);
    @endcode

  - <ns1:GetModeratorURLWithTokenResponse> @ref _ns1__GetModeratorURLWithTokenResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetModeratorURLWithTokenResponse(struct soap*, _ns1__GetModeratorURLWithTokenResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetModeratorURLWithTokenResponse(struct soap*, _ns1__GetModeratorURLWithTokenResponse*);
    @endcode

  - <ns1:CreateModeratorPINRequest> @ref _ns1__CreateModeratorPINRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateModeratorPINRequest(struct soap*, _ns1__CreateModeratorPINRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateModeratorPINRequest(struct soap*, _ns1__CreateModeratorPINRequest*);
    @endcode

  - <ns1:CreateModeratorPINResponse> @ref _ns1__CreateModeratorPINResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateModeratorPINResponse(struct soap*, _ns1__CreateModeratorPINResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateModeratorPINResponse(struct soap*, _ns1__CreateModeratorPINResponse*);
    @endcode

  - <ns1:RemoveModeratorPINRequest> @ref _ns1__RemoveModeratorPINRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveModeratorPINRequest(struct soap*, _ns1__RemoveModeratorPINRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveModeratorPINRequest(struct soap*, _ns1__RemoveModeratorPINRequest*);
    @endcode

  - <ns1:RemoveModeratorPINResponse> @ref _ns1__RemoveModeratorPINResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemoveModeratorPINResponse(struct soap*, _ns1__RemoveModeratorPINResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemoveModeratorPINResponse(struct soap*, _ns1__RemoveModeratorPINResponse*);
    @endcode

  - <ns1:GetConferenceIDRequest> @ref _ns1__GetConferenceIDRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetConferenceIDRequest(struct soap*, _ns1__GetConferenceIDRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetConferenceIDRequest(struct soap*, _ns1__GetConferenceIDRequest*);
    @endcode

  - <ns1:GetConferenceIDResponse> @ref _ns1__GetConferenceIDResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetConferenceIDResponse(struct soap*, _ns1__GetConferenceIDResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetConferenceIDResponse(struct soap*, _ns1__GetConferenceIDResponse*);
    @endcode

  - <ns1:GenerateAuthTokenRequest> @ref _ns1__GenerateAuthTokenRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GenerateAuthTokenRequest(struct soap*, _ns1__GenerateAuthTokenRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GenerateAuthTokenRequest(struct soap*, _ns1__GenerateAuthTokenRequest*);
    @endcode

  - <ns1:GenerateAuthTokenResponse> @ref _ns1__GenerateAuthTokenResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GenerateAuthTokenResponse(struct soap*, _ns1__GenerateAuthTokenResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GenerateAuthTokenResponse(struct soap*, _ns1__GenerateAuthTokenResponse*);
    @endcode

  - <ns1:CreateScheduledRoomRequest> @ref _ns1__CreateScheduledRoomRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateScheduledRoomRequest(struct soap*, _ns1__CreateScheduledRoomRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateScheduledRoomRequest(struct soap*, _ns1__CreateScheduledRoomRequest*);
    @endcode

  - <ns1:CreateScheduledRoomResponse> @ref _ns1__CreateScheduledRoomResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CreateScheduledRoomResponse(struct soap*, _ns1__CreateScheduledRoomResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CreateScheduledRoomResponse(struct soap*, _ns1__CreateScheduledRoomResponse*);
    @endcode

  - <ns1:DeleteScheduledRoomRequest> @ref _ns1__DeleteScheduledRoomRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DeleteScheduledRoomRequest(struct soap*, _ns1__DeleteScheduledRoomRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DeleteScheduledRoomRequest(struct soap*, _ns1__DeleteScheduledRoomRequest*);
    @endcode

  - <ns1:DeleteScheduledRoomResponse> @ref _ns1__DeleteScheduledRoomResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DeleteScheduledRoomResponse(struct soap*, _ns1__DeleteScheduledRoomResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DeleteScheduledRoomResponse(struct soap*, _ns1__DeleteScheduledRoomResponse*);
    @endcode

  - <ns1:PortalFeature> @ref _ns1__PortalFeature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PortalFeature(struct soap*, _ns1__PortalFeature*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PortalFeature(struct soap*, _ns1__PortalFeature*);
    @endcode

  - <ns1:GetPortalFeaturesRequest> @ref _ns1__GetPortalFeaturesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPortalFeaturesRequest(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPortalFeaturesRequest(struct soap*, _XML);
    @endcode

  - <ns1:GetPortalFeaturesResponse> @ref _ns1__GetPortalFeaturesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPortalFeaturesResponse(struct soap*, _ns1__GetPortalFeaturesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPortalFeaturesResponse(struct soap*, _ns1__GetPortalFeaturesResponse*);
    @endcode

  - <ns1:EndpointFeature> @ref _ns1__EndpointFeature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EndpointFeature(struct soap*, _ns1__EndpointFeature*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EndpointFeature(struct soap*, _ns1__EndpointFeature*);
    @endcode

  - <ns1:SetEndpointDetailsRequest> @ref _ns1__SetEndpointDetailsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetEndpointDetailsRequest(struct soap*, _ns1__SetEndpointDetailsRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetEndpointDetailsRequest(struct soap*, _ns1__SetEndpointDetailsRequest*);
    @endcode

  - <ns1:SetEndpointDetailsResponse> @ref _ns1__SetEndpointDetailsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetEndpointDetailsResponse(struct soap*, _ns1__SetEndpointDetailsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetEndpointDetailsResponse(struct soap*, _ns1__SetEndpointDetailsResponse*);
    @endcode

  - <ns1:GetActiveSessionsRequest> @ref _ns1__GetActiveSessionsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetActiveSessionsRequest(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetActiveSessionsRequest(struct soap*, _XML);
    @endcode

  - <ns1:GetActiveSessionsResponse> @ref _ns1__GetActiveSessionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetActiveSessionsResponse(struct soap*, _ns1__GetActiveSessionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetActiveSessionsResponse(struct soap*, _ns1__GetActiveSessionsResponse*);
    @endcode

  - <ns1:LogoutAllOtherSessionsRequest> @ref _ns1__LogoutAllOtherSessionsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LogoutAllOtherSessionsRequest(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LogoutAllOtherSessionsRequest(struct soap*, _XML);
    @endcode

  - <ns1:LogoutAllOtherSessionsResponse> @ref _ns1__LogoutAllOtherSessionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LogoutAllOtherSessionsResponse(struct soap*, _ns1__LogoutAllOtherSessionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LogoutAllOtherSessionsResponse(struct soap*, _ns1__LogoutAllOtherSessionsResponse*);
    @endcode

  - <ns1:disconnectConferenceAllRequest> @ref _ns1__disconnectConferenceAllRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__disconnectConferenceAllRequest(struct soap*, _ns1__disconnectConferenceAllRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__disconnectConferenceAllRequest(struct soap*, _ns1__disconnectConferenceAllRequest*);
    @endcode

  - <ns1:disconnectConferenceAllResponse> @ref _ns1__disconnectConferenceAllResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__disconnectConferenceAllResponse(struct soap*, _ns1__disconnectConferenceAllResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__disconnectConferenceAllResponse(struct soap*, _ns1__disconnectConferenceAllResponse*);
    @endcode

  - <ns1:muteAudioServerAllRequest> @ref _ns1__muteAudioServerAllRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__muteAudioServerAllRequest(struct soap*, _ns1__muteAudioServerAllRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__muteAudioServerAllRequest(struct soap*, _ns1__muteAudioServerAllRequest*);
    @endcode

  - <ns1:muteAudioServerAllResponse> @ref _ns1__muteAudioServerAllResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__muteAudioServerAllResponse(struct soap*, _ns1__muteAudioServerAllResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__muteAudioServerAllResponse(struct soap*, _ns1__muteAudioServerAllResponse*);
    @endcode

  - <ns1:muteAudioClientAllRequest> @ref _ns1__muteAudioClientAllRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__muteAudioClientAllRequest(struct soap*, _ns1__muteAudioClientAllRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__muteAudioClientAllRequest(struct soap*, _ns1__muteAudioClientAllRequest*);
    @endcode

  - <ns1:muteAudioClientAllResponse> @ref _ns1__muteAudioClientAllResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__muteAudioClientAllResponse(struct soap*, _ns1__muteAudioClientAllResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__muteAudioClientAllResponse(struct soap*, _ns1__muteAudioClientAllResponse*);
    @endcode

  - <ns1:muteVideoServerAllRequest> @ref _ns1__muteVideoServerAllRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__muteVideoServerAllRequest(struct soap*, _ns1__muteVideoServerAllRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__muteVideoServerAllRequest(struct soap*, _ns1__muteVideoServerAllRequest*);
    @endcode

  - <ns1:muteVideoServerAllResponse> @ref _ns1__muteVideoServerAllResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__muteVideoServerAllResponse(struct soap*, _ns1__muteVideoServerAllResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__muteVideoServerAllResponse(struct soap*, _ns1__muteVideoServerAllResponse*);
    @endcode

  - <ns1:muteVideoClientAllRequest> @ref _ns1__muteVideoClientAllRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__muteVideoClientAllRequest(struct soap*, _ns1__muteVideoClientAllRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__muteVideoClientAllRequest(struct soap*, _ns1__muteVideoClientAllRequest*);
    @endcode

  - <ns1:muteVideoClientAllResponse> @ref _ns1__muteVideoClientAllResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__muteVideoClientAllResponse(struct soap*, _ns1__muteVideoClientAllResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__muteVideoClientAllResponse(struct soap*, _ns1__muteVideoClientAllResponse*);
    @endcode

  - <ns1:OnetimeAccessRequest> @ref _ns1__OnetimeAccessRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OnetimeAccessRequest(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OnetimeAccessRequest(struct soap*, _XML);
    @endcode

  - <ns1:OnetimeAccessResponse> @ref _ns1__OnetimeAccessResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OnetimeAccessResponse(struct soap*, _ns1__OnetimeAccessResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OnetimeAccessResponse(struct soap*, _ns1__OnetimeAccessResponse*);
    @endcode

  - <ns1:RoomAccessOption> @ref _ns1__RoomAccessOption
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RoomAccessOption(struct soap*, _ns1__RoomAccessOption*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RoomAccessOption(struct soap*, _ns1__RoomAccessOption*);
    @endcode

  - <ns1:RoomAccessOptionsRequest> @ref _ns1__RoomAccessOptionsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RoomAccessOptionsRequest(struct soap*, _ns1__RoomAccessOptionsRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RoomAccessOptionsRequest(struct soap*, _ns1__RoomAccessOptionsRequest*);
    @endcode

  - <ns1:RoomAccessOptionsResponse> @ref _ns1__RoomAccessOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RoomAccessOptionsResponse(struct soap*, _ns1__RoomAccessOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RoomAccessOptionsResponse(struct soap*, _ns1__RoomAccessOptionsResponse*);
    @endcode

  - <ns1:PortalPrefixRequest> @ref _ns1__PortalPrefixRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PortalPrefixRequest(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PortalPrefixRequest(struct soap*, _XML);
    @endcode

  - <ns1:PortalPrefixResponse> @ref _ns1__PortalPrefixResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PortalPrefixResponse(struct soap*, _ns1__PortalPrefixResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PortalPrefixResponse(struct soap*, _ns1__PortalPrefixResponse*);
    @endcode

  - <ns1:PrefixNotConfiguredFault> @ref _ns1__PrefixNotConfiguredFault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PrefixNotConfiguredFault(struct soap*, _ns1__PrefixNotConfiguredFault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PrefixNotConfiguredFault(struct soap*, _ns1__PrefixNotConfiguredFault*);
    @endcode

  - <ns1:getLoginAndWelcomeBannerRequest> @ref _ns1__getLoginAndWelcomeBannerRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getLoginAndWelcomeBannerRequest(struct soap*, _ns1__getLoginAndWelcomeBannerRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getLoginAndWelcomeBannerRequest(struct soap*, _ns1__getLoginAndWelcomeBannerRequest*);
    @endcode

  - <ns1:getLoginAndWelcomeBannerResponse> @ref _ns1__getLoginAndWelcomeBannerResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getLoginAndWelcomeBannerResponse(struct soap*, _ns1__getLoginAndWelcomeBannerResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getLoginAndWelcomeBannerResponse(struct soap*, _ns1__getLoginAndWelcomeBannerResponse*);
    @endcode

  - <ns1:getUserAccountTypeRequest> @ref _ns1__getUserAccountTypeRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getUserAccountTypeRequest(struct soap*, _ns1__getUserAccountTypeRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getUserAccountTypeRequest(struct soap*, _ns1__getUserAccountTypeRequest*);
    @endcode

  - <ns1:getUserAccountTypeResponse> @ref _ns1__getUserAccountTypeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getUserAccountTypeResponse(struct soap*, _ns1__getUserAccountTypeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getUserAccountTypeResponse(struct soap*, _ns1__getUserAccountTypeResponse*);
    @endcode

  - <ns1:StartLectureModeRequest> @ref _ns1__StartLectureModeRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StartLectureModeRequest(struct soap*, _ns1__StartLectureModeRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StartLectureModeRequest(struct soap*, _ns1__StartLectureModeRequest*);
    @endcode

  - <ns1:StartLectureModeResponse> @ref _ns1__StartLectureModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StartLectureModeResponse(struct soap*, _ns1__StartLectureModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StartLectureModeResponse(struct soap*, _ns1__StartLectureModeResponse*);
    @endcode

  - <ns1:StopLectureModeRequest> @ref _ns1__StopLectureModeRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopLectureModeRequest(struct soap*, _ns1__StopLectureModeRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopLectureModeRequest(struct soap*, _ns1__StopLectureModeRequest*);
    @endcode

  - <ns1:StopLectureModeResponse> @ref _ns1__StopLectureModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopLectureModeResponse(struct soap*, _ns1__StopLectureModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopLectureModeResponse(struct soap*, _ns1__StopLectureModeResponse*);
    @endcode

  - <ns1:RaiseHandRequest> @ref _ns1__RaiseHandRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RaiseHandRequest(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RaiseHandRequest(struct soap*, _XML);
    @endcode

  - <ns1:RaiseHandResponse> @ref _ns1__RaiseHandResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RaiseHandResponse(struct soap*, _ns1__RaiseHandResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RaiseHandResponse(struct soap*, _ns1__RaiseHandResponse*);
    @endcode

  - <ns1:UnraiseHandRequest> @ref _ns1__UnraiseHandRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UnraiseHandRequest(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UnraiseHandRequest(struct soap*, _XML);
    @endcode

  - <ns1:UnraiseHandResponse> @ref _ns1__UnraiseHandResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UnraiseHandResponse(struct soap*, _ns1__UnraiseHandResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UnraiseHandResponse(struct soap*, _ns1__UnraiseHandResponse*);
    @endcode

  - <ns1:DismissRaisedHandRequest> @ref _ns1__DismissRaisedHandRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DismissRaisedHandRequest(struct soap*, _ns1__DismissRaisedHandRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DismissRaisedHandRequest(struct soap*, _ns1__DismissRaisedHandRequest*);
    @endcode

  - <ns1:DismissRaisedHandResponse> @ref _ns1__DismissRaisedHandResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DismissRaisedHandResponse(struct soap*, _ns1__DismissRaisedHandResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DismissRaisedHandResponse(struct soap*, _ns1__DismissRaisedHandResponse*);
    @endcode

  - <ns1:DismissAllRaisedHandRequest> @ref _ns1__DismissAllRaisedHandRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DismissAllRaisedHandRequest(struct soap*, _ns1__DismissAllRaisedHandRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DismissAllRaisedHandRequest(struct soap*, _ns1__DismissAllRaisedHandRequest*);
    @endcode

  - <ns1:DismissAllRaisedHandResponse> @ref _ns1__DismissAllRaisedHandResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DismissAllRaisedHandResponse(struct soap*, _ns1__DismissAllRaisedHandResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DismissAllRaisedHandResponse(struct soap*, _ns1__DismissAllRaisedHandResponse*);
    @endcode

  - <ns1:SetPresenterRequest> @ref _ns1__SetPresenterRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetPresenterRequest(struct soap*, _ns1__SetPresenterRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetPresenterRequest(struct soap*, _ns1__SetPresenterRequest*);
    @endcode

  - <ns1:SetPresenterResponse> @ref _ns1__SetPresenterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetPresenterResponse(struct soap*, _ns1__SetPresenterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetPresenterResponse(struct soap*, _ns1__SetPresenterResponse*);
    @endcode

  - <ns1:RemovePresenterRequest> @ref _ns1__RemovePresenterRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemovePresenterRequest(struct soap*, _ns1__RemovePresenterRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemovePresenterRequest(struct soap*, _ns1__RemovePresenterRequest*);
    @endcode

  - <ns1:RemovePresenterResponse> @ref _ns1__RemovePresenterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RemovePresenterResponse(struct soap*, _ns1__RemovePresenterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RemovePresenterResponse(struct soap*, _ns1__RemovePresenterResponse*);
    @endcode

  - <ns1:GetVidyoReplayLibraryRequest> @ref _ns1__GetVidyoReplayLibraryRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVidyoReplayLibraryRequest(struct soap*, _ns1__GetVidyoReplayLibraryRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVidyoReplayLibraryRequest(struct soap*, _ns1__GetVidyoReplayLibraryRequest*);
    @endcode

  - <ns1:GetVidyoReplayLibraryResponse> @ref _ns1__GetVidyoReplayLibraryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVidyoReplayLibraryResponse(struct soap*, _ns1__GetVidyoReplayLibraryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVidyoReplayLibraryResponse(struct soap*, _ns1__GetVidyoReplayLibraryResponse*);
    @endcode

  - <ns1:WhatIsMyIPAddressRequest> @ref _ns1__WhatIsMyIPAddressRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WhatIsMyIPAddressRequest(struct soap*, _ns1__WhatIsMyIPAddressRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WhatIsMyIPAddressRequest(struct soap*, _ns1__WhatIsMyIPAddressRequest*);
    @endcode

  - <ns1:WhatIsMyIPAddressResponse> @ref _ns1__WhatIsMyIPAddressResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WhatIsMyIPAddressResponse(struct soap*, _ns1__WhatIsMyIPAddressResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WhatIsMyIPAddressResponse(struct soap*, _ns1__WhatIsMyIPAddressResponse*);
    @endcode

  - <ns1:GetChangePasswordHtmlUrlWithTokenRequest> @ref _ns1__GetChangePasswordHtmlUrlWithTokenRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest*);
    @endcode

  - <ns1:GetChangePasswordHtmlUrlWithTokenResponse> @ref _ns1__GetChangePasswordHtmlUrlWithTokenResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetChangePasswordHtmlUrlWithTokenResponse(struct soap*, _ns1__GetChangePasswordHtmlUrlWithTokenResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetChangePasswordHtmlUrlWithTokenResponse(struct soap*, _ns1__GetChangePasswordHtmlUrlWithTokenResponse*);
    @endcode

*/

/* End of WSVidyoUser.h */
