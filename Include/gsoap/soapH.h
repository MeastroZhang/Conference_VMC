/* soapH.h
   Generated by gSOAP 2.8.30 for WSVidyoUser.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_dateTime(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

inline bool * soap_new_bool(struct soap *soap, int n = -1)
{	return static_cast<bool *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(bool)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RoomStatus_DEFINED
#define SOAP_TYPE__ns1__RoomStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__RoomStatus(struct soap*, enum _ns1__RoomStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RoomStatus(struct soap*, const char*, int, const enum _ns1__RoomStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__RoomStatus2s(struct soap*, enum _ns1__RoomStatus);
SOAP_FMAC3 enum _ns1__RoomStatus * SOAP_FMAC4 soap_in__ns1__RoomStatus(struct soap*, const char*, enum _ns1__RoomStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__RoomStatus(struct soap*, const char*, enum _ns1__RoomStatus *);

inline enum _ns1__RoomStatus * soap_new__ns1__RoomStatus(struct soap *soap, int n = -1)
{	return static_cast<enum _ns1__RoomStatus *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum _ns1__RoomStatus)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__RoomStatus(struct soap*, const enum _ns1__RoomStatus *, const char*, const char*);

inline int soap_write__ns1__RoomStatus(struct soap *soap, enum _ns1__RoomStatus const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__ns1__RoomStatus(soap, p, "ns1:RoomStatus", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns1__RoomStatus * SOAP_FMAC4 soap_get__ns1__RoomStatus(struct soap*, enum _ns1__RoomStatus *, const char*, const char*);

inline int soap_read__ns1__RoomStatus(struct soap *soap, enum _ns1__RoomStatus *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__ns1__RoomStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MemberStatus_DEFINED
#define SOAP_TYPE__ns1__MemberStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__MemberStatus(struct soap*, enum _ns1__MemberStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberStatus(struct soap*, const char*, int, const enum _ns1__MemberStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__MemberStatus2s(struct soap*, enum _ns1__MemberStatus);
SOAP_FMAC3 enum _ns1__MemberStatus * SOAP_FMAC4 soap_in__ns1__MemberStatus(struct soap*, const char*, enum _ns1__MemberStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__MemberStatus(struct soap*, const char*, enum _ns1__MemberStatus *);

inline enum _ns1__MemberStatus * soap_new__ns1__MemberStatus(struct soap *soap, int n = -1)
{	return static_cast<enum _ns1__MemberStatus *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum _ns1__MemberStatus)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__MemberStatus(struct soap*, const enum _ns1__MemberStatus *, const char*, const char*);

inline int soap_write__ns1__MemberStatus(struct soap *soap, enum _ns1__MemberStatus const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__ns1__MemberStatus(soap, p, "ns1:MemberStatus", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns1__MemberStatus * SOAP_FMAC4 soap_get__ns1__MemberStatus(struct soap*, enum _ns1__MemberStatus *, const char*, const char*);

inline int soap_read__ns1__MemberStatus(struct soap *soap, enum _ns1__MemberStatus *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__ns1__MemberStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MemberMode_DEFINED
#define SOAP_TYPE__ns1__MemberMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__MemberMode(struct soap*, enum _ns1__MemberMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MemberMode(struct soap*, const char*, int, const enum _ns1__MemberMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__MemberMode2s(struct soap*, enum _ns1__MemberMode);
SOAP_FMAC3 enum _ns1__MemberMode * SOAP_FMAC4 soap_in__ns1__MemberMode(struct soap*, const char*, enum _ns1__MemberMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__MemberMode(struct soap*, const char*, enum _ns1__MemberMode *);

inline enum _ns1__MemberMode * soap_new__ns1__MemberMode(struct soap *soap, int n = -1)
{	return static_cast<enum _ns1__MemberMode *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum _ns1__MemberMode)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__MemberMode(struct soap*, const enum _ns1__MemberMode *, const char*, const char*);

inline int soap_write__ns1__MemberMode(struct soap *soap, enum _ns1__MemberMode const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__ns1__MemberMode(soap, p, "ns1:MemberMode", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns1__MemberMode * SOAP_FMAC4 soap_get__ns1__MemberMode(struct soap*, enum _ns1__MemberMode *, const char*, const char*);

inline int soap_read__ns1__MemberMode(struct soap *soap, enum _ns1__MemberMode *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__ns1__MemberMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__EntityType_DEFINED
#define SOAP_TYPE__ns1__EntityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__EntityType(struct soap*, enum _ns1__EntityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EntityType(struct soap*, const char*, int, const enum _ns1__EntityType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__EntityType2s(struct soap*, enum _ns1__EntityType);
SOAP_FMAC3 enum _ns1__EntityType * SOAP_FMAC4 soap_in__ns1__EntityType(struct soap*, const char*, enum _ns1__EntityType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__EntityType(struct soap*, const char*, enum _ns1__EntityType *);

inline enum _ns1__EntityType * soap_new__ns1__EntityType(struct soap *soap, int n = -1)
{	return static_cast<enum _ns1__EntityType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum _ns1__EntityType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__EntityType(struct soap*, const enum _ns1__EntityType *, const char*, const char*);

inline int soap_write__ns1__EntityType(struct soap *soap, enum _ns1__EntityType const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__ns1__EntityType(soap, p, "ns1:EntityType", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns1__EntityType * SOAP_FMAC4 soap_get__ns1__EntityType(struct soap*, enum _ns1__EntityType *, const char*, const char*);

inline int soap_read__ns1__EntityType(struct soap *soap, enum _ns1__EntityType *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__ns1__EntityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Language_DEFINED
#define SOAP_TYPE__ns1__Language_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__Language(struct soap*, enum _ns1__Language *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Language(struct soap*, const char*, int, const enum _ns1__Language *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__Language2s(struct soap*, enum _ns1__Language);
SOAP_FMAC3 enum _ns1__Language * SOAP_FMAC4 soap_in__ns1__Language(struct soap*, const char*, enum _ns1__Language *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__Language(struct soap*, const char*, enum _ns1__Language *);

inline enum _ns1__Language * soap_new__ns1__Language(struct soap *soap, int n = -1)
{	return static_cast<enum _ns1__Language *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum _ns1__Language)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__Language(struct soap*, const enum _ns1__Language *, const char*, const char*);

inline int soap_write__ns1__Language(struct soap *soap, enum _ns1__Language const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__ns1__Language(soap, p, "ns1:Language", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns1__Language * SOAP_FMAC4 soap_get__ns1__Language(struct soap*, enum _ns1__Language *, const char*, const char*);

inline int soap_read__ns1__Language(struct soap *soap, enum _ns1__Language *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__ns1__Language(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OK_DEFINED
#define SOAP_TYPE__ns1__OK_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__OK(struct soap*, enum _ns1__OK *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OK(struct soap*, const char*, int, const enum _ns1__OK *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__OK2s(struct soap*, enum _ns1__OK);
SOAP_FMAC3 enum _ns1__OK * SOAP_FMAC4 soap_in__ns1__OK(struct soap*, const char*, enum _ns1__OK *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__OK(struct soap*, const char*, enum _ns1__OK *);

inline enum _ns1__OK * soap_new__ns1__OK(struct soap *soap, int n = -1)
{	return static_cast<enum _ns1__OK *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum _ns1__OK)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__OK(struct soap*, const enum _ns1__OK *, const char*, const char*);

inline int soap_write__ns1__OK(struct soap *soap, enum _ns1__OK const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__ns1__OK(soap, p, "ns1:OK", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns1__OK * SOAP_FMAC4 soap_get__ns1__OK(struct soap*, enum _ns1__OK *, const char*, const char*);

inline int soap_read__ns1__OK(struct soap *soap, enum _ns1__OK *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__ns1__OK(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ClientType_DEFINED
#define SOAP_TYPE__ns1__ClientType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__ClientType(struct soap*, enum _ns1__ClientType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ClientType(struct soap*, const char*, int, const enum _ns1__ClientType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__ClientType2s(struct soap*, enum _ns1__ClientType);
SOAP_FMAC3 enum _ns1__ClientType * SOAP_FMAC4 soap_in__ns1__ClientType(struct soap*, const char*, enum _ns1__ClientType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__ClientType(struct soap*, const char*, enum _ns1__ClientType *);

inline enum _ns1__ClientType * soap_new__ns1__ClientType(struct soap *soap, int n = -1)
{	return static_cast<enum _ns1__ClientType *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum _ns1__ClientType)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__ClientType(struct soap*, const enum _ns1__ClientType *, const char*, const char*);

inline int soap_write__ns1__ClientType(struct soap *soap, enum _ns1__ClientType const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__ns1__ClientType(soap, p, "ns1:ClientType", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns1__ClientType * SOAP_FMAC4 soap_get__ns1__ClientType(struct soap*, enum _ns1__ClientType *, const char*, const char*);

inline int soap_read__ns1__ClientType(struct soap *soap, enum _ns1__ClientType *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__ns1__ClientType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccessOptionName_DEFINED
#define SOAP_TYPE_ns1__AccessOptionName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AccessOptionName(struct soap*, enum ns1__AccessOptionName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccessOptionName(struct soap*, const char*, int, const enum ns1__AccessOptionName *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__AccessOptionName2s(struct soap*, enum ns1__AccessOptionName);
SOAP_FMAC3 enum ns1__AccessOptionName * SOAP_FMAC4 soap_in_ns1__AccessOptionName(struct soap*, const char*, enum ns1__AccessOptionName *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__AccessOptionName(struct soap*, const char*, enum ns1__AccessOptionName *);

inline enum ns1__AccessOptionName * soap_new_ns1__AccessOptionName(struct soap *soap, int n = -1)
{	return static_cast<enum ns1__AccessOptionName *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum ns1__AccessOptionName)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AccessOptionName(struct soap*, const enum ns1__AccessOptionName *, const char*, const char*);

inline int soap_write_ns1__AccessOptionName(struct soap *soap, enum ns1__AccessOptionName const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__AccessOptionName(soap, p, "ns1:AccessOptionName", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__AccessOptionName * SOAP_FMAC4 soap_get_ns1__AccessOptionName(struct soap*, enum ns1__AccessOptionName *, const char*, const char*);

inline int soap_read_ns1__AccessOptionName(struct soap *soap, enum ns1__AccessOptionName *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__AccessOptionName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sortDir_DEFINED
#define SOAP_TYPE_ns1__sortDir_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sortDir(struct soap*, enum ns1__sortDir *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sortDir(struct soap*, const char*, int, const enum ns1__sortDir *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__sortDir2s(struct soap*, enum ns1__sortDir);
SOAP_FMAC3 enum ns1__sortDir * SOAP_FMAC4 soap_in_ns1__sortDir(struct soap*, const char*, enum ns1__sortDir *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__sortDir(struct soap*, const char*, enum ns1__sortDir *);

inline enum ns1__sortDir * soap_new_ns1__sortDir(struct soap *soap, int n = -1)
{	return static_cast<enum ns1__sortDir *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(enum ns1__sortDir)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sortDir(struct soap*, const enum ns1__sortDir *, const char*, const char*);

inline int soap_write_ns1__sortDir(struct soap *soap, enum ns1__sortDir const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__sortDir(soap, p, "ns1:sortDir", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__sortDir * SOAP_FMAC4 soap_get_ns1__sortDir(struct soap*, enum ns1__sortDir *, const char*, const char*);

inline int soap_read_ns1__sortDir(struct soap *soap, enum ns1__sortDir *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__sortDir(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetChangePasswordHtmlUrlWithTokenResponse_DEFINED
#define SOAP_TYPE__ns1__GetChangePasswordHtmlUrlWithTokenResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetChangePasswordHtmlUrlWithTokenResponse(struct soap*, const char*, int, const _ns1__GetChangePasswordHtmlUrlWithTokenResponse *, const char*);
SOAP_FMAC3 _ns1__GetChangePasswordHtmlUrlWithTokenResponse * SOAP_FMAC4 soap_in__ns1__GetChangePasswordHtmlUrlWithTokenResponse(struct soap*, const char*, _ns1__GetChangePasswordHtmlUrlWithTokenResponse *, const char*);
SOAP_FMAC1 _ns1__GetChangePasswordHtmlUrlWithTokenResponse * SOAP_FMAC2 soap_instantiate__ns1__GetChangePasswordHtmlUrlWithTokenResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetChangePasswordHtmlUrlWithTokenResponse * soap_new__ns1__GetChangePasswordHtmlUrlWithTokenResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetChangePasswordHtmlUrlWithTokenResponse * soap_new_req__ns1__GetChangePasswordHtmlUrlWithTokenResponse(
	struct soap *soap,
	char *changePasswordHtmlUrlWithToken)
{	_ns1__GetChangePasswordHtmlUrlWithTokenResponse *_p = soap_new__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetChangePasswordHtmlUrlWithTokenResponse::changePasswordHtmlUrlWithToken = changePasswordHtmlUrlWithToken;
	}
	return _p;
}

inline _ns1__GetChangePasswordHtmlUrlWithTokenResponse * soap_new_set__ns1__GetChangePasswordHtmlUrlWithTokenResponse(
	struct soap *soap,
	char *changePasswordHtmlUrlWithToken)
{	_ns1__GetChangePasswordHtmlUrlWithTokenResponse *_p = soap_new__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetChangePasswordHtmlUrlWithTokenResponse::changePasswordHtmlUrlWithToken = changePasswordHtmlUrlWithToken;
	}
	return _p;
}

inline int soap_write__ns1__GetChangePasswordHtmlUrlWithTokenResponse(struct soap *soap, _ns1__GetChangePasswordHtmlUrlWithTokenResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetChangePasswordHtmlUrlWithTokenResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetChangePasswordHtmlUrlWithTokenResponse * SOAP_FMAC4 soap_get__ns1__GetChangePasswordHtmlUrlWithTokenResponse(struct soap*, _ns1__GetChangePasswordHtmlUrlWithTokenResponse *, const char*, const char*);

inline int soap_read__ns1__GetChangePasswordHtmlUrlWithTokenResponse(struct soap *soap, _ns1__GetChangePasswordHtmlUrlWithTokenResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetChangePasswordHtmlUrlWithTokenResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetChangePasswordHtmlUrlWithTokenRequest_DEFINED
#define SOAP_TYPE__ns1__GetChangePasswordHtmlUrlWithTokenRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, const char*, int, const _ns1__GetChangePasswordHtmlUrlWithTokenRequest *, const char*);
SOAP_FMAC3 _ns1__GetChangePasswordHtmlUrlWithTokenRequest * SOAP_FMAC4 soap_in__ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, const char*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest *, const char*);
SOAP_FMAC1 _ns1__GetChangePasswordHtmlUrlWithTokenRequest * SOAP_FMAC2 soap_instantiate__ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetChangePasswordHtmlUrlWithTokenRequest * soap_new__ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetChangePasswordHtmlUrlWithTokenRequest * soap_new_req__ns1__GetChangePasswordHtmlUrlWithTokenRequest(
	struct soap *soap)
{	_ns1__GetChangePasswordHtmlUrlWithTokenRequest *_p = soap_new__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetChangePasswordHtmlUrlWithTokenRequest * soap_new_set__ns1__GetChangePasswordHtmlUrlWithTokenRequest(
	struct soap *soap)
{	_ns1__GetChangePasswordHtmlUrlWithTokenRequest *_p = soap_new__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap *soap, _ns1__GetChangePasswordHtmlUrlWithTokenRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetChangePasswordHtmlUrlWithTokenRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetChangePasswordHtmlUrlWithTokenRequest * SOAP_FMAC4 soap_get__ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest *, const char*, const char*);

inline int soap_read__ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap *soap, _ns1__GetChangePasswordHtmlUrlWithTokenRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetChangePasswordHtmlUrlWithTokenRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__WhatIsMyIPAddressResponse_DEFINED
#define SOAP_TYPE__ns1__WhatIsMyIPAddressResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__WhatIsMyIPAddressResponse(struct soap*, const char*, int, const _ns1__WhatIsMyIPAddressResponse *, const char*);
SOAP_FMAC3 _ns1__WhatIsMyIPAddressResponse * SOAP_FMAC4 soap_in__ns1__WhatIsMyIPAddressResponse(struct soap*, const char*, _ns1__WhatIsMyIPAddressResponse *, const char*);
SOAP_FMAC1 _ns1__WhatIsMyIPAddressResponse * SOAP_FMAC2 soap_instantiate__ns1__WhatIsMyIPAddressResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__WhatIsMyIPAddressResponse * soap_new__ns1__WhatIsMyIPAddressResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__WhatIsMyIPAddressResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__WhatIsMyIPAddressResponse * soap_new_req__ns1__WhatIsMyIPAddressResponse(
	struct soap *soap,
	char *endpointExternalIPAddress)
{	_ns1__WhatIsMyIPAddressResponse *_p = soap_new__ns1__WhatIsMyIPAddressResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__WhatIsMyIPAddressResponse::endpointExternalIPAddress = endpointExternalIPAddress;
	}
	return _p;
}

inline _ns1__WhatIsMyIPAddressResponse * soap_new_set__ns1__WhatIsMyIPAddressResponse(
	struct soap *soap,
	char *endpointExternalIPAddress)
{	_ns1__WhatIsMyIPAddressResponse *_p = soap_new__ns1__WhatIsMyIPAddressResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__WhatIsMyIPAddressResponse::endpointExternalIPAddress = endpointExternalIPAddress;
	}
	return _p;
}

inline int soap_write__ns1__WhatIsMyIPAddressResponse(struct soap *soap, _ns1__WhatIsMyIPAddressResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WhatIsMyIPAddressResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__WhatIsMyIPAddressResponse * SOAP_FMAC4 soap_get__ns1__WhatIsMyIPAddressResponse(struct soap*, _ns1__WhatIsMyIPAddressResponse *, const char*, const char*);

inline int soap_read__ns1__WhatIsMyIPAddressResponse(struct soap *soap, _ns1__WhatIsMyIPAddressResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__WhatIsMyIPAddressResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__WhatIsMyIPAddressRequest_DEFINED
#define SOAP_TYPE__ns1__WhatIsMyIPAddressRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__WhatIsMyIPAddressRequest(struct soap*, const char*, int, const _ns1__WhatIsMyIPAddressRequest *, const char*);
SOAP_FMAC3 _ns1__WhatIsMyIPAddressRequest * SOAP_FMAC4 soap_in__ns1__WhatIsMyIPAddressRequest(struct soap*, const char*, _ns1__WhatIsMyIPAddressRequest *, const char*);
SOAP_FMAC1 _ns1__WhatIsMyIPAddressRequest * SOAP_FMAC2 soap_instantiate__ns1__WhatIsMyIPAddressRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__WhatIsMyIPAddressRequest * soap_new__ns1__WhatIsMyIPAddressRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__WhatIsMyIPAddressRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__WhatIsMyIPAddressRequest * soap_new_req__ns1__WhatIsMyIPAddressRequest(
	struct soap *soap)
{	_ns1__WhatIsMyIPAddressRequest *_p = soap_new__ns1__WhatIsMyIPAddressRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__WhatIsMyIPAddressRequest * soap_new_set__ns1__WhatIsMyIPAddressRequest(
	struct soap *soap)
{	_ns1__WhatIsMyIPAddressRequest *_p = soap_new__ns1__WhatIsMyIPAddressRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__WhatIsMyIPAddressRequest(struct soap *soap, _ns1__WhatIsMyIPAddressRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WhatIsMyIPAddressRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__WhatIsMyIPAddressRequest * SOAP_FMAC4 soap_get__ns1__WhatIsMyIPAddressRequest(struct soap*, _ns1__WhatIsMyIPAddressRequest *, const char*, const char*);

inline int soap_read__ns1__WhatIsMyIPAddressRequest(struct soap *soap, _ns1__WhatIsMyIPAddressRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__WhatIsMyIPAddressRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetVidyoReplayLibraryResponse_DEFINED
#define SOAP_TYPE__ns1__GetVidyoReplayLibraryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVidyoReplayLibraryResponse(struct soap*, const char*, int, const _ns1__GetVidyoReplayLibraryResponse *, const char*);
SOAP_FMAC3 _ns1__GetVidyoReplayLibraryResponse * SOAP_FMAC4 soap_in__ns1__GetVidyoReplayLibraryResponse(struct soap*, const char*, _ns1__GetVidyoReplayLibraryResponse *, const char*);
SOAP_FMAC1 _ns1__GetVidyoReplayLibraryResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVidyoReplayLibraryResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVidyoReplayLibraryResponse * soap_new__ns1__GetVidyoReplayLibraryResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetVidyoReplayLibraryResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetVidyoReplayLibraryResponse * soap_new_req__ns1__GetVidyoReplayLibraryResponse(
	struct soap *soap,
	char *authToken,
	char *vidyoReplayLibraryUrl)
{	_ns1__GetVidyoReplayLibraryResponse *_p = soap_new__ns1__GetVidyoReplayLibraryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetVidyoReplayLibraryResponse::authToken = authToken;
		_p->_ns1__GetVidyoReplayLibraryResponse::vidyoReplayLibraryUrl = vidyoReplayLibraryUrl;
	}
	return _p;
}

inline _ns1__GetVidyoReplayLibraryResponse * soap_new_set__ns1__GetVidyoReplayLibraryResponse(
	struct soap *soap,
	char *authToken,
	char *vidyoReplayLibraryUrl)
{	_ns1__GetVidyoReplayLibraryResponse *_p = soap_new__ns1__GetVidyoReplayLibraryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetVidyoReplayLibraryResponse::authToken = authToken;
		_p->_ns1__GetVidyoReplayLibraryResponse::vidyoReplayLibraryUrl = vidyoReplayLibraryUrl;
	}
	return _p;
}

inline int soap_write__ns1__GetVidyoReplayLibraryResponse(struct soap *soap, _ns1__GetVidyoReplayLibraryResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetVidyoReplayLibraryResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetVidyoReplayLibraryResponse * SOAP_FMAC4 soap_get__ns1__GetVidyoReplayLibraryResponse(struct soap*, _ns1__GetVidyoReplayLibraryResponse *, const char*, const char*);

inline int soap_read__ns1__GetVidyoReplayLibraryResponse(struct soap *soap, _ns1__GetVidyoReplayLibraryResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetVidyoReplayLibraryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetVidyoReplayLibraryRequest_DEFINED
#define SOAP_TYPE__ns1__GetVidyoReplayLibraryRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVidyoReplayLibraryRequest(struct soap*, const char*, int, const _ns1__GetVidyoReplayLibraryRequest *, const char*);
SOAP_FMAC3 _ns1__GetVidyoReplayLibraryRequest * SOAP_FMAC4 soap_in__ns1__GetVidyoReplayLibraryRequest(struct soap*, const char*, _ns1__GetVidyoReplayLibraryRequest *, const char*);
SOAP_FMAC1 _ns1__GetVidyoReplayLibraryRequest * SOAP_FMAC2 soap_instantiate__ns1__GetVidyoReplayLibraryRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVidyoReplayLibraryRequest * soap_new__ns1__GetVidyoReplayLibraryRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetVidyoReplayLibraryRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetVidyoReplayLibraryRequest * soap_new_req__ns1__GetVidyoReplayLibraryRequest(
	struct soap *soap)
{	_ns1__GetVidyoReplayLibraryRequest *_p = soap_new__ns1__GetVidyoReplayLibraryRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetVidyoReplayLibraryRequest * soap_new_set__ns1__GetVidyoReplayLibraryRequest(
	struct soap *soap)
{	_ns1__GetVidyoReplayLibraryRequest *_p = soap_new__ns1__GetVidyoReplayLibraryRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetVidyoReplayLibraryRequest(struct soap *soap, _ns1__GetVidyoReplayLibraryRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetVidyoReplayLibraryRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetVidyoReplayLibraryRequest * SOAP_FMAC4 soap_get__ns1__GetVidyoReplayLibraryRequest(struct soap*, _ns1__GetVidyoReplayLibraryRequest *, const char*, const char*);

inline int soap_read__ns1__GetVidyoReplayLibraryRequest(struct soap *soap, _ns1__GetVidyoReplayLibraryRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetVidyoReplayLibraryRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemovePresenterResponse_DEFINED
#define SOAP_TYPE__ns1__RemovePresenterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemovePresenterResponse(struct soap*, const char*, int, const _ns1__RemovePresenterResponse *, const char*);
SOAP_FMAC3 _ns1__RemovePresenterResponse * SOAP_FMAC4 soap_in__ns1__RemovePresenterResponse(struct soap*, const char*, _ns1__RemovePresenterResponse *, const char*);
SOAP_FMAC1 _ns1__RemovePresenterResponse * SOAP_FMAC2 soap_instantiate__ns1__RemovePresenterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemovePresenterResponse * soap_new__ns1__RemovePresenterResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemovePresenterResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemovePresenterResponse * soap_new_req__ns1__RemovePresenterResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemovePresenterResponse *_p = soap_new__ns1__RemovePresenterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemovePresenterResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RemovePresenterResponse * soap_new_set__ns1__RemovePresenterResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemovePresenterResponse *_p = soap_new__ns1__RemovePresenterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemovePresenterResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RemovePresenterResponse(struct soap *soap, _ns1__RemovePresenterResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemovePresenterResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemovePresenterResponse * SOAP_FMAC4 soap_get__ns1__RemovePresenterResponse(struct soap*, _ns1__RemovePresenterResponse *, const char*, const char*);

inline int soap_read__ns1__RemovePresenterResponse(struct soap *soap, _ns1__RemovePresenterResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemovePresenterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemovePresenterRequest_DEFINED
#define SOAP_TYPE__ns1__RemovePresenterRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemovePresenterRequest(struct soap*, const char*, int, const _ns1__RemovePresenterRequest *, const char*);
SOAP_FMAC3 _ns1__RemovePresenterRequest * SOAP_FMAC4 soap_in__ns1__RemovePresenterRequest(struct soap*, const char*, _ns1__RemovePresenterRequest *, const char*);
SOAP_FMAC1 _ns1__RemovePresenterRequest * SOAP_FMAC2 soap_instantiate__ns1__RemovePresenterRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemovePresenterRequest * soap_new__ns1__RemovePresenterRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemovePresenterRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemovePresenterRequest * soap_new_req__ns1__RemovePresenterRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID)
{	_ns1__RemovePresenterRequest *_p = soap_new__ns1__RemovePresenterRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemovePresenterRequest::conferenceID = conferenceID;
		_p->_ns1__RemovePresenterRequest::participantID = participantID;
	}
	return _p;
}

inline _ns1__RemovePresenterRequest * soap_new_set__ns1__RemovePresenterRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID,
	char *moderatorPIN)
{	_ns1__RemovePresenterRequest *_p = soap_new__ns1__RemovePresenterRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemovePresenterRequest::conferenceID = conferenceID;
		_p->_ns1__RemovePresenterRequest::participantID = participantID;
		_p->_ns1__RemovePresenterRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__RemovePresenterRequest(struct soap *soap, _ns1__RemovePresenterRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemovePresenterRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemovePresenterRequest * SOAP_FMAC4 soap_get__ns1__RemovePresenterRequest(struct soap*, _ns1__RemovePresenterRequest *, const char*, const char*);

inline int soap_read__ns1__RemovePresenterRequest(struct soap *soap, _ns1__RemovePresenterRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemovePresenterRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetPresenterResponse_DEFINED
#define SOAP_TYPE__ns1__SetPresenterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetPresenterResponse(struct soap*, const char*, int, const _ns1__SetPresenterResponse *, const char*);
SOAP_FMAC3 _ns1__SetPresenterResponse * SOAP_FMAC4 soap_in__ns1__SetPresenterResponse(struct soap*, const char*, _ns1__SetPresenterResponse *, const char*);
SOAP_FMAC1 _ns1__SetPresenterResponse * SOAP_FMAC2 soap_instantiate__ns1__SetPresenterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetPresenterResponse * soap_new__ns1__SetPresenterResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SetPresenterResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetPresenterResponse * soap_new_req__ns1__SetPresenterResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__SetPresenterResponse *_p = soap_new__ns1__SetPresenterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetPresenterResponse::OK = OK;
	}
	return _p;
}

inline _ns1__SetPresenterResponse * soap_new_set__ns1__SetPresenterResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__SetPresenterResponse *_p = soap_new__ns1__SetPresenterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetPresenterResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__SetPresenterResponse(struct soap *soap, _ns1__SetPresenterResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetPresenterResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetPresenterResponse * SOAP_FMAC4 soap_get__ns1__SetPresenterResponse(struct soap*, _ns1__SetPresenterResponse *, const char*, const char*);

inline int soap_read__ns1__SetPresenterResponse(struct soap *soap, _ns1__SetPresenterResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetPresenterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetPresenterRequest_DEFINED
#define SOAP_TYPE__ns1__SetPresenterRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetPresenterRequest(struct soap*, const char*, int, const _ns1__SetPresenterRequest *, const char*);
SOAP_FMAC3 _ns1__SetPresenterRequest * SOAP_FMAC4 soap_in__ns1__SetPresenterRequest(struct soap*, const char*, _ns1__SetPresenterRequest *, const char*);
SOAP_FMAC1 _ns1__SetPresenterRequest * SOAP_FMAC2 soap_instantiate__ns1__SetPresenterRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetPresenterRequest * soap_new__ns1__SetPresenterRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SetPresenterRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetPresenterRequest * soap_new_req__ns1__SetPresenterRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID)
{	_ns1__SetPresenterRequest *_p = soap_new__ns1__SetPresenterRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetPresenterRequest::conferenceID = conferenceID;
		_p->_ns1__SetPresenterRequest::participantID = participantID;
	}
	return _p;
}

inline _ns1__SetPresenterRequest * soap_new_set__ns1__SetPresenterRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID,
	char *moderatorPIN)
{	_ns1__SetPresenterRequest *_p = soap_new__ns1__SetPresenterRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetPresenterRequest::conferenceID = conferenceID;
		_p->_ns1__SetPresenterRequest::participantID = participantID;
		_p->_ns1__SetPresenterRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__SetPresenterRequest(struct soap *soap, _ns1__SetPresenterRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetPresenterRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetPresenterRequest * SOAP_FMAC4 soap_get__ns1__SetPresenterRequest(struct soap*, _ns1__SetPresenterRequest *, const char*, const char*);

inline int soap_read__ns1__SetPresenterRequest(struct soap *soap, _ns1__SetPresenterRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetPresenterRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DismissAllRaisedHandResponse_DEFINED
#define SOAP_TYPE__ns1__DismissAllRaisedHandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DismissAllRaisedHandResponse(struct soap*, const char*, int, const _ns1__DismissAllRaisedHandResponse *, const char*);
SOAP_FMAC3 _ns1__DismissAllRaisedHandResponse * SOAP_FMAC4 soap_in__ns1__DismissAllRaisedHandResponse(struct soap*, const char*, _ns1__DismissAllRaisedHandResponse *, const char*);
SOAP_FMAC1 _ns1__DismissAllRaisedHandResponse * SOAP_FMAC2 soap_instantiate__ns1__DismissAllRaisedHandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DismissAllRaisedHandResponse * soap_new__ns1__DismissAllRaisedHandResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DismissAllRaisedHandResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DismissAllRaisedHandResponse * soap_new_req__ns1__DismissAllRaisedHandResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DismissAllRaisedHandResponse *_p = soap_new__ns1__DismissAllRaisedHandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DismissAllRaisedHandResponse::OK = OK;
	}
	return _p;
}

inline _ns1__DismissAllRaisedHandResponse * soap_new_set__ns1__DismissAllRaisedHandResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DismissAllRaisedHandResponse *_p = soap_new__ns1__DismissAllRaisedHandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DismissAllRaisedHandResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__DismissAllRaisedHandResponse(struct soap *soap, _ns1__DismissAllRaisedHandResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DismissAllRaisedHandResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DismissAllRaisedHandResponse * SOAP_FMAC4 soap_get__ns1__DismissAllRaisedHandResponse(struct soap*, _ns1__DismissAllRaisedHandResponse *, const char*, const char*);

inline int soap_read__ns1__DismissAllRaisedHandResponse(struct soap *soap, _ns1__DismissAllRaisedHandResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DismissAllRaisedHandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DismissAllRaisedHandRequest_DEFINED
#define SOAP_TYPE__ns1__DismissAllRaisedHandRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DismissAllRaisedHandRequest(struct soap*, const char*, int, const _ns1__DismissAllRaisedHandRequest *, const char*);
SOAP_FMAC3 _ns1__DismissAllRaisedHandRequest * SOAP_FMAC4 soap_in__ns1__DismissAllRaisedHandRequest(struct soap*, const char*, _ns1__DismissAllRaisedHandRequest *, const char*);
SOAP_FMAC1 _ns1__DismissAllRaisedHandRequest * SOAP_FMAC2 soap_instantiate__ns1__DismissAllRaisedHandRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DismissAllRaisedHandRequest * soap_new__ns1__DismissAllRaisedHandRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DismissAllRaisedHandRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__DismissAllRaisedHandRequest * soap_new_req__ns1__DismissAllRaisedHandRequest(
	struct soap *soap,
	char *conferenceID)
{	_ns1__DismissAllRaisedHandRequest *_p = soap_new__ns1__DismissAllRaisedHandRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DismissAllRaisedHandRequest::conferenceID = conferenceID;
	}
	return _p;
}

inline _ns1__DismissAllRaisedHandRequest * soap_new_set__ns1__DismissAllRaisedHandRequest(
	struct soap *soap,
	char *conferenceID,
	char *moderatorPIN)
{	_ns1__DismissAllRaisedHandRequest *_p = soap_new__ns1__DismissAllRaisedHandRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DismissAllRaisedHandRequest::conferenceID = conferenceID;
		_p->_ns1__DismissAllRaisedHandRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__DismissAllRaisedHandRequest(struct soap *soap, _ns1__DismissAllRaisedHandRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DismissAllRaisedHandRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DismissAllRaisedHandRequest * SOAP_FMAC4 soap_get__ns1__DismissAllRaisedHandRequest(struct soap*, _ns1__DismissAllRaisedHandRequest *, const char*, const char*);

inline int soap_read__ns1__DismissAllRaisedHandRequest(struct soap *soap, _ns1__DismissAllRaisedHandRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DismissAllRaisedHandRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DismissRaisedHandResponse_DEFINED
#define SOAP_TYPE__ns1__DismissRaisedHandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DismissRaisedHandResponse(struct soap*, const char*, int, const _ns1__DismissRaisedHandResponse *, const char*);
SOAP_FMAC3 _ns1__DismissRaisedHandResponse * SOAP_FMAC4 soap_in__ns1__DismissRaisedHandResponse(struct soap*, const char*, _ns1__DismissRaisedHandResponse *, const char*);
SOAP_FMAC1 _ns1__DismissRaisedHandResponse * SOAP_FMAC2 soap_instantiate__ns1__DismissRaisedHandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DismissRaisedHandResponse * soap_new__ns1__DismissRaisedHandResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DismissRaisedHandResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DismissRaisedHandResponse * soap_new_req__ns1__DismissRaisedHandResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DismissRaisedHandResponse *_p = soap_new__ns1__DismissRaisedHandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DismissRaisedHandResponse::OK = OK;
	}
	return _p;
}

inline _ns1__DismissRaisedHandResponse * soap_new_set__ns1__DismissRaisedHandResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DismissRaisedHandResponse *_p = soap_new__ns1__DismissRaisedHandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DismissRaisedHandResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__DismissRaisedHandResponse(struct soap *soap, _ns1__DismissRaisedHandResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DismissRaisedHandResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DismissRaisedHandResponse * SOAP_FMAC4 soap_get__ns1__DismissRaisedHandResponse(struct soap*, _ns1__DismissRaisedHandResponse *, const char*, const char*);

inline int soap_read__ns1__DismissRaisedHandResponse(struct soap *soap, _ns1__DismissRaisedHandResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DismissRaisedHandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DismissRaisedHandRequest_DEFINED
#define SOAP_TYPE__ns1__DismissRaisedHandRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DismissRaisedHandRequest(struct soap*, const char*, int, const _ns1__DismissRaisedHandRequest *, const char*);
SOAP_FMAC3 _ns1__DismissRaisedHandRequest * SOAP_FMAC4 soap_in__ns1__DismissRaisedHandRequest(struct soap*, const char*, _ns1__DismissRaisedHandRequest *, const char*);
SOAP_FMAC1 _ns1__DismissRaisedHandRequest * SOAP_FMAC2 soap_instantiate__ns1__DismissRaisedHandRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DismissRaisedHandRequest * soap_new__ns1__DismissRaisedHandRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DismissRaisedHandRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__DismissRaisedHandRequest * soap_new_req__ns1__DismissRaisedHandRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID)
{	_ns1__DismissRaisedHandRequest *_p = soap_new__ns1__DismissRaisedHandRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DismissRaisedHandRequest::conferenceID = conferenceID;
		_p->_ns1__DismissRaisedHandRequest::participantID = participantID;
	}
	return _p;
}

inline _ns1__DismissRaisedHandRequest * soap_new_set__ns1__DismissRaisedHandRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID,
	char *moderatorPIN)
{	_ns1__DismissRaisedHandRequest *_p = soap_new__ns1__DismissRaisedHandRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DismissRaisedHandRequest::conferenceID = conferenceID;
		_p->_ns1__DismissRaisedHandRequest::participantID = participantID;
		_p->_ns1__DismissRaisedHandRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__DismissRaisedHandRequest(struct soap *soap, _ns1__DismissRaisedHandRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DismissRaisedHandRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DismissRaisedHandRequest * SOAP_FMAC4 soap_get__ns1__DismissRaisedHandRequest(struct soap*, _ns1__DismissRaisedHandRequest *, const char*, const char*);

inline int soap_read__ns1__DismissRaisedHandRequest(struct soap *soap, _ns1__DismissRaisedHandRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DismissRaisedHandRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UnraiseHandResponse_DEFINED
#define SOAP_TYPE__ns1__UnraiseHandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UnraiseHandResponse(struct soap*, const char*, int, const _ns1__UnraiseHandResponse *, const char*);
SOAP_FMAC3 _ns1__UnraiseHandResponse * SOAP_FMAC4 soap_in__ns1__UnraiseHandResponse(struct soap*, const char*, _ns1__UnraiseHandResponse *, const char*);
SOAP_FMAC1 _ns1__UnraiseHandResponse * SOAP_FMAC2 soap_instantiate__ns1__UnraiseHandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UnraiseHandResponse * soap_new__ns1__UnraiseHandResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__UnraiseHandResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UnraiseHandResponse * soap_new_req__ns1__UnraiseHandResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UnraiseHandResponse *_p = soap_new__ns1__UnraiseHandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnraiseHandResponse::OK = OK;
	}
	return _p;
}

inline _ns1__UnraiseHandResponse * soap_new_set__ns1__UnraiseHandResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UnraiseHandResponse *_p = soap_new__ns1__UnraiseHandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnraiseHandResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__UnraiseHandResponse(struct soap *soap, _ns1__UnraiseHandResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnraiseHandResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UnraiseHandResponse * SOAP_FMAC4 soap_get__ns1__UnraiseHandResponse(struct soap*, _ns1__UnraiseHandResponse *, const char*, const char*);

inline int soap_read__ns1__UnraiseHandResponse(struct soap *soap, _ns1__UnraiseHandResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UnraiseHandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RaiseHandResponse_DEFINED
#define SOAP_TYPE__ns1__RaiseHandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RaiseHandResponse(struct soap*, const char*, int, const _ns1__RaiseHandResponse *, const char*);
SOAP_FMAC3 _ns1__RaiseHandResponse * SOAP_FMAC4 soap_in__ns1__RaiseHandResponse(struct soap*, const char*, _ns1__RaiseHandResponse *, const char*);
SOAP_FMAC1 _ns1__RaiseHandResponse * SOAP_FMAC2 soap_instantiate__ns1__RaiseHandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RaiseHandResponse * soap_new__ns1__RaiseHandResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RaiseHandResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RaiseHandResponse * soap_new_req__ns1__RaiseHandResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RaiseHandResponse *_p = soap_new__ns1__RaiseHandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RaiseHandResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RaiseHandResponse * soap_new_set__ns1__RaiseHandResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RaiseHandResponse *_p = soap_new__ns1__RaiseHandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RaiseHandResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RaiseHandResponse(struct soap *soap, _ns1__RaiseHandResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RaiseHandResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RaiseHandResponse * SOAP_FMAC4 soap_get__ns1__RaiseHandResponse(struct soap*, _ns1__RaiseHandResponse *, const char*, const char*);

inline int soap_read__ns1__RaiseHandResponse(struct soap *soap, _ns1__RaiseHandResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RaiseHandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StopLectureModeResponse_DEFINED
#define SOAP_TYPE__ns1__StopLectureModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopLectureModeResponse(struct soap*, const char*, int, const _ns1__StopLectureModeResponse *, const char*);
SOAP_FMAC3 _ns1__StopLectureModeResponse * SOAP_FMAC4 soap_in__ns1__StopLectureModeResponse(struct soap*, const char*, _ns1__StopLectureModeResponse *, const char*);
SOAP_FMAC1 _ns1__StopLectureModeResponse * SOAP_FMAC2 soap_instantiate__ns1__StopLectureModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopLectureModeResponse * soap_new__ns1__StopLectureModeResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StopLectureModeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__StopLectureModeResponse * soap_new_req__ns1__StopLectureModeResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StopLectureModeResponse *_p = soap_new__ns1__StopLectureModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopLectureModeResponse::OK = OK;
	}
	return _p;
}

inline _ns1__StopLectureModeResponse * soap_new_set__ns1__StopLectureModeResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StopLectureModeResponse *_p = soap_new__ns1__StopLectureModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopLectureModeResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__StopLectureModeResponse(struct soap *soap, _ns1__StopLectureModeResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StopLectureModeResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StopLectureModeResponse * SOAP_FMAC4 soap_get__ns1__StopLectureModeResponse(struct soap*, _ns1__StopLectureModeResponse *, const char*, const char*);

inline int soap_read__ns1__StopLectureModeResponse(struct soap *soap, _ns1__StopLectureModeResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StopLectureModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StopLectureModeRequest_DEFINED
#define SOAP_TYPE__ns1__StopLectureModeRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopLectureModeRequest(struct soap*, const char*, int, const _ns1__StopLectureModeRequest *, const char*);
SOAP_FMAC3 _ns1__StopLectureModeRequest * SOAP_FMAC4 soap_in__ns1__StopLectureModeRequest(struct soap*, const char*, _ns1__StopLectureModeRequest *, const char*);
SOAP_FMAC1 _ns1__StopLectureModeRequest * SOAP_FMAC2 soap_instantiate__ns1__StopLectureModeRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopLectureModeRequest * soap_new__ns1__StopLectureModeRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StopLectureModeRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__StopLectureModeRequest * soap_new_req__ns1__StopLectureModeRequest(
	struct soap *soap,
	char *conferenceID)
{	_ns1__StopLectureModeRequest *_p = soap_new__ns1__StopLectureModeRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopLectureModeRequest::conferenceID = conferenceID;
	}
	return _p;
}

inline _ns1__StopLectureModeRequest * soap_new_set__ns1__StopLectureModeRequest(
	struct soap *soap,
	char *conferenceID,
	char *moderatorPIN)
{	_ns1__StopLectureModeRequest *_p = soap_new__ns1__StopLectureModeRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopLectureModeRequest::conferenceID = conferenceID;
		_p->_ns1__StopLectureModeRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__StopLectureModeRequest(struct soap *soap, _ns1__StopLectureModeRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StopLectureModeRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StopLectureModeRequest * SOAP_FMAC4 soap_get__ns1__StopLectureModeRequest(struct soap*, _ns1__StopLectureModeRequest *, const char*, const char*);

inline int soap_read__ns1__StopLectureModeRequest(struct soap *soap, _ns1__StopLectureModeRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StopLectureModeRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StartLectureModeResponse_DEFINED
#define SOAP_TYPE__ns1__StartLectureModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartLectureModeResponse(struct soap*, const char*, int, const _ns1__StartLectureModeResponse *, const char*);
SOAP_FMAC3 _ns1__StartLectureModeResponse * SOAP_FMAC4 soap_in__ns1__StartLectureModeResponse(struct soap*, const char*, _ns1__StartLectureModeResponse *, const char*);
SOAP_FMAC1 _ns1__StartLectureModeResponse * SOAP_FMAC2 soap_instantiate__ns1__StartLectureModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StartLectureModeResponse * soap_new__ns1__StartLectureModeResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StartLectureModeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__StartLectureModeResponse * soap_new_req__ns1__StartLectureModeResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StartLectureModeResponse *_p = soap_new__ns1__StartLectureModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartLectureModeResponse::OK = OK;
	}
	return _p;
}

inline _ns1__StartLectureModeResponse * soap_new_set__ns1__StartLectureModeResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StartLectureModeResponse *_p = soap_new__ns1__StartLectureModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartLectureModeResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__StartLectureModeResponse(struct soap *soap, _ns1__StartLectureModeResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartLectureModeResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StartLectureModeResponse * SOAP_FMAC4 soap_get__ns1__StartLectureModeResponse(struct soap*, _ns1__StartLectureModeResponse *, const char*, const char*);

inline int soap_read__ns1__StartLectureModeResponse(struct soap *soap, _ns1__StartLectureModeResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StartLectureModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StartLectureModeRequest_DEFINED
#define SOAP_TYPE__ns1__StartLectureModeRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartLectureModeRequest(struct soap*, const char*, int, const _ns1__StartLectureModeRequest *, const char*);
SOAP_FMAC3 _ns1__StartLectureModeRequest * SOAP_FMAC4 soap_in__ns1__StartLectureModeRequest(struct soap*, const char*, _ns1__StartLectureModeRequest *, const char*);
SOAP_FMAC1 _ns1__StartLectureModeRequest * SOAP_FMAC2 soap_instantiate__ns1__StartLectureModeRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StartLectureModeRequest * soap_new__ns1__StartLectureModeRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StartLectureModeRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__StartLectureModeRequest * soap_new_req__ns1__StartLectureModeRequest(
	struct soap *soap,
	char *conferenceID)
{	_ns1__StartLectureModeRequest *_p = soap_new__ns1__StartLectureModeRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartLectureModeRequest::conferenceID = conferenceID;
	}
	return _p;
}

inline _ns1__StartLectureModeRequest * soap_new_set__ns1__StartLectureModeRequest(
	struct soap *soap,
	char *conferenceID,
	char *moderatorPIN)
{	_ns1__StartLectureModeRequest *_p = soap_new__ns1__StartLectureModeRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartLectureModeRequest::conferenceID = conferenceID;
		_p->_ns1__StartLectureModeRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__StartLectureModeRequest(struct soap *soap, _ns1__StartLectureModeRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartLectureModeRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StartLectureModeRequest * SOAP_FMAC4 soap_get__ns1__StartLectureModeRequest(struct soap*, _ns1__StartLectureModeRequest *, const char*, const char*);

inline int soap_read__ns1__StartLectureModeRequest(struct soap *soap, _ns1__StartLectureModeRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StartLectureModeRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getUserAccountTypeResponse_DEFINED
#define SOAP_TYPE__ns1__getUserAccountTypeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getUserAccountTypeResponse(struct soap*, const char*, int, const _ns1__getUserAccountTypeResponse *, const char*);
SOAP_FMAC3 _ns1__getUserAccountTypeResponse * SOAP_FMAC4 soap_in__ns1__getUserAccountTypeResponse(struct soap*, const char*, _ns1__getUserAccountTypeResponse *, const char*);
SOAP_FMAC1 _ns1__getUserAccountTypeResponse * SOAP_FMAC2 soap_instantiate__ns1__getUserAccountTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getUserAccountTypeResponse * soap_new__ns1__getUserAccountTypeResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__getUserAccountTypeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getUserAccountTypeResponse * soap_new_req__ns1__getUserAccountTypeResponse(
	struct soap *soap,
	char *userAccountType)
{	_ns1__getUserAccountTypeResponse *_p = soap_new__ns1__getUserAccountTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getUserAccountTypeResponse::userAccountType = userAccountType;
	}
	return _p;
}

inline _ns1__getUserAccountTypeResponse * soap_new_set__ns1__getUserAccountTypeResponse(
	struct soap *soap,
	char *userAccountType)
{	_ns1__getUserAccountTypeResponse *_p = soap_new__ns1__getUserAccountTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getUserAccountTypeResponse::userAccountType = userAccountType;
	}
	return _p;
}

inline int soap_write__ns1__getUserAccountTypeResponse(struct soap *soap, _ns1__getUserAccountTypeResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getUserAccountTypeResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getUserAccountTypeResponse * SOAP_FMAC4 soap_get__ns1__getUserAccountTypeResponse(struct soap*, _ns1__getUserAccountTypeResponse *, const char*, const char*);

inline int soap_read__ns1__getUserAccountTypeResponse(struct soap *soap, _ns1__getUserAccountTypeResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getUserAccountTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getUserAccountTypeRequest_DEFINED
#define SOAP_TYPE__ns1__getUserAccountTypeRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getUserAccountTypeRequest(struct soap*, const char*, int, const _ns1__getUserAccountTypeRequest *, const char*);
SOAP_FMAC3 _ns1__getUserAccountTypeRequest * SOAP_FMAC4 soap_in__ns1__getUserAccountTypeRequest(struct soap*, const char*, _ns1__getUserAccountTypeRequest *, const char*);
SOAP_FMAC1 _ns1__getUserAccountTypeRequest * SOAP_FMAC2 soap_instantiate__ns1__getUserAccountTypeRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getUserAccountTypeRequest * soap_new__ns1__getUserAccountTypeRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__getUserAccountTypeRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__getUserAccountTypeRequest * soap_new_req__ns1__getUserAccountTypeRequest(
	struct soap *soap)
{	_ns1__getUserAccountTypeRequest *_p = soap_new__ns1__getUserAccountTypeRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getUserAccountTypeRequest * soap_new_set__ns1__getUserAccountTypeRequest(
	struct soap *soap)
{	_ns1__getUserAccountTypeRequest *_p = soap_new__ns1__getUserAccountTypeRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getUserAccountTypeRequest(struct soap *soap, _ns1__getUserAccountTypeRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getUserAccountTypeRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getUserAccountTypeRequest * SOAP_FMAC4 soap_get__ns1__getUserAccountTypeRequest(struct soap*, _ns1__getUserAccountTypeRequest *, const char*, const char*);

inline int soap_read__ns1__getUserAccountTypeRequest(struct soap *soap, _ns1__getUserAccountTypeRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getUserAccountTypeRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getLoginAndWelcomeBannerResponse_DEFINED
#define SOAP_TYPE__ns1__getLoginAndWelcomeBannerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getLoginAndWelcomeBannerResponse(struct soap*, const char*, int, const _ns1__getLoginAndWelcomeBannerResponse *, const char*);
SOAP_FMAC3 _ns1__getLoginAndWelcomeBannerResponse * SOAP_FMAC4 soap_in__ns1__getLoginAndWelcomeBannerResponse(struct soap*, const char*, _ns1__getLoginAndWelcomeBannerResponse *, const char*);
SOAP_FMAC1 _ns1__getLoginAndWelcomeBannerResponse * SOAP_FMAC2 soap_instantiate__ns1__getLoginAndWelcomeBannerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getLoginAndWelcomeBannerResponse * soap_new__ns1__getLoginAndWelcomeBannerResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__getLoginAndWelcomeBannerResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getLoginAndWelcomeBannerResponse * soap_new_req__ns1__getLoginAndWelcomeBannerResponse(
	struct soap *soap)
{	_ns1__getLoginAndWelcomeBannerResponse *_p = soap_new__ns1__getLoginAndWelcomeBannerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getLoginAndWelcomeBannerResponse * soap_new_set__ns1__getLoginAndWelcomeBannerResponse(
	struct soap *soap,
	char *loginBannerText,
	_ns1__WelcomeBannerContent *WelcomeBannerContent)
{	_ns1__getLoginAndWelcomeBannerResponse *_p = soap_new__ns1__getLoginAndWelcomeBannerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getLoginAndWelcomeBannerResponse::loginBannerText = loginBannerText;
		_p->_ns1__getLoginAndWelcomeBannerResponse::WelcomeBannerContent = WelcomeBannerContent;
	}
	return _p;
}

inline int soap_write__ns1__getLoginAndWelcomeBannerResponse(struct soap *soap, _ns1__getLoginAndWelcomeBannerResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getLoginAndWelcomeBannerResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getLoginAndWelcomeBannerResponse * SOAP_FMAC4 soap_get__ns1__getLoginAndWelcomeBannerResponse(struct soap*, _ns1__getLoginAndWelcomeBannerResponse *, const char*, const char*);

inline int soap_read__ns1__getLoginAndWelcomeBannerResponse(struct soap *soap, _ns1__getLoginAndWelcomeBannerResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getLoginAndWelcomeBannerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getLoginAndWelcomeBannerRequest_DEFINED
#define SOAP_TYPE__ns1__getLoginAndWelcomeBannerRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getLoginAndWelcomeBannerRequest(struct soap*, const char*, int, const _ns1__getLoginAndWelcomeBannerRequest *, const char*);
SOAP_FMAC3 _ns1__getLoginAndWelcomeBannerRequest * SOAP_FMAC4 soap_in__ns1__getLoginAndWelcomeBannerRequest(struct soap*, const char*, _ns1__getLoginAndWelcomeBannerRequest *, const char*);
SOAP_FMAC1 _ns1__getLoginAndWelcomeBannerRequest * SOAP_FMAC2 soap_instantiate__ns1__getLoginAndWelcomeBannerRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getLoginAndWelcomeBannerRequest * soap_new__ns1__getLoginAndWelcomeBannerRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__getLoginAndWelcomeBannerRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__getLoginAndWelcomeBannerRequest * soap_new_req__ns1__getLoginAndWelcomeBannerRequest(
	struct soap *soap)
{	_ns1__getLoginAndWelcomeBannerRequest *_p = soap_new__ns1__getLoginAndWelcomeBannerRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getLoginAndWelcomeBannerRequest * soap_new_set__ns1__getLoginAndWelcomeBannerRequest(
	struct soap *soap)
{	_ns1__getLoginAndWelcomeBannerRequest *_p = soap_new__ns1__getLoginAndWelcomeBannerRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getLoginAndWelcomeBannerRequest(struct soap *soap, _ns1__getLoginAndWelcomeBannerRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getLoginAndWelcomeBannerRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getLoginAndWelcomeBannerRequest * SOAP_FMAC4 soap_get__ns1__getLoginAndWelcomeBannerRequest(struct soap*, _ns1__getLoginAndWelcomeBannerRequest *, const char*, const char*);

inline int soap_read__ns1__getLoginAndWelcomeBannerRequest(struct soap *soap, _ns1__getLoginAndWelcomeBannerRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getLoginAndWelcomeBannerRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PrefixNotConfiguredFault_DEFINED
#define SOAP_TYPE__ns1__PrefixNotConfiguredFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PrefixNotConfiguredFault(struct soap*, const char*, int, const _ns1__PrefixNotConfiguredFault *, const char*);
SOAP_FMAC3 _ns1__PrefixNotConfiguredFault * SOAP_FMAC4 soap_in__ns1__PrefixNotConfiguredFault(struct soap*, const char*, _ns1__PrefixNotConfiguredFault *, const char*);
SOAP_FMAC1 _ns1__PrefixNotConfiguredFault * SOAP_FMAC2 soap_instantiate__ns1__PrefixNotConfiguredFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PrefixNotConfiguredFault * soap_new__ns1__PrefixNotConfiguredFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__PrefixNotConfiguredFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__PrefixNotConfiguredFault * soap_new_req__ns1__PrefixNotConfiguredFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__PrefixNotConfiguredFault *_p = soap_new__ns1__PrefixNotConfiguredFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PrefixNotConfiguredFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__PrefixNotConfiguredFault * soap_new_set__ns1__PrefixNotConfiguredFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__PrefixNotConfiguredFault *_p = soap_new__ns1__PrefixNotConfiguredFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PrefixNotConfiguredFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__PrefixNotConfiguredFault(struct soap *soap, _ns1__PrefixNotConfiguredFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PrefixNotConfiguredFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PrefixNotConfiguredFault * SOAP_FMAC4 soap_get__ns1__PrefixNotConfiguredFault(struct soap*, _ns1__PrefixNotConfiguredFault *, const char*, const char*);

inline int soap_read__ns1__PrefixNotConfiguredFault(struct soap *soap, _ns1__PrefixNotConfiguredFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PrefixNotConfiguredFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PortalPrefixResponse_DEFINED
#define SOAP_TYPE__ns1__PortalPrefixResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PortalPrefixResponse(struct soap*, const char*, int, const _ns1__PortalPrefixResponse *, const char*);
SOAP_FMAC3 _ns1__PortalPrefixResponse * SOAP_FMAC4 soap_in__ns1__PortalPrefixResponse(struct soap*, const char*, _ns1__PortalPrefixResponse *, const char*);
SOAP_FMAC1 _ns1__PortalPrefixResponse * SOAP_FMAC2 soap_instantiate__ns1__PortalPrefixResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PortalPrefixResponse * soap_new__ns1__PortalPrefixResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__PortalPrefixResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__PortalPrefixResponse * soap_new_req__ns1__PortalPrefixResponse(
	struct soap *soap,
	char *portalPrefix)
{	_ns1__PortalPrefixResponse *_p = soap_new__ns1__PortalPrefixResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PortalPrefixResponse::portalPrefix = portalPrefix;
	}
	return _p;
}

inline _ns1__PortalPrefixResponse * soap_new_set__ns1__PortalPrefixResponse(
	struct soap *soap,
	char *portalPrefix)
{	_ns1__PortalPrefixResponse *_p = soap_new__ns1__PortalPrefixResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PortalPrefixResponse::portalPrefix = portalPrefix;
	}
	return _p;
}

inline int soap_write__ns1__PortalPrefixResponse(struct soap *soap, _ns1__PortalPrefixResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PortalPrefixResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PortalPrefixResponse * SOAP_FMAC4 soap_get__ns1__PortalPrefixResponse(struct soap*, _ns1__PortalPrefixResponse *, const char*, const char*);

inline int soap_read__ns1__PortalPrefixResponse(struct soap *soap, _ns1__PortalPrefixResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PortalPrefixResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RoomAccessOptionsResponse_DEFINED
#define SOAP_TYPE__ns1__RoomAccessOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RoomAccessOptionsResponse(struct soap*, const char*, int, const _ns1__RoomAccessOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__RoomAccessOptionsResponse * SOAP_FMAC4 soap_in__ns1__RoomAccessOptionsResponse(struct soap*, const char*, _ns1__RoomAccessOptionsResponse *, const char*);
SOAP_FMAC1 _ns1__RoomAccessOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__RoomAccessOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RoomAccessOptionsResponse * soap_new__ns1__RoomAccessOptionsResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RoomAccessOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RoomAccessOptionsResponse * soap_new_req__ns1__RoomAccessOptionsResponse(
	struct soap *soap,
	int __sizeRoomAccessOption,
	_ns1__RoomAccessOption **RoomAccessOption)
{	_ns1__RoomAccessOptionsResponse *_p = soap_new__ns1__RoomAccessOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomAccessOptionsResponse::__sizeRoomAccessOption = __sizeRoomAccessOption;
		_p->_ns1__RoomAccessOptionsResponse::RoomAccessOption = RoomAccessOption;
	}
	return _p;
}

inline _ns1__RoomAccessOptionsResponse * soap_new_set__ns1__RoomAccessOptionsResponse(
	struct soap *soap,
	int __sizeRoomAccessOption,
	_ns1__RoomAccessOption **RoomAccessOption)
{	_ns1__RoomAccessOptionsResponse *_p = soap_new__ns1__RoomAccessOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomAccessOptionsResponse::__sizeRoomAccessOption = __sizeRoomAccessOption;
		_p->_ns1__RoomAccessOptionsResponse::RoomAccessOption = RoomAccessOption;
	}
	return _p;
}

inline int soap_write__ns1__RoomAccessOptionsResponse(struct soap *soap, _ns1__RoomAccessOptionsResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RoomAccessOptionsResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RoomAccessOptionsResponse * SOAP_FMAC4 soap_get__ns1__RoomAccessOptionsResponse(struct soap*, _ns1__RoomAccessOptionsResponse *, const char*, const char*);

inline int soap_read__ns1__RoomAccessOptionsResponse(struct soap *soap, _ns1__RoomAccessOptionsResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RoomAccessOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RoomAccessOptionsRequest_DEFINED
#define SOAP_TYPE__ns1__RoomAccessOptionsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RoomAccessOptionsRequest(struct soap*, const char*, int, const _ns1__RoomAccessOptionsRequest *, const char*);
SOAP_FMAC3 _ns1__RoomAccessOptionsRequest * SOAP_FMAC4 soap_in__ns1__RoomAccessOptionsRequest(struct soap*, const char*, _ns1__RoomAccessOptionsRequest *, const char*);
SOAP_FMAC1 _ns1__RoomAccessOptionsRequest * SOAP_FMAC2 soap_instantiate__ns1__RoomAccessOptionsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RoomAccessOptionsRequest * soap_new__ns1__RoomAccessOptionsRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RoomAccessOptionsRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RoomAccessOptionsRequest * soap_new_req__ns1__RoomAccessOptionsRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RoomAccessOptionsRequest *_p = soap_new__ns1__RoomAccessOptionsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomAccessOptionsRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__RoomAccessOptionsRequest * soap_new_set__ns1__RoomAccessOptionsRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RoomAccessOptionsRequest *_p = soap_new__ns1__RoomAccessOptionsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomAccessOptionsRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__RoomAccessOptionsRequest(struct soap *soap, _ns1__RoomAccessOptionsRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RoomAccessOptionsRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RoomAccessOptionsRequest * SOAP_FMAC4 soap_get__ns1__RoomAccessOptionsRequest(struct soap*, _ns1__RoomAccessOptionsRequest *, const char*, const char*);

inline int soap_read__ns1__RoomAccessOptionsRequest(struct soap *soap, _ns1__RoomAccessOptionsRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RoomAccessOptionsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RoomAccessOption_DEFINED
#define SOAP_TYPE__ns1__RoomAccessOption_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RoomAccessOption(struct soap*, const char*, int, const _ns1__RoomAccessOption *, const char*);
SOAP_FMAC3 _ns1__RoomAccessOption * SOAP_FMAC4 soap_in__ns1__RoomAccessOption(struct soap*, const char*, _ns1__RoomAccessOption *, const char*);
SOAP_FMAC1 _ns1__RoomAccessOption * SOAP_FMAC2 soap_instantiate__ns1__RoomAccessOption(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RoomAccessOption * soap_new__ns1__RoomAccessOption(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RoomAccessOption(soap, n, NULL, NULL, NULL);
}

inline _ns1__RoomAccessOption * soap_new_req__ns1__RoomAccessOption(
	struct soap *soap,
	enum ns1__AccessOptionName accessOption,
	char *value)
{	_ns1__RoomAccessOption *_p = soap_new__ns1__RoomAccessOption(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomAccessOption::accessOption = accessOption;
		_p->_ns1__RoomAccessOption::value = value;
	}
	return _p;
}

inline _ns1__RoomAccessOption * soap_new_set__ns1__RoomAccessOption(
	struct soap *soap,
	enum ns1__AccessOptionName accessOption,
	char *value)
{	_ns1__RoomAccessOption *_p = soap_new__ns1__RoomAccessOption(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomAccessOption::accessOption = accessOption;
		_p->_ns1__RoomAccessOption::value = value;
	}
	return _p;
}

inline int soap_write__ns1__RoomAccessOption(struct soap *soap, _ns1__RoomAccessOption const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RoomAccessOption", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RoomAccessOption * SOAP_FMAC4 soap_get__ns1__RoomAccessOption(struct soap*, _ns1__RoomAccessOption *, const char*, const char*);

inline int soap_read__ns1__RoomAccessOption(struct soap *soap, _ns1__RoomAccessOption *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RoomAccessOption(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OnetimeAccessResponse_DEFINED
#define SOAP_TYPE__ns1__OnetimeAccessResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OnetimeAccessResponse(struct soap*, const char*, int, const _ns1__OnetimeAccessResponse *, const char*);
SOAP_FMAC3 _ns1__OnetimeAccessResponse * SOAP_FMAC4 soap_in__ns1__OnetimeAccessResponse(struct soap*, const char*, _ns1__OnetimeAccessResponse *, const char*);
SOAP_FMAC1 _ns1__OnetimeAccessResponse * SOAP_FMAC2 soap_instantiate__ns1__OnetimeAccessResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OnetimeAccessResponse * soap_new__ns1__OnetimeAccessResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__OnetimeAccessResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OnetimeAccessResponse * soap_new_req__ns1__OnetimeAccessResponse(
	struct soap *soap,
	char *url)
{	_ns1__OnetimeAccessResponse *_p = soap_new__ns1__OnetimeAccessResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OnetimeAccessResponse::url = url;
	}
	return _p;
}

inline _ns1__OnetimeAccessResponse * soap_new_set__ns1__OnetimeAccessResponse(
	struct soap *soap,
	char *url)
{	_ns1__OnetimeAccessResponse *_p = soap_new__ns1__OnetimeAccessResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OnetimeAccessResponse::url = url;
	}
	return _p;
}

inline int soap_write__ns1__OnetimeAccessResponse(struct soap *soap, _ns1__OnetimeAccessResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OnetimeAccessResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OnetimeAccessResponse * SOAP_FMAC4 soap_get__ns1__OnetimeAccessResponse(struct soap*, _ns1__OnetimeAccessResponse *, const char*, const char*);

inline int soap_read__ns1__OnetimeAccessResponse(struct soap *soap, _ns1__OnetimeAccessResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OnetimeAccessResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__muteVideoClientAllResponse_DEFINED
#define SOAP_TYPE__ns1__muteVideoClientAllResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__muteVideoClientAllResponse(struct soap*, const char*, int, const _ns1__muteVideoClientAllResponse *, const char*);
SOAP_FMAC3 _ns1__muteVideoClientAllResponse * SOAP_FMAC4 soap_in__ns1__muteVideoClientAllResponse(struct soap*, const char*, _ns1__muteVideoClientAllResponse *, const char*);
SOAP_FMAC1 _ns1__muteVideoClientAllResponse * SOAP_FMAC2 soap_instantiate__ns1__muteVideoClientAllResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__muteVideoClientAllResponse * soap_new__ns1__muteVideoClientAllResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__muteVideoClientAllResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__muteVideoClientAllResponse * soap_new_req__ns1__muteVideoClientAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__muteVideoClientAllResponse *_p = soap_new__ns1__muteVideoClientAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteVideoClientAllResponse::OK = OK;
	}
	return _p;
}

inline _ns1__muteVideoClientAllResponse * soap_new_set__ns1__muteVideoClientAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__muteVideoClientAllResponse *_p = soap_new__ns1__muteVideoClientAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteVideoClientAllResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__muteVideoClientAllResponse(struct soap *soap, _ns1__muteVideoClientAllResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:muteVideoClientAllResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__muteVideoClientAllResponse * SOAP_FMAC4 soap_get__ns1__muteVideoClientAllResponse(struct soap*, _ns1__muteVideoClientAllResponse *, const char*, const char*);

inline int soap_read__ns1__muteVideoClientAllResponse(struct soap *soap, _ns1__muteVideoClientAllResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__muteVideoClientAllResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__muteVideoClientAllRequest_DEFINED
#define SOAP_TYPE__ns1__muteVideoClientAllRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__muteVideoClientAllRequest(struct soap*, const char*, int, const _ns1__muteVideoClientAllRequest *, const char*);
SOAP_FMAC3 _ns1__muteVideoClientAllRequest * SOAP_FMAC4 soap_in__ns1__muteVideoClientAllRequest(struct soap*, const char*, _ns1__muteVideoClientAllRequest *, const char*);
SOAP_FMAC1 _ns1__muteVideoClientAllRequest * SOAP_FMAC2 soap_instantiate__ns1__muteVideoClientAllRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__muteVideoClientAllRequest * soap_new__ns1__muteVideoClientAllRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__muteVideoClientAllRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__muteVideoClientAllRequest * soap_new_req__ns1__muteVideoClientAllRequest(
	struct soap *soap,
	char *conferenceID)
{	_ns1__muteVideoClientAllRequest *_p = soap_new__ns1__muteVideoClientAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteVideoClientAllRequest::conferenceID = conferenceID;
	}
	return _p;
}

inline _ns1__muteVideoClientAllRequest * soap_new_set__ns1__muteVideoClientAllRequest(
	struct soap *soap,
	char *conferenceID,
	char *moderatorPIN)
{	_ns1__muteVideoClientAllRequest *_p = soap_new__ns1__muteVideoClientAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteVideoClientAllRequest::conferenceID = conferenceID;
		_p->_ns1__muteVideoClientAllRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__muteVideoClientAllRequest(struct soap *soap, _ns1__muteVideoClientAllRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:muteVideoClientAllRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__muteVideoClientAllRequest * SOAP_FMAC4 soap_get__ns1__muteVideoClientAllRequest(struct soap*, _ns1__muteVideoClientAllRequest *, const char*, const char*);

inline int soap_read__ns1__muteVideoClientAllRequest(struct soap *soap, _ns1__muteVideoClientAllRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__muteVideoClientAllRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__muteVideoServerAllResponse_DEFINED
#define SOAP_TYPE__ns1__muteVideoServerAllResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__muteVideoServerAllResponse(struct soap*, const char*, int, const _ns1__muteVideoServerAllResponse *, const char*);
SOAP_FMAC3 _ns1__muteVideoServerAllResponse * SOAP_FMAC4 soap_in__ns1__muteVideoServerAllResponse(struct soap*, const char*, _ns1__muteVideoServerAllResponse *, const char*);
SOAP_FMAC1 _ns1__muteVideoServerAllResponse * SOAP_FMAC2 soap_instantiate__ns1__muteVideoServerAllResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__muteVideoServerAllResponse * soap_new__ns1__muteVideoServerAllResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__muteVideoServerAllResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__muteVideoServerAllResponse * soap_new_req__ns1__muteVideoServerAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__muteVideoServerAllResponse *_p = soap_new__ns1__muteVideoServerAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteVideoServerAllResponse::OK = OK;
	}
	return _p;
}

inline _ns1__muteVideoServerAllResponse * soap_new_set__ns1__muteVideoServerAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__muteVideoServerAllResponse *_p = soap_new__ns1__muteVideoServerAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteVideoServerAllResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__muteVideoServerAllResponse(struct soap *soap, _ns1__muteVideoServerAllResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:muteVideoServerAllResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__muteVideoServerAllResponse * SOAP_FMAC4 soap_get__ns1__muteVideoServerAllResponse(struct soap*, _ns1__muteVideoServerAllResponse *, const char*, const char*);

inline int soap_read__ns1__muteVideoServerAllResponse(struct soap *soap, _ns1__muteVideoServerAllResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__muteVideoServerAllResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__muteVideoServerAllRequest_DEFINED
#define SOAP_TYPE__ns1__muteVideoServerAllRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__muteVideoServerAllRequest(struct soap*, const char*, int, const _ns1__muteVideoServerAllRequest *, const char*);
SOAP_FMAC3 _ns1__muteVideoServerAllRequest * SOAP_FMAC4 soap_in__ns1__muteVideoServerAllRequest(struct soap*, const char*, _ns1__muteVideoServerAllRequest *, const char*);
SOAP_FMAC1 _ns1__muteVideoServerAllRequest * SOAP_FMAC2 soap_instantiate__ns1__muteVideoServerAllRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__muteVideoServerAllRequest * soap_new__ns1__muteVideoServerAllRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__muteVideoServerAllRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__muteVideoServerAllRequest * soap_new_req__ns1__muteVideoServerAllRequest(
	struct soap *soap,
	char *conferenceID,
	bool muteState)
{	_ns1__muteVideoServerAllRequest *_p = soap_new__ns1__muteVideoServerAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteVideoServerAllRequest::conferenceID = conferenceID;
		_p->_ns1__muteVideoServerAllRequest::muteState = muteState;
	}
	return _p;
}

inline _ns1__muteVideoServerAllRequest * soap_new_set__ns1__muteVideoServerAllRequest(
	struct soap *soap,
	char *conferenceID,
	bool muteState,
	char *moderatorPIN)
{	_ns1__muteVideoServerAllRequest *_p = soap_new__ns1__muteVideoServerAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteVideoServerAllRequest::conferenceID = conferenceID;
		_p->_ns1__muteVideoServerAllRequest::muteState = muteState;
		_p->_ns1__muteVideoServerAllRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__muteVideoServerAllRequest(struct soap *soap, _ns1__muteVideoServerAllRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:muteVideoServerAllRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__muteVideoServerAllRequest * SOAP_FMAC4 soap_get__ns1__muteVideoServerAllRequest(struct soap*, _ns1__muteVideoServerAllRequest *, const char*, const char*);

inline int soap_read__ns1__muteVideoServerAllRequest(struct soap *soap, _ns1__muteVideoServerAllRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__muteVideoServerAllRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__muteAudioClientAllResponse_DEFINED
#define SOAP_TYPE__ns1__muteAudioClientAllResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__muteAudioClientAllResponse(struct soap*, const char*, int, const _ns1__muteAudioClientAllResponse *, const char*);
SOAP_FMAC3 _ns1__muteAudioClientAllResponse * SOAP_FMAC4 soap_in__ns1__muteAudioClientAllResponse(struct soap*, const char*, _ns1__muteAudioClientAllResponse *, const char*);
SOAP_FMAC1 _ns1__muteAudioClientAllResponse * SOAP_FMAC2 soap_instantiate__ns1__muteAudioClientAllResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__muteAudioClientAllResponse * soap_new__ns1__muteAudioClientAllResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__muteAudioClientAllResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__muteAudioClientAllResponse * soap_new_req__ns1__muteAudioClientAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__muteAudioClientAllResponse *_p = soap_new__ns1__muteAudioClientAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteAudioClientAllResponse::OK = OK;
	}
	return _p;
}

inline _ns1__muteAudioClientAllResponse * soap_new_set__ns1__muteAudioClientAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__muteAudioClientAllResponse *_p = soap_new__ns1__muteAudioClientAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteAudioClientAllResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__muteAudioClientAllResponse(struct soap *soap, _ns1__muteAudioClientAllResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:muteAudioClientAllResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__muteAudioClientAllResponse * SOAP_FMAC4 soap_get__ns1__muteAudioClientAllResponse(struct soap*, _ns1__muteAudioClientAllResponse *, const char*, const char*);

inline int soap_read__ns1__muteAudioClientAllResponse(struct soap *soap, _ns1__muteAudioClientAllResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__muteAudioClientAllResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__muteAudioClientAllRequest_DEFINED
#define SOAP_TYPE__ns1__muteAudioClientAllRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__muteAudioClientAllRequest(struct soap*, const char*, int, const _ns1__muteAudioClientAllRequest *, const char*);
SOAP_FMAC3 _ns1__muteAudioClientAllRequest * SOAP_FMAC4 soap_in__ns1__muteAudioClientAllRequest(struct soap*, const char*, _ns1__muteAudioClientAllRequest *, const char*);
SOAP_FMAC1 _ns1__muteAudioClientAllRequest * SOAP_FMAC2 soap_instantiate__ns1__muteAudioClientAllRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__muteAudioClientAllRequest * soap_new__ns1__muteAudioClientAllRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__muteAudioClientAllRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__muteAudioClientAllRequest * soap_new_req__ns1__muteAudioClientAllRequest(
	struct soap *soap,
	char *conferenceID)
{	_ns1__muteAudioClientAllRequest *_p = soap_new__ns1__muteAudioClientAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteAudioClientAllRequest::conferenceID = conferenceID;
	}
	return _p;
}

inline _ns1__muteAudioClientAllRequest * soap_new_set__ns1__muteAudioClientAllRequest(
	struct soap *soap,
	char *conferenceID,
	char *moderatorPIN)
{	_ns1__muteAudioClientAllRequest *_p = soap_new__ns1__muteAudioClientAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteAudioClientAllRequest::conferenceID = conferenceID;
		_p->_ns1__muteAudioClientAllRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__muteAudioClientAllRequest(struct soap *soap, _ns1__muteAudioClientAllRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:muteAudioClientAllRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__muteAudioClientAllRequest * SOAP_FMAC4 soap_get__ns1__muteAudioClientAllRequest(struct soap*, _ns1__muteAudioClientAllRequest *, const char*, const char*);

inline int soap_read__ns1__muteAudioClientAllRequest(struct soap *soap, _ns1__muteAudioClientAllRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__muteAudioClientAllRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__muteAudioServerAllResponse_DEFINED
#define SOAP_TYPE__ns1__muteAudioServerAllResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__muteAudioServerAllResponse(struct soap*, const char*, int, const _ns1__muteAudioServerAllResponse *, const char*);
SOAP_FMAC3 _ns1__muteAudioServerAllResponse * SOAP_FMAC4 soap_in__ns1__muteAudioServerAllResponse(struct soap*, const char*, _ns1__muteAudioServerAllResponse *, const char*);
SOAP_FMAC1 _ns1__muteAudioServerAllResponse * SOAP_FMAC2 soap_instantiate__ns1__muteAudioServerAllResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__muteAudioServerAllResponse * soap_new__ns1__muteAudioServerAllResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__muteAudioServerAllResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__muteAudioServerAllResponse * soap_new_req__ns1__muteAudioServerAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__muteAudioServerAllResponse *_p = soap_new__ns1__muteAudioServerAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteAudioServerAllResponse::OK = OK;
	}
	return _p;
}

inline _ns1__muteAudioServerAllResponse * soap_new_set__ns1__muteAudioServerAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__muteAudioServerAllResponse *_p = soap_new__ns1__muteAudioServerAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteAudioServerAllResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__muteAudioServerAllResponse(struct soap *soap, _ns1__muteAudioServerAllResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:muteAudioServerAllResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__muteAudioServerAllResponse * SOAP_FMAC4 soap_get__ns1__muteAudioServerAllResponse(struct soap*, _ns1__muteAudioServerAllResponse *, const char*, const char*);

inline int soap_read__ns1__muteAudioServerAllResponse(struct soap *soap, _ns1__muteAudioServerAllResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__muteAudioServerAllResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__muteAudioServerAllRequest_DEFINED
#define SOAP_TYPE__ns1__muteAudioServerAllRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__muteAudioServerAllRequest(struct soap*, const char*, int, const _ns1__muteAudioServerAllRequest *, const char*);
SOAP_FMAC3 _ns1__muteAudioServerAllRequest * SOAP_FMAC4 soap_in__ns1__muteAudioServerAllRequest(struct soap*, const char*, _ns1__muteAudioServerAllRequest *, const char*);
SOAP_FMAC1 _ns1__muteAudioServerAllRequest * SOAP_FMAC2 soap_instantiate__ns1__muteAudioServerAllRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__muteAudioServerAllRequest * soap_new__ns1__muteAudioServerAllRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__muteAudioServerAllRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__muteAudioServerAllRequest * soap_new_req__ns1__muteAudioServerAllRequest(
	struct soap *soap,
	char *conferenceID,
	bool muteState)
{	_ns1__muteAudioServerAllRequest *_p = soap_new__ns1__muteAudioServerAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteAudioServerAllRequest::conferenceID = conferenceID;
		_p->_ns1__muteAudioServerAllRequest::muteState = muteState;
	}
	return _p;
}

inline _ns1__muteAudioServerAllRequest * soap_new_set__ns1__muteAudioServerAllRequest(
	struct soap *soap,
	char *conferenceID,
	bool muteState,
	char *moderatorPIN)
{	_ns1__muteAudioServerAllRequest *_p = soap_new__ns1__muteAudioServerAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__muteAudioServerAllRequest::conferenceID = conferenceID;
		_p->_ns1__muteAudioServerAllRequest::muteState = muteState;
		_p->_ns1__muteAudioServerAllRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__muteAudioServerAllRequest(struct soap *soap, _ns1__muteAudioServerAllRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:muteAudioServerAllRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__muteAudioServerAllRequest * SOAP_FMAC4 soap_get__ns1__muteAudioServerAllRequest(struct soap*, _ns1__muteAudioServerAllRequest *, const char*, const char*);

inline int soap_read__ns1__muteAudioServerAllRequest(struct soap *soap, _ns1__muteAudioServerAllRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__muteAudioServerAllRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__disconnectConferenceAllResponse_DEFINED
#define SOAP_TYPE__ns1__disconnectConferenceAllResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__disconnectConferenceAllResponse(struct soap*, const char*, int, const _ns1__disconnectConferenceAllResponse *, const char*);
SOAP_FMAC3 _ns1__disconnectConferenceAllResponse * SOAP_FMAC4 soap_in__ns1__disconnectConferenceAllResponse(struct soap*, const char*, _ns1__disconnectConferenceAllResponse *, const char*);
SOAP_FMAC1 _ns1__disconnectConferenceAllResponse * SOAP_FMAC2 soap_instantiate__ns1__disconnectConferenceAllResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__disconnectConferenceAllResponse * soap_new__ns1__disconnectConferenceAllResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__disconnectConferenceAllResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__disconnectConferenceAllResponse * soap_new_req__ns1__disconnectConferenceAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__disconnectConferenceAllResponse *_p = soap_new__ns1__disconnectConferenceAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__disconnectConferenceAllResponse::OK = OK;
	}
	return _p;
}

inline _ns1__disconnectConferenceAllResponse * soap_new_set__ns1__disconnectConferenceAllResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__disconnectConferenceAllResponse *_p = soap_new__ns1__disconnectConferenceAllResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__disconnectConferenceAllResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__disconnectConferenceAllResponse(struct soap *soap, _ns1__disconnectConferenceAllResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:disconnectConferenceAllResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__disconnectConferenceAllResponse * SOAP_FMAC4 soap_get__ns1__disconnectConferenceAllResponse(struct soap*, _ns1__disconnectConferenceAllResponse *, const char*, const char*);

inline int soap_read__ns1__disconnectConferenceAllResponse(struct soap *soap, _ns1__disconnectConferenceAllResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__disconnectConferenceAllResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__disconnectConferenceAllRequest_DEFINED
#define SOAP_TYPE__ns1__disconnectConferenceAllRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__disconnectConferenceAllRequest(struct soap*, const char*, int, const _ns1__disconnectConferenceAllRequest *, const char*);
SOAP_FMAC3 _ns1__disconnectConferenceAllRequest * SOAP_FMAC4 soap_in__ns1__disconnectConferenceAllRequest(struct soap*, const char*, _ns1__disconnectConferenceAllRequest *, const char*);
SOAP_FMAC1 _ns1__disconnectConferenceAllRequest * SOAP_FMAC2 soap_instantiate__ns1__disconnectConferenceAllRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__disconnectConferenceAllRequest * soap_new__ns1__disconnectConferenceAllRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__disconnectConferenceAllRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__disconnectConferenceAllRequest * soap_new_req__ns1__disconnectConferenceAllRequest(
	struct soap *soap,
	char *conferenceID)
{	_ns1__disconnectConferenceAllRequest *_p = soap_new__ns1__disconnectConferenceAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__disconnectConferenceAllRequest::conferenceID = conferenceID;
	}
	return _p;
}

inline _ns1__disconnectConferenceAllRequest * soap_new_set__ns1__disconnectConferenceAllRequest(
	struct soap *soap,
	char *conferenceID,
	char *moderatorPIN)
{	_ns1__disconnectConferenceAllRequest *_p = soap_new__ns1__disconnectConferenceAllRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__disconnectConferenceAllRequest::conferenceID = conferenceID;
		_p->_ns1__disconnectConferenceAllRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__disconnectConferenceAllRequest(struct soap *soap, _ns1__disconnectConferenceAllRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:disconnectConferenceAllRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__disconnectConferenceAllRequest * SOAP_FMAC4 soap_get__ns1__disconnectConferenceAllRequest(struct soap*, _ns1__disconnectConferenceAllRequest *, const char*, const char*);

inline int soap_read__ns1__disconnectConferenceAllRequest(struct soap *soap, _ns1__disconnectConferenceAllRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__disconnectConferenceAllRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LogoutAllOtherSessionsResponse_DEFINED
#define SOAP_TYPE__ns1__LogoutAllOtherSessionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LogoutAllOtherSessionsResponse(struct soap*, const char*, int, const _ns1__LogoutAllOtherSessionsResponse *, const char*);
SOAP_FMAC3 _ns1__LogoutAllOtherSessionsResponse * SOAP_FMAC4 soap_in__ns1__LogoutAllOtherSessionsResponse(struct soap*, const char*, _ns1__LogoutAllOtherSessionsResponse *, const char*);
SOAP_FMAC1 _ns1__LogoutAllOtherSessionsResponse * SOAP_FMAC2 soap_instantiate__ns1__LogoutAllOtherSessionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LogoutAllOtherSessionsResponse * soap_new__ns1__LogoutAllOtherSessionsResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LogoutAllOtherSessionsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LogoutAllOtherSessionsResponse * soap_new_req__ns1__LogoutAllOtherSessionsResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__LogoutAllOtherSessionsResponse *_p = soap_new__ns1__LogoutAllOtherSessionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LogoutAllOtherSessionsResponse::OK = OK;
	}
	return _p;
}

inline _ns1__LogoutAllOtherSessionsResponse * soap_new_set__ns1__LogoutAllOtherSessionsResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__LogoutAllOtherSessionsResponse *_p = soap_new__ns1__LogoutAllOtherSessionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LogoutAllOtherSessionsResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__LogoutAllOtherSessionsResponse(struct soap *soap, _ns1__LogoutAllOtherSessionsResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LogoutAllOtherSessionsResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LogoutAllOtherSessionsResponse * SOAP_FMAC4 soap_get__ns1__LogoutAllOtherSessionsResponse(struct soap*, _ns1__LogoutAllOtherSessionsResponse *, const char*, const char*);

inline int soap_read__ns1__LogoutAllOtherSessionsResponse(struct soap *soap, _ns1__LogoutAllOtherSessionsResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LogoutAllOtherSessionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetActiveSessionsResponse_DEFINED
#define SOAP_TYPE__ns1__GetActiveSessionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetActiveSessionsResponse(struct soap*, const char*, int, const _ns1__GetActiveSessionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetActiveSessionsResponse * SOAP_FMAC4 soap_in__ns1__GetActiveSessionsResponse(struct soap*, const char*, _ns1__GetActiveSessionsResponse *, const char*);
SOAP_FMAC1 _ns1__GetActiveSessionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetActiveSessionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetActiveSessionsResponse * soap_new__ns1__GetActiveSessionsResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetActiveSessionsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetActiveSessionsResponse * soap_new_req__ns1__GetActiveSessionsResponse(
	struct soap *soap,
	int count)
{	_ns1__GetActiveSessionsResponse *_p = soap_new__ns1__GetActiveSessionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetActiveSessionsResponse::count = count;
	}
	return _p;
}

inline _ns1__GetActiveSessionsResponse * soap_new_set__ns1__GetActiveSessionsResponse(
	struct soap *soap,
	int count)
{	_ns1__GetActiveSessionsResponse *_p = soap_new__ns1__GetActiveSessionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetActiveSessionsResponse::count = count;
	}
	return _p;
}

inline int soap_write__ns1__GetActiveSessionsResponse(struct soap *soap, _ns1__GetActiveSessionsResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetActiveSessionsResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetActiveSessionsResponse * SOAP_FMAC4 soap_get__ns1__GetActiveSessionsResponse(struct soap*, _ns1__GetActiveSessionsResponse *, const char*, const char*);

inline int soap_read__ns1__GetActiveSessionsResponse(struct soap *soap, _ns1__GetActiveSessionsResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetActiveSessionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetEndpointDetailsResponse_DEFINED
#define SOAP_TYPE__ns1__SetEndpointDetailsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEndpointDetailsResponse(struct soap*, const char*, int, const _ns1__SetEndpointDetailsResponse *, const char*);
SOAP_FMAC3 _ns1__SetEndpointDetailsResponse * SOAP_FMAC4 soap_in__ns1__SetEndpointDetailsResponse(struct soap*, const char*, _ns1__SetEndpointDetailsResponse *, const char*);
SOAP_FMAC1 _ns1__SetEndpointDetailsResponse * SOAP_FMAC2 soap_instantiate__ns1__SetEndpointDetailsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetEndpointDetailsResponse * soap_new__ns1__SetEndpointDetailsResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SetEndpointDetailsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetEndpointDetailsResponse * soap_new_req__ns1__SetEndpointDetailsResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__SetEndpointDetailsResponse *_p = soap_new__ns1__SetEndpointDetailsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetEndpointDetailsResponse::OK = OK;
	}
	return _p;
}

inline _ns1__SetEndpointDetailsResponse * soap_new_set__ns1__SetEndpointDetailsResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__SetEndpointDetailsResponse *_p = soap_new__ns1__SetEndpointDetailsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetEndpointDetailsResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__SetEndpointDetailsResponse(struct soap *soap, _ns1__SetEndpointDetailsResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetEndpointDetailsResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetEndpointDetailsResponse * SOAP_FMAC4 soap_get__ns1__SetEndpointDetailsResponse(struct soap*, _ns1__SetEndpointDetailsResponse *, const char*, const char*);

inline int soap_read__ns1__SetEndpointDetailsResponse(struct soap *soap, _ns1__SetEndpointDetailsResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetEndpointDetailsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetEndpointDetailsRequest_DEFINED
#define SOAP_TYPE__ns1__SetEndpointDetailsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEndpointDetailsRequest(struct soap*, const char*, int, const _ns1__SetEndpointDetailsRequest *, const char*);
SOAP_FMAC3 _ns1__SetEndpointDetailsRequest * SOAP_FMAC4 soap_in__ns1__SetEndpointDetailsRequest(struct soap*, const char*, _ns1__SetEndpointDetailsRequest *, const char*);
SOAP_FMAC1 _ns1__SetEndpointDetailsRequest * SOAP_FMAC2 soap_instantiate__ns1__SetEndpointDetailsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetEndpointDetailsRequest * soap_new__ns1__SetEndpointDetailsRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SetEndpointDetailsRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetEndpointDetailsRequest * soap_new_req__ns1__SetEndpointDetailsRequest(
	struct soap *soap,
	char *EID,
	int __sizeEndpointFeature,
	_ns1__EndpointFeature **EndpointFeature,
	int __size,
	char *__any)
{	_ns1__SetEndpointDetailsRequest *_p = soap_new__ns1__SetEndpointDetailsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetEndpointDetailsRequest::EID = EID;
		_p->_ns1__SetEndpointDetailsRequest::__sizeEndpointFeature = __sizeEndpointFeature;
		_p->_ns1__SetEndpointDetailsRequest::EndpointFeature = EndpointFeature;
		_p->_ns1__SetEndpointDetailsRequest::__size = __size;
		_p->_ns1__SetEndpointDetailsRequest::__any = __any;
	}
	return _p;
}

inline _ns1__SetEndpointDetailsRequest * soap_new_set__ns1__SetEndpointDetailsRequest(
	struct soap *soap,
	char *EID,
	int __sizeEndpointFeature,
	_ns1__EndpointFeature **EndpointFeature,
	char *applicationName,
	char *applicationVersion,
	char *applicationOs,
	char *deviceModel,
	int __size,
	char *__any)
{	_ns1__SetEndpointDetailsRequest *_p = soap_new__ns1__SetEndpointDetailsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetEndpointDetailsRequest::EID = EID;
		_p->_ns1__SetEndpointDetailsRequest::__sizeEndpointFeature = __sizeEndpointFeature;
		_p->_ns1__SetEndpointDetailsRequest::EndpointFeature = EndpointFeature;
		_p->_ns1__SetEndpointDetailsRequest::applicationName = applicationName;
		_p->_ns1__SetEndpointDetailsRequest::applicationVersion = applicationVersion;
		_p->_ns1__SetEndpointDetailsRequest::applicationOs = applicationOs;
		_p->_ns1__SetEndpointDetailsRequest::deviceModel = deviceModel;
		_p->_ns1__SetEndpointDetailsRequest::__size = __size;
		_p->_ns1__SetEndpointDetailsRequest::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__SetEndpointDetailsRequest(struct soap *soap, _ns1__SetEndpointDetailsRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetEndpointDetailsRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetEndpointDetailsRequest * SOAP_FMAC4 soap_get__ns1__SetEndpointDetailsRequest(struct soap*, _ns1__SetEndpointDetailsRequest *, const char*, const char*);

inline int soap_read__ns1__SetEndpointDetailsRequest(struct soap *soap, _ns1__SetEndpointDetailsRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetEndpointDetailsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__EndpointFeature_DEFINED
#define SOAP_TYPE__ns1__EndpointFeature_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndpointFeature(struct soap*, const char*, int, const _ns1__EndpointFeature *, const char*);
SOAP_FMAC3 _ns1__EndpointFeature * SOAP_FMAC4 soap_in__ns1__EndpointFeature(struct soap*, const char*, _ns1__EndpointFeature *, const char*);
SOAP_FMAC1 _ns1__EndpointFeature * SOAP_FMAC2 soap_instantiate__ns1__EndpointFeature(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndpointFeature * soap_new__ns1__EndpointFeature(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__EndpointFeature(soap, n, NULL, NULL, NULL);
}

inline _ns1__EndpointFeature * soap_new_req__ns1__EndpointFeature(
	struct soap *soap,
	char *feature,
	bool enable)
{	_ns1__EndpointFeature *_p = soap_new__ns1__EndpointFeature(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EndpointFeature::feature = feature;
		_p->_ns1__EndpointFeature::enable = enable;
	}
	return _p;
}

inline _ns1__EndpointFeature * soap_new_set__ns1__EndpointFeature(
	struct soap *soap,
	char *feature,
	bool enable)
{	_ns1__EndpointFeature *_p = soap_new__ns1__EndpointFeature(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EndpointFeature::feature = feature;
		_p->_ns1__EndpointFeature::enable = enable;
	}
	return _p;
}

inline int soap_write__ns1__EndpointFeature(struct soap *soap, _ns1__EndpointFeature const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndpointFeature", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EndpointFeature * SOAP_FMAC4 soap_get__ns1__EndpointFeature(struct soap*, _ns1__EndpointFeature *, const char*, const char*);

inline int soap_read__ns1__EndpointFeature(struct soap *soap, _ns1__EndpointFeature *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__EndpointFeature(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPortalFeaturesResponse_DEFINED
#define SOAP_TYPE__ns1__GetPortalFeaturesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPortalFeaturesResponse(struct soap*, const char*, int, const _ns1__GetPortalFeaturesResponse *, const char*);
SOAP_FMAC3 _ns1__GetPortalFeaturesResponse * SOAP_FMAC4 soap_in__ns1__GetPortalFeaturesResponse(struct soap*, const char*, _ns1__GetPortalFeaturesResponse *, const char*);
SOAP_FMAC1 _ns1__GetPortalFeaturesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPortalFeaturesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPortalFeaturesResponse * soap_new__ns1__GetPortalFeaturesResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetPortalFeaturesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPortalFeaturesResponse * soap_new_req__ns1__GetPortalFeaturesResponse(
	struct soap *soap,
	int __sizePortalFeature,
	_ns1__PortalFeature **PortalFeature)
{	_ns1__GetPortalFeaturesResponse *_p = soap_new__ns1__GetPortalFeaturesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPortalFeaturesResponse::__sizePortalFeature = __sizePortalFeature;
		_p->_ns1__GetPortalFeaturesResponse::PortalFeature = PortalFeature;
	}
	return _p;
}

inline _ns1__GetPortalFeaturesResponse * soap_new_set__ns1__GetPortalFeaturesResponse(
	struct soap *soap,
	int __sizePortalFeature,
	_ns1__PortalFeature **PortalFeature)
{	_ns1__GetPortalFeaturesResponse *_p = soap_new__ns1__GetPortalFeaturesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPortalFeaturesResponse::__sizePortalFeature = __sizePortalFeature;
		_p->_ns1__GetPortalFeaturesResponse::PortalFeature = PortalFeature;
	}
	return _p;
}

inline int soap_write__ns1__GetPortalFeaturesResponse(struct soap *soap, _ns1__GetPortalFeaturesResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortalFeaturesResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPortalFeaturesResponse * SOAP_FMAC4 soap_get__ns1__GetPortalFeaturesResponse(struct soap*, _ns1__GetPortalFeaturesResponse *, const char*, const char*);

inline int soap_read__ns1__GetPortalFeaturesResponse(struct soap *soap, _ns1__GetPortalFeaturesResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPortalFeaturesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PortalFeature_DEFINED
#define SOAP_TYPE__ns1__PortalFeature_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PortalFeature(struct soap*, const char*, int, const _ns1__PortalFeature *, const char*);
SOAP_FMAC3 _ns1__PortalFeature * SOAP_FMAC4 soap_in__ns1__PortalFeature(struct soap*, const char*, _ns1__PortalFeature *, const char*);
SOAP_FMAC1 _ns1__PortalFeature * SOAP_FMAC2 soap_instantiate__ns1__PortalFeature(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PortalFeature * soap_new__ns1__PortalFeature(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__PortalFeature(soap, n, NULL, NULL, NULL);
}

inline _ns1__PortalFeature * soap_new_req__ns1__PortalFeature(
	struct soap *soap,
	char *feature,
	bool enable)
{	_ns1__PortalFeature *_p = soap_new__ns1__PortalFeature(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PortalFeature::feature = feature;
		_p->_ns1__PortalFeature::enable = enable;
	}
	return _p;
}

inline _ns1__PortalFeature * soap_new_set__ns1__PortalFeature(
	struct soap *soap,
	char *feature,
	bool enable)
{	_ns1__PortalFeature *_p = soap_new__ns1__PortalFeature(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PortalFeature::feature = feature;
		_p->_ns1__PortalFeature::enable = enable;
	}
	return _p;
}

inline int soap_write__ns1__PortalFeature(struct soap *soap, _ns1__PortalFeature const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PortalFeature", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PortalFeature * SOAP_FMAC4 soap_get__ns1__PortalFeature(struct soap*, _ns1__PortalFeature *, const char*, const char*);

inline int soap_read__ns1__PortalFeature(struct soap *soap, _ns1__PortalFeature *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PortalFeature(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DeleteScheduledRoomResponse_DEFINED
#define SOAP_TYPE__ns1__DeleteScheduledRoomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteScheduledRoomResponse(struct soap*, const char*, int, const _ns1__DeleteScheduledRoomResponse *, const char*);
SOAP_FMAC3 _ns1__DeleteScheduledRoomResponse * SOAP_FMAC4 soap_in__ns1__DeleteScheduledRoomResponse(struct soap*, const char*, _ns1__DeleteScheduledRoomResponse *, const char*);
SOAP_FMAC1 _ns1__DeleteScheduledRoomResponse * SOAP_FMAC2 soap_instantiate__ns1__DeleteScheduledRoomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteScheduledRoomResponse * soap_new__ns1__DeleteScheduledRoomResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DeleteScheduledRoomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DeleteScheduledRoomResponse * soap_new_req__ns1__DeleteScheduledRoomResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DeleteScheduledRoomResponse *_p = soap_new__ns1__DeleteScheduledRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DeleteScheduledRoomResponse::OK = OK;
	}
	return _p;
}

inline _ns1__DeleteScheduledRoomResponse * soap_new_set__ns1__DeleteScheduledRoomResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DeleteScheduledRoomResponse *_p = soap_new__ns1__DeleteScheduledRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DeleteScheduledRoomResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__DeleteScheduledRoomResponse(struct soap *soap, _ns1__DeleteScheduledRoomResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeleteScheduledRoomResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DeleteScheduledRoomResponse * SOAP_FMAC4 soap_get__ns1__DeleteScheduledRoomResponse(struct soap*, _ns1__DeleteScheduledRoomResponse *, const char*, const char*);

inline int soap_read__ns1__DeleteScheduledRoomResponse(struct soap *soap, _ns1__DeleteScheduledRoomResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DeleteScheduledRoomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DeleteScheduledRoomRequest_DEFINED
#define SOAP_TYPE__ns1__DeleteScheduledRoomRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteScheduledRoomRequest(struct soap*, const char*, int, const _ns1__DeleteScheduledRoomRequest *, const char*);
SOAP_FMAC3 _ns1__DeleteScheduledRoomRequest * SOAP_FMAC4 soap_in__ns1__DeleteScheduledRoomRequest(struct soap*, const char*, _ns1__DeleteScheduledRoomRequest *, const char*);
SOAP_FMAC1 _ns1__DeleteScheduledRoomRequest * SOAP_FMAC2 soap_instantiate__ns1__DeleteScheduledRoomRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteScheduledRoomRequest * soap_new__ns1__DeleteScheduledRoomRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DeleteScheduledRoomRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__DeleteScheduledRoomRequest * soap_new_req__ns1__DeleteScheduledRoomRequest(
	struct soap *soap,
	char *extension)
{	_ns1__DeleteScheduledRoomRequest *_p = soap_new__ns1__DeleteScheduledRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DeleteScheduledRoomRequest::extension = extension;
	}
	return _p;
}

inline _ns1__DeleteScheduledRoomRequest * soap_new_set__ns1__DeleteScheduledRoomRequest(
	struct soap *soap,
	char *extension,
	char **pin)
{	_ns1__DeleteScheduledRoomRequest *_p = soap_new__ns1__DeleteScheduledRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DeleteScheduledRoomRequest::extension = extension;
		_p->_ns1__DeleteScheduledRoomRequest::pin = pin;
	}
	return _p;
}

inline int soap_write__ns1__DeleteScheduledRoomRequest(struct soap *soap, _ns1__DeleteScheduledRoomRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeleteScheduledRoomRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DeleteScheduledRoomRequest * SOAP_FMAC4 soap_get__ns1__DeleteScheduledRoomRequest(struct soap*, _ns1__DeleteScheduledRoomRequest *, const char*, const char*);

inline int soap_read__ns1__DeleteScheduledRoomRequest(struct soap *soap, _ns1__DeleteScheduledRoomRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DeleteScheduledRoomRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateScheduledRoomResponse_DEFINED
#define SOAP_TYPE__ns1__CreateScheduledRoomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateScheduledRoomResponse(struct soap*, const char*, int, const _ns1__CreateScheduledRoomResponse *, const char*);
SOAP_FMAC3 _ns1__CreateScheduledRoomResponse * SOAP_FMAC4 soap_in__ns1__CreateScheduledRoomResponse(struct soap*, const char*, _ns1__CreateScheduledRoomResponse *, const char*);
SOAP_FMAC1 _ns1__CreateScheduledRoomResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateScheduledRoomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateScheduledRoomResponse * soap_new__ns1__CreateScheduledRoomResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateScheduledRoomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateScheduledRoomResponse * soap_new_req__ns1__CreateScheduledRoomResponse(
	struct soap *soap,
	char *extension,
	char *inviteContent,
	char *roomURL)
{	_ns1__CreateScheduledRoomResponse *_p = soap_new__ns1__CreateScheduledRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateScheduledRoomResponse::extension = extension;
		_p->_ns1__CreateScheduledRoomResponse::inviteContent = inviteContent;
		_p->_ns1__CreateScheduledRoomResponse::roomURL = roomURL;
	}
	return _p;
}

inline _ns1__CreateScheduledRoomResponse * soap_new_set__ns1__CreateScheduledRoomResponse(
	struct soap *soap,
	char *extension,
	char **pin,
	char *inviteContent,
	char *roomURL,
	char *inviteSubject)
{	_ns1__CreateScheduledRoomResponse *_p = soap_new__ns1__CreateScheduledRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateScheduledRoomResponse::extension = extension;
		_p->_ns1__CreateScheduledRoomResponse::pin = pin;
		_p->_ns1__CreateScheduledRoomResponse::inviteContent = inviteContent;
		_p->_ns1__CreateScheduledRoomResponse::roomURL = roomURL;
		_p->_ns1__CreateScheduledRoomResponse::inviteSubject = inviteSubject;
	}
	return _p;
}

inline int soap_write__ns1__CreateScheduledRoomResponse(struct soap *soap, _ns1__CreateScheduledRoomResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateScheduledRoomResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateScheduledRoomResponse * SOAP_FMAC4 soap_get__ns1__CreateScheduledRoomResponse(struct soap*, _ns1__CreateScheduledRoomResponse *, const char*, const char*);

inline int soap_read__ns1__CreateScheduledRoomResponse(struct soap *soap, _ns1__CreateScheduledRoomResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateScheduledRoomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateScheduledRoomRequest_DEFINED
#define SOAP_TYPE__ns1__CreateScheduledRoomRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateScheduledRoomRequest(struct soap*, const char*, int, const _ns1__CreateScheduledRoomRequest *, const char*);
SOAP_FMAC3 _ns1__CreateScheduledRoomRequest * SOAP_FMAC4 soap_in__ns1__CreateScheduledRoomRequest(struct soap*, const char*, _ns1__CreateScheduledRoomRequest *, const char*);
SOAP_FMAC1 _ns1__CreateScheduledRoomRequest * SOAP_FMAC2 soap_instantiate__ns1__CreateScheduledRoomRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateScheduledRoomRequest * soap_new__ns1__CreateScheduledRoomRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateScheduledRoomRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateScheduledRoomRequest * soap_new_req__ns1__CreateScheduledRoomRequest(
	struct soap *soap)
{	_ns1__CreateScheduledRoomRequest *_p = soap_new__ns1__CreateScheduledRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CreateScheduledRoomRequest * soap_new_set__ns1__CreateScheduledRoomRequest(
	struct soap *soap,
	int *recurring,
	bool *setPIN)
{	_ns1__CreateScheduledRoomRequest *_p = soap_new__ns1__CreateScheduledRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateScheduledRoomRequest::recurring = recurring;
		_p->_ns1__CreateScheduledRoomRequest::setPIN = setPIN;
	}
	return _p;
}

inline int soap_write__ns1__CreateScheduledRoomRequest(struct soap *soap, _ns1__CreateScheduledRoomRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateScheduledRoomRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateScheduledRoomRequest * SOAP_FMAC4 soap_get__ns1__CreateScheduledRoomRequest(struct soap*, _ns1__CreateScheduledRoomRequest *, const char*, const char*);

inline int soap_read__ns1__CreateScheduledRoomRequest(struct soap *soap, _ns1__CreateScheduledRoomRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateScheduledRoomRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GenerateAuthTokenResponse_DEFINED
#define SOAP_TYPE__ns1__GenerateAuthTokenResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GenerateAuthTokenResponse(struct soap*, const char*, int, const _ns1__GenerateAuthTokenResponse *, const char*);
SOAP_FMAC3 _ns1__GenerateAuthTokenResponse * SOAP_FMAC4 soap_in__ns1__GenerateAuthTokenResponse(struct soap*, const char*, _ns1__GenerateAuthTokenResponse *, const char*);
SOAP_FMAC1 _ns1__GenerateAuthTokenResponse * SOAP_FMAC2 soap_instantiate__ns1__GenerateAuthTokenResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GenerateAuthTokenResponse * soap_new__ns1__GenerateAuthTokenResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GenerateAuthTokenResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GenerateAuthTokenResponse * soap_new_req__ns1__GenerateAuthTokenResponse(
	struct soap *soap,
	char *authToken)
{	_ns1__GenerateAuthTokenResponse *_p = soap_new__ns1__GenerateAuthTokenResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GenerateAuthTokenResponse::authToken = authToken;
	}
	return _p;
}

inline _ns1__GenerateAuthTokenResponse * soap_new_set__ns1__GenerateAuthTokenResponse(
	struct soap *soap,
	char *authToken)
{	_ns1__GenerateAuthTokenResponse *_p = soap_new__ns1__GenerateAuthTokenResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GenerateAuthTokenResponse::authToken = authToken;
	}
	return _p;
}

inline int soap_write__ns1__GenerateAuthTokenResponse(struct soap *soap, _ns1__GenerateAuthTokenResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateAuthTokenResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GenerateAuthTokenResponse * SOAP_FMAC4 soap_get__ns1__GenerateAuthTokenResponse(struct soap*, _ns1__GenerateAuthTokenResponse *, const char*, const char*);

inline int soap_read__ns1__GenerateAuthTokenResponse(struct soap *soap, _ns1__GenerateAuthTokenResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GenerateAuthTokenResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GenerateAuthTokenRequest_DEFINED
#define SOAP_TYPE__ns1__GenerateAuthTokenRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GenerateAuthTokenRequest(struct soap*, const char*, int, const _ns1__GenerateAuthTokenRequest *, const char*);
SOAP_FMAC3 _ns1__GenerateAuthTokenRequest * SOAP_FMAC4 soap_in__ns1__GenerateAuthTokenRequest(struct soap*, const char*, _ns1__GenerateAuthTokenRequest *, const char*);
SOAP_FMAC1 _ns1__GenerateAuthTokenRequest * SOAP_FMAC2 soap_instantiate__ns1__GenerateAuthTokenRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GenerateAuthTokenRequest * soap_new__ns1__GenerateAuthTokenRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GenerateAuthTokenRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GenerateAuthTokenRequest * soap_new_req__ns1__GenerateAuthTokenRequest(
	struct soap *soap,
	int validityTime,
	char *endpointId)
{	_ns1__GenerateAuthTokenRequest *_p = soap_new__ns1__GenerateAuthTokenRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GenerateAuthTokenRequest::validityTime = validityTime;
		_p->_ns1__GenerateAuthTokenRequest::endpointId = endpointId;
	}
	return _p;
}

inline _ns1__GenerateAuthTokenRequest * soap_new_set__ns1__GenerateAuthTokenRequest(
	struct soap *soap,
	int validityTime,
	char *endpointId)
{	_ns1__GenerateAuthTokenRequest *_p = soap_new__ns1__GenerateAuthTokenRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GenerateAuthTokenRequest::validityTime = validityTime;
		_p->_ns1__GenerateAuthTokenRequest::endpointId = endpointId;
	}
	return _p;
}

inline int soap_write__ns1__GenerateAuthTokenRequest(struct soap *soap, _ns1__GenerateAuthTokenRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateAuthTokenRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GenerateAuthTokenRequest * SOAP_FMAC4 soap_get__ns1__GenerateAuthTokenRequest(struct soap*, _ns1__GenerateAuthTokenRequest *, const char*, const char*);

inline int soap_read__ns1__GenerateAuthTokenRequest(struct soap *soap, _ns1__GenerateAuthTokenRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GenerateAuthTokenRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetConferenceIDResponse_DEFINED
#define SOAP_TYPE__ns1__GetConferenceIDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetConferenceIDResponse(struct soap*, const char*, int, const _ns1__GetConferenceIDResponse *, const char*);
SOAP_FMAC3 _ns1__GetConferenceIDResponse * SOAP_FMAC4 soap_in__ns1__GetConferenceIDResponse(struct soap*, const char*, _ns1__GetConferenceIDResponse *, const char*);
SOAP_FMAC1 _ns1__GetConferenceIDResponse * SOAP_FMAC2 soap_instantiate__ns1__GetConferenceIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetConferenceIDResponse * soap_new__ns1__GetConferenceIDResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetConferenceIDResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetConferenceIDResponse * soap_new_req__ns1__GetConferenceIDResponse(
	struct soap *soap)
{	_ns1__GetConferenceIDResponse *_p = soap_new__ns1__GetConferenceIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetConferenceIDResponse * soap_new_set__ns1__GetConferenceIDResponse(
	struct soap *soap,
	char *conferenceID)
{	_ns1__GetConferenceIDResponse *_p = soap_new__ns1__GetConferenceIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetConferenceIDResponse::conferenceID = conferenceID;
	}
	return _p;
}

inline int soap_write__ns1__GetConferenceIDResponse(struct soap *soap, _ns1__GetConferenceIDResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConferenceIDResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetConferenceIDResponse * SOAP_FMAC4 soap_get__ns1__GetConferenceIDResponse(struct soap*, _ns1__GetConferenceIDResponse *, const char*, const char*);

inline int soap_read__ns1__GetConferenceIDResponse(struct soap *soap, _ns1__GetConferenceIDResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetConferenceIDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetConferenceIDRequest_DEFINED
#define SOAP_TYPE__ns1__GetConferenceIDRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetConferenceIDRequest(struct soap*, const char*, int, const _ns1__GetConferenceIDRequest *, const char*);
SOAP_FMAC3 _ns1__GetConferenceIDRequest * SOAP_FMAC4 soap_in__ns1__GetConferenceIDRequest(struct soap*, const char*, _ns1__GetConferenceIDRequest *, const char*);
SOAP_FMAC1 _ns1__GetConferenceIDRequest * SOAP_FMAC2 soap_instantiate__ns1__GetConferenceIDRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetConferenceIDRequest * soap_new__ns1__GetConferenceIDRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetConferenceIDRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetConferenceIDRequest * soap_new_req__ns1__GetConferenceIDRequest(
	struct soap *soap)
{	_ns1__GetConferenceIDRequest *_p = soap_new__ns1__GetConferenceIDRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetConferenceIDRequest * soap_new_set__ns1__GetConferenceIDRequest(
	struct soap *soap)
{	_ns1__GetConferenceIDRequest *_p = soap_new__ns1__GetConferenceIDRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetConferenceIDRequest(struct soap *soap, _ns1__GetConferenceIDRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConferenceIDRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetConferenceIDRequest * SOAP_FMAC4 soap_get__ns1__GetConferenceIDRequest(struct soap*, _ns1__GetConferenceIDRequest *, const char*, const char*);

inline int soap_read__ns1__GetConferenceIDRequest(struct soap *soap, _ns1__GetConferenceIDRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetConferenceIDRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveModeratorPINResponse_DEFINED
#define SOAP_TYPE__ns1__RemoveModeratorPINResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveModeratorPINResponse(struct soap*, const char*, int, const _ns1__RemoveModeratorPINResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveModeratorPINResponse * SOAP_FMAC4 soap_in__ns1__RemoveModeratorPINResponse(struct soap*, const char*, _ns1__RemoveModeratorPINResponse *, const char*);
SOAP_FMAC1 _ns1__RemoveModeratorPINResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveModeratorPINResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveModeratorPINResponse * soap_new__ns1__RemoveModeratorPINResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveModeratorPINResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveModeratorPINResponse * soap_new_req__ns1__RemoveModeratorPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveModeratorPINResponse *_p = soap_new__ns1__RemoveModeratorPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveModeratorPINResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RemoveModeratorPINResponse * soap_new_set__ns1__RemoveModeratorPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveModeratorPINResponse *_p = soap_new__ns1__RemoveModeratorPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveModeratorPINResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RemoveModeratorPINResponse(struct soap *soap, _ns1__RemoveModeratorPINResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveModeratorPINResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveModeratorPINResponse * SOAP_FMAC4 soap_get__ns1__RemoveModeratorPINResponse(struct soap*, _ns1__RemoveModeratorPINResponse *, const char*, const char*);

inline int soap_read__ns1__RemoveModeratorPINResponse(struct soap *soap, _ns1__RemoveModeratorPINResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveModeratorPINResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveModeratorPINRequest_DEFINED
#define SOAP_TYPE__ns1__RemoveModeratorPINRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveModeratorPINRequest(struct soap*, const char*, int, const _ns1__RemoveModeratorPINRequest *, const char*);
SOAP_FMAC3 _ns1__RemoveModeratorPINRequest * SOAP_FMAC4 soap_in__ns1__RemoveModeratorPINRequest(struct soap*, const char*, _ns1__RemoveModeratorPINRequest *, const char*);
SOAP_FMAC1 _ns1__RemoveModeratorPINRequest * SOAP_FMAC2 soap_instantiate__ns1__RemoveModeratorPINRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveModeratorPINRequest * soap_new__ns1__RemoveModeratorPINRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveModeratorPINRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveModeratorPINRequest * soap_new_req__ns1__RemoveModeratorPINRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveModeratorPINRequest *_p = soap_new__ns1__RemoveModeratorPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveModeratorPINRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__RemoveModeratorPINRequest * soap_new_set__ns1__RemoveModeratorPINRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveModeratorPINRequest *_p = soap_new__ns1__RemoveModeratorPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveModeratorPINRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__RemoveModeratorPINRequest(struct soap *soap, _ns1__RemoveModeratorPINRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveModeratorPINRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveModeratorPINRequest * SOAP_FMAC4 soap_get__ns1__RemoveModeratorPINRequest(struct soap*, _ns1__RemoveModeratorPINRequest *, const char*, const char*);

inline int soap_read__ns1__RemoveModeratorPINRequest(struct soap *soap, _ns1__RemoveModeratorPINRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveModeratorPINRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateModeratorPINResponse_DEFINED
#define SOAP_TYPE__ns1__CreateModeratorPINResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateModeratorPINResponse(struct soap*, const char*, int, const _ns1__CreateModeratorPINResponse *, const char*);
SOAP_FMAC3 _ns1__CreateModeratorPINResponse * SOAP_FMAC4 soap_in__ns1__CreateModeratorPINResponse(struct soap*, const char*, _ns1__CreateModeratorPINResponse *, const char*);
SOAP_FMAC1 _ns1__CreateModeratorPINResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateModeratorPINResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateModeratorPINResponse * soap_new__ns1__CreateModeratorPINResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateModeratorPINResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateModeratorPINResponse * soap_new_req__ns1__CreateModeratorPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateModeratorPINResponse *_p = soap_new__ns1__CreateModeratorPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateModeratorPINResponse::OK = OK;
	}
	return _p;
}

inline _ns1__CreateModeratorPINResponse * soap_new_set__ns1__CreateModeratorPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateModeratorPINResponse *_p = soap_new__ns1__CreateModeratorPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateModeratorPINResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__CreateModeratorPINResponse(struct soap *soap, _ns1__CreateModeratorPINResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateModeratorPINResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateModeratorPINResponse * SOAP_FMAC4 soap_get__ns1__CreateModeratorPINResponse(struct soap*, _ns1__CreateModeratorPINResponse *, const char*, const char*);

inline int soap_read__ns1__CreateModeratorPINResponse(struct soap *soap, _ns1__CreateModeratorPINResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateModeratorPINResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateModeratorPINRequest_DEFINED
#define SOAP_TYPE__ns1__CreateModeratorPINRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateModeratorPINRequest(struct soap*, const char*, int, const _ns1__CreateModeratorPINRequest *, const char*);
SOAP_FMAC3 _ns1__CreateModeratorPINRequest * SOAP_FMAC4 soap_in__ns1__CreateModeratorPINRequest(struct soap*, const char*, _ns1__CreateModeratorPINRequest *, const char*);
SOAP_FMAC1 _ns1__CreateModeratorPINRequest * SOAP_FMAC2 soap_instantiate__ns1__CreateModeratorPINRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateModeratorPINRequest * soap_new__ns1__CreateModeratorPINRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateModeratorPINRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateModeratorPINRequest * soap_new_req__ns1__CreateModeratorPINRequest(
	struct soap *soap,
	char *roomID,
	char *PIN)
{	_ns1__CreateModeratorPINRequest *_p = soap_new__ns1__CreateModeratorPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateModeratorPINRequest::roomID = roomID;
		_p->_ns1__CreateModeratorPINRequest::PIN = PIN;
	}
	return _p;
}

inline _ns1__CreateModeratorPINRequest * soap_new_set__ns1__CreateModeratorPINRequest(
	struct soap *soap,
	char *roomID,
	char *PIN)
{	_ns1__CreateModeratorPINRequest *_p = soap_new__ns1__CreateModeratorPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateModeratorPINRequest::roomID = roomID;
		_p->_ns1__CreateModeratorPINRequest::PIN = PIN;
	}
	return _p;
}

inline int soap_write__ns1__CreateModeratorPINRequest(struct soap *soap, _ns1__CreateModeratorPINRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateModeratorPINRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateModeratorPINRequest * SOAP_FMAC4 soap_get__ns1__CreateModeratorPINRequest(struct soap*, _ns1__CreateModeratorPINRequest *, const char*, const char*);

inline int soap_read__ns1__CreateModeratorPINRequest(struct soap *soap, _ns1__CreateModeratorPINRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateModeratorPINRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetModeratorURLWithTokenResponse_DEFINED
#define SOAP_TYPE__ns1__GetModeratorURLWithTokenResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetModeratorURLWithTokenResponse(struct soap*, const char*, int, const _ns1__GetModeratorURLWithTokenResponse *, const char*);
SOAP_FMAC3 _ns1__GetModeratorURLWithTokenResponse * SOAP_FMAC4 soap_in__ns1__GetModeratorURLWithTokenResponse(struct soap*, const char*, _ns1__GetModeratorURLWithTokenResponse *, const char*);
SOAP_FMAC1 _ns1__GetModeratorURLWithTokenResponse * SOAP_FMAC2 soap_instantiate__ns1__GetModeratorURLWithTokenResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetModeratorURLWithTokenResponse * soap_new__ns1__GetModeratorURLWithTokenResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetModeratorURLWithTokenResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetModeratorURLWithTokenResponse * soap_new_req__ns1__GetModeratorURLWithTokenResponse(
	struct soap *soap,
	char *moderatorURL)
{	_ns1__GetModeratorURLWithTokenResponse *_p = soap_new__ns1__GetModeratorURLWithTokenResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetModeratorURLWithTokenResponse::moderatorURL = moderatorURL;
	}
	return _p;
}

inline _ns1__GetModeratorURLWithTokenResponse * soap_new_set__ns1__GetModeratorURLWithTokenResponse(
	struct soap *soap,
	char *moderatorURL)
{	_ns1__GetModeratorURLWithTokenResponse *_p = soap_new__ns1__GetModeratorURLWithTokenResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetModeratorURLWithTokenResponse::moderatorURL = moderatorURL;
	}
	return _p;
}

inline int soap_write__ns1__GetModeratorURLWithTokenResponse(struct soap *soap, _ns1__GetModeratorURLWithTokenResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetModeratorURLWithTokenResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetModeratorURLWithTokenResponse * SOAP_FMAC4 soap_get__ns1__GetModeratorURLWithTokenResponse(struct soap*, _ns1__GetModeratorURLWithTokenResponse *, const char*, const char*);

inline int soap_read__ns1__GetModeratorURLWithTokenResponse(struct soap *soap, _ns1__GetModeratorURLWithTokenResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetModeratorURLWithTokenResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetModeratorURLWithTokenRequest_DEFINED
#define SOAP_TYPE__ns1__GetModeratorURLWithTokenRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetModeratorURLWithTokenRequest(struct soap*, const char*, int, const _ns1__GetModeratorURLWithTokenRequest *, const char*);
SOAP_FMAC3 _ns1__GetModeratorURLWithTokenRequest * SOAP_FMAC4 soap_in__ns1__GetModeratorURLWithTokenRequest(struct soap*, const char*, _ns1__GetModeratorURLWithTokenRequest *, const char*);
SOAP_FMAC1 _ns1__GetModeratorURLWithTokenRequest * SOAP_FMAC2 soap_instantiate__ns1__GetModeratorURLWithTokenRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetModeratorURLWithTokenRequest * soap_new__ns1__GetModeratorURLWithTokenRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetModeratorURLWithTokenRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetModeratorURLWithTokenRequest * soap_new_req__ns1__GetModeratorURLWithTokenRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__GetModeratorURLWithTokenRequest *_p = soap_new__ns1__GetModeratorURLWithTokenRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetModeratorURLWithTokenRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__GetModeratorURLWithTokenRequest * soap_new_set__ns1__GetModeratorURLWithTokenRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__GetModeratorURLWithTokenRequest *_p = soap_new__ns1__GetModeratorURLWithTokenRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetModeratorURLWithTokenRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__GetModeratorURLWithTokenRequest(struct soap *soap, _ns1__GetModeratorURLWithTokenRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetModeratorURLWithTokenRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetModeratorURLWithTokenRequest * SOAP_FMAC4 soap_get__ns1__GetModeratorURLWithTokenRequest(struct soap*, _ns1__GetModeratorURLWithTokenRequest *, const char*, const char*);

inline int soap_read__ns1__GetModeratorURLWithTokenRequest(struct soap *soap, _ns1__GetModeratorURLWithTokenRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetModeratorURLWithTokenRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetModeratorURLResponse_DEFINED
#define SOAP_TYPE__ns1__GetModeratorURLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetModeratorURLResponse(struct soap*, const char*, int, const _ns1__GetModeratorURLResponse *, const char*);
SOAP_FMAC3 _ns1__GetModeratorURLResponse * SOAP_FMAC4 soap_in__ns1__GetModeratorURLResponse(struct soap*, const char*, _ns1__GetModeratorURLResponse *, const char*);
SOAP_FMAC1 _ns1__GetModeratorURLResponse * SOAP_FMAC2 soap_instantiate__ns1__GetModeratorURLResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetModeratorURLResponse * soap_new__ns1__GetModeratorURLResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetModeratorURLResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetModeratorURLResponse * soap_new_req__ns1__GetModeratorURLResponse(
	struct soap *soap)
{	_ns1__GetModeratorURLResponse *_p = soap_new__ns1__GetModeratorURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetModeratorURLResponse * soap_new_set__ns1__GetModeratorURLResponse(
	struct soap *soap,
	char *moderatorURL,
	bool *hasModeratorPIN)
{	_ns1__GetModeratorURLResponse *_p = soap_new__ns1__GetModeratorURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetModeratorURLResponse::moderatorURL = moderatorURL;
		_p->_ns1__GetModeratorURLResponse::hasModeratorPIN = hasModeratorPIN;
	}
	return _p;
}

inline int soap_write__ns1__GetModeratorURLResponse(struct soap *soap, _ns1__GetModeratorURLResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetModeratorURLResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetModeratorURLResponse * SOAP_FMAC4 soap_get__ns1__GetModeratorURLResponse(struct soap*, _ns1__GetModeratorURLResponse *, const char*, const char*);

inline int soap_read__ns1__GetModeratorURLResponse(struct soap *soap, _ns1__GetModeratorURLResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetModeratorURLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetModeratorURLRequest_DEFINED
#define SOAP_TYPE__ns1__GetModeratorURLRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetModeratorURLRequest(struct soap*, const char*, int, const _ns1__GetModeratorURLRequest *, const char*);
SOAP_FMAC3 _ns1__GetModeratorURLRequest * SOAP_FMAC4 soap_in__ns1__GetModeratorURLRequest(struct soap*, const char*, _ns1__GetModeratorURLRequest *, const char*);
SOAP_FMAC1 _ns1__GetModeratorURLRequest * SOAP_FMAC2 soap_instantiate__ns1__GetModeratorURLRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetModeratorURLRequest * soap_new__ns1__GetModeratorURLRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetModeratorURLRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetModeratorURLRequest * soap_new_req__ns1__GetModeratorURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__GetModeratorURLRequest *_p = soap_new__ns1__GetModeratorURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetModeratorURLRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__GetModeratorURLRequest * soap_new_set__ns1__GetModeratorURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__GetModeratorURLRequest *_p = soap_new__ns1__GetModeratorURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetModeratorURLRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__GetModeratorURLRequest(struct soap *soap, _ns1__GetModeratorURLRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetModeratorURLRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetModeratorURLRequest * SOAP_FMAC4 soap_get__ns1__GetModeratorURLRequest(struct soap*, _ns1__GetModeratorURLRequest *, const char*, const char*);

inline int soap_read__ns1__GetModeratorURLRequest(struct soap *soap, _ns1__GetModeratorURLRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetModeratorURLRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveModeratorURLResponse_DEFINED
#define SOAP_TYPE__ns1__RemoveModeratorURLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveModeratorURLResponse(struct soap*, const char*, int, const _ns1__RemoveModeratorURLResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveModeratorURLResponse * SOAP_FMAC4 soap_in__ns1__RemoveModeratorURLResponse(struct soap*, const char*, _ns1__RemoveModeratorURLResponse *, const char*);
SOAP_FMAC1 _ns1__RemoveModeratorURLResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveModeratorURLResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveModeratorURLResponse * soap_new__ns1__RemoveModeratorURLResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveModeratorURLResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveModeratorURLResponse * soap_new_req__ns1__RemoveModeratorURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveModeratorURLResponse *_p = soap_new__ns1__RemoveModeratorURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveModeratorURLResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RemoveModeratorURLResponse * soap_new_set__ns1__RemoveModeratorURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveModeratorURLResponse *_p = soap_new__ns1__RemoveModeratorURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveModeratorURLResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RemoveModeratorURLResponse(struct soap *soap, _ns1__RemoveModeratorURLResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveModeratorURLResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveModeratorURLResponse * SOAP_FMAC4 soap_get__ns1__RemoveModeratorURLResponse(struct soap*, _ns1__RemoveModeratorURLResponse *, const char*, const char*);

inline int soap_read__ns1__RemoveModeratorURLResponse(struct soap *soap, _ns1__RemoveModeratorURLResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveModeratorURLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveModeratorURLRequest_DEFINED
#define SOAP_TYPE__ns1__RemoveModeratorURLRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveModeratorURLRequest(struct soap*, const char*, int, const _ns1__RemoveModeratorURLRequest *, const char*);
SOAP_FMAC3 _ns1__RemoveModeratorURLRequest * SOAP_FMAC4 soap_in__ns1__RemoveModeratorURLRequest(struct soap*, const char*, _ns1__RemoveModeratorURLRequest *, const char*);
SOAP_FMAC1 _ns1__RemoveModeratorURLRequest * SOAP_FMAC2 soap_instantiate__ns1__RemoveModeratorURLRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveModeratorURLRequest * soap_new__ns1__RemoveModeratorURLRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveModeratorURLRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveModeratorURLRequest * soap_new_req__ns1__RemoveModeratorURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveModeratorURLRequest *_p = soap_new__ns1__RemoveModeratorURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveModeratorURLRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__RemoveModeratorURLRequest * soap_new_set__ns1__RemoveModeratorURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveModeratorURLRequest *_p = soap_new__ns1__RemoveModeratorURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveModeratorURLRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__RemoveModeratorURLRequest(struct soap *soap, _ns1__RemoveModeratorURLRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveModeratorURLRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveModeratorURLRequest * SOAP_FMAC4 soap_get__ns1__RemoveModeratorURLRequest(struct soap*, _ns1__RemoveModeratorURLRequest *, const char*, const char*);

inline int soap_read__ns1__RemoveModeratorURLRequest(struct soap *soap, _ns1__RemoveModeratorURLRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveModeratorURLRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateModeratorURLResponse_DEFINED
#define SOAP_TYPE__ns1__CreateModeratorURLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateModeratorURLResponse(struct soap*, const char*, int, const _ns1__CreateModeratorURLResponse *, const char*);
SOAP_FMAC3 _ns1__CreateModeratorURLResponse * SOAP_FMAC4 soap_in__ns1__CreateModeratorURLResponse(struct soap*, const char*, _ns1__CreateModeratorURLResponse *, const char*);
SOAP_FMAC1 _ns1__CreateModeratorURLResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateModeratorURLResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateModeratorURLResponse * soap_new__ns1__CreateModeratorURLResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateModeratorURLResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateModeratorURLResponse * soap_new_req__ns1__CreateModeratorURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateModeratorURLResponse *_p = soap_new__ns1__CreateModeratorURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateModeratorURLResponse::OK = OK;
	}
	return _p;
}

inline _ns1__CreateModeratorURLResponse * soap_new_set__ns1__CreateModeratorURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateModeratorURLResponse *_p = soap_new__ns1__CreateModeratorURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateModeratorURLResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__CreateModeratorURLResponse(struct soap *soap, _ns1__CreateModeratorURLResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateModeratorURLResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateModeratorURLResponse * SOAP_FMAC4 soap_get__ns1__CreateModeratorURLResponse(struct soap*, _ns1__CreateModeratorURLResponse *, const char*, const char*);

inline int soap_read__ns1__CreateModeratorURLResponse(struct soap *soap, _ns1__CreateModeratorURLResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateModeratorURLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateModeratorURLRequest_DEFINED
#define SOAP_TYPE__ns1__CreateModeratorURLRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateModeratorURLRequest(struct soap*, const char*, int, const _ns1__CreateModeratorURLRequest *, const char*);
SOAP_FMAC3 _ns1__CreateModeratorURLRequest * SOAP_FMAC4 soap_in__ns1__CreateModeratorURLRequest(struct soap*, const char*, _ns1__CreateModeratorURLRequest *, const char*);
SOAP_FMAC1 _ns1__CreateModeratorURLRequest * SOAP_FMAC2 soap_instantiate__ns1__CreateModeratorURLRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateModeratorURLRequest * soap_new__ns1__CreateModeratorURLRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateModeratorURLRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateModeratorURLRequest * soap_new_req__ns1__CreateModeratorURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__CreateModeratorURLRequest *_p = soap_new__ns1__CreateModeratorURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateModeratorURLRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__CreateModeratorURLRequest * soap_new_set__ns1__CreateModeratorURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__CreateModeratorURLRequest *_p = soap_new__ns1__CreateModeratorURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateModeratorURLRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__CreateModeratorURLRequest(struct soap *soap, _ns1__CreateModeratorURLRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateModeratorURLRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateModeratorURLRequest * SOAP_FMAC4 soap_get__ns1__CreateModeratorURLRequest(struct soap*, _ns1__CreateModeratorURLRequest *, const char*, const char*);

inline int soap_read__ns1__CreateModeratorURLRequest(struct soap *soap, _ns1__CreateModeratorURLRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateModeratorURLRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveRoomProfileResponse_DEFINED
#define SOAP_TYPE__ns1__RemoveRoomProfileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveRoomProfileResponse(struct soap*, const char*, int, const _ns1__RemoveRoomProfileResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveRoomProfileResponse * SOAP_FMAC4 soap_in__ns1__RemoveRoomProfileResponse(struct soap*, const char*, _ns1__RemoveRoomProfileResponse *, const char*);
SOAP_FMAC1 _ns1__RemoveRoomProfileResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveRoomProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveRoomProfileResponse * soap_new__ns1__RemoveRoomProfileResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveRoomProfileResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveRoomProfileResponse * soap_new_req__ns1__RemoveRoomProfileResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveRoomProfileResponse *_p = soap_new__ns1__RemoveRoomProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomProfileResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RemoveRoomProfileResponse * soap_new_set__ns1__RemoveRoomProfileResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveRoomProfileResponse *_p = soap_new__ns1__RemoveRoomProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomProfileResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RemoveRoomProfileResponse(struct soap *soap, _ns1__RemoveRoomProfileResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveRoomProfileResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveRoomProfileResponse * SOAP_FMAC4 soap_get__ns1__RemoveRoomProfileResponse(struct soap*, _ns1__RemoveRoomProfileResponse *, const char*, const char*);

inline int soap_read__ns1__RemoveRoomProfileResponse(struct soap *soap, _ns1__RemoveRoomProfileResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveRoomProfileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveRoomProfileRequest_DEFINED
#define SOAP_TYPE__ns1__RemoveRoomProfileRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveRoomProfileRequest(struct soap*, const char*, int, const _ns1__RemoveRoomProfileRequest *, const char*);
SOAP_FMAC3 _ns1__RemoveRoomProfileRequest * SOAP_FMAC4 soap_in__ns1__RemoveRoomProfileRequest(struct soap*, const char*, _ns1__RemoveRoomProfileRequest *, const char*);
SOAP_FMAC1 _ns1__RemoveRoomProfileRequest * SOAP_FMAC2 soap_instantiate__ns1__RemoveRoomProfileRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveRoomProfileRequest * soap_new__ns1__RemoveRoomProfileRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveRoomProfileRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveRoomProfileRequest * soap_new_req__ns1__RemoveRoomProfileRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveRoomProfileRequest *_p = soap_new__ns1__RemoveRoomProfileRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomProfileRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__RemoveRoomProfileRequest * soap_new_set__ns1__RemoveRoomProfileRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveRoomProfileRequest *_p = soap_new__ns1__RemoveRoomProfileRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomProfileRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__RemoveRoomProfileRequest(struct soap *soap, _ns1__RemoveRoomProfileRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveRoomProfileRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveRoomProfileRequest * SOAP_FMAC4 soap_get__ns1__RemoveRoomProfileRequest(struct soap*, _ns1__RemoveRoomProfileRequest *, const char*, const char*);

inline int soap_read__ns1__RemoveRoomProfileRequest(struct soap *soap, _ns1__RemoveRoomProfileRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveRoomProfileRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetRoomProfileResponse_DEFINED
#define SOAP_TYPE__ns1__SetRoomProfileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRoomProfileResponse(struct soap*, const char*, int, const _ns1__SetRoomProfileResponse *, const char*);
SOAP_FMAC3 _ns1__SetRoomProfileResponse * SOAP_FMAC4 soap_in__ns1__SetRoomProfileResponse(struct soap*, const char*, _ns1__SetRoomProfileResponse *, const char*);
SOAP_FMAC1 _ns1__SetRoomProfileResponse * SOAP_FMAC2 soap_instantiate__ns1__SetRoomProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetRoomProfileResponse * soap_new__ns1__SetRoomProfileResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SetRoomProfileResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetRoomProfileResponse * soap_new_req__ns1__SetRoomProfileResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__SetRoomProfileResponse *_p = soap_new__ns1__SetRoomProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetRoomProfileResponse::OK = OK;
	}
	return _p;
}

inline _ns1__SetRoomProfileResponse * soap_new_set__ns1__SetRoomProfileResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__SetRoomProfileResponse *_p = soap_new__ns1__SetRoomProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetRoomProfileResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__SetRoomProfileResponse(struct soap *soap, _ns1__SetRoomProfileResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetRoomProfileResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetRoomProfileResponse * SOAP_FMAC4 soap_get__ns1__SetRoomProfileResponse(struct soap*, _ns1__SetRoomProfileResponse *, const char*, const char*);

inline int soap_read__ns1__SetRoomProfileResponse(struct soap *soap, _ns1__SetRoomProfileResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetRoomProfileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetRoomProfileRequest_DEFINED
#define SOAP_TYPE__ns1__SetRoomProfileRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRoomProfileRequest(struct soap*, const char*, int, const _ns1__SetRoomProfileRequest *, const char*);
SOAP_FMAC3 _ns1__SetRoomProfileRequest * SOAP_FMAC4 soap_in__ns1__SetRoomProfileRequest(struct soap*, const char*, _ns1__SetRoomProfileRequest *, const char*);
SOAP_FMAC1 _ns1__SetRoomProfileRequest * SOAP_FMAC2 soap_instantiate__ns1__SetRoomProfileRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetRoomProfileRequest * soap_new__ns1__SetRoomProfileRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SetRoomProfileRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetRoomProfileRequest * soap_new_req__ns1__SetRoomProfileRequest(
	struct soap *soap,
	char *roomID,
	char *roomProfileName)
{	_ns1__SetRoomProfileRequest *_p = soap_new__ns1__SetRoomProfileRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetRoomProfileRequest::roomID = roomID;
		_p->_ns1__SetRoomProfileRequest::roomProfileName = roomProfileName;
	}
	return _p;
}

inline _ns1__SetRoomProfileRequest * soap_new_set__ns1__SetRoomProfileRequest(
	struct soap *soap,
	char *roomID,
	char *roomProfileName)
{	_ns1__SetRoomProfileRequest *_p = soap_new__ns1__SetRoomProfileRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetRoomProfileRequest::roomID = roomID;
		_p->_ns1__SetRoomProfileRequest::roomProfileName = roomProfileName;
	}
	return _p;
}

inline int soap_write__ns1__SetRoomProfileRequest(struct soap *soap, _ns1__SetRoomProfileRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetRoomProfileRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetRoomProfileRequest * SOAP_FMAC4 soap_get__ns1__SetRoomProfileRequest(struct soap*, _ns1__SetRoomProfileRequest *, const char*, const char*);

inline int soap_read__ns1__SetRoomProfileRequest(struct soap *soap, _ns1__SetRoomProfileRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetRoomProfileRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRoomProfileResponse_DEFINED
#define SOAP_TYPE__ns1__GetRoomProfileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRoomProfileResponse(struct soap*, const char*, int, const _ns1__GetRoomProfileResponse *, const char*);
SOAP_FMAC3 _ns1__GetRoomProfileResponse * SOAP_FMAC4 soap_in__ns1__GetRoomProfileResponse(struct soap*, const char*, _ns1__GetRoomProfileResponse *, const char*);
SOAP_FMAC1 _ns1__GetRoomProfileResponse * SOAP_FMAC2 soap_instantiate__ns1__GetRoomProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRoomProfileResponse * soap_new__ns1__GetRoomProfileResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetRoomProfileResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRoomProfileResponse * soap_new_req__ns1__GetRoomProfileResponse(
	struct soap *soap,
	ns1__RoomProfile *roomProfile)
{	_ns1__GetRoomProfileResponse *_p = soap_new__ns1__GetRoomProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRoomProfileResponse::roomProfile = roomProfile;
	}
	return _p;
}

inline _ns1__GetRoomProfileResponse * soap_new_set__ns1__GetRoomProfileResponse(
	struct soap *soap,
	ns1__RoomProfile *roomProfile)
{	_ns1__GetRoomProfileResponse *_p = soap_new__ns1__GetRoomProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRoomProfileResponse::roomProfile = roomProfile;
	}
	return _p;
}

inline int soap_write__ns1__GetRoomProfileResponse(struct soap *soap, _ns1__GetRoomProfileResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRoomProfileResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRoomProfileResponse * SOAP_FMAC4 soap_get__ns1__GetRoomProfileResponse(struct soap*, _ns1__GetRoomProfileResponse *, const char*, const char*);

inline int soap_read__ns1__GetRoomProfileResponse(struct soap *soap, _ns1__GetRoomProfileResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRoomProfileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRoomProfileRequest_DEFINED
#define SOAP_TYPE__ns1__GetRoomProfileRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRoomProfileRequest(struct soap*, const char*, int, const _ns1__GetRoomProfileRequest *, const char*);
SOAP_FMAC3 _ns1__GetRoomProfileRequest * SOAP_FMAC4 soap_in__ns1__GetRoomProfileRequest(struct soap*, const char*, _ns1__GetRoomProfileRequest *, const char*);
SOAP_FMAC1 _ns1__GetRoomProfileRequest * SOAP_FMAC2 soap_instantiate__ns1__GetRoomProfileRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRoomProfileRequest * soap_new__ns1__GetRoomProfileRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetRoomProfileRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRoomProfileRequest * soap_new_req__ns1__GetRoomProfileRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__GetRoomProfileRequest *_p = soap_new__ns1__GetRoomProfileRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRoomProfileRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__GetRoomProfileRequest * soap_new_set__ns1__GetRoomProfileRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__GetRoomProfileRequest *_p = soap_new__ns1__GetRoomProfileRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRoomProfileRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__GetRoomProfileRequest(struct soap *soap, _ns1__GetRoomProfileRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRoomProfileRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRoomProfileRequest * SOAP_FMAC4 soap_get__ns1__GetRoomProfileRequest(struct soap*, _ns1__GetRoomProfileRequest *, const char*, const char*);

inline int soap_read__ns1__GetRoomProfileRequest(struct soap *soap, _ns1__GetRoomProfileRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRoomProfileRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRoomProfilesResponse_DEFINED
#define SOAP_TYPE__ns1__GetRoomProfilesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRoomProfilesResponse(struct soap*, const char*, int, const _ns1__GetRoomProfilesResponse *, const char*);
SOAP_FMAC3 _ns1__GetRoomProfilesResponse * SOAP_FMAC4 soap_in__ns1__GetRoomProfilesResponse(struct soap*, const char*, _ns1__GetRoomProfilesResponse *, const char*);
SOAP_FMAC1 _ns1__GetRoomProfilesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetRoomProfilesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRoomProfilesResponse * soap_new__ns1__GetRoomProfilesResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetRoomProfilesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRoomProfilesResponse * soap_new_req__ns1__GetRoomProfilesResponse(
	struct soap *soap,
	int total,
	int __sizeroomProfile,
	ns1__RoomProfile **roomProfile)
{	_ns1__GetRoomProfilesResponse *_p = soap_new__ns1__GetRoomProfilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRoomProfilesResponse::total = total;
		_p->_ns1__GetRoomProfilesResponse::__sizeroomProfile = __sizeroomProfile;
		_p->_ns1__GetRoomProfilesResponse::roomProfile = roomProfile;
	}
	return _p;
}

inline _ns1__GetRoomProfilesResponse * soap_new_set__ns1__GetRoomProfilesResponse(
	struct soap *soap,
	int total,
	int __sizeroomProfile,
	ns1__RoomProfile **roomProfile)
{	_ns1__GetRoomProfilesResponse *_p = soap_new__ns1__GetRoomProfilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRoomProfilesResponse::total = total;
		_p->_ns1__GetRoomProfilesResponse::__sizeroomProfile = __sizeroomProfile;
		_p->_ns1__GetRoomProfilesResponse::roomProfile = roomProfile;
	}
	return _p;
}

inline int soap_write__ns1__GetRoomProfilesResponse(struct soap *soap, _ns1__GetRoomProfilesResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRoomProfilesResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRoomProfilesResponse * SOAP_FMAC4 soap_get__ns1__GetRoomProfilesResponse(struct soap*, _ns1__GetRoomProfilesResponse *, const char*, const char*);

inline int soap_read__ns1__GetRoomProfilesResponse(struct soap *soap, _ns1__GetRoomProfilesResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRoomProfilesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetInviteContentResponse_DEFINED
#define SOAP_TYPE__ns1__GetInviteContentResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInviteContentResponse(struct soap*, const char*, int, const _ns1__GetInviteContentResponse *, const char*);
SOAP_FMAC3 _ns1__GetInviteContentResponse * SOAP_FMAC4 soap_in__ns1__GetInviteContentResponse(struct soap*, const char*, _ns1__GetInviteContentResponse *, const char*);
SOAP_FMAC1 _ns1__GetInviteContentResponse * SOAP_FMAC2 soap_instantiate__ns1__GetInviteContentResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInviteContentResponse * soap_new__ns1__GetInviteContentResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetInviteContentResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetInviteContentResponse * soap_new_req__ns1__GetInviteContentResponse(
	struct soap *soap,
	char *content)
{	_ns1__GetInviteContentResponse *_p = soap_new__ns1__GetInviteContentResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetInviteContentResponse::content = content;
	}
	return _p;
}

inline _ns1__GetInviteContentResponse * soap_new_set__ns1__GetInviteContentResponse(
	struct soap *soap,
	char *content,
	char *subject)
{	_ns1__GetInviteContentResponse *_p = soap_new__ns1__GetInviteContentResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetInviteContentResponse::content = content;
		_p->_ns1__GetInviteContentResponse::subject = subject;
	}
	return _p;
}

inline int soap_write__ns1__GetInviteContentResponse(struct soap *soap, _ns1__GetInviteContentResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetInviteContentResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetInviteContentResponse * SOAP_FMAC4 soap_get__ns1__GetInviteContentResponse(struct soap*, _ns1__GetInviteContentResponse *, const char*, const char*);

inline int soap_read__ns1__GetInviteContentResponse(struct soap *soap, _ns1__GetInviteContentResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetInviteContentResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetInviteContentRequest_DEFINED
#define SOAP_TYPE__ns1__GetInviteContentRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInviteContentRequest(struct soap*, const char*, int, const _ns1__GetInviteContentRequest *, const char*);
SOAP_FMAC3 _ns1__GetInviteContentRequest * SOAP_FMAC4 soap_in__ns1__GetInviteContentRequest(struct soap*, const char*, _ns1__GetInviteContentRequest *, const char*);
SOAP_FMAC1 _ns1__GetInviteContentRequest * SOAP_FMAC2 soap_instantiate__ns1__GetInviteContentRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInviteContentRequest * soap_new__ns1__GetInviteContentRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetInviteContentRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetInviteContentRequest * soap_new_req__ns1__GetInviteContentRequest(
	struct soap *soap)
{	_ns1__GetInviteContentRequest *_p = soap_new__ns1__GetInviteContentRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetInviteContentRequest * soap_new_set__ns1__GetInviteContentRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__GetInviteContentRequest *_p = soap_new__ns1__GetInviteContentRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetInviteContentRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__GetInviteContentRequest(struct soap *soap, _ns1__GetInviteContentRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetInviteContentRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetInviteContentRequest * SOAP_FMAC4 soap_get__ns1__GetInviteContentRequest(struct soap*, _ns1__GetInviteContentRequest *, const char*, const char*);

inline int soap_read__ns1__GetInviteContentRequest(struct soap *soap, _ns1__GetInviteContentRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetInviteContentRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEntityByRoomKeyResponse_DEFINED
#define SOAP_TYPE__ns1__GetEntityByRoomKeyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEntityByRoomKeyResponse(struct soap*, const char*, int, const _ns1__GetEntityByRoomKeyResponse *, const char*);
SOAP_FMAC3 _ns1__GetEntityByRoomKeyResponse * SOAP_FMAC4 soap_in__ns1__GetEntityByRoomKeyResponse(struct soap*, const char*, _ns1__GetEntityByRoomKeyResponse *, const char*);
SOAP_FMAC1 _ns1__GetEntityByRoomKeyResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEntityByRoomKeyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEntityByRoomKeyResponse * soap_new__ns1__GetEntityByRoomKeyResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetEntityByRoomKeyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEntityByRoomKeyResponse * soap_new_req__ns1__GetEntityByRoomKeyResponse(
	struct soap *soap,
	_ns1__Entity *Entity)
{	_ns1__GetEntityByRoomKeyResponse *_p = soap_new__ns1__GetEntityByRoomKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEntityByRoomKeyResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__GetEntityByRoomKeyResponse * soap_new_set__ns1__GetEntityByRoomKeyResponse(
	struct soap *soap,
	_ns1__Entity *Entity)
{	_ns1__GetEntityByRoomKeyResponse *_p = soap_new__ns1__GetEntityByRoomKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEntityByRoomKeyResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__GetEntityByRoomKeyResponse(struct soap *soap, _ns1__GetEntityByRoomKeyResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEntityByRoomKeyResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEntityByRoomKeyResponse * SOAP_FMAC4 soap_get__ns1__GetEntityByRoomKeyResponse(struct soap*, _ns1__GetEntityByRoomKeyResponse *, const char*, const char*);

inline int soap_read__ns1__GetEntityByRoomKeyResponse(struct soap *soap, _ns1__GetEntityByRoomKeyResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEntityByRoomKeyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEntityByRoomKeyRequest_DEFINED
#define SOAP_TYPE__ns1__GetEntityByRoomKeyRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEntityByRoomKeyRequest(struct soap*, const char*, int, const _ns1__GetEntityByRoomKeyRequest *, const char*);
SOAP_FMAC3 _ns1__GetEntityByRoomKeyRequest * SOAP_FMAC4 soap_in__ns1__GetEntityByRoomKeyRequest(struct soap*, const char*, _ns1__GetEntityByRoomKeyRequest *, const char*);
SOAP_FMAC1 _ns1__GetEntityByRoomKeyRequest * SOAP_FMAC2 soap_instantiate__ns1__GetEntityByRoomKeyRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEntityByRoomKeyRequest * soap_new__ns1__GetEntityByRoomKeyRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetEntityByRoomKeyRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEntityByRoomKeyRequest * soap_new_req__ns1__GetEntityByRoomKeyRequest(
	struct soap *soap,
	char *roomKey)
{	_ns1__GetEntityByRoomKeyRequest *_p = soap_new__ns1__GetEntityByRoomKeyRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEntityByRoomKeyRequest::roomKey = roomKey;
	}
	return _p;
}

inline _ns1__GetEntityByRoomKeyRequest * soap_new_set__ns1__GetEntityByRoomKeyRequest(
	struct soap *soap,
	char *roomKey)
{	_ns1__GetEntityByRoomKeyRequest *_p = soap_new__ns1__GetEntityByRoomKeyRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEntityByRoomKeyRequest::roomKey = roomKey;
	}
	return _p;
}

inline int soap_write__ns1__GetEntityByRoomKeyRequest(struct soap *soap, _ns1__GetEntityByRoomKeyRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEntityByRoomKeyRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEntityByRoomKeyRequest * SOAP_FMAC4 soap_get__ns1__GetEntityByRoomKeyRequest(struct soap*, _ns1__GetEntityByRoomKeyRequest *, const char*, const char*);

inline int soap_read__ns1__GetEntityByRoomKeyRequest(struct soap *soap, _ns1__GetEntityByRoomKeyRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEntityByRoomKeyRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetUserNameResponse_DEFINED
#define SOAP_TYPE__ns1__GetUserNameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetUserNameResponse(struct soap*, const char*, int, const _ns1__GetUserNameResponse *, const char*);
SOAP_FMAC3 _ns1__GetUserNameResponse * SOAP_FMAC4 soap_in__ns1__GetUserNameResponse(struct soap*, const char*, _ns1__GetUserNameResponse *, const char*);
SOAP_FMAC1 _ns1__GetUserNameResponse * SOAP_FMAC2 soap_instantiate__ns1__GetUserNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetUserNameResponse * soap_new__ns1__GetUserNameResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetUserNameResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetUserNameResponse * soap_new_req__ns1__GetUserNameResponse(
	struct soap *soap,
	char *realUserName)
{	_ns1__GetUserNameResponse *_p = soap_new__ns1__GetUserNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetUserNameResponse::realUserName = realUserName;
	}
	return _p;
}

inline _ns1__GetUserNameResponse * soap_new_set__ns1__GetUserNameResponse(
	struct soap *soap,
	char *realUserName)
{	_ns1__GetUserNameResponse *_p = soap_new__ns1__GetUserNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetUserNameResponse::realUserName = realUserName;
	}
	return _p;
}

inline int soap_write__ns1__GetUserNameResponse(struct soap *soap, _ns1__GetUserNameResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUserNameResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetUserNameResponse * SOAP_FMAC4 soap_get__ns1__GetUserNameResponse(struct soap*, _ns1__GetUserNameResponse *, const char*, const char*);

inline int soap_read__ns1__GetUserNameResponse(struct soap *soap, _ns1__GetUserNameResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetUserNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetUserNameRequest_DEFINED
#define SOAP_TYPE__ns1__GetUserNameRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetUserNameRequest(struct soap*, const char*, int, const _ns1__GetUserNameRequest *, const char*);
SOAP_FMAC3 _ns1__GetUserNameRequest * SOAP_FMAC4 soap_in__ns1__GetUserNameRequest(struct soap*, const char*, _ns1__GetUserNameRequest *, const char*);
SOAP_FMAC1 _ns1__GetUserNameRequest * SOAP_FMAC2 soap_instantiate__ns1__GetUserNameRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetUserNameRequest * soap_new__ns1__GetUserNameRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetUserNameRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetUserNameRequest * soap_new_req__ns1__GetUserNameRequest(
	struct soap *soap)
{	_ns1__GetUserNameRequest *_p = soap_new__ns1__GetUserNameRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetUserNameRequest * soap_new_set__ns1__GetUserNameRequest(
	struct soap *soap)
{	_ns1__GetUserNameRequest *_p = soap_new__ns1__GetUserNameRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetUserNameRequest(struct soap *soap, _ns1__GetUserNameRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUserNameRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetUserNameRequest * SOAP_FMAC4 soap_get__ns1__GetUserNameRequest(struct soap*, _ns1__GetUserNameRequest *, const char*, const char*);

inline int soap_read__ns1__GetUserNameRequest(struct soap *soap, _ns1__GetUserNameRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetUserNameRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetWebcastURLResponse_DEFINED
#define SOAP_TYPE__ns1__GetWebcastURLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetWebcastURLResponse(struct soap*, const char*, int, const _ns1__GetWebcastURLResponse *, const char*);
SOAP_FMAC3 _ns1__GetWebcastURLResponse * SOAP_FMAC4 soap_in__ns1__GetWebcastURLResponse(struct soap*, const char*, _ns1__GetWebcastURLResponse *, const char*);
SOAP_FMAC1 _ns1__GetWebcastURLResponse * SOAP_FMAC2 soap_instantiate__ns1__GetWebcastURLResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetWebcastURLResponse * soap_new__ns1__GetWebcastURLResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetWebcastURLResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetWebcastURLResponse * soap_new_req__ns1__GetWebcastURLResponse(
	struct soap *soap)
{	_ns1__GetWebcastURLResponse *_p = soap_new__ns1__GetWebcastURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetWebcastURLResponse * soap_new_set__ns1__GetWebcastURLResponse(
	struct soap *soap,
	char *webCastURL,
	bool *hasWebCastPIN)
{	_ns1__GetWebcastURLResponse *_p = soap_new__ns1__GetWebcastURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWebcastURLResponse::webCastURL = webCastURL;
		_p->_ns1__GetWebcastURLResponse::hasWebCastPIN = hasWebCastPIN;
	}
	return _p;
}

inline int soap_write__ns1__GetWebcastURLResponse(struct soap *soap, _ns1__GetWebcastURLResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWebcastURLResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetWebcastURLResponse * SOAP_FMAC4 soap_get__ns1__GetWebcastURLResponse(struct soap*, _ns1__GetWebcastURLResponse *, const char*, const char*);

inline int soap_read__ns1__GetWebcastURLResponse(struct soap *soap, _ns1__GetWebcastURLResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetWebcastURLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetWebcastURLRequest_DEFINED
#define SOAP_TYPE__ns1__GetWebcastURLRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetWebcastURLRequest(struct soap*, const char*, int, const _ns1__GetWebcastURLRequest *, const char*);
SOAP_FMAC3 _ns1__GetWebcastURLRequest * SOAP_FMAC4 soap_in__ns1__GetWebcastURLRequest(struct soap*, const char*, _ns1__GetWebcastURLRequest *, const char*);
SOAP_FMAC1 _ns1__GetWebcastURLRequest * SOAP_FMAC2 soap_instantiate__ns1__GetWebcastURLRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetWebcastURLRequest * soap_new__ns1__GetWebcastURLRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetWebcastURLRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetWebcastURLRequest * soap_new_req__ns1__GetWebcastURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__GetWebcastURLRequest *_p = soap_new__ns1__GetWebcastURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWebcastURLRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__GetWebcastURLRequest * soap_new_set__ns1__GetWebcastURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__GetWebcastURLRequest *_p = soap_new__ns1__GetWebcastURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWebcastURLRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__GetWebcastURLRequest(struct soap *soap, _ns1__GetWebcastURLRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWebcastURLRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetWebcastURLRequest * SOAP_FMAC4 soap_get__ns1__GetWebcastURLRequest(struct soap*, _ns1__GetWebcastURLRequest *, const char*, const char*);

inline int soap_read__ns1__GetWebcastURLRequest(struct soap *soap, _ns1__GetWebcastURLRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetWebcastURLRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveWebcastPINResponse_DEFINED
#define SOAP_TYPE__ns1__RemoveWebcastPINResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveWebcastPINResponse(struct soap*, const char*, int, const _ns1__RemoveWebcastPINResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveWebcastPINResponse * SOAP_FMAC4 soap_in__ns1__RemoveWebcastPINResponse(struct soap*, const char*, _ns1__RemoveWebcastPINResponse *, const char*);
SOAP_FMAC1 _ns1__RemoveWebcastPINResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveWebcastPINResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveWebcastPINResponse * soap_new__ns1__RemoveWebcastPINResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveWebcastPINResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveWebcastPINResponse * soap_new_req__ns1__RemoveWebcastPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveWebcastPINResponse *_p = soap_new__ns1__RemoveWebcastPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveWebcastPINResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RemoveWebcastPINResponse * soap_new_set__ns1__RemoveWebcastPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveWebcastPINResponse *_p = soap_new__ns1__RemoveWebcastPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveWebcastPINResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RemoveWebcastPINResponse(struct soap *soap, _ns1__RemoveWebcastPINResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveWebcastPINResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveWebcastPINResponse * SOAP_FMAC4 soap_get__ns1__RemoveWebcastPINResponse(struct soap*, _ns1__RemoveWebcastPINResponse *, const char*, const char*);

inline int soap_read__ns1__RemoveWebcastPINResponse(struct soap *soap, _ns1__RemoveWebcastPINResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveWebcastPINResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveWebcastPINRequest_DEFINED
#define SOAP_TYPE__ns1__RemoveWebcastPINRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveWebcastPINRequest(struct soap*, const char*, int, const _ns1__RemoveWebcastPINRequest *, const char*);
SOAP_FMAC3 _ns1__RemoveWebcastPINRequest * SOAP_FMAC4 soap_in__ns1__RemoveWebcastPINRequest(struct soap*, const char*, _ns1__RemoveWebcastPINRequest *, const char*);
SOAP_FMAC1 _ns1__RemoveWebcastPINRequest * SOAP_FMAC2 soap_instantiate__ns1__RemoveWebcastPINRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveWebcastPINRequest * soap_new__ns1__RemoveWebcastPINRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveWebcastPINRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveWebcastPINRequest * soap_new_req__ns1__RemoveWebcastPINRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveWebcastPINRequest *_p = soap_new__ns1__RemoveWebcastPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveWebcastPINRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__RemoveWebcastPINRequest * soap_new_set__ns1__RemoveWebcastPINRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveWebcastPINRequest *_p = soap_new__ns1__RemoveWebcastPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveWebcastPINRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__RemoveWebcastPINRequest(struct soap *soap, _ns1__RemoveWebcastPINRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveWebcastPINRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveWebcastPINRequest * SOAP_FMAC4 soap_get__ns1__RemoveWebcastPINRequest(struct soap*, _ns1__RemoveWebcastPINRequest *, const char*, const char*);

inline int soap_read__ns1__RemoveWebcastPINRequest(struct soap *soap, _ns1__RemoveWebcastPINRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveWebcastPINRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveWebcastURLResponse_DEFINED
#define SOAP_TYPE__ns1__RemoveWebcastURLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveWebcastURLResponse(struct soap*, const char*, int, const _ns1__RemoveWebcastURLResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveWebcastURLResponse * SOAP_FMAC4 soap_in__ns1__RemoveWebcastURLResponse(struct soap*, const char*, _ns1__RemoveWebcastURLResponse *, const char*);
SOAP_FMAC1 _ns1__RemoveWebcastURLResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveWebcastURLResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveWebcastURLResponse * soap_new__ns1__RemoveWebcastURLResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveWebcastURLResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveWebcastURLResponse * soap_new_req__ns1__RemoveWebcastURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveWebcastURLResponse *_p = soap_new__ns1__RemoveWebcastURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveWebcastURLResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RemoveWebcastURLResponse * soap_new_set__ns1__RemoveWebcastURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveWebcastURLResponse *_p = soap_new__ns1__RemoveWebcastURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveWebcastURLResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RemoveWebcastURLResponse(struct soap *soap, _ns1__RemoveWebcastURLResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveWebcastURLResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveWebcastURLResponse * SOAP_FMAC4 soap_get__ns1__RemoveWebcastURLResponse(struct soap*, _ns1__RemoveWebcastURLResponse *, const char*, const char*);

inline int soap_read__ns1__RemoveWebcastURLResponse(struct soap *soap, _ns1__RemoveWebcastURLResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveWebcastURLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveWebcastURLRequest_DEFINED
#define SOAP_TYPE__ns1__RemoveWebcastURLRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveWebcastURLRequest(struct soap*, const char*, int, const _ns1__RemoveWebcastURLRequest *, const char*);
SOAP_FMAC3 _ns1__RemoveWebcastURLRequest * SOAP_FMAC4 soap_in__ns1__RemoveWebcastURLRequest(struct soap*, const char*, _ns1__RemoveWebcastURLRequest *, const char*);
SOAP_FMAC1 _ns1__RemoveWebcastURLRequest * SOAP_FMAC2 soap_instantiate__ns1__RemoveWebcastURLRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveWebcastURLRequest * soap_new__ns1__RemoveWebcastURLRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveWebcastURLRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveWebcastURLRequest * soap_new_req__ns1__RemoveWebcastURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveWebcastURLRequest *_p = soap_new__ns1__RemoveWebcastURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveWebcastURLRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__RemoveWebcastURLRequest * soap_new_set__ns1__RemoveWebcastURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveWebcastURLRequest *_p = soap_new__ns1__RemoveWebcastURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveWebcastURLRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__RemoveWebcastURLRequest(struct soap *soap, _ns1__RemoveWebcastURLRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveWebcastURLRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveWebcastURLRequest * SOAP_FMAC4 soap_get__ns1__RemoveWebcastURLRequest(struct soap*, _ns1__RemoveWebcastURLRequest *, const char*, const char*);

inline int soap_read__ns1__RemoveWebcastURLRequest(struct soap *soap, _ns1__RemoveWebcastURLRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveWebcastURLRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateWebcastPINResponse_DEFINED
#define SOAP_TYPE__ns1__CreateWebcastPINResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateWebcastPINResponse(struct soap*, const char*, int, const _ns1__CreateWebcastPINResponse *, const char*);
SOAP_FMAC3 _ns1__CreateWebcastPINResponse * SOAP_FMAC4 soap_in__ns1__CreateWebcastPINResponse(struct soap*, const char*, _ns1__CreateWebcastPINResponse *, const char*);
SOAP_FMAC1 _ns1__CreateWebcastPINResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateWebcastPINResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateWebcastPINResponse * soap_new__ns1__CreateWebcastPINResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateWebcastPINResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateWebcastPINResponse * soap_new_req__ns1__CreateWebcastPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateWebcastPINResponse *_p = soap_new__ns1__CreateWebcastPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateWebcastPINResponse::OK = OK;
	}
	return _p;
}

inline _ns1__CreateWebcastPINResponse * soap_new_set__ns1__CreateWebcastPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateWebcastPINResponse *_p = soap_new__ns1__CreateWebcastPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateWebcastPINResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__CreateWebcastPINResponse(struct soap *soap, _ns1__CreateWebcastPINResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateWebcastPINResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateWebcastPINResponse * SOAP_FMAC4 soap_get__ns1__CreateWebcastPINResponse(struct soap*, _ns1__CreateWebcastPINResponse *, const char*, const char*);

inline int soap_read__ns1__CreateWebcastPINResponse(struct soap *soap, _ns1__CreateWebcastPINResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateWebcastPINResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateWebcastPINRequest_DEFINED
#define SOAP_TYPE__ns1__CreateWebcastPINRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateWebcastPINRequest(struct soap*, const char*, int, const _ns1__CreateWebcastPINRequest *, const char*);
SOAP_FMAC3 _ns1__CreateWebcastPINRequest * SOAP_FMAC4 soap_in__ns1__CreateWebcastPINRequest(struct soap*, const char*, _ns1__CreateWebcastPINRequest *, const char*);
SOAP_FMAC1 _ns1__CreateWebcastPINRequest * SOAP_FMAC2 soap_instantiate__ns1__CreateWebcastPINRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateWebcastPINRequest * soap_new__ns1__CreateWebcastPINRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateWebcastPINRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateWebcastPINRequest * soap_new_req__ns1__CreateWebcastPINRequest(
	struct soap *soap,
	char *roomID,
	char *PIN)
{	_ns1__CreateWebcastPINRequest *_p = soap_new__ns1__CreateWebcastPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateWebcastPINRequest::roomID = roomID;
		_p->_ns1__CreateWebcastPINRequest::PIN = PIN;
	}
	return _p;
}

inline _ns1__CreateWebcastPINRequest * soap_new_set__ns1__CreateWebcastPINRequest(
	struct soap *soap,
	char *roomID,
	char *PIN)
{	_ns1__CreateWebcastPINRequest *_p = soap_new__ns1__CreateWebcastPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateWebcastPINRequest::roomID = roomID;
		_p->_ns1__CreateWebcastPINRequest::PIN = PIN;
	}
	return _p;
}

inline int soap_write__ns1__CreateWebcastPINRequest(struct soap *soap, _ns1__CreateWebcastPINRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateWebcastPINRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateWebcastPINRequest * SOAP_FMAC4 soap_get__ns1__CreateWebcastPINRequest(struct soap*, _ns1__CreateWebcastPINRequest *, const char*, const char*);

inline int soap_read__ns1__CreateWebcastPINRequest(struct soap *soap, _ns1__CreateWebcastPINRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateWebcastPINRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateWebcastURLResponse_DEFINED
#define SOAP_TYPE__ns1__CreateWebcastURLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateWebcastURLResponse(struct soap*, const char*, int, const _ns1__CreateWebcastURLResponse *, const char*);
SOAP_FMAC3 _ns1__CreateWebcastURLResponse * SOAP_FMAC4 soap_in__ns1__CreateWebcastURLResponse(struct soap*, const char*, _ns1__CreateWebcastURLResponse *, const char*);
SOAP_FMAC1 _ns1__CreateWebcastURLResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateWebcastURLResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateWebcastURLResponse * soap_new__ns1__CreateWebcastURLResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateWebcastURLResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateWebcastURLResponse * soap_new_req__ns1__CreateWebcastURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateWebcastURLResponse *_p = soap_new__ns1__CreateWebcastURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateWebcastURLResponse::OK = OK;
	}
	return _p;
}

inline _ns1__CreateWebcastURLResponse * soap_new_set__ns1__CreateWebcastURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateWebcastURLResponse *_p = soap_new__ns1__CreateWebcastURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateWebcastURLResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__CreateWebcastURLResponse(struct soap *soap, _ns1__CreateWebcastURLResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateWebcastURLResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateWebcastURLResponse * SOAP_FMAC4 soap_get__ns1__CreateWebcastURLResponse(struct soap*, _ns1__CreateWebcastURLResponse *, const char*, const char*);

inline int soap_read__ns1__CreateWebcastURLResponse(struct soap *soap, _ns1__CreateWebcastURLResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateWebcastURLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateWebcastURLRequest_DEFINED
#define SOAP_TYPE__ns1__CreateWebcastURLRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateWebcastURLRequest(struct soap*, const char*, int, const _ns1__CreateWebcastURLRequest *, const char*);
SOAP_FMAC3 _ns1__CreateWebcastURLRequest * SOAP_FMAC4 soap_in__ns1__CreateWebcastURLRequest(struct soap*, const char*, _ns1__CreateWebcastURLRequest *, const char*);
SOAP_FMAC1 _ns1__CreateWebcastURLRequest * SOAP_FMAC2 soap_instantiate__ns1__CreateWebcastURLRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateWebcastURLRequest * soap_new__ns1__CreateWebcastURLRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateWebcastURLRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateWebcastURLRequest * soap_new_req__ns1__CreateWebcastURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__CreateWebcastURLRequest *_p = soap_new__ns1__CreateWebcastURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateWebcastURLRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__CreateWebcastURLRequest * soap_new_set__ns1__CreateWebcastURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__CreateWebcastURLRequest *_p = soap_new__ns1__CreateWebcastURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateWebcastURLRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__CreateWebcastURLRequest(struct soap *soap, _ns1__CreateWebcastURLRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateWebcastURLRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateWebcastURLRequest * SOAP_FMAC4 soap_get__ns1__CreateWebcastURLRequest(struct soap*, _ns1__CreateWebcastURLRequest *, const char*, const char*);

inline int soap_read__ns1__CreateWebcastURLRequest(struct soap *soap, _ns1__CreateWebcastURLRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateWebcastURLRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StopRecordingResponse_DEFINED
#define SOAP_TYPE__ns1__StopRecordingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopRecordingResponse(struct soap*, const char*, int, const _ns1__StopRecordingResponse *, const char*);
SOAP_FMAC3 _ns1__StopRecordingResponse * SOAP_FMAC4 soap_in__ns1__StopRecordingResponse(struct soap*, const char*, _ns1__StopRecordingResponse *, const char*);
SOAP_FMAC1 _ns1__StopRecordingResponse * SOAP_FMAC2 soap_instantiate__ns1__StopRecordingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopRecordingResponse * soap_new__ns1__StopRecordingResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StopRecordingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__StopRecordingResponse * soap_new_req__ns1__StopRecordingResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StopRecordingResponse *_p = soap_new__ns1__StopRecordingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopRecordingResponse::OK = OK;
	}
	return _p;
}

inline _ns1__StopRecordingResponse * soap_new_set__ns1__StopRecordingResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StopRecordingResponse *_p = soap_new__ns1__StopRecordingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopRecordingResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__StopRecordingResponse(struct soap *soap, _ns1__StopRecordingResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StopRecordingResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StopRecordingResponse * SOAP_FMAC4 soap_get__ns1__StopRecordingResponse(struct soap*, _ns1__StopRecordingResponse *, const char*, const char*);

inline int soap_read__ns1__StopRecordingResponse(struct soap *soap, _ns1__StopRecordingResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StopRecordingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StopRecordingRequest_DEFINED
#define SOAP_TYPE__ns1__StopRecordingRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopRecordingRequest(struct soap*, const char*, int, const _ns1__StopRecordingRequest *, const char*);
SOAP_FMAC3 _ns1__StopRecordingRequest * SOAP_FMAC4 soap_in__ns1__StopRecordingRequest(struct soap*, const char*, _ns1__StopRecordingRequest *, const char*);
SOAP_FMAC1 _ns1__StopRecordingRequest * SOAP_FMAC2 soap_instantiate__ns1__StopRecordingRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopRecordingRequest * soap_new__ns1__StopRecordingRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StopRecordingRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__StopRecordingRequest * soap_new_req__ns1__StopRecordingRequest(
	struct soap *soap,
	char *conferenceID,
	int recorderID)
{	_ns1__StopRecordingRequest *_p = soap_new__ns1__StopRecordingRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopRecordingRequest::conferenceID = conferenceID;
		_p->_ns1__StopRecordingRequest::recorderID = recorderID;
	}
	return _p;
}

inline _ns1__StopRecordingRequest * soap_new_set__ns1__StopRecordingRequest(
	struct soap *soap,
	char *conferenceID,
	int recorderID,
	char *moderatorPIN)
{	_ns1__StopRecordingRequest *_p = soap_new__ns1__StopRecordingRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopRecordingRequest::conferenceID = conferenceID;
		_p->_ns1__StopRecordingRequest::recorderID = recorderID;
		_p->_ns1__StopRecordingRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__StopRecordingRequest(struct soap *soap, _ns1__StopRecordingRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StopRecordingRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StopRecordingRequest * SOAP_FMAC4 soap_get__ns1__StopRecordingRequest(struct soap*, _ns1__StopRecordingRequest *, const char*, const char*);

inline int soap_read__ns1__StopRecordingRequest(struct soap *soap, _ns1__StopRecordingRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StopRecordingRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ResumeRecordingResponse_DEFINED
#define SOAP_TYPE__ns1__ResumeRecordingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ResumeRecordingResponse(struct soap*, const char*, int, const _ns1__ResumeRecordingResponse *, const char*);
SOAP_FMAC3 _ns1__ResumeRecordingResponse * SOAP_FMAC4 soap_in__ns1__ResumeRecordingResponse(struct soap*, const char*, _ns1__ResumeRecordingResponse *, const char*);
SOAP_FMAC1 _ns1__ResumeRecordingResponse * SOAP_FMAC2 soap_instantiate__ns1__ResumeRecordingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ResumeRecordingResponse * soap_new__ns1__ResumeRecordingResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__ResumeRecordingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ResumeRecordingResponse * soap_new_req__ns1__ResumeRecordingResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__ResumeRecordingResponse *_p = soap_new__ns1__ResumeRecordingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ResumeRecordingResponse::OK = OK;
	}
	return _p;
}

inline _ns1__ResumeRecordingResponse * soap_new_set__ns1__ResumeRecordingResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__ResumeRecordingResponse *_p = soap_new__ns1__ResumeRecordingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ResumeRecordingResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__ResumeRecordingResponse(struct soap *soap, _ns1__ResumeRecordingResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResumeRecordingResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ResumeRecordingResponse * SOAP_FMAC4 soap_get__ns1__ResumeRecordingResponse(struct soap*, _ns1__ResumeRecordingResponse *, const char*, const char*);

inline int soap_read__ns1__ResumeRecordingResponse(struct soap *soap, _ns1__ResumeRecordingResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ResumeRecordingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ResumeRecordingRequest_DEFINED
#define SOAP_TYPE__ns1__ResumeRecordingRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ResumeRecordingRequest(struct soap*, const char*, int, const _ns1__ResumeRecordingRequest *, const char*);
SOAP_FMAC3 _ns1__ResumeRecordingRequest * SOAP_FMAC4 soap_in__ns1__ResumeRecordingRequest(struct soap*, const char*, _ns1__ResumeRecordingRequest *, const char*);
SOAP_FMAC1 _ns1__ResumeRecordingRequest * SOAP_FMAC2 soap_instantiate__ns1__ResumeRecordingRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ResumeRecordingRequest * soap_new__ns1__ResumeRecordingRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__ResumeRecordingRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__ResumeRecordingRequest * soap_new_req__ns1__ResumeRecordingRequest(
	struct soap *soap,
	char *conferenceID,
	int recorderID)
{	_ns1__ResumeRecordingRequest *_p = soap_new__ns1__ResumeRecordingRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ResumeRecordingRequest::conferenceID = conferenceID;
		_p->_ns1__ResumeRecordingRequest::recorderID = recorderID;
	}
	return _p;
}

inline _ns1__ResumeRecordingRequest * soap_new_set__ns1__ResumeRecordingRequest(
	struct soap *soap,
	char *conferenceID,
	int recorderID,
	char *moderatorPIN)
{	_ns1__ResumeRecordingRequest *_p = soap_new__ns1__ResumeRecordingRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ResumeRecordingRequest::conferenceID = conferenceID;
		_p->_ns1__ResumeRecordingRequest::recorderID = recorderID;
		_p->_ns1__ResumeRecordingRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__ResumeRecordingRequest(struct soap *soap, _ns1__ResumeRecordingRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResumeRecordingRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ResumeRecordingRequest * SOAP_FMAC4 soap_get__ns1__ResumeRecordingRequest(struct soap*, _ns1__ResumeRecordingRequest *, const char*, const char*);

inline int soap_read__ns1__ResumeRecordingRequest(struct soap *soap, _ns1__ResumeRecordingRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ResumeRecordingRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PauseRecordingResponse_DEFINED
#define SOAP_TYPE__ns1__PauseRecordingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PauseRecordingResponse(struct soap*, const char*, int, const _ns1__PauseRecordingResponse *, const char*);
SOAP_FMAC3 _ns1__PauseRecordingResponse * SOAP_FMAC4 soap_in__ns1__PauseRecordingResponse(struct soap*, const char*, _ns1__PauseRecordingResponse *, const char*);
SOAP_FMAC1 _ns1__PauseRecordingResponse * SOAP_FMAC2 soap_instantiate__ns1__PauseRecordingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PauseRecordingResponse * soap_new__ns1__PauseRecordingResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__PauseRecordingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__PauseRecordingResponse * soap_new_req__ns1__PauseRecordingResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__PauseRecordingResponse *_p = soap_new__ns1__PauseRecordingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PauseRecordingResponse::OK = OK;
	}
	return _p;
}

inline _ns1__PauseRecordingResponse * soap_new_set__ns1__PauseRecordingResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__PauseRecordingResponse *_p = soap_new__ns1__PauseRecordingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PauseRecordingResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__PauseRecordingResponse(struct soap *soap, _ns1__PauseRecordingResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PauseRecordingResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PauseRecordingResponse * SOAP_FMAC4 soap_get__ns1__PauseRecordingResponse(struct soap*, _ns1__PauseRecordingResponse *, const char*, const char*);

inline int soap_read__ns1__PauseRecordingResponse(struct soap *soap, _ns1__PauseRecordingResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PauseRecordingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PauseRecordingRequest_DEFINED
#define SOAP_TYPE__ns1__PauseRecordingRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PauseRecordingRequest(struct soap*, const char*, int, const _ns1__PauseRecordingRequest *, const char*);
SOAP_FMAC3 _ns1__PauseRecordingRequest * SOAP_FMAC4 soap_in__ns1__PauseRecordingRequest(struct soap*, const char*, _ns1__PauseRecordingRequest *, const char*);
SOAP_FMAC1 _ns1__PauseRecordingRequest * SOAP_FMAC2 soap_instantiate__ns1__PauseRecordingRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PauseRecordingRequest * soap_new__ns1__PauseRecordingRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__PauseRecordingRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__PauseRecordingRequest * soap_new_req__ns1__PauseRecordingRequest(
	struct soap *soap,
	char *conferenceID,
	int recorderID)
{	_ns1__PauseRecordingRequest *_p = soap_new__ns1__PauseRecordingRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PauseRecordingRequest::conferenceID = conferenceID;
		_p->_ns1__PauseRecordingRequest::recorderID = recorderID;
	}
	return _p;
}

inline _ns1__PauseRecordingRequest * soap_new_set__ns1__PauseRecordingRequest(
	struct soap *soap,
	char *conferenceID,
	int recorderID,
	char *moderatorPIN)
{	_ns1__PauseRecordingRequest *_p = soap_new__ns1__PauseRecordingRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PauseRecordingRequest::conferenceID = conferenceID;
		_p->_ns1__PauseRecordingRequest::recorderID = recorderID;
		_p->_ns1__PauseRecordingRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__PauseRecordingRequest(struct soap *soap, _ns1__PauseRecordingRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PauseRecordingRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PauseRecordingRequest * SOAP_FMAC4 soap_get__ns1__PauseRecordingRequest(struct soap*, _ns1__PauseRecordingRequest *, const char*, const char*);

inline int soap_read__ns1__PauseRecordingRequest(struct soap *soap, _ns1__PauseRecordingRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PauseRecordingRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPortalVersionResponse_DEFINED
#define SOAP_TYPE__ns1__GetPortalVersionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPortalVersionResponse(struct soap*, const char*, int, const _ns1__GetPortalVersionResponse *, const char*);
SOAP_FMAC3 _ns1__GetPortalVersionResponse * SOAP_FMAC4 soap_in__ns1__GetPortalVersionResponse(struct soap*, const char*, _ns1__GetPortalVersionResponse *, const char*);
SOAP_FMAC1 _ns1__GetPortalVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPortalVersionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPortalVersionResponse * soap_new__ns1__GetPortalVersionResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetPortalVersionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPortalVersionResponse * soap_new_req__ns1__GetPortalVersionResponse(
	struct soap *soap,
	char *portalVersion)
{	_ns1__GetPortalVersionResponse *_p = soap_new__ns1__GetPortalVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPortalVersionResponse::portalVersion = portalVersion;
	}
	return _p;
}

inline _ns1__GetPortalVersionResponse * soap_new_set__ns1__GetPortalVersionResponse(
	struct soap *soap,
	char *portalVersion)
{	_ns1__GetPortalVersionResponse *_p = soap_new__ns1__GetPortalVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetPortalVersionResponse::portalVersion = portalVersion;
	}
	return _p;
}

inline int soap_write__ns1__GetPortalVersionResponse(struct soap *soap, _ns1__GetPortalVersionResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortalVersionResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPortalVersionResponse * SOAP_FMAC4 soap_get__ns1__GetPortalVersionResponse(struct soap*, _ns1__GetPortalVersionResponse *, const char*, const char*);

inline int soap_read__ns1__GetPortalVersionResponse(struct soap *soap, _ns1__GetPortalVersionResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPortalVersionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetPortalVersionRequest_DEFINED
#define SOAP_TYPE__ns1__GetPortalVersionRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPortalVersionRequest(struct soap*, const char*, int, const _ns1__GetPortalVersionRequest *, const char*);
SOAP_FMAC3 _ns1__GetPortalVersionRequest * SOAP_FMAC4 soap_in__ns1__GetPortalVersionRequest(struct soap*, const char*, _ns1__GetPortalVersionRequest *, const char*);
SOAP_FMAC1 _ns1__GetPortalVersionRequest * SOAP_FMAC2 soap_instantiate__ns1__GetPortalVersionRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetPortalVersionRequest * soap_new__ns1__GetPortalVersionRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetPortalVersionRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetPortalVersionRequest * soap_new_req__ns1__GetPortalVersionRequest(
	struct soap *soap)
{	_ns1__GetPortalVersionRequest *_p = soap_new__ns1__GetPortalVersionRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetPortalVersionRequest * soap_new_set__ns1__GetPortalVersionRequest(
	struct soap *soap)
{	_ns1__GetPortalVersionRequest *_p = soap_new__ns1__GetPortalVersionRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetPortalVersionRequest(struct soap *soap, _ns1__GetPortalVersionRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortalVersionRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetPortalVersionRequest * SOAP_FMAC4 soap_get__ns1__GetPortalVersionRequest(struct soap*, _ns1__GetPortalVersionRequest *, const char*, const char*);

inline int soap_read__ns1__GetPortalVersionRequest(struct soap *soap, _ns1__GetPortalVersionRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetPortalVersionRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StartRecordingResponse_DEFINED
#define SOAP_TYPE__ns1__StartRecordingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartRecordingResponse(struct soap*, const char*, int, const _ns1__StartRecordingResponse *, const char*);
SOAP_FMAC3 _ns1__StartRecordingResponse * SOAP_FMAC4 soap_in__ns1__StartRecordingResponse(struct soap*, const char*, _ns1__StartRecordingResponse *, const char*);
SOAP_FMAC1 _ns1__StartRecordingResponse * SOAP_FMAC2 soap_instantiate__ns1__StartRecordingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StartRecordingResponse * soap_new__ns1__StartRecordingResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StartRecordingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__StartRecordingResponse * soap_new_req__ns1__StartRecordingResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StartRecordingResponse *_p = soap_new__ns1__StartRecordingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartRecordingResponse::OK = OK;
	}
	return _p;
}

inline _ns1__StartRecordingResponse * soap_new_set__ns1__StartRecordingResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StartRecordingResponse *_p = soap_new__ns1__StartRecordingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartRecordingResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__StartRecordingResponse(struct soap *soap, _ns1__StartRecordingResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartRecordingResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StartRecordingResponse * SOAP_FMAC4 soap_get__ns1__StartRecordingResponse(struct soap*, _ns1__StartRecordingResponse *, const char*, const char*);

inline int soap_read__ns1__StartRecordingResponse(struct soap *soap, _ns1__StartRecordingResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StartRecordingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StartRecordingRequest_DEFINED
#define SOAP_TYPE__ns1__StartRecordingRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartRecordingRequest(struct soap*, const char*, int, const _ns1__StartRecordingRequest *, const char*);
SOAP_FMAC3 _ns1__StartRecordingRequest * SOAP_FMAC4 soap_in__ns1__StartRecordingRequest(struct soap*, const char*, _ns1__StartRecordingRequest *, const char*);
SOAP_FMAC1 _ns1__StartRecordingRequest * SOAP_FMAC2 soap_instantiate__ns1__StartRecordingRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StartRecordingRequest * soap_new__ns1__StartRecordingRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StartRecordingRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__StartRecordingRequest * soap_new_req__ns1__StartRecordingRequest(
	struct soap *soap,
	char *conferenceID,
	char *recorderPrefix,
	bool webcast)
{	_ns1__StartRecordingRequest *_p = soap_new__ns1__StartRecordingRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartRecordingRequest::conferenceID = conferenceID;
		_p->_ns1__StartRecordingRequest::recorderPrefix = recorderPrefix;
		_p->_ns1__StartRecordingRequest::webcast = webcast;
	}
	return _p;
}

inline _ns1__StartRecordingRequest * soap_new_set__ns1__StartRecordingRequest(
	struct soap *soap,
	char *conferenceID,
	char *recorderPrefix,
	bool webcast,
	char *moderatorPIN)
{	_ns1__StartRecordingRequest *_p = soap_new__ns1__StartRecordingRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartRecordingRequest::conferenceID = conferenceID;
		_p->_ns1__StartRecordingRequest::recorderPrefix = recorderPrefix;
		_p->_ns1__StartRecordingRequest::webcast = webcast;
		_p->_ns1__StartRecordingRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__StartRecordingRequest(struct soap *soap, _ns1__StartRecordingRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartRecordingRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StartRecordingRequest * SOAP_FMAC4 soap_get__ns1__StartRecordingRequest(struct soap*, _ns1__StartRecordingRequest *, const char*, const char*);

inline int soap_read__ns1__StartRecordingRequest(struct soap *soap, _ns1__StartRecordingRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StartRecordingRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRecordingProfilesResponse_DEFINED
#define SOAP_TYPE__ns1__GetRecordingProfilesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRecordingProfilesResponse(struct soap*, const char*, int, const _ns1__GetRecordingProfilesResponse *, const char*);
SOAP_FMAC3 _ns1__GetRecordingProfilesResponse * SOAP_FMAC4 soap_in__ns1__GetRecordingProfilesResponse(struct soap*, const char*, _ns1__GetRecordingProfilesResponse *, const char*);
SOAP_FMAC1 _ns1__GetRecordingProfilesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetRecordingProfilesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRecordingProfilesResponse * soap_new__ns1__GetRecordingProfilesResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetRecordingProfilesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRecordingProfilesResponse * soap_new_req__ns1__GetRecordingProfilesResponse(
	struct soap *soap,
	int total,
	int __sizerecorder,
	ns1__Recorder **recorder)
{	_ns1__GetRecordingProfilesResponse *_p = soap_new__ns1__GetRecordingProfilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRecordingProfilesResponse::total = total;
		_p->_ns1__GetRecordingProfilesResponse::__sizerecorder = __sizerecorder;
		_p->_ns1__GetRecordingProfilesResponse::recorder = recorder;
	}
	return _p;
}

inline _ns1__GetRecordingProfilesResponse * soap_new_set__ns1__GetRecordingProfilesResponse(
	struct soap *soap,
	int total,
	int __sizerecorder,
	ns1__Recorder **recorder)
{	_ns1__GetRecordingProfilesResponse *_p = soap_new__ns1__GetRecordingProfilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRecordingProfilesResponse::total = total;
		_p->_ns1__GetRecordingProfilesResponse::__sizerecorder = __sizerecorder;
		_p->_ns1__GetRecordingProfilesResponse::recorder = recorder;
	}
	return _p;
}

inline int soap_write__ns1__GetRecordingProfilesResponse(struct soap *soap, _ns1__GetRecordingProfilesResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecordingProfilesResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRecordingProfilesResponse * SOAP_FMAC4 soap_get__ns1__GetRecordingProfilesResponse(struct soap*, _ns1__GetRecordingProfilesResponse *, const char*, const char*);

inline int soap_read__ns1__GetRecordingProfilesResponse(struct soap *soap, _ns1__GetRecordingProfilesResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRecordingProfilesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRecordingProfilesRequest_DEFINED
#define SOAP_TYPE__ns1__GetRecordingProfilesRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRecordingProfilesRequest(struct soap*, const char*, int, const _ns1__GetRecordingProfilesRequest *, const char*);
SOAP_FMAC3 _ns1__GetRecordingProfilesRequest * SOAP_FMAC4 soap_in__ns1__GetRecordingProfilesRequest(struct soap*, const char*, _ns1__GetRecordingProfilesRequest *, const char*);
SOAP_FMAC1 _ns1__GetRecordingProfilesRequest * SOAP_FMAC2 soap_instantiate__ns1__GetRecordingProfilesRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRecordingProfilesRequest * soap_new__ns1__GetRecordingProfilesRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetRecordingProfilesRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRecordingProfilesRequest * soap_new_req__ns1__GetRecordingProfilesRequest(
	struct soap *soap)
{	_ns1__GetRecordingProfilesRequest *_p = soap_new__ns1__GetRecordingProfilesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRecordingProfilesRequest * soap_new_set__ns1__GetRecordingProfilesRequest(
	struct soap *soap)
{	_ns1__GetRecordingProfilesRequest *_p = soap_new__ns1__GetRecordingProfilesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetRecordingProfilesRequest(struct soap *soap, _ns1__GetRecordingProfilesRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecordingProfilesRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRecordingProfilesRequest * SOAP_FMAC4 soap_get__ns1__GetRecordingProfilesRequest(struct soap*, _ns1__GetRecordingProfilesRequest *, const char*, const char*);

inline int soap_read__ns1__GetRecordingProfilesRequest(struct soap *soap, _ns1__GetRecordingProfilesRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRecordingProfilesRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetMemberModeResponse_DEFINED
#define SOAP_TYPE__ns1__SetMemberModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMemberModeResponse(struct soap*, const char*, int, const _ns1__SetMemberModeResponse *, const char*);
SOAP_FMAC3 _ns1__SetMemberModeResponse * SOAP_FMAC4 soap_in__ns1__SetMemberModeResponse(struct soap*, const char*, _ns1__SetMemberModeResponse *, const char*);
SOAP_FMAC1 _ns1__SetMemberModeResponse * SOAP_FMAC2 soap_instantiate__ns1__SetMemberModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetMemberModeResponse * soap_new__ns1__SetMemberModeResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SetMemberModeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetMemberModeResponse * soap_new_req__ns1__SetMemberModeResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__SetMemberModeResponse *_p = soap_new__ns1__SetMemberModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetMemberModeResponse::OK = OK;
	}
	return _p;
}

inline _ns1__SetMemberModeResponse * soap_new_set__ns1__SetMemberModeResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__SetMemberModeResponse *_p = soap_new__ns1__SetMemberModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetMemberModeResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__SetMemberModeResponse(struct soap *soap, _ns1__SetMemberModeResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMemberModeResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetMemberModeResponse * SOAP_FMAC4 soap_get__ns1__SetMemberModeResponse(struct soap*, _ns1__SetMemberModeResponse *, const char*, const char*);

inline int soap_read__ns1__SetMemberModeResponse(struct soap *soap, _ns1__SetMemberModeResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetMemberModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetMemberModeRequest_DEFINED
#define SOAP_TYPE__ns1__SetMemberModeRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMemberModeRequest(struct soap*, const char*, int, const _ns1__SetMemberModeRequest *, const char*);
SOAP_FMAC3 _ns1__SetMemberModeRequest * SOAP_FMAC4 soap_in__ns1__SetMemberModeRequest(struct soap*, const char*, _ns1__SetMemberModeRequest *, const char*);
SOAP_FMAC1 _ns1__SetMemberModeRequest * SOAP_FMAC2 soap_instantiate__ns1__SetMemberModeRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetMemberModeRequest * soap_new__ns1__SetMemberModeRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SetMemberModeRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetMemberModeRequest * soap_new_req__ns1__SetMemberModeRequest(
	struct soap *soap,
	enum _ns1__MemberMode MemberMode)
{	_ns1__SetMemberModeRequest *_p = soap_new__ns1__SetMemberModeRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetMemberModeRequest::MemberMode = MemberMode;
	}
	return _p;
}

inline _ns1__SetMemberModeRequest * soap_new_set__ns1__SetMemberModeRequest(
	struct soap *soap,
	enum _ns1__MemberMode MemberMode)
{	_ns1__SetMemberModeRequest *_p = soap_new__ns1__SetMemberModeRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetMemberModeRequest::MemberMode = MemberMode;
	}
	return _p;
}

inline int soap_write__ns1__SetMemberModeRequest(struct soap *soap, _ns1__SetMemberModeRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMemberModeRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetMemberModeRequest * SOAP_FMAC4 soap_get__ns1__SetMemberModeRequest(struct soap*, _ns1__SetMemberModeRequest *, const char*, const char*);

inline int soap_read__ns1__SetMemberModeRequest(struct soap *soap, _ns1__SetMemberModeRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetMemberModeRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UnlockRoomResponse_DEFINED
#define SOAP_TYPE__ns1__UnlockRoomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UnlockRoomResponse(struct soap*, const char*, int, const _ns1__UnlockRoomResponse *, const char*);
SOAP_FMAC3 _ns1__UnlockRoomResponse * SOAP_FMAC4 soap_in__ns1__UnlockRoomResponse(struct soap*, const char*, _ns1__UnlockRoomResponse *, const char*);
SOAP_FMAC1 _ns1__UnlockRoomResponse * SOAP_FMAC2 soap_instantiate__ns1__UnlockRoomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UnlockRoomResponse * soap_new__ns1__UnlockRoomResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__UnlockRoomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UnlockRoomResponse * soap_new_req__ns1__UnlockRoomResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UnlockRoomResponse *_p = soap_new__ns1__UnlockRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnlockRoomResponse::OK = OK;
	}
	return _p;
}

inline _ns1__UnlockRoomResponse * soap_new_set__ns1__UnlockRoomResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UnlockRoomResponse *_p = soap_new__ns1__UnlockRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnlockRoomResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__UnlockRoomResponse(struct soap *soap, _ns1__UnlockRoomResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnlockRoomResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UnlockRoomResponse * SOAP_FMAC4 soap_get__ns1__UnlockRoomResponse(struct soap*, _ns1__UnlockRoomResponse *, const char*, const char*);

inline int soap_read__ns1__UnlockRoomResponse(struct soap *soap, _ns1__UnlockRoomResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UnlockRoomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UnlockRoomRequest_DEFINED
#define SOAP_TYPE__ns1__UnlockRoomRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UnlockRoomRequest(struct soap*, const char*, int, const _ns1__UnlockRoomRequest *, const char*);
SOAP_FMAC3 _ns1__UnlockRoomRequest * SOAP_FMAC4 soap_in__ns1__UnlockRoomRequest(struct soap*, const char*, _ns1__UnlockRoomRequest *, const char*);
SOAP_FMAC1 _ns1__UnlockRoomRequest * SOAP_FMAC2 soap_instantiate__ns1__UnlockRoomRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UnlockRoomRequest * soap_new__ns1__UnlockRoomRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__UnlockRoomRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__UnlockRoomRequest * soap_new_req__ns1__UnlockRoomRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__UnlockRoomRequest *_p = soap_new__ns1__UnlockRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnlockRoomRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__UnlockRoomRequest * soap_new_set__ns1__UnlockRoomRequest(
	struct soap *soap,
	char *roomID,
	char *moderatorPIN)
{	_ns1__UnlockRoomRequest *_p = soap_new__ns1__UnlockRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnlockRoomRequest::roomID = roomID;
		_p->_ns1__UnlockRoomRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__UnlockRoomRequest(struct soap *soap, _ns1__UnlockRoomRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnlockRoomRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UnlockRoomRequest * SOAP_FMAC4 soap_get__ns1__UnlockRoomRequest(struct soap*, _ns1__UnlockRoomRequest *, const char*, const char*);

inline int soap_read__ns1__UnlockRoomRequest(struct soap *soap, _ns1__UnlockRoomRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UnlockRoomRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LockRoomResponse_DEFINED
#define SOAP_TYPE__ns1__LockRoomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LockRoomResponse(struct soap*, const char*, int, const _ns1__LockRoomResponse *, const char*);
SOAP_FMAC3 _ns1__LockRoomResponse * SOAP_FMAC4 soap_in__ns1__LockRoomResponse(struct soap*, const char*, _ns1__LockRoomResponse *, const char*);
SOAP_FMAC1 _ns1__LockRoomResponse * SOAP_FMAC2 soap_instantiate__ns1__LockRoomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LockRoomResponse * soap_new__ns1__LockRoomResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LockRoomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LockRoomResponse * soap_new_req__ns1__LockRoomResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__LockRoomResponse *_p = soap_new__ns1__LockRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LockRoomResponse::OK = OK;
	}
	return _p;
}

inline _ns1__LockRoomResponse * soap_new_set__ns1__LockRoomResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__LockRoomResponse *_p = soap_new__ns1__LockRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LockRoomResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__LockRoomResponse(struct soap *soap, _ns1__LockRoomResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LockRoomResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LockRoomResponse * SOAP_FMAC4 soap_get__ns1__LockRoomResponse(struct soap*, _ns1__LockRoomResponse *, const char*, const char*);

inline int soap_read__ns1__LockRoomResponse(struct soap *soap, _ns1__LockRoomResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LockRoomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LockRoomRequest_DEFINED
#define SOAP_TYPE__ns1__LockRoomRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LockRoomRequest(struct soap*, const char*, int, const _ns1__LockRoomRequest *, const char*);
SOAP_FMAC3 _ns1__LockRoomRequest * SOAP_FMAC4 soap_in__ns1__LockRoomRequest(struct soap*, const char*, _ns1__LockRoomRequest *, const char*);
SOAP_FMAC1 _ns1__LockRoomRequest * SOAP_FMAC2 soap_instantiate__ns1__LockRoomRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LockRoomRequest * soap_new__ns1__LockRoomRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LockRoomRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__LockRoomRequest * soap_new_req__ns1__LockRoomRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__LockRoomRequest *_p = soap_new__ns1__LockRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LockRoomRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__LockRoomRequest * soap_new_set__ns1__LockRoomRequest(
	struct soap *soap,
	char *roomID,
	char *moderatorPIN)
{	_ns1__LockRoomRequest *_p = soap_new__ns1__LockRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LockRoomRequest::roomID = roomID;
		_p->_ns1__LockRoomRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__LockRoomRequest(struct soap *soap, _ns1__LockRoomRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LockRoomRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LockRoomRequest * SOAP_FMAC4 soap_get__ns1__LockRoomRequest(struct soap*, _ns1__LockRoomRequest *, const char*, const char*);

inline int soap_read__ns1__LockRoomRequest(struct soap *soap, _ns1__LockRoomRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LockRoomRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdateLanguageResponse_DEFINED
#define SOAP_TYPE__ns1__UpdateLanguageResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdateLanguageResponse(struct soap*, const char*, int, const _ns1__UpdateLanguageResponse *, const char*);
SOAP_FMAC3 _ns1__UpdateLanguageResponse * SOAP_FMAC4 soap_in__ns1__UpdateLanguageResponse(struct soap*, const char*, _ns1__UpdateLanguageResponse *, const char*);
SOAP_FMAC1 _ns1__UpdateLanguageResponse * SOAP_FMAC2 soap_instantiate__ns1__UpdateLanguageResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdateLanguageResponse * soap_new__ns1__UpdateLanguageResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__UpdateLanguageResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdateLanguageResponse * soap_new_req__ns1__UpdateLanguageResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UpdateLanguageResponse *_p = soap_new__ns1__UpdateLanguageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateLanguageResponse::OK = OK;
	}
	return _p;
}

inline _ns1__UpdateLanguageResponse * soap_new_set__ns1__UpdateLanguageResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UpdateLanguageResponse *_p = soap_new__ns1__UpdateLanguageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateLanguageResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__UpdateLanguageResponse(struct soap *soap, _ns1__UpdateLanguageResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateLanguageResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdateLanguageResponse * SOAP_FMAC4 soap_get__ns1__UpdateLanguageResponse(struct soap*, _ns1__UpdateLanguageResponse *, const char*, const char*);

inline int soap_read__ns1__UpdateLanguageResponse(struct soap *soap, _ns1__UpdateLanguageResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdateLanguageResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdateLanguageRequest_DEFINED
#define SOAP_TYPE__ns1__UpdateLanguageRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdateLanguageRequest(struct soap*, const char*, int, const _ns1__UpdateLanguageRequest *, const char*);
SOAP_FMAC3 _ns1__UpdateLanguageRequest * SOAP_FMAC4 soap_in__ns1__UpdateLanguageRequest(struct soap*, const char*, _ns1__UpdateLanguageRequest *, const char*);
SOAP_FMAC1 _ns1__UpdateLanguageRequest * SOAP_FMAC2 soap_instantiate__ns1__UpdateLanguageRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdateLanguageRequest * soap_new__ns1__UpdateLanguageRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__UpdateLanguageRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdateLanguageRequest * soap_new_req__ns1__UpdateLanguageRequest(
	struct soap *soap,
	enum _ns1__Language Language)
{	_ns1__UpdateLanguageRequest *_p = soap_new__ns1__UpdateLanguageRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateLanguageRequest::Language = Language;
	}
	return _p;
}

inline _ns1__UpdateLanguageRequest * soap_new_set__ns1__UpdateLanguageRequest(
	struct soap *soap,
	enum _ns1__Language Language)
{	_ns1__UpdateLanguageRequest *_p = soap_new__ns1__UpdateLanguageRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateLanguageRequest::Language = Language;
	}
	return _p;
}

inline int soap_write__ns1__UpdateLanguageRequest(struct soap *soap, _ns1__UpdateLanguageRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdateLanguageRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdateLanguageRequest * SOAP_FMAC4 soap_get__ns1__UpdateLanguageRequest(struct soap*, _ns1__UpdateLanguageRequest *, const char*, const char*);

inline int soap_read__ns1__UpdateLanguageRequest(struct soap *soap, _ns1__UpdateLanguageRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdateLanguageRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdatePasswordResponse_DEFINED
#define SOAP_TYPE__ns1__UpdatePasswordResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdatePasswordResponse(struct soap*, const char*, int, const _ns1__UpdatePasswordResponse *, const char*);
SOAP_FMAC3 _ns1__UpdatePasswordResponse * SOAP_FMAC4 soap_in__ns1__UpdatePasswordResponse(struct soap*, const char*, _ns1__UpdatePasswordResponse *, const char*);
SOAP_FMAC1 _ns1__UpdatePasswordResponse * SOAP_FMAC2 soap_instantiate__ns1__UpdatePasswordResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdatePasswordResponse * soap_new__ns1__UpdatePasswordResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__UpdatePasswordResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdatePasswordResponse * soap_new_req__ns1__UpdatePasswordResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UpdatePasswordResponse *_p = soap_new__ns1__UpdatePasswordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdatePasswordResponse::OK = OK;
	}
	return _p;
}

inline _ns1__UpdatePasswordResponse * soap_new_set__ns1__UpdatePasswordResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UpdatePasswordResponse *_p = soap_new__ns1__UpdatePasswordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdatePasswordResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__UpdatePasswordResponse(struct soap *soap, _ns1__UpdatePasswordResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdatePasswordResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdatePasswordResponse * SOAP_FMAC4 soap_get__ns1__UpdatePasswordResponse(struct soap*, _ns1__UpdatePasswordResponse *, const char*, const char*);

inline int soap_read__ns1__UpdatePasswordResponse(struct soap *soap, _ns1__UpdatePasswordResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdatePasswordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdatePasswordRequest_DEFINED
#define SOAP_TYPE__ns1__UpdatePasswordRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdatePasswordRequest(struct soap*, const char*, int, const _ns1__UpdatePasswordRequest *, const char*);
SOAP_FMAC3 _ns1__UpdatePasswordRequest * SOAP_FMAC4 soap_in__ns1__UpdatePasswordRequest(struct soap*, const char*, _ns1__UpdatePasswordRequest *, const char*);
SOAP_FMAC1 _ns1__UpdatePasswordRequest * SOAP_FMAC2 soap_instantiate__ns1__UpdatePasswordRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdatePasswordRequest * soap_new__ns1__UpdatePasswordRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__UpdatePasswordRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdatePasswordRequest * soap_new_req__ns1__UpdatePasswordRequest(
	struct soap *soap,
	char *password)
{	_ns1__UpdatePasswordRequest *_p = soap_new__ns1__UpdatePasswordRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdatePasswordRequest::password = password;
	}
	return _p;
}

inline _ns1__UpdatePasswordRequest * soap_new_set__ns1__UpdatePasswordRequest(
	struct soap *soap,
	char *password)
{	_ns1__UpdatePasswordRequest *_p = soap_new__ns1__UpdatePasswordRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdatePasswordRequest::password = password;
	}
	return _p;
}

inline int soap_write__ns1__UpdatePasswordRequest(struct soap *soap, _ns1__UpdatePasswordRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdatePasswordRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdatePasswordRequest * SOAP_FMAC4 soap_get__ns1__UpdatePasswordRequest(struct soap*, _ns1__UpdatePasswordRequest *, const char*, const char*);

inline int soap_read__ns1__UpdatePasswordRequest(struct soap *soap, _ns1__UpdatePasswordRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdatePasswordRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveRoomPINResponse_DEFINED
#define SOAP_TYPE__ns1__RemoveRoomPINResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveRoomPINResponse(struct soap*, const char*, int, const _ns1__RemoveRoomPINResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveRoomPINResponse * SOAP_FMAC4 soap_in__ns1__RemoveRoomPINResponse(struct soap*, const char*, _ns1__RemoveRoomPINResponse *, const char*);
SOAP_FMAC1 _ns1__RemoveRoomPINResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveRoomPINResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveRoomPINResponse * soap_new__ns1__RemoveRoomPINResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveRoomPINResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveRoomPINResponse * soap_new_req__ns1__RemoveRoomPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveRoomPINResponse *_p = soap_new__ns1__RemoveRoomPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomPINResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RemoveRoomPINResponse * soap_new_set__ns1__RemoveRoomPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveRoomPINResponse *_p = soap_new__ns1__RemoveRoomPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomPINResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RemoveRoomPINResponse(struct soap *soap, _ns1__RemoveRoomPINResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveRoomPINResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveRoomPINResponse * SOAP_FMAC4 soap_get__ns1__RemoveRoomPINResponse(struct soap*, _ns1__RemoveRoomPINResponse *, const char*, const char*);

inline int soap_read__ns1__RemoveRoomPINResponse(struct soap *soap, _ns1__RemoveRoomPINResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveRoomPINResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveRoomPINRequest_DEFINED
#define SOAP_TYPE__ns1__RemoveRoomPINRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveRoomPINRequest(struct soap*, const char*, int, const _ns1__RemoveRoomPINRequest *, const char*);
SOAP_FMAC3 _ns1__RemoveRoomPINRequest * SOAP_FMAC4 soap_in__ns1__RemoveRoomPINRequest(struct soap*, const char*, _ns1__RemoveRoomPINRequest *, const char*);
SOAP_FMAC1 _ns1__RemoveRoomPINRequest * SOAP_FMAC2 soap_instantiate__ns1__RemoveRoomPINRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveRoomPINRequest * soap_new__ns1__RemoveRoomPINRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveRoomPINRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveRoomPINRequest * soap_new_req__ns1__RemoveRoomPINRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveRoomPINRequest *_p = soap_new__ns1__RemoveRoomPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomPINRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__RemoveRoomPINRequest * soap_new_set__ns1__RemoveRoomPINRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveRoomPINRequest *_p = soap_new__ns1__RemoveRoomPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomPINRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__RemoveRoomPINRequest(struct soap *soap, _ns1__RemoveRoomPINRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveRoomPINRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveRoomPINRequest * SOAP_FMAC4 soap_get__ns1__RemoveRoomPINRequest(struct soap*, _ns1__RemoveRoomPINRequest *, const char*, const char*);

inline int soap_read__ns1__RemoveRoomPINRequest(struct soap *soap, _ns1__RemoveRoomPINRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveRoomPINRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateRoomPINResponse_DEFINED
#define SOAP_TYPE__ns1__CreateRoomPINResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateRoomPINResponse(struct soap*, const char*, int, const _ns1__CreateRoomPINResponse *, const char*);
SOAP_FMAC3 _ns1__CreateRoomPINResponse * SOAP_FMAC4 soap_in__ns1__CreateRoomPINResponse(struct soap*, const char*, _ns1__CreateRoomPINResponse *, const char*);
SOAP_FMAC1 _ns1__CreateRoomPINResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateRoomPINResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateRoomPINResponse * soap_new__ns1__CreateRoomPINResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateRoomPINResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateRoomPINResponse * soap_new_req__ns1__CreateRoomPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateRoomPINResponse *_p = soap_new__ns1__CreateRoomPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomPINResponse::OK = OK;
	}
	return _p;
}

inline _ns1__CreateRoomPINResponse * soap_new_set__ns1__CreateRoomPINResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateRoomPINResponse *_p = soap_new__ns1__CreateRoomPINResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomPINResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__CreateRoomPINResponse(struct soap *soap, _ns1__CreateRoomPINResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRoomPINResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateRoomPINResponse * SOAP_FMAC4 soap_get__ns1__CreateRoomPINResponse(struct soap*, _ns1__CreateRoomPINResponse *, const char*, const char*);

inline int soap_read__ns1__CreateRoomPINResponse(struct soap *soap, _ns1__CreateRoomPINResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateRoomPINResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateRoomPINRequest_DEFINED
#define SOAP_TYPE__ns1__CreateRoomPINRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateRoomPINRequest(struct soap*, const char*, int, const _ns1__CreateRoomPINRequest *, const char*);
SOAP_FMAC3 _ns1__CreateRoomPINRequest * SOAP_FMAC4 soap_in__ns1__CreateRoomPINRequest(struct soap*, const char*, _ns1__CreateRoomPINRequest *, const char*);
SOAP_FMAC1 _ns1__CreateRoomPINRequest * SOAP_FMAC2 soap_instantiate__ns1__CreateRoomPINRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateRoomPINRequest * soap_new__ns1__CreateRoomPINRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateRoomPINRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateRoomPINRequest * soap_new_req__ns1__CreateRoomPINRequest(
	struct soap *soap,
	char *roomID,
	char *PIN)
{	_ns1__CreateRoomPINRequest *_p = soap_new__ns1__CreateRoomPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomPINRequest::roomID = roomID;
		_p->_ns1__CreateRoomPINRequest::PIN = PIN;
	}
	return _p;
}

inline _ns1__CreateRoomPINRequest * soap_new_set__ns1__CreateRoomPINRequest(
	struct soap *soap,
	char *roomID,
	char *PIN)
{	_ns1__CreateRoomPINRequest *_p = soap_new__ns1__CreateRoomPINRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomPINRequest::roomID = roomID;
		_p->_ns1__CreateRoomPINRequest::PIN = PIN;
	}
	return _p;
}

inline int soap_write__ns1__CreateRoomPINRequest(struct soap *soap, _ns1__CreateRoomPINRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRoomPINRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateRoomPINRequest * SOAP_FMAC4 soap_get__ns1__CreateRoomPINRequest(struct soap*, _ns1__CreateRoomPINRequest *, const char*, const char*);

inline int soap_read__ns1__CreateRoomPINRequest(struct soap *soap, _ns1__CreateRoomPINRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateRoomPINRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveRoomURLResponse_DEFINED
#define SOAP_TYPE__ns1__RemoveRoomURLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveRoomURLResponse(struct soap*, const char*, int, const _ns1__RemoveRoomURLResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveRoomURLResponse * SOAP_FMAC4 soap_in__ns1__RemoveRoomURLResponse(struct soap*, const char*, _ns1__RemoveRoomURLResponse *, const char*);
SOAP_FMAC1 _ns1__RemoveRoomURLResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveRoomURLResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveRoomURLResponse * soap_new__ns1__RemoveRoomURLResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveRoomURLResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveRoomURLResponse * soap_new_req__ns1__RemoveRoomURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveRoomURLResponse *_p = soap_new__ns1__RemoveRoomURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomURLResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RemoveRoomURLResponse * soap_new_set__ns1__RemoveRoomURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveRoomURLResponse *_p = soap_new__ns1__RemoveRoomURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomURLResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RemoveRoomURLResponse(struct soap *soap, _ns1__RemoveRoomURLResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveRoomURLResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveRoomURLResponse * SOAP_FMAC4 soap_get__ns1__RemoveRoomURLResponse(struct soap*, _ns1__RemoveRoomURLResponse *, const char*, const char*);

inline int soap_read__ns1__RemoveRoomURLResponse(struct soap *soap, _ns1__RemoveRoomURLResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveRoomURLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveRoomURLRequest_DEFINED
#define SOAP_TYPE__ns1__RemoveRoomURLRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveRoomURLRequest(struct soap*, const char*, int, const _ns1__RemoveRoomURLRequest *, const char*);
SOAP_FMAC3 _ns1__RemoveRoomURLRequest * SOAP_FMAC4 soap_in__ns1__RemoveRoomURLRequest(struct soap*, const char*, _ns1__RemoveRoomURLRequest *, const char*);
SOAP_FMAC1 _ns1__RemoveRoomURLRequest * SOAP_FMAC2 soap_instantiate__ns1__RemoveRoomURLRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveRoomURLRequest * soap_new__ns1__RemoveRoomURLRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveRoomURLRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveRoomURLRequest * soap_new_req__ns1__RemoveRoomURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveRoomURLRequest *_p = soap_new__ns1__RemoveRoomURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomURLRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__RemoveRoomURLRequest * soap_new_set__ns1__RemoveRoomURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__RemoveRoomURLRequest *_p = soap_new__ns1__RemoveRoomURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveRoomURLRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__RemoveRoomURLRequest(struct soap *soap, _ns1__RemoveRoomURLRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveRoomURLRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveRoomURLRequest * SOAP_FMAC4 soap_get__ns1__RemoveRoomURLRequest(struct soap*, _ns1__RemoveRoomURLRequest *, const char*, const char*);

inline int soap_read__ns1__RemoveRoomURLRequest(struct soap *soap, _ns1__RemoveRoomURLRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveRoomURLRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateRoomURLResponse_DEFINED
#define SOAP_TYPE__ns1__CreateRoomURLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateRoomURLResponse(struct soap*, const char*, int, const _ns1__CreateRoomURLResponse *, const char*);
SOAP_FMAC3 _ns1__CreateRoomURLResponse * SOAP_FMAC4 soap_in__ns1__CreateRoomURLResponse(struct soap*, const char*, _ns1__CreateRoomURLResponse *, const char*);
SOAP_FMAC1 _ns1__CreateRoomURLResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateRoomURLResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateRoomURLResponse * soap_new__ns1__CreateRoomURLResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateRoomURLResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateRoomURLResponse * soap_new_req__ns1__CreateRoomURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateRoomURLResponse *_p = soap_new__ns1__CreateRoomURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomURLResponse::OK = OK;
	}
	return _p;
}

inline _ns1__CreateRoomURLResponse * soap_new_set__ns1__CreateRoomURLResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CreateRoomURLResponse *_p = soap_new__ns1__CreateRoomURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomURLResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__CreateRoomURLResponse(struct soap *soap, _ns1__CreateRoomURLResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRoomURLResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateRoomURLResponse * SOAP_FMAC4 soap_get__ns1__CreateRoomURLResponse(struct soap*, _ns1__CreateRoomURLResponse *, const char*, const char*);

inline int soap_read__ns1__CreateRoomURLResponse(struct soap *soap, _ns1__CreateRoomURLResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateRoomURLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateRoomURLRequest_DEFINED
#define SOAP_TYPE__ns1__CreateRoomURLRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateRoomURLRequest(struct soap*, const char*, int, const _ns1__CreateRoomURLRequest *, const char*);
SOAP_FMAC3 _ns1__CreateRoomURLRequest * SOAP_FMAC4 soap_in__ns1__CreateRoomURLRequest(struct soap*, const char*, _ns1__CreateRoomURLRequest *, const char*);
SOAP_FMAC1 _ns1__CreateRoomURLRequest * SOAP_FMAC2 soap_instantiate__ns1__CreateRoomURLRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateRoomURLRequest * soap_new__ns1__CreateRoomURLRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateRoomURLRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateRoomURLRequest * soap_new_req__ns1__CreateRoomURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__CreateRoomURLRequest *_p = soap_new__ns1__CreateRoomURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomURLRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__CreateRoomURLRequest * soap_new_set__ns1__CreateRoomURLRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__CreateRoomURLRequest *_p = soap_new__ns1__CreateRoomURLRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomURLRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__CreateRoomURLRequest(struct soap *soap, _ns1__CreateRoomURLRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRoomURLRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateRoomURLRequest * SOAP_FMAC4 soap_get__ns1__CreateRoomURLRequest(struct soap*, _ns1__CreateRoomURLRequest *, const char*, const char*);

inline int soap_read__ns1__CreateRoomURLRequest(struct soap *soap, _ns1__CreateRoomURLRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateRoomURLRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DeleteRoomResponse_DEFINED
#define SOAP_TYPE__ns1__DeleteRoomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteRoomResponse(struct soap*, const char*, int, const _ns1__DeleteRoomResponse *, const char*);
SOAP_FMAC3 _ns1__DeleteRoomResponse * SOAP_FMAC4 soap_in__ns1__DeleteRoomResponse(struct soap*, const char*, _ns1__DeleteRoomResponse *, const char*);
SOAP_FMAC1 _ns1__DeleteRoomResponse * SOAP_FMAC2 soap_instantiate__ns1__DeleteRoomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteRoomResponse * soap_new__ns1__DeleteRoomResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DeleteRoomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DeleteRoomResponse * soap_new_req__ns1__DeleteRoomResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DeleteRoomResponse *_p = soap_new__ns1__DeleteRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DeleteRoomResponse::OK = OK;
	}
	return _p;
}

inline _ns1__DeleteRoomResponse * soap_new_set__ns1__DeleteRoomResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DeleteRoomResponse *_p = soap_new__ns1__DeleteRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DeleteRoomResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__DeleteRoomResponse(struct soap *soap, _ns1__DeleteRoomResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeleteRoomResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DeleteRoomResponse * SOAP_FMAC4 soap_get__ns1__DeleteRoomResponse(struct soap*, _ns1__DeleteRoomResponse *, const char*, const char*);

inline int soap_read__ns1__DeleteRoomResponse(struct soap *soap, _ns1__DeleteRoomResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DeleteRoomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DeleteRoomRequest_DEFINED
#define SOAP_TYPE__ns1__DeleteRoomRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteRoomRequest(struct soap*, const char*, int, const _ns1__DeleteRoomRequest *, const char*);
SOAP_FMAC3 _ns1__DeleteRoomRequest * SOAP_FMAC4 soap_in__ns1__DeleteRoomRequest(struct soap*, const char*, _ns1__DeleteRoomRequest *, const char*);
SOAP_FMAC1 _ns1__DeleteRoomRequest * SOAP_FMAC2 soap_instantiate__ns1__DeleteRoomRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteRoomRequest * soap_new__ns1__DeleteRoomRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DeleteRoomRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__DeleteRoomRequest * soap_new_req__ns1__DeleteRoomRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__DeleteRoomRequest *_p = soap_new__ns1__DeleteRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DeleteRoomRequest::roomID = roomID;
	}
	return _p;
}

inline _ns1__DeleteRoomRequest * soap_new_set__ns1__DeleteRoomRequest(
	struct soap *soap,
	char *roomID)
{	_ns1__DeleteRoomRequest *_p = soap_new__ns1__DeleteRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DeleteRoomRequest::roomID = roomID;
	}
	return _p;
}

inline int soap_write__ns1__DeleteRoomRequest(struct soap *soap, _ns1__DeleteRoomRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeleteRoomRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DeleteRoomRequest * SOAP_FMAC4 soap_get__ns1__DeleteRoomRequest(struct soap*, _ns1__DeleteRoomRequest *, const char*, const char*);

inline int soap_read__ns1__DeleteRoomRequest(struct soap *soap, _ns1__DeleteRoomRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DeleteRoomRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateRoomResponse_DEFINED
#define SOAP_TYPE__ns1__CreateRoomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateRoomResponse(struct soap*, const char*, int, const _ns1__CreateRoomResponse *, const char*);
SOAP_FMAC3 _ns1__CreateRoomResponse * SOAP_FMAC4 soap_in__ns1__CreateRoomResponse(struct soap*, const char*, _ns1__CreateRoomResponse *, const char*);
SOAP_FMAC1 _ns1__CreateRoomResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateRoomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateRoomResponse * soap_new__ns1__CreateRoomResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateRoomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateRoomResponse * soap_new_req__ns1__CreateRoomResponse(
	struct soap *soap,
	_ns1__Entity *Entity)
{	_ns1__CreateRoomResponse *_p = soap_new__ns1__CreateRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__CreateRoomResponse * soap_new_set__ns1__CreateRoomResponse(
	struct soap *soap,
	_ns1__Entity *Entity)
{	_ns1__CreateRoomResponse *_p = soap_new__ns1__CreateRoomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__CreateRoomResponse(struct soap *soap, _ns1__CreateRoomResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRoomResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateRoomResponse * SOAP_FMAC4 soap_get__ns1__CreateRoomResponse(struct soap*, _ns1__CreateRoomResponse *, const char*, const char*);

inline int soap_read__ns1__CreateRoomResponse(struct soap *soap, _ns1__CreateRoomResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateRoomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateRoomRequest_DEFINED
#define SOAP_TYPE__ns1__CreateRoomRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateRoomRequest(struct soap*, const char*, int, const _ns1__CreateRoomRequest *, const char*);
SOAP_FMAC3 _ns1__CreateRoomRequest * SOAP_FMAC4 soap_in__ns1__CreateRoomRequest(struct soap*, const char*, _ns1__CreateRoomRequest *, const char*);
SOAP_FMAC1 _ns1__CreateRoomRequest * SOAP_FMAC2 soap_instantiate__ns1__CreateRoomRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateRoomRequest * soap_new__ns1__CreateRoomRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CreateRoomRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateRoomRequest * soap_new_req__ns1__CreateRoomRequest(
	struct soap *soap,
	char *name,
	char *extension)
{	_ns1__CreateRoomRequest *_p = soap_new__ns1__CreateRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomRequest::name = name;
		_p->_ns1__CreateRoomRequest::extension = extension;
	}
	return _p;
}

inline _ns1__CreateRoomRequest * soap_new_set__ns1__CreateRoomRequest(
	struct soap *soap,
	char *name,
	char *extension)
{	_ns1__CreateRoomRequest *_p = soap_new__ns1__CreateRoomRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateRoomRequest::name = name;
		_p->_ns1__CreateRoomRequest::extension = extension;
	}
	return _p;
}

inline int soap_write__ns1__CreateRoomRequest(struct soap *soap, _ns1__CreateRoomRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateRoomRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateRoomRequest * SOAP_FMAC4 soap_get__ns1__CreateRoomRequest(struct soap*, _ns1__CreateRoomRequest *, const char*, const char*);

inline int soap_read__ns1__CreateRoomRequest(struct soap *soap, _ns1__CreateRoomRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateRoomRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MyAccountResponse_DEFINED
#define SOAP_TYPE__ns1__MyAccountResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MyAccountResponse(struct soap*, const char*, int, const _ns1__MyAccountResponse *, const char*);
SOAP_FMAC3 _ns1__MyAccountResponse * SOAP_FMAC4 soap_in__ns1__MyAccountResponse(struct soap*, const char*, _ns1__MyAccountResponse *, const char*);
SOAP_FMAC1 _ns1__MyAccountResponse * SOAP_FMAC2 soap_instantiate__ns1__MyAccountResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MyAccountResponse * soap_new__ns1__MyAccountResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__MyAccountResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__MyAccountResponse * soap_new_req__ns1__MyAccountResponse(
	struct soap *soap,
	_ns1__Entity *Entity)
{	_ns1__MyAccountResponse *_p = soap_new__ns1__MyAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MyAccountResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__MyAccountResponse * soap_new_set__ns1__MyAccountResponse(
	struct soap *soap,
	_ns1__Entity *Entity)
{	_ns1__MyAccountResponse *_p = soap_new__ns1__MyAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MyAccountResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__MyAccountResponse(struct soap *soap, _ns1__MyAccountResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MyAccountResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MyAccountResponse * SOAP_FMAC4 soap_get__ns1__MyAccountResponse(struct soap*, _ns1__MyAccountResponse *, const char*, const char*);

inline int soap_read__ns1__MyAccountResponse(struct soap *soap, _ns1__MyAccountResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__MyAccountResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MyAccountRequest_DEFINED
#define SOAP_TYPE__ns1__MyAccountRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MyAccountRequest(struct soap*, const char*, int, const _ns1__MyAccountRequest *, const char*);
SOAP_FMAC3 _ns1__MyAccountRequest * SOAP_FMAC4 soap_in__ns1__MyAccountRequest(struct soap*, const char*, _ns1__MyAccountRequest *, const char*);
SOAP_FMAC1 _ns1__MyAccountRequest * SOAP_FMAC2 soap_instantiate__ns1__MyAccountRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MyAccountRequest * soap_new__ns1__MyAccountRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__MyAccountRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__MyAccountRequest * soap_new_req__ns1__MyAccountRequest(
	struct soap *soap)
{	_ns1__MyAccountRequest *_p = soap_new__ns1__MyAccountRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__MyAccountRequest * soap_new_set__ns1__MyAccountRequest(
	struct soap *soap)
{	_ns1__MyAccountRequest *_p = soap_new__ns1__MyAccountRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__MyAccountRequest(struct soap *soap, _ns1__MyAccountRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MyAccountRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MyAccountRequest * SOAP_FMAC4 soap_get__ns1__MyAccountRequest(struct soap*, _ns1__MyAccountRequest *, const char*, const char*);

inline int soap_read__ns1__MyAccountRequest(struct soap *soap, _ns1__MyAccountRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__MyAccountRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StopVideoResponse_DEFINED
#define SOAP_TYPE__ns1__StopVideoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopVideoResponse(struct soap*, const char*, int, const _ns1__StopVideoResponse *, const char*);
SOAP_FMAC3 _ns1__StopVideoResponse * SOAP_FMAC4 soap_in__ns1__StopVideoResponse(struct soap*, const char*, _ns1__StopVideoResponse *, const char*);
SOAP_FMAC1 _ns1__StopVideoResponse * SOAP_FMAC2 soap_instantiate__ns1__StopVideoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopVideoResponse * soap_new__ns1__StopVideoResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StopVideoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__StopVideoResponse * soap_new_req__ns1__StopVideoResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StopVideoResponse *_p = soap_new__ns1__StopVideoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopVideoResponse::OK = OK;
	}
	return _p;
}

inline _ns1__StopVideoResponse * soap_new_set__ns1__StopVideoResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StopVideoResponse *_p = soap_new__ns1__StopVideoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopVideoResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__StopVideoResponse(struct soap *soap, _ns1__StopVideoResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StopVideoResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StopVideoResponse * SOAP_FMAC4 soap_get__ns1__StopVideoResponse(struct soap*, _ns1__StopVideoResponse *, const char*, const char*);

inline int soap_read__ns1__StopVideoResponse(struct soap *soap, _ns1__StopVideoResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StopVideoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StopVideoRequest_DEFINED
#define SOAP_TYPE__ns1__StopVideoRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopVideoRequest(struct soap*, const char*, int, const _ns1__StopVideoRequest *, const char*);
SOAP_FMAC3 _ns1__StopVideoRequest * SOAP_FMAC4 soap_in__ns1__StopVideoRequest(struct soap*, const char*, _ns1__StopVideoRequest *, const char*);
SOAP_FMAC1 _ns1__StopVideoRequest * SOAP_FMAC2 soap_instantiate__ns1__StopVideoRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopVideoRequest * soap_new__ns1__StopVideoRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StopVideoRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__StopVideoRequest * soap_new_req__ns1__StopVideoRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID)
{	_ns1__StopVideoRequest *_p = soap_new__ns1__StopVideoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopVideoRequest::conferenceID = conferenceID;
		_p->_ns1__StopVideoRequest::participantID = participantID;
	}
	return _p;
}

inline _ns1__StopVideoRequest * soap_new_set__ns1__StopVideoRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID,
	char *moderatorPIN)
{	_ns1__StopVideoRequest *_p = soap_new__ns1__StopVideoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StopVideoRequest::conferenceID = conferenceID;
		_p->_ns1__StopVideoRequest::participantID = participantID;
		_p->_ns1__StopVideoRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__StopVideoRequest(struct soap *soap, _ns1__StopVideoRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StopVideoRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StopVideoRequest * SOAP_FMAC4 soap_get__ns1__StopVideoRequest(struct soap*, _ns1__StopVideoRequest *, const char*, const char*);

inline int soap_read__ns1__StopVideoRequest(struct soap *soap, _ns1__StopVideoRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StopVideoRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StartVideoResponse_DEFINED
#define SOAP_TYPE__ns1__StartVideoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartVideoResponse(struct soap*, const char*, int, const _ns1__StartVideoResponse *, const char*);
SOAP_FMAC3 _ns1__StartVideoResponse * SOAP_FMAC4 soap_in__ns1__StartVideoResponse(struct soap*, const char*, _ns1__StartVideoResponse *, const char*);
SOAP_FMAC1 _ns1__StartVideoResponse * SOAP_FMAC2 soap_instantiate__ns1__StartVideoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StartVideoResponse * soap_new__ns1__StartVideoResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StartVideoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__StartVideoResponse * soap_new_req__ns1__StartVideoResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StartVideoResponse *_p = soap_new__ns1__StartVideoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartVideoResponse::OK = OK;
	}
	return _p;
}

inline _ns1__StartVideoResponse * soap_new_set__ns1__StartVideoResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__StartVideoResponse *_p = soap_new__ns1__StartVideoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartVideoResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__StartVideoResponse(struct soap *soap, _ns1__StartVideoResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartVideoResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StartVideoResponse * SOAP_FMAC4 soap_get__ns1__StartVideoResponse(struct soap*, _ns1__StartVideoResponse *, const char*, const char*);

inline int soap_read__ns1__StartVideoResponse(struct soap *soap, _ns1__StartVideoResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StartVideoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__StartVideoRequest_DEFINED
#define SOAP_TYPE__ns1__StartVideoRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartVideoRequest(struct soap*, const char*, int, const _ns1__StartVideoRequest *, const char*);
SOAP_FMAC3 _ns1__StartVideoRequest * SOAP_FMAC4 soap_in__ns1__StartVideoRequest(struct soap*, const char*, _ns1__StartVideoRequest *, const char*);
SOAP_FMAC1 _ns1__StartVideoRequest * SOAP_FMAC2 soap_instantiate__ns1__StartVideoRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StartVideoRequest * soap_new__ns1__StartVideoRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__StartVideoRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__StartVideoRequest * soap_new_req__ns1__StartVideoRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID)
{	_ns1__StartVideoRequest *_p = soap_new__ns1__StartVideoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartVideoRequest::conferenceID = conferenceID;
		_p->_ns1__StartVideoRequest::participantID = participantID;
	}
	return _p;
}

inline _ns1__StartVideoRequest * soap_new_set__ns1__StartVideoRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID,
	char *moderatorPIN)
{	_ns1__StartVideoRequest *_p = soap_new__ns1__StartVideoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StartVideoRequest::conferenceID = conferenceID;
		_p->_ns1__StartVideoRequest::participantID = participantID;
		_p->_ns1__StartVideoRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__StartVideoRequest(struct soap *soap, _ns1__StartVideoRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartVideoRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StartVideoRequest * SOAP_FMAC4 soap_get__ns1__StartVideoRequest(struct soap*, _ns1__StartVideoRequest *, const char*, const char*);

inline int soap_read__ns1__StartVideoRequest(struct soap *soap, _ns1__StartVideoRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__StartVideoRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UnmuteAudioResponse_DEFINED
#define SOAP_TYPE__ns1__UnmuteAudioResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UnmuteAudioResponse(struct soap*, const char*, int, const _ns1__UnmuteAudioResponse *, const char*);
SOAP_FMAC3 _ns1__UnmuteAudioResponse * SOAP_FMAC4 soap_in__ns1__UnmuteAudioResponse(struct soap*, const char*, _ns1__UnmuteAudioResponse *, const char*);
SOAP_FMAC1 _ns1__UnmuteAudioResponse * SOAP_FMAC2 soap_instantiate__ns1__UnmuteAudioResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UnmuteAudioResponse * soap_new__ns1__UnmuteAudioResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__UnmuteAudioResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UnmuteAudioResponse * soap_new_req__ns1__UnmuteAudioResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UnmuteAudioResponse *_p = soap_new__ns1__UnmuteAudioResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnmuteAudioResponse::OK = OK;
	}
	return _p;
}

inline _ns1__UnmuteAudioResponse * soap_new_set__ns1__UnmuteAudioResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__UnmuteAudioResponse *_p = soap_new__ns1__UnmuteAudioResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnmuteAudioResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__UnmuteAudioResponse(struct soap *soap, _ns1__UnmuteAudioResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnmuteAudioResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UnmuteAudioResponse * SOAP_FMAC4 soap_get__ns1__UnmuteAudioResponse(struct soap*, _ns1__UnmuteAudioResponse *, const char*, const char*);

inline int soap_read__ns1__UnmuteAudioResponse(struct soap *soap, _ns1__UnmuteAudioResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UnmuteAudioResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UnmuteAudioRequest_DEFINED
#define SOAP_TYPE__ns1__UnmuteAudioRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UnmuteAudioRequest(struct soap*, const char*, int, const _ns1__UnmuteAudioRequest *, const char*);
SOAP_FMAC3 _ns1__UnmuteAudioRequest * SOAP_FMAC4 soap_in__ns1__UnmuteAudioRequest(struct soap*, const char*, _ns1__UnmuteAudioRequest *, const char*);
SOAP_FMAC1 _ns1__UnmuteAudioRequest * SOAP_FMAC2 soap_instantiate__ns1__UnmuteAudioRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UnmuteAudioRequest * soap_new__ns1__UnmuteAudioRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__UnmuteAudioRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__UnmuteAudioRequest * soap_new_req__ns1__UnmuteAudioRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID)
{	_ns1__UnmuteAudioRequest *_p = soap_new__ns1__UnmuteAudioRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnmuteAudioRequest::conferenceID = conferenceID;
		_p->_ns1__UnmuteAudioRequest::participantID = participantID;
	}
	return _p;
}

inline _ns1__UnmuteAudioRequest * soap_new_set__ns1__UnmuteAudioRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID,
	char *moderatorPIN)
{	_ns1__UnmuteAudioRequest *_p = soap_new__ns1__UnmuteAudioRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnmuteAudioRequest::conferenceID = conferenceID;
		_p->_ns1__UnmuteAudioRequest::participantID = participantID;
		_p->_ns1__UnmuteAudioRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__UnmuteAudioRequest(struct soap *soap, _ns1__UnmuteAudioRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnmuteAudioRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UnmuteAudioRequest * SOAP_FMAC4 soap_get__ns1__UnmuteAudioRequest(struct soap*, _ns1__UnmuteAudioRequest *, const char*, const char*);

inline int soap_read__ns1__UnmuteAudioRequest(struct soap *soap, _ns1__UnmuteAudioRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UnmuteAudioRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MuteAudioResponse_DEFINED
#define SOAP_TYPE__ns1__MuteAudioResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MuteAudioResponse(struct soap*, const char*, int, const _ns1__MuteAudioResponse *, const char*);
SOAP_FMAC3 _ns1__MuteAudioResponse * SOAP_FMAC4 soap_in__ns1__MuteAudioResponse(struct soap*, const char*, _ns1__MuteAudioResponse *, const char*);
SOAP_FMAC1 _ns1__MuteAudioResponse * SOAP_FMAC2 soap_instantiate__ns1__MuteAudioResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MuteAudioResponse * soap_new__ns1__MuteAudioResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__MuteAudioResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__MuteAudioResponse * soap_new_req__ns1__MuteAudioResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__MuteAudioResponse *_p = soap_new__ns1__MuteAudioResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MuteAudioResponse::OK = OK;
	}
	return _p;
}

inline _ns1__MuteAudioResponse * soap_new_set__ns1__MuteAudioResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__MuteAudioResponse *_p = soap_new__ns1__MuteAudioResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MuteAudioResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__MuteAudioResponse(struct soap *soap, _ns1__MuteAudioResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MuteAudioResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MuteAudioResponse * SOAP_FMAC4 soap_get__ns1__MuteAudioResponse(struct soap*, _ns1__MuteAudioResponse *, const char*, const char*);

inline int soap_read__ns1__MuteAudioResponse(struct soap *soap, _ns1__MuteAudioResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__MuteAudioResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MuteAudioRequest_DEFINED
#define SOAP_TYPE__ns1__MuteAudioRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MuteAudioRequest(struct soap*, const char*, int, const _ns1__MuteAudioRequest *, const char*);
SOAP_FMAC3 _ns1__MuteAudioRequest * SOAP_FMAC4 soap_in__ns1__MuteAudioRequest(struct soap*, const char*, _ns1__MuteAudioRequest *, const char*);
SOAP_FMAC1 _ns1__MuteAudioRequest * SOAP_FMAC2 soap_instantiate__ns1__MuteAudioRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MuteAudioRequest * soap_new__ns1__MuteAudioRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__MuteAudioRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__MuteAudioRequest * soap_new_req__ns1__MuteAudioRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID)
{	_ns1__MuteAudioRequest *_p = soap_new__ns1__MuteAudioRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MuteAudioRequest::conferenceID = conferenceID;
		_p->_ns1__MuteAudioRequest::participantID = participantID;
	}
	return _p;
}

inline _ns1__MuteAudioRequest * soap_new_set__ns1__MuteAudioRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID,
	char *moderatorPIN)
{	_ns1__MuteAudioRequest *_p = soap_new__ns1__MuteAudioRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MuteAudioRequest::conferenceID = conferenceID;
		_p->_ns1__MuteAudioRequest::participantID = participantID;
		_p->_ns1__MuteAudioRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__MuteAudioRequest(struct soap *soap, _ns1__MuteAudioRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MuteAudioRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MuteAudioRequest * SOAP_FMAC4 soap_get__ns1__MuteAudioRequest(struct soap*, _ns1__MuteAudioRequest *, const char*, const char*);

inline int soap_read__ns1__MuteAudioRequest(struct soap *soap, _ns1__MuteAudioRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__MuteAudioRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LeaveConferenceResponse_DEFINED
#define SOAP_TYPE__ns1__LeaveConferenceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LeaveConferenceResponse(struct soap*, const char*, int, const _ns1__LeaveConferenceResponse *, const char*);
SOAP_FMAC3 _ns1__LeaveConferenceResponse * SOAP_FMAC4 soap_in__ns1__LeaveConferenceResponse(struct soap*, const char*, _ns1__LeaveConferenceResponse *, const char*);
SOAP_FMAC1 _ns1__LeaveConferenceResponse * SOAP_FMAC2 soap_instantiate__ns1__LeaveConferenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LeaveConferenceResponse * soap_new__ns1__LeaveConferenceResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LeaveConferenceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LeaveConferenceResponse * soap_new_req__ns1__LeaveConferenceResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__LeaveConferenceResponse *_p = soap_new__ns1__LeaveConferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LeaveConferenceResponse::OK = OK;
	}
	return _p;
}

inline _ns1__LeaveConferenceResponse * soap_new_set__ns1__LeaveConferenceResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__LeaveConferenceResponse *_p = soap_new__ns1__LeaveConferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LeaveConferenceResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__LeaveConferenceResponse(struct soap *soap, _ns1__LeaveConferenceResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LeaveConferenceResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LeaveConferenceResponse * SOAP_FMAC4 soap_get__ns1__LeaveConferenceResponse(struct soap*, _ns1__LeaveConferenceResponse *, const char*, const char*);

inline int soap_read__ns1__LeaveConferenceResponse(struct soap *soap, _ns1__LeaveConferenceResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LeaveConferenceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LeaveConferenceRequest_DEFINED
#define SOAP_TYPE__ns1__LeaveConferenceRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LeaveConferenceRequest(struct soap*, const char*, int, const _ns1__LeaveConferenceRequest *, const char*);
SOAP_FMAC3 _ns1__LeaveConferenceRequest * SOAP_FMAC4 soap_in__ns1__LeaveConferenceRequest(struct soap*, const char*, _ns1__LeaveConferenceRequest *, const char*);
SOAP_FMAC1 _ns1__LeaveConferenceRequest * SOAP_FMAC2 soap_instantiate__ns1__LeaveConferenceRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LeaveConferenceRequest * soap_new__ns1__LeaveConferenceRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LeaveConferenceRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__LeaveConferenceRequest * soap_new_req__ns1__LeaveConferenceRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID)
{	_ns1__LeaveConferenceRequest *_p = soap_new__ns1__LeaveConferenceRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LeaveConferenceRequest::conferenceID = conferenceID;
		_p->_ns1__LeaveConferenceRequest::participantID = participantID;
	}
	return _p;
}

inline _ns1__LeaveConferenceRequest * soap_new_set__ns1__LeaveConferenceRequest(
	struct soap *soap,
	char *conferenceID,
	char *participantID,
	char *moderatorPIN)
{	_ns1__LeaveConferenceRequest *_p = soap_new__ns1__LeaveConferenceRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LeaveConferenceRequest::conferenceID = conferenceID;
		_p->_ns1__LeaveConferenceRequest::participantID = participantID;
		_p->_ns1__LeaveConferenceRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__LeaveConferenceRequest(struct soap *soap, _ns1__LeaveConferenceRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LeaveConferenceRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LeaveConferenceRequest * SOAP_FMAC4 soap_get__ns1__LeaveConferenceRequest(struct soap*, _ns1__LeaveConferenceRequest *, const char*, const char*);

inline int soap_read__ns1__LeaveConferenceRequest(struct soap *soap, _ns1__LeaveConferenceRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LeaveConferenceRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLectureModeParticipantsResponse_DEFINED
#define SOAP_TYPE__ns1__GetLectureModeParticipantsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLectureModeParticipantsResponse(struct soap*, const char*, int, const _ns1__GetLectureModeParticipantsResponse *, const char*);
SOAP_FMAC3 _ns1__GetLectureModeParticipantsResponse * SOAP_FMAC4 soap_in__ns1__GetLectureModeParticipantsResponse(struct soap*, const char*, _ns1__GetLectureModeParticipantsResponse *, const char*);
SOAP_FMAC1 _ns1__GetLectureModeParticipantsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLectureModeParticipantsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLectureModeParticipantsResponse * soap_new__ns1__GetLectureModeParticipantsResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetLectureModeParticipantsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLectureModeParticipantsResponse * soap_new_req__ns1__GetLectureModeParticipantsResponse(
	struct soap *soap,
	int total,
	int __sizeLectureModeParticipant,
	_ns1__LectureModeParticipant **LectureModeParticipant)
{	_ns1__GetLectureModeParticipantsResponse *_p = soap_new__ns1__GetLectureModeParticipantsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLectureModeParticipantsResponse::total = total;
		_p->_ns1__GetLectureModeParticipantsResponse::__sizeLectureModeParticipant = __sizeLectureModeParticipant;
		_p->_ns1__GetLectureModeParticipantsResponse::LectureModeParticipant = LectureModeParticipant;
	}
	return _p;
}

inline _ns1__GetLectureModeParticipantsResponse * soap_new_set__ns1__GetLectureModeParticipantsResponse(
	struct soap *soap,
	int total,
	int *recorderID,
	char *recorderName,
	bool *paused,
	bool *webcast,
	bool *lectureMode,
	int __sizeLectureModeParticipant,
	_ns1__LectureModeParticipant **LectureModeParticipant)
{	_ns1__GetLectureModeParticipantsResponse *_p = soap_new__ns1__GetLectureModeParticipantsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLectureModeParticipantsResponse::total = total;
		_p->_ns1__GetLectureModeParticipantsResponse::recorderID = recorderID;
		_p->_ns1__GetLectureModeParticipantsResponse::recorderName = recorderName;
		_p->_ns1__GetLectureModeParticipantsResponse::paused = paused;
		_p->_ns1__GetLectureModeParticipantsResponse::webcast = webcast;
		_p->_ns1__GetLectureModeParticipantsResponse::lectureMode = lectureMode;
		_p->_ns1__GetLectureModeParticipantsResponse::__sizeLectureModeParticipant = __sizeLectureModeParticipant;
		_p->_ns1__GetLectureModeParticipantsResponse::LectureModeParticipant = LectureModeParticipant;
	}
	return _p;
}

inline int soap_write__ns1__GetLectureModeParticipantsResponse(struct soap *soap, _ns1__GetLectureModeParticipantsResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLectureModeParticipantsResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLectureModeParticipantsResponse * SOAP_FMAC4 soap_get__ns1__GetLectureModeParticipantsResponse(struct soap*, _ns1__GetLectureModeParticipantsResponse *, const char*, const char*);

inline int soap_read__ns1__GetLectureModeParticipantsResponse(struct soap *soap, _ns1__GetLectureModeParticipantsResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLectureModeParticipantsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetLectureModeParticipantsRequest_DEFINED
#define SOAP_TYPE__ns1__GetLectureModeParticipantsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLectureModeParticipantsRequest(struct soap*, const char*, int, const _ns1__GetLectureModeParticipantsRequest *, const char*);
SOAP_FMAC3 _ns1__GetLectureModeParticipantsRequest * SOAP_FMAC4 soap_in__ns1__GetLectureModeParticipantsRequest(struct soap*, const char*, _ns1__GetLectureModeParticipantsRequest *, const char*);
SOAP_FMAC1 _ns1__GetLectureModeParticipantsRequest * SOAP_FMAC2 soap_instantiate__ns1__GetLectureModeParticipantsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLectureModeParticipantsRequest * soap_new__ns1__GetLectureModeParticipantsRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetLectureModeParticipantsRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLectureModeParticipantsRequest * soap_new_req__ns1__GetLectureModeParticipantsRequest(
	struct soap *soap,
	char *conferenceID)
{	_ns1__GetLectureModeParticipantsRequest *_p = soap_new__ns1__GetLectureModeParticipantsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLectureModeParticipantsRequest::conferenceID = conferenceID;
	}
	return _p;
}

inline _ns1__GetLectureModeParticipantsRequest * soap_new_set__ns1__GetLectureModeParticipantsRequest(
	struct soap *soap,
	char *conferenceID,
	_ns1__Filter *Filter,
	char *moderatorPIN)
{	_ns1__GetLectureModeParticipantsRequest *_p = soap_new__ns1__GetLectureModeParticipantsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLectureModeParticipantsRequest::conferenceID = conferenceID;
		_p->_ns1__GetLectureModeParticipantsRequest::Filter = Filter;
		_p->_ns1__GetLectureModeParticipantsRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__GetLectureModeParticipantsRequest(struct soap *soap, _ns1__GetLectureModeParticipantsRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLectureModeParticipantsRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLectureModeParticipantsRequest * SOAP_FMAC4 soap_get__ns1__GetLectureModeParticipantsRequest(struct soap*, _ns1__GetLectureModeParticipantsRequest *, const char*, const char*);

inline int soap_read__ns1__GetLectureModeParticipantsRequest(struct soap *soap, _ns1__GetLectureModeParticipantsRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetLectureModeParticipantsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetParticipantsResponse_DEFINED
#define SOAP_TYPE__ns1__GetParticipantsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetParticipantsResponse(struct soap*, const char*, int, const _ns1__GetParticipantsResponse *, const char*);
SOAP_FMAC3 _ns1__GetParticipantsResponse * SOAP_FMAC4 soap_in__ns1__GetParticipantsResponse(struct soap*, const char*, _ns1__GetParticipantsResponse *, const char*);
SOAP_FMAC1 _ns1__GetParticipantsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetParticipantsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetParticipantsResponse * soap_new__ns1__GetParticipantsResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetParticipantsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetParticipantsResponse * soap_new_req__ns1__GetParticipantsResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__GetParticipantsResponse *_p = soap_new__ns1__GetParticipantsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetParticipantsResponse::total = total;
		_p->_ns1__GetParticipantsResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__GetParticipantsResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__GetParticipantsResponse * soap_new_set__ns1__GetParticipantsResponse(
	struct soap *soap,
	int total,
	int *recorderID,
	char *recorderName,
	bool *paused,
	bool *webcast,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__GetParticipantsResponse *_p = soap_new__ns1__GetParticipantsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetParticipantsResponse::total = total;
		_p->_ns1__GetParticipantsResponse::recorderID = recorderID;
		_p->_ns1__GetParticipantsResponse::recorderName = recorderName;
		_p->_ns1__GetParticipantsResponse::paused = paused;
		_p->_ns1__GetParticipantsResponse::webcast = webcast;
		_p->_ns1__GetParticipantsResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__GetParticipantsResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__GetParticipantsResponse(struct soap *soap, _ns1__GetParticipantsResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetParticipantsResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetParticipantsResponse * SOAP_FMAC4 soap_get__ns1__GetParticipantsResponse(struct soap*, _ns1__GetParticipantsResponse *, const char*, const char*);

inline int soap_read__ns1__GetParticipantsResponse(struct soap *soap, _ns1__GetParticipantsResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetParticipantsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetParticipantsRequest_DEFINED
#define SOAP_TYPE__ns1__GetParticipantsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetParticipantsRequest(struct soap*, const char*, int, const _ns1__GetParticipantsRequest *, const char*);
SOAP_FMAC3 _ns1__GetParticipantsRequest * SOAP_FMAC4 soap_in__ns1__GetParticipantsRequest(struct soap*, const char*, _ns1__GetParticipantsRequest *, const char*);
SOAP_FMAC1 _ns1__GetParticipantsRequest * SOAP_FMAC2 soap_instantiate__ns1__GetParticipantsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetParticipantsRequest * soap_new__ns1__GetParticipantsRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetParticipantsRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetParticipantsRequest * soap_new_req__ns1__GetParticipantsRequest(
	struct soap *soap,
	char *conferenceID)
{	_ns1__GetParticipantsRequest *_p = soap_new__ns1__GetParticipantsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetParticipantsRequest::conferenceID = conferenceID;
	}
	return _p;
}

inline _ns1__GetParticipantsRequest * soap_new_set__ns1__GetParticipantsRequest(
	struct soap *soap,
	char *conferenceID,
	_ns1__Filter *Filter,
	char *moderatorPIN)
{	_ns1__GetParticipantsRequest *_p = soap_new__ns1__GetParticipantsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetParticipantsRequest::conferenceID = conferenceID;
		_p->_ns1__GetParticipantsRequest::Filter = Filter;
		_p->_ns1__GetParticipantsRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__GetParticipantsRequest(struct soap *soap, _ns1__GetParticipantsRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetParticipantsRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetParticipantsRequest * SOAP_FMAC4 soap_get__ns1__GetParticipantsRequest(struct soap*, _ns1__GetParticipantsRequest *, const char*, const char*);

inline int soap_read__ns1__GetParticipantsRequest(struct soap *soap, _ns1__GetParticipantsRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetParticipantsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DirectCallResponse_DEFINED
#define SOAP_TYPE__ns1__DirectCallResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DirectCallResponse(struct soap*, const char*, int, const _ns1__DirectCallResponse *, const char*);
SOAP_FMAC3 _ns1__DirectCallResponse * SOAP_FMAC4 soap_in__ns1__DirectCallResponse(struct soap*, const char*, _ns1__DirectCallResponse *, const char*);
SOAP_FMAC1 _ns1__DirectCallResponse * SOAP_FMAC2 soap_instantiate__ns1__DirectCallResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DirectCallResponse * soap_new__ns1__DirectCallResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DirectCallResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DirectCallResponse * soap_new_req__ns1__DirectCallResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DirectCallResponse *_p = soap_new__ns1__DirectCallResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DirectCallResponse::OK = OK;
	}
	return _p;
}

inline _ns1__DirectCallResponse * soap_new_set__ns1__DirectCallResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__DirectCallResponse *_p = soap_new__ns1__DirectCallResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DirectCallResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__DirectCallResponse(struct soap *soap, _ns1__DirectCallResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DirectCallResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DirectCallResponse * SOAP_FMAC4 soap_get__ns1__DirectCallResponse(struct soap*, _ns1__DirectCallResponse *, const char*, const char*);

inline int soap_read__ns1__DirectCallResponse(struct soap *soap, _ns1__DirectCallResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DirectCallResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DirectCallRequest_DEFINED
#define SOAP_TYPE__ns1__DirectCallRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DirectCallRequest(struct soap*, const char*, int, const _ns1__DirectCallRequest *, const char*);
SOAP_FMAC3 _ns1__DirectCallRequest * SOAP_FMAC4 soap_in__ns1__DirectCallRequest(struct soap*, const char*, _ns1__DirectCallRequest *, const char*);
SOAP_FMAC1 _ns1__DirectCallRequest * SOAP_FMAC2 soap_instantiate__ns1__DirectCallRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DirectCallRequest * soap_new__ns1__DirectCallRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__DirectCallRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__DirectCallRequest * soap_new_req__ns1__DirectCallRequest(
	struct soap *soap,
	int __union_DirectCallRequest,
	const union _ns1__union_DirectCallRequest& union_DirectCallRequest)
{	_ns1__DirectCallRequest *_p = soap_new__ns1__DirectCallRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DirectCallRequest::__union_DirectCallRequest = __union_DirectCallRequest;
		_p->_ns1__DirectCallRequest::union_DirectCallRequest = union_DirectCallRequest;
	}
	return _p;
}

inline _ns1__DirectCallRequest * soap_new_set__ns1__DirectCallRequest(
	struct soap *soap,
	int __union_DirectCallRequest,
	const union _ns1__union_DirectCallRequest& union_DirectCallRequest)
{	_ns1__DirectCallRequest *_p = soap_new__ns1__DirectCallRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DirectCallRequest::__union_DirectCallRequest = __union_DirectCallRequest;
		_p->_ns1__DirectCallRequest::union_DirectCallRequest = union_DirectCallRequest;
	}
	return _p;
}

inline int soap_write__ns1__DirectCallRequest(struct soap *soap, _ns1__DirectCallRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DirectCallRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DirectCallRequest * SOAP_FMAC4 soap_get__ns1__DirectCallRequest(struct soap*, _ns1__DirectCallRequest *, const char*, const char*);

inline int soap_read__ns1__DirectCallRequest(struct soap *soap, _ns1__DirectCallRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DirectCallRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__JoinIPCConferenceResponse_DEFINED
#define SOAP_TYPE__ns1__JoinIPCConferenceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__JoinIPCConferenceResponse(struct soap*, const char*, int, const _ns1__JoinIPCConferenceResponse *, const char*);
SOAP_FMAC3 _ns1__JoinIPCConferenceResponse * SOAP_FMAC4 soap_in__ns1__JoinIPCConferenceResponse(struct soap*, const char*, _ns1__JoinIPCConferenceResponse *, const char*);
SOAP_FMAC1 _ns1__JoinIPCConferenceResponse * SOAP_FMAC2 soap_instantiate__ns1__JoinIPCConferenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__JoinIPCConferenceResponse * soap_new__ns1__JoinIPCConferenceResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__JoinIPCConferenceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__JoinIPCConferenceResponse * soap_new_req__ns1__JoinIPCConferenceResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__JoinIPCConferenceResponse *_p = soap_new__ns1__JoinIPCConferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__JoinIPCConferenceResponse::OK = OK;
	}
	return _p;
}

inline _ns1__JoinIPCConferenceResponse * soap_new_set__ns1__JoinIPCConferenceResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__JoinIPCConferenceResponse *_p = soap_new__ns1__JoinIPCConferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__JoinIPCConferenceResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__JoinIPCConferenceResponse(struct soap *soap, _ns1__JoinIPCConferenceResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:JoinIPCConferenceResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__JoinIPCConferenceResponse * SOAP_FMAC4 soap_get__ns1__JoinIPCConferenceResponse(struct soap*, _ns1__JoinIPCConferenceResponse *, const char*, const char*);

inline int soap_read__ns1__JoinIPCConferenceResponse(struct soap *soap, _ns1__JoinIPCConferenceResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__JoinIPCConferenceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__JoinIPCConferenceRequest_DEFINED
#define SOAP_TYPE__ns1__JoinIPCConferenceRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__JoinIPCConferenceRequest(struct soap*, const char*, int, const _ns1__JoinIPCConferenceRequest *, const char*);
SOAP_FMAC3 _ns1__JoinIPCConferenceRequest * SOAP_FMAC4 soap_in__ns1__JoinIPCConferenceRequest(struct soap*, const char*, _ns1__JoinIPCConferenceRequest *, const char*);
SOAP_FMAC1 _ns1__JoinIPCConferenceRequest * SOAP_FMAC2 soap_instantiate__ns1__JoinIPCConferenceRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__JoinIPCConferenceRequest * soap_new__ns1__JoinIPCConferenceRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__JoinIPCConferenceRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__JoinIPCConferenceRequest * soap_new_req__ns1__JoinIPCConferenceRequest(
	struct soap *soap,
	char *local_part,
	char *domain)
{	_ns1__JoinIPCConferenceRequest *_p = soap_new__ns1__JoinIPCConferenceRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__JoinIPCConferenceRequest::local_part = local_part;
		_p->_ns1__JoinIPCConferenceRequest::domain = domain;
	}
	return _p;
}

inline _ns1__JoinIPCConferenceRequest * soap_new_set__ns1__JoinIPCConferenceRequest(
	struct soap *soap,
	char *local_part,
	char *domain,
	char *PIN,
	char *referenceNumber)
{	_ns1__JoinIPCConferenceRequest *_p = soap_new__ns1__JoinIPCConferenceRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__JoinIPCConferenceRequest::local_part = local_part;
		_p->_ns1__JoinIPCConferenceRequest::domain = domain;
		_p->_ns1__JoinIPCConferenceRequest::PIN = PIN;
		_p->_ns1__JoinIPCConferenceRequest::referenceNumber = referenceNumber;
	}
	return _p;
}

inline int soap_write__ns1__JoinIPCConferenceRequest(struct soap *soap, _ns1__JoinIPCConferenceRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:JoinIPCConferenceRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__JoinIPCConferenceRequest * SOAP_FMAC4 soap_get__ns1__JoinIPCConferenceRequest(struct soap*, _ns1__JoinIPCConferenceRequest *, const char*, const char*);

inline int soap_read__ns1__JoinIPCConferenceRequest(struct soap *soap, _ns1__JoinIPCConferenceRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__JoinIPCConferenceRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__JoinConferenceResponse_DEFINED
#define SOAP_TYPE__ns1__JoinConferenceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__JoinConferenceResponse(struct soap*, const char*, int, const _ns1__JoinConferenceResponse *, const char*);
SOAP_FMAC3 _ns1__JoinConferenceResponse * SOAP_FMAC4 soap_in__ns1__JoinConferenceResponse(struct soap*, const char*, _ns1__JoinConferenceResponse *, const char*);
SOAP_FMAC1 _ns1__JoinConferenceResponse * SOAP_FMAC2 soap_instantiate__ns1__JoinConferenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__JoinConferenceResponse * soap_new__ns1__JoinConferenceResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__JoinConferenceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__JoinConferenceResponse * soap_new_req__ns1__JoinConferenceResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__JoinConferenceResponse *_p = soap_new__ns1__JoinConferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__JoinConferenceResponse::OK = OK;
	}
	return _p;
}

inline _ns1__JoinConferenceResponse * soap_new_set__ns1__JoinConferenceResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__JoinConferenceResponse *_p = soap_new__ns1__JoinConferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__JoinConferenceResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__JoinConferenceResponse(struct soap *soap, _ns1__JoinConferenceResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:JoinConferenceResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__JoinConferenceResponse * SOAP_FMAC4 soap_get__ns1__JoinConferenceResponse(struct soap*, _ns1__JoinConferenceResponse *, const char*, const char*);

inline int soap_read__ns1__JoinConferenceResponse(struct soap *soap, _ns1__JoinConferenceResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__JoinConferenceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__JoinConferenceRequest_DEFINED
#define SOAP_TYPE__ns1__JoinConferenceRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__JoinConferenceRequest(struct soap*, const char*, int, const _ns1__JoinConferenceRequest *, const char*);
SOAP_FMAC3 _ns1__JoinConferenceRequest * SOAP_FMAC4 soap_in__ns1__JoinConferenceRequest(struct soap*, const char*, _ns1__JoinConferenceRequest *, const char*);
SOAP_FMAC1 _ns1__JoinConferenceRequest * SOAP_FMAC2 soap_instantiate__ns1__JoinConferenceRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__JoinConferenceRequest * soap_new__ns1__JoinConferenceRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__JoinConferenceRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__JoinConferenceRequest * soap_new_req__ns1__JoinConferenceRequest(
	struct soap *soap,
	int __union_JoinConferenceRequest,
	const union _ns1__union_JoinConferenceRequest& union_JoinConferenceRequest)
{	_ns1__JoinConferenceRequest *_p = soap_new__ns1__JoinConferenceRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__JoinConferenceRequest::__union_JoinConferenceRequest = __union_JoinConferenceRequest;
		_p->_ns1__JoinConferenceRequest::union_JoinConferenceRequest = union_JoinConferenceRequest;
	}
	return _p;
}

inline _ns1__JoinConferenceRequest * soap_new_set__ns1__JoinConferenceRequest(
	struct soap *soap,
	int __union_JoinConferenceRequest,
	const union _ns1__union_JoinConferenceRequest& union_JoinConferenceRequest,
	char *PIN,
	char *referenceNumber)
{	_ns1__JoinConferenceRequest *_p = soap_new__ns1__JoinConferenceRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__JoinConferenceRequest::__union_JoinConferenceRequest = __union_JoinConferenceRequest;
		_p->_ns1__JoinConferenceRequest::union_JoinConferenceRequest = union_JoinConferenceRequest;
		_p->_ns1__JoinConferenceRequest::PIN = PIN;
		_p->_ns1__JoinConferenceRequest::referenceNumber = referenceNumber;
	}
	return _p;
}

inline int soap_write__ns1__JoinConferenceRequest(struct soap *soap, _ns1__JoinConferenceRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:JoinConferenceRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__JoinConferenceRequest * SOAP_FMAC4 soap_get__ns1__JoinConferenceRequest(struct soap*, _ns1__JoinConferenceRequest *, const char*, const char*);

inline int soap_read__ns1__JoinConferenceRequest(struct soap *soap, _ns1__JoinConferenceRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__JoinConferenceRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CancelOutboundCallResponse_DEFINED
#define SOAP_TYPE__ns1__CancelOutboundCallResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CancelOutboundCallResponse(struct soap*, const char*, int, const _ns1__CancelOutboundCallResponse *, const char*);
SOAP_FMAC3 _ns1__CancelOutboundCallResponse * SOAP_FMAC4 soap_in__ns1__CancelOutboundCallResponse(struct soap*, const char*, _ns1__CancelOutboundCallResponse *, const char*);
SOAP_FMAC1 _ns1__CancelOutboundCallResponse * SOAP_FMAC2 soap_instantiate__ns1__CancelOutboundCallResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CancelOutboundCallResponse * soap_new__ns1__CancelOutboundCallResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CancelOutboundCallResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CancelOutboundCallResponse * soap_new_req__ns1__CancelOutboundCallResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CancelOutboundCallResponse *_p = soap_new__ns1__CancelOutboundCallResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelOutboundCallResponse::OK = OK;
	}
	return _p;
}

inline _ns1__CancelOutboundCallResponse * soap_new_set__ns1__CancelOutboundCallResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__CancelOutboundCallResponse *_p = soap_new__ns1__CancelOutboundCallResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelOutboundCallResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__CancelOutboundCallResponse(struct soap *soap, _ns1__CancelOutboundCallResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelOutboundCallResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CancelOutboundCallResponse * SOAP_FMAC4 soap_get__ns1__CancelOutboundCallResponse(struct soap*, _ns1__CancelOutboundCallResponse *, const char*, const char*);

inline int soap_read__ns1__CancelOutboundCallResponse(struct soap *soap, _ns1__CancelOutboundCallResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CancelOutboundCallResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CancelOutboundCallRequest_DEFINED
#define SOAP_TYPE__ns1__CancelOutboundCallRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CancelOutboundCallRequest(struct soap*, const char*, int, const _ns1__CancelOutboundCallRequest *, const char*);
SOAP_FMAC3 _ns1__CancelOutboundCallRequest * SOAP_FMAC4 soap_in__ns1__CancelOutboundCallRequest(struct soap*, const char*, _ns1__CancelOutboundCallRequest *, const char*);
SOAP_FMAC1 _ns1__CancelOutboundCallRequest * SOAP_FMAC2 soap_instantiate__ns1__CancelOutboundCallRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CancelOutboundCallRequest * soap_new__ns1__CancelOutboundCallRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__CancelOutboundCallRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__CancelOutboundCallRequest * soap_new_req__ns1__CancelOutboundCallRequest(
	struct soap *soap,
	char *conferenceID,
	char *entityID)
{	_ns1__CancelOutboundCallRequest *_p = soap_new__ns1__CancelOutboundCallRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelOutboundCallRequest::conferenceID = conferenceID;
		_p->_ns1__CancelOutboundCallRequest::entityID = entityID;
	}
	return _p;
}

inline _ns1__CancelOutboundCallRequest * soap_new_set__ns1__CancelOutboundCallRequest(
	struct soap *soap,
	char *conferenceID,
	char *entityID,
	char *moderatorPIN)
{	_ns1__CancelOutboundCallRequest *_p = soap_new__ns1__CancelOutboundCallRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CancelOutboundCallRequest::conferenceID = conferenceID;
		_p->_ns1__CancelOutboundCallRequest::entityID = entityID;
		_p->_ns1__CancelOutboundCallRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__CancelOutboundCallRequest(struct soap *soap, _ns1__CancelOutboundCallRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelOutboundCallRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CancelOutboundCallRequest * SOAP_FMAC4 soap_get__ns1__CancelOutboundCallRequest(struct soap*, _ns1__CancelOutboundCallRequest *, const char*, const char*);

inline int soap_read__ns1__CancelOutboundCallRequest(struct soap *soap, _ns1__CancelOutboundCallRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CancelOutboundCallRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InviteToConferenceResponse_DEFINED
#define SOAP_TYPE__ns1__InviteToConferenceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InviteToConferenceResponse(struct soap*, const char*, int, const _ns1__InviteToConferenceResponse *, const char*);
SOAP_FMAC3 _ns1__InviteToConferenceResponse * SOAP_FMAC4 soap_in__ns1__InviteToConferenceResponse(struct soap*, const char*, _ns1__InviteToConferenceResponse *, const char*);
SOAP_FMAC1 _ns1__InviteToConferenceResponse * SOAP_FMAC2 soap_instantiate__ns1__InviteToConferenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InviteToConferenceResponse * soap_new__ns1__InviteToConferenceResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__InviteToConferenceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InviteToConferenceResponse * soap_new_req__ns1__InviteToConferenceResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__InviteToConferenceResponse *_p = soap_new__ns1__InviteToConferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InviteToConferenceResponse::OK = OK;
	}
	return _p;
}

inline _ns1__InviteToConferenceResponse * soap_new_set__ns1__InviteToConferenceResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__InviteToConferenceResponse *_p = soap_new__ns1__InviteToConferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InviteToConferenceResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__InviteToConferenceResponse(struct soap *soap, _ns1__InviteToConferenceResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InviteToConferenceResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InviteToConferenceResponse * SOAP_FMAC4 soap_get__ns1__InviteToConferenceResponse(struct soap*, _ns1__InviteToConferenceResponse *, const char*, const char*);

inline int soap_read__ns1__InviteToConferenceResponse(struct soap *soap, _ns1__InviteToConferenceResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InviteToConferenceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InviteToConferenceRequest_DEFINED
#define SOAP_TYPE__ns1__InviteToConferenceRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InviteToConferenceRequest(struct soap*, const char*, int, const _ns1__InviteToConferenceRequest *, const char*);
SOAP_FMAC3 _ns1__InviteToConferenceRequest * SOAP_FMAC4 soap_in__ns1__InviteToConferenceRequest(struct soap*, const char*, _ns1__InviteToConferenceRequest *, const char*);
SOAP_FMAC1 _ns1__InviteToConferenceRequest * SOAP_FMAC2 soap_instantiate__ns1__InviteToConferenceRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InviteToConferenceRequest * soap_new__ns1__InviteToConferenceRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__InviteToConferenceRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__InviteToConferenceRequest * soap_new_req__ns1__InviteToConferenceRequest(
	struct soap *soap,
	char *conferenceID,
	int __union_InviteToConferenceRequest,
	const union _ns1__union_InviteToConferenceRequest& union_InviteToConferenceRequest)
{	_ns1__InviteToConferenceRequest *_p = soap_new__ns1__InviteToConferenceRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InviteToConferenceRequest::conferenceID = conferenceID;
		_p->_ns1__InviteToConferenceRequest::__union_InviteToConferenceRequest = __union_InviteToConferenceRequest;
		_p->_ns1__InviteToConferenceRequest::union_InviteToConferenceRequest = union_InviteToConferenceRequest;
	}
	return _p;
}

inline _ns1__InviteToConferenceRequest * soap_new_set__ns1__InviteToConferenceRequest(
	struct soap *soap,
	char *conferenceID,
	int __union_InviteToConferenceRequest,
	const union _ns1__union_InviteToConferenceRequest& union_InviteToConferenceRequest,
	char *moderatorPIN)
{	_ns1__InviteToConferenceRequest *_p = soap_new__ns1__InviteToConferenceRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InviteToConferenceRequest::conferenceID = conferenceID;
		_p->_ns1__InviteToConferenceRequest::__union_InviteToConferenceRequest = __union_InviteToConferenceRequest;
		_p->_ns1__InviteToConferenceRequest::union_InviteToConferenceRequest = union_InviteToConferenceRequest;
		_p->_ns1__InviteToConferenceRequest::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__InviteToConferenceRequest(struct soap *soap, _ns1__InviteToConferenceRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InviteToConferenceRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InviteToConferenceRequest * SOAP_FMAC4 soap_get__ns1__InviteToConferenceRequest(struct soap*, _ns1__InviteToConferenceRequest *, const char*, const char*);

inline int soap_read__ns1__InviteToConferenceRequest(struct soap *soap, _ns1__InviteToConferenceRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InviteToConferenceRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEntityByEntityIDResponse_DEFINED
#define SOAP_TYPE__ns1__GetEntityByEntityIDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEntityByEntityIDResponse(struct soap*, const char*, int, const _ns1__GetEntityByEntityIDResponse *, const char*);
SOAP_FMAC3 _ns1__GetEntityByEntityIDResponse * SOAP_FMAC4 soap_in__ns1__GetEntityByEntityIDResponse(struct soap*, const char*, _ns1__GetEntityByEntityIDResponse *, const char*);
SOAP_FMAC1 _ns1__GetEntityByEntityIDResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEntityByEntityIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEntityByEntityIDResponse * soap_new__ns1__GetEntityByEntityIDResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetEntityByEntityIDResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEntityByEntityIDResponse * soap_new_req__ns1__GetEntityByEntityIDResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__GetEntityByEntityIDResponse *_p = soap_new__ns1__GetEntityByEntityIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEntityByEntityIDResponse::total = total;
		_p->_ns1__GetEntityByEntityIDResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__GetEntityByEntityIDResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__GetEntityByEntityIDResponse * soap_new_set__ns1__GetEntityByEntityIDResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__GetEntityByEntityIDResponse *_p = soap_new__ns1__GetEntityByEntityIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEntityByEntityIDResponse::total = total;
		_p->_ns1__GetEntityByEntityIDResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__GetEntityByEntityIDResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__GetEntityByEntityIDResponse(struct soap *soap, _ns1__GetEntityByEntityIDResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEntityByEntityIDResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEntityByEntityIDResponse * SOAP_FMAC4 soap_get__ns1__GetEntityByEntityIDResponse(struct soap*, _ns1__GetEntityByEntityIDResponse *, const char*, const char*);

inline int soap_read__ns1__GetEntityByEntityIDResponse(struct soap *soap, _ns1__GetEntityByEntityIDResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEntityByEntityIDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEntityByEntityIDRequest_DEFINED
#define SOAP_TYPE__ns1__GetEntityByEntityIDRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEntityByEntityIDRequest(struct soap*, const char*, int, const _ns1__GetEntityByEntityIDRequest *, const char*);
SOAP_FMAC3 _ns1__GetEntityByEntityIDRequest * SOAP_FMAC4 soap_in__ns1__GetEntityByEntityIDRequest(struct soap*, const char*, _ns1__GetEntityByEntityIDRequest *, const char*);
SOAP_FMAC1 _ns1__GetEntityByEntityIDRequest * SOAP_FMAC2 soap_instantiate__ns1__GetEntityByEntityIDRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEntityByEntityIDRequest * soap_new__ns1__GetEntityByEntityIDRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GetEntityByEntityIDRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEntityByEntityIDRequest * soap_new_req__ns1__GetEntityByEntityIDRequest(
	struct soap *soap,
	int __sizeentityID,
	char **entityID)
{	_ns1__GetEntityByEntityIDRequest *_p = soap_new__ns1__GetEntityByEntityIDRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEntityByEntityIDRequest::__sizeentityID = __sizeentityID;
		_p->_ns1__GetEntityByEntityIDRequest::entityID = entityID;
	}
	return _p;
}

inline _ns1__GetEntityByEntityIDRequest * soap_new_set__ns1__GetEntityByEntityIDRequest(
	struct soap *soap,
	int __sizeentityID,
	char **entityID)
{	_ns1__GetEntityByEntityIDRequest *_p = soap_new__ns1__GetEntityByEntityIDRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEntityByEntityIDRequest::__sizeentityID = __sizeentityID;
		_p->_ns1__GetEntityByEntityIDRequest::entityID = entityID;
	}
	return _p;
}

inline int soap_write__ns1__GetEntityByEntityIDRequest(struct soap *soap, _ns1__GetEntityByEntityIDRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEntityByEntityIDRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEntityByEntityIDRequest * SOAP_FMAC4 soap_get__ns1__GetEntityByEntityIDRequest(struct soap*, _ns1__GetEntityByEntityIDRequest *, const char*, const char*);

inline int soap_read__ns1__GetEntityByEntityIDRequest(struct soap *soap, _ns1__GetEntityByEntityIDRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEntityByEntityIDRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SearchByEmailResponse_DEFINED
#define SOAP_TYPE__ns1__SearchByEmailResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SearchByEmailResponse(struct soap*, const char*, int, const _ns1__SearchByEmailResponse *, const char*);
SOAP_FMAC3 _ns1__SearchByEmailResponse * SOAP_FMAC4 soap_in__ns1__SearchByEmailResponse(struct soap*, const char*, _ns1__SearchByEmailResponse *, const char*);
SOAP_FMAC1 _ns1__SearchByEmailResponse * SOAP_FMAC2 soap_instantiate__ns1__SearchByEmailResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SearchByEmailResponse * soap_new__ns1__SearchByEmailResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SearchByEmailResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SearchByEmailResponse * soap_new_req__ns1__SearchByEmailResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__SearchByEmailResponse *_p = soap_new__ns1__SearchByEmailResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchByEmailResponse::total = total;
		_p->_ns1__SearchByEmailResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__SearchByEmailResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__SearchByEmailResponse * soap_new_set__ns1__SearchByEmailResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__SearchByEmailResponse *_p = soap_new__ns1__SearchByEmailResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchByEmailResponse::total = total;
		_p->_ns1__SearchByEmailResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__SearchByEmailResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__SearchByEmailResponse(struct soap *soap, _ns1__SearchByEmailResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SearchByEmailResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SearchByEmailResponse * SOAP_FMAC4 soap_get__ns1__SearchByEmailResponse(struct soap*, _ns1__SearchByEmailResponse *, const char*, const char*);

inline int soap_read__ns1__SearchByEmailResponse(struct soap *soap, _ns1__SearchByEmailResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SearchByEmailResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SearchByEmailRequest_DEFINED
#define SOAP_TYPE__ns1__SearchByEmailRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SearchByEmailRequest(struct soap*, const char*, int, const _ns1__SearchByEmailRequest *, const char*);
SOAP_FMAC3 _ns1__SearchByEmailRequest * SOAP_FMAC4 soap_in__ns1__SearchByEmailRequest(struct soap*, const char*, _ns1__SearchByEmailRequest *, const char*);
SOAP_FMAC1 _ns1__SearchByEmailRequest * SOAP_FMAC2 soap_instantiate__ns1__SearchByEmailRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SearchByEmailRequest * soap_new__ns1__SearchByEmailRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SearchByEmailRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SearchByEmailRequest * soap_new_req__ns1__SearchByEmailRequest(
	struct soap *soap,
	char *emailAddress)
{	_ns1__SearchByEmailRequest *_p = soap_new__ns1__SearchByEmailRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchByEmailRequest::emailAddress = emailAddress;
	}
	return _p;
}

inline _ns1__SearchByEmailRequest * soap_new_set__ns1__SearchByEmailRequest(
	struct soap *soap,
	char *emailAddress,
	_ns1__Filter *Filter)
{	_ns1__SearchByEmailRequest *_p = soap_new__ns1__SearchByEmailRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchByEmailRequest::emailAddress = emailAddress;
		_p->_ns1__SearchByEmailRequest::Filter = Filter;
	}
	return _p;
}

inline int soap_write__ns1__SearchByEmailRequest(struct soap *soap, _ns1__SearchByEmailRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SearchByEmailRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SearchByEmailRequest * SOAP_FMAC4 soap_get__ns1__SearchByEmailRequest(struct soap*, _ns1__SearchByEmailRequest *, const char*, const char*);

inline int soap_read__ns1__SearchByEmailRequest(struct soap *soap, _ns1__SearchByEmailRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SearchByEmailRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SearchByEntityIDResponse_DEFINED
#define SOAP_TYPE__ns1__SearchByEntityIDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SearchByEntityIDResponse(struct soap*, const char*, int, const _ns1__SearchByEntityIDResponse *, const char*);
SOAP_FMAC3 _ns1__SearchByEntityIDResponse * SOAP_FMAC4 soap_in__ns1__SearchByEntityIDResponse(struct soap*, const char*, _ns1__SearchByEntityIDResponse *, const char*);
SOAP_FMAC1 _ns1__SearchByEntityIDResponse * SOAP_FMAC2 soap_instantiate__ns1__SearchByEntityIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SearchByEntityIDResponse * soap_new__ns1__SearchByEntityIDResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SearchByEntityIDResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SearchByEntityIDResponse * soap_new_req__ns1__SearchByEntityIDResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__SearchByEntityIDResponse *_p = soap_new__ns1__SearchByEntityIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchByEntityIDResponse::total = total;
		_p->_ns1__SearchByEntityIDResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__SearchByEntityIDResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__SearchByEntityIDResponse * soap_new_set__ns1__SearchByEntityIDResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__SearchByEntityIDResponse *_p = soap_new__ns1__SearchByEntityIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchByEntityIDResponse::total = total;
		_p->_ns1__SearchByEntityIDResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__SearchByEntityIDResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__SearchByEntityIDResponse(struct soap *soap, _ns1__SearchByEntityIDResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SearchByEntityIDResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SearchByEntityIDResponse * SOAP_FMAC4 soap_get__ns1__SearchByEntityIDResponse(struct soap*, _ns1__SearchByEntityIDResponse *, const char*, const char*);

inline int soap_read__ns1__SearchByEntityIDResponse(struct soap *soap, _ns1__SearchByEntityIDResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SearchByEntityIDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SearchByEntityIDRequest_DEFINED
#define SOAP_TYPE__ns1__SearchByEntityIDRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SearchByEntityIDRequest(struct soap*, const char*, int, const _ns1__SearchByEntityIDRequest *, const char*);
SOAP_FMAC3 _ns1__SearchByEntityIDRequest * SOAP_FMAC4 soap_in__ns1__SearchByEntityIDRequest(struct soap*, const char*, _ns1__SearchByEntityIDRequest *, const char*);
SOAP_FMAC1 _ns1__SearchByEntityIDRequest * SOAP_FMAC2 soap_instantiate__ns1__SearchByEntityIDRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SearchByEntityIDRequest * soap_new__ns1__SearchByEntityIDRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SearchByEntityIDRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SearchByEntityIDRequest * soap_new_req__ns1__SearchByEntityIDRequest(
	struct soap *soap,
	char *entityID)
{	_ns1__SearchByEntityIDRequest *_p = soap_new__ns1__SearchByEntityIDRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchByEntityIDRequest::entityID = entityID;
	}
	return _p;
}

inline _ns1__SearchByEntityIDRequest * soap_new_set__ns1__SearchByEntityIDRequest(
	struct soap *soap,
	char *entityID,
	_ns1__Filter *Filter)
{	_ns1__SearchByEntityIDRequest *_p = soap_new__ns1__SearchByEntityIDRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchByEntityIDRequest::entityID = entityID;
		_p->_ns1__SearchByEntityIDRequest::Filter = Filter;
	}
	return _p;
}

inline int soap_write__ns1__SearchByEntityIDRequest(struct soap *soap, _ns1__SearchByEntityIDRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SearchByEntityIDRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SearchByEntityIDRequest * SOAP_FMAC4 soap_get__ns1__SearchByEntityIDRequest(struct soap*, _ns1__SearchByEntityIDRequest *, const char*, const char*);

inline int soap_read__ns1__SearchByEntityIDRequest(struct soap *soap, _ns1__SearchByEntityIDRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SearchByEntityIDRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SearchResponse_DEFINED
#define SOAP_TYPE__ns1__SearchResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SearchResponse(struct soap*, const char*, int, const _ns1__SearchResponse *, const char*);
SOAP_FMAC3 _ns1__SearchResponse * SOAP_FMAC4 soap_in__ns1__SearchResponse(struct soap*, const char*, _ns1__SearchResponse *, const char*);
SOAP_FMAC1 _ns1__SearchResponse * SOAP_FMAC2 soap_instantiate__ns1__SearchResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SearchResponse * soap_new__ns1__SearchResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SearchResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SearchResponse * soap_new_req__ns1__SearchResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__SearchResponse *_p = soap_new__ns1__SearchResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchResponse::total = total;
		_p->_ns1__SearchResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__SearchResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__SearchResponse * soap_new_set__ns1__SearchResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__SearchResponse *_p = soap_new__ns1__SearchResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchResponse::total = total;
		_p->_ns1__SearchResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__SearchResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__SearchResponse(struct soap *soap, _ns1__SearchResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SearchResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SearchResponse * SOAP_FMAC4 soap_get__ns1__SearchResponse(struct soap*, _ns1__SearchResponse *, const char*, const char*);

inline int soap_read__ns1__SearchResponse(struct soap *soap, _ns1__SearchResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SearchResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SearchRequest_DEFINED
#define SOAP_TYPE__ns1__SearchRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SearchRequest(struct soap*, const char*, int, const _ns1__SearchRequest *, const char*);
SOAP_FMAC3 _ns1__SearchRequest * SOAP_FMAC4 soap_in__ns1__SearchRequest(struct soap*, const char*, _ns1__SearchRequest *, const char*);
SOAP_FMAC1 _ns1__SearchRequest * SOAP_FMAC2 soap_instantiate__ns1__SearchRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SearchRequest * soap_new__ns1__SearchRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SearchRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SearchRequest * soap_new_req__ns1__SearchRequest(
	struct soap *soap,
	_ns1__Filter *Filter)
{	_ns1__SearchRequest *_p = soap_new__ns1__SearchRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchRequest::Filter = Filter;
	}
	return _p;
}

inline _ns1__SearchRequest * soap_new_set__ns1__SearchRequest(
	struct soap *soap,
	_ns1__Filter *Filter)
{	_ns1__SearchRequest *_p = soap_new__ns1__SearchRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchRequest::Filter = Filter;
	}
	return _p;
}

inline int soap_write__ns1__SearchRequest(struct soap *soap, _ns1__SearchRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SearchRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SearchRequest * SOAP_FMAC4 soap_get__ns1__SearchRequest(struct soap*, _ns1__SearchRequest *, const char*, const char*);

inline int soap_read__ns1__SearchRequest(struct soap *soap, _ns1__SearchRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SearchRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveFromMyContactsResponse_DEFINED
#define SOAP_TYPE__ns1__RemoveFromMyContactsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveFromMyContactsResponse(struct soap*, const char*, int, const _ns1__RemoveFromMyContactsResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveFromMyContactsResponse * SOAP_FMAC4 soap_in__ns1__RemoveFromMyContactsResponse(struct soap*, const char*, _ns1__RemoveFromMyContactsResponse *, const char*);
SOAP_FMAC1 _ns1__RemoveFromMyContactsResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveFromMyContactsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveFromMyContactsResponse * soap_new__ns1__RemoveFromMyContactsResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveFromMyContactsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveFromMyContactsResponse * soap_new_req__ns1__RemoveFromMyContactsResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveFromMyContactsResponse *_p = soap_new__ns1__RemoveFromMyContactsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveFromMyContactsResponse::OK = OK;
	}
	return _p;
}

inline _ns1__RemoveFromMyContactsResponse * soap_new_set__ns1__RemoveFromMyContactsResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__RemoveFromMyContactsResponse *_p = soap_new__ns1__RemoveFromMyContactsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveFromMyContactsResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__RemoveFromMyContactsResponse(struct soap *soap, _ns1__RemoveFromMyContactsResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveFromMyContactsResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveFromMyContactsResponse * SOAP_FMAC4 soap_get__ns1__RemoveFromMyContactsResponse(struct soap*, _ns1__RemoveFromMyContactsResponse *, const char*, const char*);

inline int soap_read__ns1__RemoveFromMyContactsResponse(struct soap *soap, _ns1__RemoveFromMyContactsResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveFromMyContactsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveFromMyContactsRequest_DEFINED
#define SOAP_TYPE__ns1__RemoveFromMyContactsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveFromMyContactsRequest(struct soap*, const char*, int, const _ns1__RemoveFromMyContactsRequest *, const char*);
SOAP_FMAC3 _ns1__RemoveFromMyContactsRequest * SOAP_FMAC4 soap_in__ns1__RemoveFromMyContactsRequest(struct soap*, const char*, _ns1__RemoveFromMyContactsRequest *, const char*);
SOAP_FMAC1 _ns1__RemoveFromMyContactsRequest * SOAP_FMAC2 soap_instantiate__ns1__RemoveFromMyContactsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveFromMyContactsRequest * soap_new__ns1__RemoveFromMyContactsRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RemoveFromMyContactsRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveFromMyContactsRequest * soap_new_req__ns1__RemoveFromMyContactsRequest(
	struct soap *soap,
	char *entityID)
{	_ns1__RemoveFromMyContactsRequest *_p = soap_new__ns1__RemoveFromMyContactsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveFromMyContactsRequest::entityID = entityID;
	}
	return _p;
}

inline _ns1__RemoveFromMyContactsRequest * soap_new_set__ns1__RemoveFromMyContactsRequest(
	struct soap *soap,
	char *entityID)
{	_ns1__RemoveFromMyContactsRequest *_p = soap_new__ns1__RemoveFromMyContactsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveFromMyContactsRequest::entityID = entityID;
	}
	return _p;
}

inline int soap_write__ns1__RemoveFromMyContactsRequest(struct soap *soap, _ns1__RemoveFromMyContactsRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveFromMyContactsRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveFromMyContactsRequest * SOAP_FMAC4 soap_get__ns1__RemoveFromMyContactsRequest(struct soap*, _ns1__RemoveFromMyContactsRequest *, const char*, const char*);

inline int soap_read__ns1__RemoveFromMyContactsRequest(struct soap *soap, _ns1__RemoveFromMyContactsRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveFromMyContactsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AddToMyContactsResponse_DEFINED
#define SOAP_TYPE__ns1__AddToMyContactsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddToMyContactsResponse(struct soap*, const char*, int, const _ns1__AddToMyContactsResponse *, const char*);
SOAP_FMAC3 _ns1__AddToMyContactsResponse * SOAP_FMAC4 soap_in__ns1__AddToMyContactsResponse(struct soap*, const char*, _ns1__AddToMyContactsResponse *, const char*);
SOAP_FMAC1 _ns1__AddToMyContactsResponse * SOAP_FMAC2 soap_instantiate__ns1__AddToMyContactsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddToMyContactsResponse * soap_new__ns1__AddToMyContactsResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__AddToMyContactsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddToMyContactsResponse * soap_new_req__ns1__AddToMyContactsResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__AddToMyContactsResponse *_p = soap_new__ns1__AddToMyContactsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddToMyContactsResponse::OK = OK;
	}
	return _p;
}

inline _ns1__AddToMyContactsResponse * soap_new_set__ns1__AddToMyContactsResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__AddToMyContactsResponse *_p = soap_new__ns1__AddToMyContactsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddToMyContactsResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__AddToMyContactsResponse(struct soap *soap, _ns1__AddToMyContactsResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddToMyContactsResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddToMyContactsResponse * SOAP_FMAC4 soap_get__ns1__AddToMyContactsResponse(struct soap*, _ns1__AddToMyContactsResponse *, const char*, const char*);

inline int soap_read__ns1__AddToMyContactsResponse(struct soap *soap, _ns1__AddToMyContactsResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AddToMyContactsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AddToMyContactsRequest_DEFINED
#define SOAP_TYPE__ns1__AddToMyContactsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddToMyContactsRequest(struct soap*, const char*, int, const _ns1__AddToMyContactsRequest *, const char*);
SOAP_FMAC3 _ns1__AddToMyContactsRequest * SOAP_FMAC4 soap_in__ns1__AddToMyContactsRequest(struct soap*, const char*, _ns1__AddToMyContactsRequest *, const char*);
SOAP_FMAC1 _ns1__AddToMyContactsRequest * SOAP_FMAC2 soap_instantiate__ns1__AddToMyContactsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddToMyContactsRequest * soap_new__ns1__AddToMyContactsRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__AddToMyContactsRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddToMyContactsRequest * soap_new_req__ns1__AddToMyContactsRequest(
	struct soap *soap,
	char *entityID)
{	_ns1__AddToMyContactsRequest *_p = soap_new__ns1__AddToMyContactsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddToMyContactsRequest::entityID = entityID;
	}
	return _p;
}

inline _ns1__AddToMyContactsRequest * soap_new_set__ns1__AddToMyContactsRequest(
	struct soap *soap,
	char *entityID)
{	_ns1__AddToMyContactsRequest *_p = soap_new__ns1__AddToMyContactsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddToMyContactsRequest::entityID = entityID;
	}
	return _p;
}

inline int soap_write__ns1__AddToMyContactsRequest(struct soap *soap, _ns1__AddToMyContactsRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddToMyContactsRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddToMyContactsRequest * SOAP_FMAC4 soap_get__ns1__AddToMyContactsRequest(struct soap*, _ns1__AddToMyContactsRequest *, const char*, const char*);

inline int soap_read__ns1__AddToMyContactsRequest(struct soap *soap, _ns1__AddToMyContactsRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AddToMyContactsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SearchMyContactsResponse_DEFINED
#define SOAP_TYPE__ns1__SearchMyContactsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SearchMyContactsResponse(struct soap*, const char*, int, const _ns1__SearchMyContactsResponse *, const char*);
SOAP_FMAC3 _ns1__SearchMyContactsResponse * SOAP_FMAC4 soap_in__ns1__SearchMyContactsResponse(struct soap*, const char*, _ns1__SearchMyContactsResponse *, const char*);
SOAP_FMAC1 _ns1__SearchMyContactsResponse * SOAP_FMAC2 soap_instantiate__ns1__SearchMyContactsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SearchMyContactsResponse * soap_new__ns1__SearchMyContactsResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SearchMyContactsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SearchMyContactsResponse * soap_new_req__ns1__SearchMyContactsResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__SearchMyContactsResponse *_p = soap_new__ns1__SearchMyContactsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchMyContactsResponse::total = total;
		_p->_ns1__SearchMyContactsResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__SearchMyContactsResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__SearchMyContactsResponse * soap_new_set__ns1__SearchMyContactsResponse(
	struct soap *soap,
	int total,
	int __sizeEntity,
	_ns1__Entity **Entity)
{	_ns1__SearchMyContactsResponse *_p = soap_new__ns1__SearchMyContactsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchMyContactsResponse::total = total;
		_p->_ns1__SearchMyContactsResponse::__sizeEntity = __sizeEntity;
		_p->_ns1__SearchMyContactsResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__SearchMyContactsResponse(struct soap *soap, _ns1__SearchMyContactsResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SearchMyContactsResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SearchMyContactsResponse * SOAP_FMAC4 soap_get__ns1__SearchMyContactsResponse(struct soap*, _ns1__SearchMyContactsResponse *, const char*, const char*);

inline int soap_read__ns1__SearchMyContactsResponse(struct soap *soap, _ns1__SearchMyContactsResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SearchMyContactsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SearchMyContactsRequest_DEFINED
#define SOAP_TYPE__ns1__SearchMyContactsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SearchMyContactsRequest(struct soap*, const char*, int, const _ns1__SearchMyContactsRequest *, const char*);
SOAP_FMAC3 _ns1__SearchMyContactsRequest * SOAP_FMAC4 soap_in__ns1__SearchMyContactsRequest(struct soap*, const char*, _ns1__SearchMyContactsRequest *, const char*);
SOAP_FMAC1 _ns1__SearchMyContactsRequest * SOAP_FMAC2 soap_instantiate__ns1__SearchMyContactsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SearchMyContactsRequest * soap_new__ns1__SearchMyContactsRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SearchMyContactsRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SearchMyContactsRequest * soap_new_req__ns1__SearchMyContactsRequest(
	struct soap *soap)
{	_ns1__SearchMyContactsRequest *_p = soap_new__ns1__SearchMyContactsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SearchMyContactsRequest * soap_new_set__ns1__SearchMyContactsRequest(
	struct soap *soap,
	_ns1__Filter *Filter)
{	_ns1__SearchMyContactsRequest *_p = soap_new__ns1__SearchMyContactsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SearchMyContactsRequest::Filter = Filter;
	}
	return _p;
}

inline int soap_write__ns1__SearchMyContactsRequest(struct soap *soap, _ns1__SearchMyContactsRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SearchMyContactsRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SearchMyContactsRequest * SOAP_FMAC4 soap_get__ns1__SearchMyContactsRequest(struct soap*, _ns1__SearchMyContactsRequest *, const char*, const char*);

inline int soap_read__ns1__SearchMyContactsRequest(struct soap *soap, _ns1__SearchMyContactsRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SearchMyContactsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MyEndpointStatusResponse_DEFINED
#define SOAP_TYPE__ns1__MyEndpointStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MyEndpointStatusResponse(struct soap*, const char*, int, const _ns1__MyEndpointStatusResponse *, const char*);
SOAP_FMAC3 _ns1__MyEndpointStatusResponse * SOAP_FMAC4 soap_in__ns1__MyEndpointStatusResponse(struct soap*, const char*, _ns1__MyEndpointStatusResponse *, const char*);
SOAP_FMAC1 _ns1__MyEndpointStatusResponse * SOAP_FMAC2 soap_instantiate__ns1__MyEndpointStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MyEndpointStatusResponse * soap_new__ns1__MyEndpointStatusResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__MyEndpointStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__MyEndpointStatusResponse * soap_new_req__ns1__MyEndpointStatusResponse(
	struct soap *soap,
	enum _ns1__MemberStatus MemberStatus)
{	_ns1__MyEndpointStatusResponse *_p = soap_new__ns1__MyEndpointStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MyEndpointStatusResponse::MemberStatus = MemberStatus;
	}
	return _p;
}

inline _ns1__MyEndpointStatusResponse * soap_new_set__ns1__MyEndpointStatusResponse(
	struct soap *soap,
	enum _ns1__MemberStatus MemberStatus)
{	_ns1__MyEndpointStatusResponse *_p = soap_new__ns1__MyEndpointStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MyEndpointStatusResponse::MemberStatus = MemberStatus;
	}
	return _p;
}

inline int soap_write__ns1__MyEndpointStatusResponse(struct soap *soap, _ns1__MyEndpointStatusResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MyEndpointStatusResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MyEndpointStatusResponse * SOAP_FMAC4 soap_get__ns1__MyEndpointStatusResponse(struct soap*, _ns1__MyEndpointStatusResponse *, const char*, const char*);

inline int soap_read__ns1__MyEndpointStatusResponse(struct soap *soap, _ns1__MyEndpointStatusResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__MyEndpointStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MyEndpointStatusRequest_DEFINED
#define SOAP_TYPE__ns1__MyEndpointStatusRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MyEndpointStatusRequest(struct soap*, const char*, int, const _ns1__MyEndpointStatusRequest *, const char*);
SOAP_FMAC3 _ns1__MyEndpointStatusRequest * SOAP_FMAC4 soap_in__ns1__MyEndpointStatusRequest(struct soap*, const char*, _ns1__MyEndpointStatusRequest *, const char*);
SOAP_FMAC1 _ns1__MyEndpointStatusRequest * SOAP_FMAC2 soap_instantiate__ns1__MyEndpointStatusRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MyEndpointStatusRequest * soap_new__ns1__MyEndpointStatusRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__MyEndpointStatusRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__MyEndpointStatusRequest * soap_new_req__ns1__MyEndpointStatusRequest(
	struct soap *soap)
{	_ns1__MyEndpointStatusRequest *_p = soap_new__ns1__MyEndpointStatusRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__MyEndpointStatusRequest * soap_new_set__ns1__MyEndpointStatusRequest(
	struct soap *soap)
{	_ns1__MyEndpointStatusRequest *_p = soap_new__ns1__MyEndpointStatusRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__MyEndpointStatusRequest(struct soap *soap, _ns1__MyEndpointStatusRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MyEndpointStatusRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MyEndpointStatusRequest * SOAP_FMAC4 soap_get__ns1__MyEndpointStatusRequest(struct soap*, _ns1__MyEndpointStatusRequest *, const char*, const char*);

inline int soap_read__ns1__MyEndpointStatusRequest(struct soap *soap, _ns1__MyEndpointStatusRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__MyEndpointStatusRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LogOutResponse_DEFINED
#define SOAP_TYPE__ns1__LogOutResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LogOutResponse(struct soap*, const char*, int, const _ns1__LogOutResponse *, const char*);
SOAP_FMAC3 _ns1__LogOutResponse * SOAP_FMAC4 soap_in__ns1__LogOutResponse(struct soap*, const char*, _ns1__LogOutResponse *, const char*);
SOAP_FMAC1 _ns1__LogOutResponse * SOAP_FMAC2 soap_instantiate__ns1__LogOutResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LogOutResponse * soap_new__ns1__LogOutResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LogOutResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LogOutResponse * soap_new_req__ns1__LogOutResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__LogOutResponse *_p = soap_new__ns1__LogOutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LogOutResponse::OK = OK;
	}
	return _p;
}

inline _ns1__LogOutResponse * soap_new_set__ns1__LogOutResponse(
	struct soap *soap,
	enum _ns1__OK OK)
{	_ns1__LogOutResponse *_p = soap_new__ns1__LogOutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LogOutResponse::OK = OK;
	}
	return _p;
}

inline int soap_write__ns1__LogOutResponse(struct soap *soap, _ns1__LogOutResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LogOutResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LogOutResponse * SOAP_FMAC4 soap_get__ns1__LogOutResponse(struct soap*, _ns1__LogOutResponse *, const char*, const char*);

inline int soap_read__ns1__LogOutResponse(struct soap *soap, _ns1__LogOutResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LogOutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LogOutRequest_DEFINED
#define SOAP_TYPE__ns1__LogOutRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LogOutRequest(struct soap*, const char*, int, const _ns1__LogOutRequest *, const char*);
SOAP_FMAC3 _ns1__LogOutRequest * SOAP_FMAC4 soap_in__ns1__LogOutRequest(struct soap*, const char*, _ns1__LogOutRequest *, const char*);
SOAP_FMAC1 _ns1__LogOutRequest * SOAP_FMAC2 soap_instantiate__ns1__LogOutRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LogOutRequest * soap_new__ns1__LogOutRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LogOutRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__LogOutRequest * soap_new_req__ns1__LogOutRequest(
	struct soap *soap)
{	_ns1__LogOutRequest *_p = soap_new__ns1__LogOutRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LogOutRequest * soap_new_set__ns1__LogOutRequest(
	struct soap *soap)
{	_ns1__LogOutRequest *_p = soap_new__ns1__LogOutRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__LogOutRequest(struct soap *soap, _ns1__LogOutRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LogOutRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LogOutRequest * SOAP_FMAC4 soap_get__ns1__LogOutRequest(struct soap*, _ns1__LogOutRequest *, const char*, const char*);

inline int soap_read__ns1__LogOutRequest(struct soap *soap, _ns1__LogOutRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LogOutRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LinkEndpointResponse_DEFINED
#define SOAP_TYPE__ns1__LinkEndpointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LinkEndpointResponse(struct soap*, const char*, int, const _ns1__LinkEndpointResponse *, const char*);
SOAP_FMAC3 _ns1__LinkEndpointResponse * SOAP_FMAC4 soap_in__ns1__LinkEndpointResponse(struct soap*, const char*, _ns1__LinkEndpointResponse *, const char*);
SOAP_FMAC1 _ns1__LinkEndpointResponse * SOAP_FMAC2 soap_instantiate__ns1__LinkEndpointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LinkEndpointResponse * soap_new__ns1__LinkEndpointResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LinkEndpointResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LinkEndpointResponse * soap_new_req__ns1__LinkEndpointResponse(
	struct soap *soap,
	_ns1__Entity *Entity)
{	_ns1__LinkEndpointResponse *_p = soap_new__ns1__LinkEndpointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LinkEndpointResponse::Entity = Entity;
	}
	return _p;
}

inline _ns1__LinkEndpointResponse * soap_new_set__ns1__LinkEndpointResponse(
	struct soap *soap,
	_ns1__Entity *Entity)
{	_ns1__LinkEndpointResponse *_p = soap_new__ns1__LinkEndpointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LinkEndpointResponse::Entity = Entity;
	}
	return _p;
}

inline int soap_write__ns1__LinkEndpointResponse(struct soap *soap, _ns1__LinkEndpointResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LinkEndpointResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LinkEndpointResponse * SOAP_FMAC4 soap_get__ns1__LinkEndpointResponse(struct soap*, _ns1__LinkEndpointResponse *, const char*, const char*);

inline int soap_read__ns1__LinkEndpointResponse(struct soap *soap, _ns1__LinkEndpointResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LinkEndpointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LinkEndpointRequest_DEFINED
#define SOAP_TYPE__ns1__LinkEndpointRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LinkEndpointRequest(struct soap*, const char*, int, const _ns1__LinkEndpointRequest *, const char*);
SOAP_FMAC3 _ns1__LinkEndpointRequest * SOAP_FMAC4 soap_in__ns1__LinkEndpointRequest(struct soap*, const char*, _ns1__LinkEndpointRequest *, const char*);
SOAP_FMAC1 _ns1__LinkEndpointRequest * SOAP_FMAC2 soap_instantiate__ns1__LinkEndpointRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LinkEndpointRequest * soap_new__ns1__LinkEndpointRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LinkEndpointRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__LinkEndpointRequest * soap_new_req__ns1__LinkEndpointRequest(
	struct soap *soap,
	char *EID)
{	_ns1__LinkEndpointRequest *_p = soap_new__ns1__LinkEndpointRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LinkEndpointRequest::EID = EID;
	}
	return _p;
}

inline _ns1__LinkEndpointRequest * soap_new_set__ns1__LinkEndpointRequest(
	struct soap *soap,
	char *EID,
	char *vrIP,
	char *clientType,
	char *applicationName,
	char *applicationVersion,
	char *applicationOs,
	char *deviceModel,
	bool *pak2)
{	_ns1__LinkEndpointRequest *_p = soap_new__ns1__LinkEndpointRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LinkEndpointRequest::EID = EID;
		_p->_ns1__LinkEndpointRequest::vrIP = vrIP;
		_p->_ns1__LinkEndpointRequest::clientType = clientType;
		_p->_ns1__LinkEndpointRequest::applicationName = applicationName;
		_p->_ns1__LinkEndpointRequest::applicationVersion = applicationVersion;
		_p->_ns1__LinkEndpointRequest::applicationOs = applicationOs;
		_p->_ns1__LinkEndpointRequest::deviceModel = deviceModel;
		_p->_ns1__LinkEndpointRequest::pak2 = pak2;
	}
	return _p;
}

inline int soap_write__ns1__LinkEndpointRequest(struct soap *soap, _ns1__LinkEndpointRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LinkEndpointRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LinkEndpointRequest * SOAP_FMAC4 soap_get__ns1__LinkEndpointRequest(struct soap*, _ns1__LinkEndpointRequest *, const char*, const char*);

inline int soap_read__ns1__LinkEndpointRequest(struct soap *soap, _ns1__LinkEndpointRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LinkEndpointRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LogInResponse_DEFINED
#define SOAP_TYPE__ns1__LogInResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LogInResponse(struct soap*, const char*, int, const _ns1__LogInResponse *, const char*);
SOAP_FMAC3 _ns1__LogInResponse * SOAP_FMAC4 soap_in__ns1__LogInResponse(struct soap*, const char*, _ns1__LogInResponse *, const char*);
SOAP_FMAC1 _ns1__LogInResponse * SOAP_FMAC2 soap_instantiate__ns1__LogInResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LogInResponse * soap_new__ns1__LogInResponse(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LogInResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LogInResponse * soap_new_req__ns1__LogInResponse(
	struct soap *soap,
	char *pak)
{	_ns1__LogInResponse *_p = soap_new__ns1__LogInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LogInResponse::pak = pak;
	}
	return _p;
}

inline _ns1__LogInResponse * soap_new_set__ns1__LogInResponse(
	struct soap *soap,
	char *pak,
	char *vmaddress,
	char *proxyaddress,
	char *loctag,
	char *pak2)
{	_ns1__LogInResponse *_p = soap_new__ns1__LogInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LogInResponse::pak = pak;
		_p->_ns1__LogInResponse::vmaddress = vmaddress;
		_p->_ns1__LogInResponse::proxyaddress = proxyaddress;
		_p->_ns1__LogInResponse::loctag = loctag;
		_p->_ns1__LogInResponse::pak2 = pak2;
	}
	return _p;
}

inline int soap_write__ns1__LogInResponse(struct soap *soap, _ns1__LogInResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LogInResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LogInResponse * SOAP_FMAC4 soap_get__ns1__LogInResponse(struct soap*, _ns1__LogInResponse *, const char*, const char*);

inline int soap_read__ns1__LogInResponse(struct soap *soap, _ns1__LogInResponse *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LogInResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LogInRequest_DEFINED
#define SOAP_TYPE__ns1__LogInRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LogInRequest(struct soap*, const char*, int, const _ns1__LogInRequest *, const char*);
SOAP_FMAC3 _ns1__LogInRequest * SOAP_FMAC4 soap_in__ns1__LogInRequest(struct soap*, const char*, _ns1__LogInRequest *, const char*);
SOAP_FMAC1 _ns1__LogInRequest * SOAP_FMAC2 soap_instantiate__ns1__LogInRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LogInRequest * soap_new__ns1__LogInRequest(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LogInRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__LogInRequest * soap_new_req__ns1__LogInRequest(
	struct soap *soap)
{	_ns1__LogInRequest *_p = soap_new__ns1__LogInRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LogInRequest * soap_new_set__ns1__LogInRequest(
	struct soap *soap,
	enum _ns1__ClientType *ClientType)
{	_ns1__LogInRequest *_p = soap_new__ns1__LogInRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LogInRequest::ClientType = ClientType;
	}
	return _p;
}

inline int soap_write__ns1__LogInRequest(struct soap *soap, _ns1__LogInRequest const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LogInRequest", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LogInRequest * SOAP_FMAC4 soap_get__ns1__LogInRequest(struct soap*, _ns1__LogInRequest *, const char*, const char*);

inline int soap_read__ns1__LogInRequest(struct soap *soap, _ns1__LogInRequest *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LogInRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__WelcomeBannerContent_DEFINED
#define SOAP_TYPE__ns1__WelcomeBannerContent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__WelcomeBannerContent(struct soap*, const char*, int, const _ns1__WelcomeBannerContent *, const char*);
SOAP_FMAC3 _ns1__WelcomeBannerContent * SOAP_FMAC4 soap_in__ns1__WelcomeBannerContent(struct soap*, const char*, _ns1__WelcomeBannerContent *, const char*);
SOAP_FMAC1 _ns1__WelcomeBannerContent * SOAP_FMAC2 soap_instantiate__ns1__WelcomeBannerContent(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__WelcomeBannerContent * soap_new__ns1__WelcomeBannerContent(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__WelcomeBannerContent(soap, n, NULL, NULL, NULL);
}

inline _ns1__WelcomeBannerContent * soap_new_req__ns1__WelcomeBannerContent(
	struct soap *soap,
	int __sizeLoginAttempt,
	_ns1__LoginAttempt **LoginAttempt)
{	_ns1__WelcomeBannerContent *_p = soap_new__ns1__WelcomeBannerContent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__WelcomeBannerContent::__sizeLoginAttempt = __sizeLoginAttempt;
		_p->_ns1__WelcomeBannerContent::LoginAttempt = LoginAttempt;
	}
	return _p;
}

inline _ns1__WelcomeBannerContent * soap_new_set__ns1__WelcomeBannerContent(
	struct soap *soap,
	char *welcomeBannerText,
	int __sizeLoginAttempt,
	_ns1__LoginAttempt **LoginAttempt,
	time_t *welcomeBannerPasswordExpiryDate)
{	_ns1__WelcomeBannerContent *_p = soap_new__ns1__WelcomeBannerContent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__WelcomeBannerContent::welcomeBannerText = welcomeBannerText;
		_p->_ns1__WelcomeBannerContent::__sizeLoginAttempt = __sizeLoginAttempt;
		_p->_ns1__WelcomeBannerContent::LoginAttempt = LoginAttempt;
		_p->_ns1__WelcomeBannerContent::welcomeBannerPasswordExpiryDate = welcomeBannerPasswordExpiryDate;
	}
	return _p;
}

inline int soap_write__ns1__WelcomeBannerContent(struct soap *soap, _ns1__WelcomeBannerContent const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WelcomeBannerContent", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__WelcomeBannerContent * SOAP_FMAC4 soap_get__ns1__WelcomeBannerContent(struct soap*, _ns1__WelcomeBannerContent *, const char*, const char*);

inline int soap_read__ns1__WelcomeBannerContent(struct soap *soap, _ns1__WelcomeBannerContent *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__WelcomeBannerContent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LoginAttempt_DEFINED
#define SOAP_TYPE__ns1__LoginAttempt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginAttempt(struct soap*, const char*, int, const _ns1__LoginAttempt *, const char*);
SOAP_FMAC3 _ns1__LoginAttempt * SOAP_FMAC4 soap_in__ns1__LoginAttempt(struct soap*, const char*, _ns1__LoginAttempt *, const char*);
SOAP_FMAC1 _ns1__LoginAttempt * SOAP_FMAC2 soap_instantiate__ns1__LoginAttempt(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LoginAttempt * soap_new__ns1__LoginAttempt(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LoginAttempt(soap, n, NULL, NULL, NULL);
}

inline _ns1__LoginAttempt * soap_new_req__ns1__LoginAttempt(
	struct soap *soap,
	char *result,
	char *sourceIPAddress,
	time_t attemptTime)
{	_ns1__LoginAttempt *_p = soap_new__ns1__LoginAttempt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LoginAttempt::result = result;
		_p->_ns1__LoginAttempt::sourceIPAddress = sourceIPAddress;
		_p->_ns1__LoginAttempt::attemptTime = attemptTime;
	}
	return _p;
}

inline _ns1__LoginAttempt * soap_new_set__ns1__LoginAttempt(
	struct soap *soap,
	char *result,
	char *sourceIPAddress,
	time_t attemptTime)
{	_ns1__LoginAttempt *_p = soap_new__ns1__LoginAttempt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LoginAttempt::result = result;
		_p->_ns1__LoginAttempt::sourceIPAddress = sourceIPAddress;
		_p->_ns1__LoginAttempt::attemptTime = attemptTime;
	}
	return _p;
}

inline int soap_write__ns1__LoginAttempt(struct soap *soap, _ns1__LoginAttempt const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginAttempt", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LoginAttempt * SOAP_FMAC4 soap_get__ns1__LoginAttempt(struct soap*, _ns1__LoginAttempt *, const char*, const char*);

inline int soap_read__ns1__LoginAttempt(struct soap *soap, _ns1__LoginAttempt *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LoginAttempt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LectureModeParticipant_DEFINED
#define SOAP_TYPE__ns1__LectureModeParticipant_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LectureModeParticipant(struct soap*, const char*, int, const _ns1__LectureModeParticipant *, const char*);
SOAP_FMAC3 _ns1__LectureModeParticipant * SOAP_FMAC4 soap_in__ns1__LectureModeParticipant(struct soap*, const char*, _ns1__LectureModeParticipant *, const char*);
SOAP_FMAC1 _ns1__LectureModeParticipant * SOAP_FMAC2 soap_instantiate__ns1__LectureModeParticipant(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LectureModeParticipant * soap_new__ns1__LectureModeParticipant(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__LectureModeParticipant(soap, n, NULL, NULL, NULL);
}

inline _ns1__LectureModeParticipant * soap_new_req__ns1__LectureModeParticipant(
	struct soap *soap,
	char *entityID,
	char *participantID,
	enum _ns1__EntityType EntityType,
	char *displayName,
	char *extension)
{	_ns1__LectureModeParticipant *_p = soap_new__ns1__LectureModeParticipant(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LectureModeParticipant::entityID = entityID;
		_p->_ns1__LectureModeParticipant::participantID = participantID;
		_p->_ns1__LectureModeParticipant::EntityType = EntityType;
		_p->_ns1__LectureModeParticipant::displayName = displayName;
		_p->_ns1__LectureModeParticipant::extension = extension;
	}
	return _p;
}

inline _ns1__LectureModeParticipant * soap_new_set__ns1__LectureModeParticipant(
	struct soap *soap,
	char *entityID,
	char *participantID,
	enum _ns1__EntityType EntityType,
	char *displayName,
	char *extension,
	bool *audio,
	bool *video,
	bool *appshare,
	bool *handRaised,
	bool *presenter)
{	_ns1__LectureModeParticipant *_p = soap_new__ns1__LectureModeParticipant(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LectureModeParticipant::entityID = entityID;
		_p->_ns1__LectureModeParticipant::participantID = participantID;
		_p->_ns1__LectureModeParticipant::EntityType = EntityType;
		_p->_ns1__LectureModeParticipant::displayName = displayName;
		_p->_ns1__LectureModeParticipant::extension = extension;
		_p->_ns1__LectureModeParticipant::audio = audio;
		_p->_ns1__LectureModeParticipant::video = video;
		_p->_ns1__LectureModeParticipant::appshare = appshare;
		_p->_ns1__LectureModeParticipant::handRaised = handRaised;
		_p->_ns1__LectureModeParticipant::presenter = presenter;
	}
	return _p;
}

inline int soap_write__ns1__LectureModeParticipant(struct soap *soap, _ns1__LectureModeParticipant const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LectureModeParticipant", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LectureModeParticipant * SOAP_FMAC4 soap_get__ns1__LectureModeParticipant(struct soap*, _ns1__LectureModeParticipant *, const char*, const char*);

inline int soap_read__ns1__LectureModeParticipant(struct soap *soap, _ns1__LectureModeParticipant *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LectureModeParticipant(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Entity_DEFINED
#define SOAP_TYPE__ns1__Entity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Entity(struct soap*, const char*, int, const _ns1__Entity *, const char*);
SOAP_FMAC3 _ns1__Entity * SOAP_FMAC4 soap_in__ns1__Entity(struct soap*, const char*, _ns1__Entity *, const char*);
SOAP_FMAC1 _ns1__Entity * SOAP_FMAC2 soap_instantiate__ns1__Entity(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Entity * soap_new__ns1__Entity(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__Entity(soap, n, NULL, NULL, NULL);
}

inline _ns1__Entity * soap_new_req__ns1__Entity(
	struct soap *soap,
	char *entityID,
	enum _ns1__EntityType EntityType,
	char *displayName,
	char *extension)
{	_ns1__Entity *_p = soap_new__ns1__Entity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Entity::entityID = entityID;
		_p->_ns1__Entity::EntityType = EntityType;
		_p->_ns1__Entity::displayName = displayName;
		_p->_ns1__Entity::extension = extension;
	}
	return _p;
}

inline _ns1__Entity * soap_new_set__ns1__Entity(
	struct soap *soap,
	char *entityID,
	char *participantID,
	enum _ns1__EntityType EntityType,
	char *ownerID,
	char *displayName,
	char *extension,
	char *emailAddress,
	char *tenant,
	char *description,
	enum _ns1__Language *Language,
	enum _ns1__MemberStatus *MemberStatus,
	enum _ns1__MemberMode *MemberMode,
	bool *canCallDirect,
	bool *canJoinMeeting,
	bool *canRecordMeeting,
	bool *isInMyContacts,
	enum _ns1__RoomStatus *RoomStatus,
	_ns1__RoomMode *RoomMode,
	bool *canControl,
	bool *audio,
	bool *video,
	bool *appshare)
{	_ns1__Entity *_p = soap_new__ns1__Entity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Entity::entityID = entityID;
		_p->_ns1__Entity::participantID = participantID;
		_p->_ns1__Entity::EntityType = EntityType;
		_p->_ns1__Entity::ownerID = ownerID;
		_p->_ns1__Entity::displayName = displayName;
		_p->_ns1__Entity::extension = extension;
		_p->_ns1__Entity::emailAddress = emailAddress;
		_p->_ns1__Entity::tenant = tenant;
		_p->_ns1__Entity::description = description;
		_p->_ns1__Entity::Language = Language;
		_p->_ns1__Entity::MemberStatus = MemberStatus;
		_p->_ns1__Entity::MemberMode = MemberMode;
		_p->_ns1__Entity::canCallDirect = canCallDirect;
		_p->_ns1__Entity::canJoinMeeting = canJoinMeeting;
		_p->_ns1__Entity::canRecordMeeting = canRecordMeeting;
		_p->_ns1__Entity::isInMyContacts = isInMyContacts;
		_p->_ns1__Entity::RoomStatus = RoomStatus;
		_p->_ns1__Entity::RoomMode = RoomMode;
		_p->_ns1__Entity::canControl = canControl;
		_p->_ns1__Entity::audio = audio;
		_p->_ns1__Entity::video = video;
		_p->_ns1__Entity::appshare = appshare;
	}
	return _p;
}

inline int soap_write__ns1__Entity(struct soap *soap, _ns1__Entity const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Entity", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Entity * SOAP_FMAC4 soap_get__ns1__Entity(struct soap*, _ns1__Entity *, const char*, const char*);

inline int soap_read__ns1__Entity(struct soap *soap, _ns1__Entity *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Entity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Filter_DEFINED
#define SOAP_TYPE__ns1__Filter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Filter(struct soap*, const char*, int, const _ns1__Filter *, const char*);
SOAP_FMAC3 _ns1__Filter * SOAP_FMAC4 soap_in__ns1__Filter(struct soap*, const char*, _ns1__Filter *, const char*);
SOAP_FMAC1 _ns1__Filter * SOAP_FMAC2 soap_instantiate__ns1__Filter(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Filter * soap_new__ns1__Filter(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__Filter(soap, n, NULL, NULL, NULL);
}

inline _ns1__Filter * soap_new_req__ns1__Filter(
	struct soap *soap)
{	_ns1__Filter *_p = soap_new__ns1__Filter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Filter * soap_new_set__ns1__Filter(
	struct soap *soap,
	int *start,
	int *limit,
	char *sortBy,
	enum ns1__sortDir *dir,
	enum _ns1__EntityType *EntityType,
	char *query)
{	_ns1__Filter *_p = soap_new__ns1__Filter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Filter::start = start;
		_p->_ns1__Filter::limit = limit;
		_p->_ns1__Filter::sortBy = sortBy;
		_p->_ns1__Filter::dir = dir;
		_p->_ns1__Filter::EntityType = EntityType;
		_p->_ns1__Filter::query = query;
	}
	return _p;
}

inline int soap_write__ns1__Filter(struct soap *soap, _ns1__Filter const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Filter", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Filter * SOAP_FMAC4 soap_get__ns1__Filter(struct soap*, _ns1__Filter *, const char*, const char*);

inline int soap_read__ns1__Filter(struct soap *soap, _ns1__Filter *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Filter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RoomMode_DEFINED
#define SOAP_TYPE__ns1__RoomMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RoomMode(struct soap*, const char*, int, const _ns1__RoomMode *, const char*);
SOAP_FMAC3 _ns1__RoomMode * SOAP_FMAC4 soap_in__ns1__RoomMode(struct soap*, const char*, _ns1__RoomMode *, const char*);
SOAP_FMAC1 _ns1__RoomMode * SOAP_FMAC2 soap_instantiate__ns1__RoomMode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RoomMode * soap_new__ns1__RoomMode(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RoomMode(soap, n, NULL, NULL, NULL);
}

inline _ns1__RoomMode * soap_new_req__ns1__RoomMode(
	struct soap *soap,
	bool isLocked,
	bool hasPIN)
{	_ns1__RoomMode *_p = soap_new__ns1__RoomMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomMode::isLocked = isLocked;
		_p->_ns1__RoomMode::hasPIN = hasPIN;
	}
	return _p;
}

inline _ns1__RoomMode * soap_new_set__ns1__RoomMode(
	struct soap *soap,
	char *roomURL,
	bool isLocked,
	bool hasPIN,
	char *roomPIN,
	bool *hasModeratorPIN,
	char *moderatorPIN)
{	_ns1__RoomMode *_p = soap_new__ns1__RoomMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomMode::roomURL = roomURL;
		_p->_ns1__RoomMode::isLocked = isLocked;
		_p->_ns1__RoomMode::hasPIN = hasPIN;
		_p->_ns1__RoomMode::roomPIN = roomPIN;
		_p->_ns1__RoomMode::hasModeratorPIN = hasModeratorPIN;
		_p->_ns1__RoomMode::moderatorPIN = moderatorPIN;
	}
	return _p;
}

inline int soap_write__ns1__RoomMode(struct soap *soap, _ns1__RoomMode const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RoomMode", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RoomMode * SOAP_FMAC4 soap_get__ns1__RoomMode(struct soap*, _ns1__RoomMode *, const char*, const char*);

inline int soap_read__ns1__RoomMode(struct soap *soap, _ns1__RoomMode *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RoomMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RoomNotFoundFault_DEFINED
#define SOAP_TYPE__ns1__RoomNotFoundFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RoomNotFoundFault(struct soap*, const char*, int, const _ns1__RoomNotFoundFault *, const char*);
SOAP_FMAC3 _ns1__RoomNotFoundFault * SOAP_FMAC4 soap_in__ns1__RoomNotFoundFault(struct soap*, const char*, _ns1__RoomNotFoundFault *, const char*);
SOAP_FMAC1 _ns1__RoomNotFoundFault * SOAP_FMAC2 soap_instantiate__ns1__RoomNotFoundFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RoomNotFoundFault * soap_new__ns1__RoomNotFoundFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__RoomNotFoundFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__RoomNotFoundFault * soap_new_req__ns1__RoomNotFoundFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__RoomNotFoundFault *_p = soap_new__ns1__RoomNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomNotFoundFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__RoomNotFoundFault * soap_new_set__ns1__RoomNotFoundFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__RoomNotFoundFault *_p = soap_new__ns1__RoomNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RoomNotFoundFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__RoomNotFoundFault(struct soap *soap, _ns1__RoomNotFoundFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RoomNotFoundFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RoomNotFoundFault * SOAP_FMAC4 soap_get__ns1__RoomNotFoundFault(struct soap*, _ns1__RoomNotFoundFault *, const char*, const char*);

inline int soap_read__ns1__RoomNotFoundFault(struct soap *soap, _ns1__RoomNotFoundFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RoomNotFoundFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__VidyoReplayNotAvailableFault_DEFINED
#define SOAP_TYPE__ns1__VidyoReplayNotAvailableFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__VidyoReplayNotAvailableFault(struct soap*, const char*, int, const _ns1__VidyoReplayNotAvailableFault *, const char*);
SOAP_FMAC3 _ns1__VidyoReplayNotAvailableFault * SOAP_FMAC4 soap_in__ns1__VidyoReplayNotAvailableFault(struct soap*, const char*, _ns1__VidyoReplayNotAvailableFault *, const char*);
SOAP_FMAC1 _ns1__VidyoReplayNotAvailableFault * SOAP_FMAC2 soap_instantiate__ns1__VidyoReplayNotAvailableFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__VidyoReplayNotAvailableFault * soap_new__ns1__VidyoReplayNotAvailableFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__VidyoReplayNotAvailableFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__VidyoReplayNotAvailableFault * soap_new_req__ns1__VidyoReplayNotAvailableFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__VidyoReplayNotAvailableFault *_p = soap_new__ns1__VidyoReplayNotAvailableFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__VidyoReplayNotAvailableFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__VidyoReplayNotAvailableFault * soap_new_set__ns1__VidyoReplayNotAvailableFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__VidyoReplayNotAvailableFault *_p = soap_new__ns1__VidyoReplayNotAvailableFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__VidyoReplayNotAvailableFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__VidyoReplayNotAvailableFault(struct soap *soap, _ns1__VidyoReplayNotAvailableFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VidyoReplayNotAvailableFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__VidyoReplayNotAvailableFault * SOAP_FMAC4 soap_get__ns1__VidyoReplayNotAvailableFault(struct soap*, _ns1__VidyoReplayNotAvailableFault *, const char*, const char*);

inline int soap_read__ns1__VidyoReplayNotAvailableFault(struct soap *soap, _ns1__VidyoReplayNotAvailableFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__VidyoReplayNotAvailableFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__FeatureNotAvailableFault_DEFINED
#define SOAP_TYPE__ns1__FeatureNotAvailableFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FeatureNotAvailableFault(struct soap*, const char*, int, const _ns1__FeatureNotAvailableFault *, const char*);
SOAP_FMAC3 _ns1__FeatureNotAvailableFault * SOAP_FMAC4 soap_in__ns1__FeatureNotAvailableFault(struct soap*, const char*, _ns1__FeatureNotAvailableFault *, const char*);
SOAP_FMAC1 _ns1__FeatureNotAvailableFault * SOAP_FMAC2 soap_instantiate__ns1__FeatureNotAvailableFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FeatureNotAvailableFault * soap_new__ns1__FeatureNotAvailableFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__FeatureNotAvailableFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__FeatureNotAvailableFault * soap_new_req__ns1__FeatureNotAvailableFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__FeatureNotAvailableFault *_p = soap_new__ns1__FeatureNotAvailableFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__FeatureNotAvailableFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__FeatureNotAvailableFault * soap_new_set__ns1__FeatureNotAvailableFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__FeatureNotAvailableFault *_p = soap_new__ns1__FeatureNotAvailableFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__FeatureNotAvailableFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__FeatureNotAvailableFault(struct soap *soap, _ns1__FeatureNotAvailableFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeatureNotAvailableFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__FeatureNotAvailableFault * SOAP_FMAC4 soap_get__ns1__FeatureNotAvailableFault(struct soap*, _ns1__FeatureNotAvailableFault *, const char*, const char*);

inline int soap_read__ns1__FeatureNotAvailableFault(struct soap *soap, _ns1__FeatureNotAvailableFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__FeatureNotAvailableFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PrefixNotConfiguredException_DEFINED
#define SOAP_TYPE__ns1__PrefixNotConfiguredException_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PrefixNotConfiguredException(struct soap*, const char*, int, const _ns1__PrefixNotConfiguredException *, const char*);
SOAP_FMAC3 _ns1__PrefixNotConfiguredException * SOAP_FMAC4 soap_in__ns1__PrefixNotConfiguredException(struct soap*, const char*, _ns1__PrefixNotConfiguredException *, const char*);
SOAP_FMAC1 _ns1__PrefixNotConfiguredException * SOAP_FMAC2 soap_instantiate__ns1__PrefixNotConfiguredException(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PrefixNotConfiguredException * soap_new__ns1__PrefixNotConfiguredException(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__PrefixNotConfiguredException(soap, n, NULL, NULL, NULL);
}

inline _ns1__PrefixNotConfiguredException * soap_new_req__ns1__PrefixNotConfiguredException(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__PrefixNotConfiguredException *_p = soap_new__ns1__PrefixNotConfiguredException(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PrefixNotConfiguredException::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__PrefixNotConfiguredException * soap_new_set__ns1__PrefixNotConfiguredException(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__PrefixNotConfiguredException *_p = soap_new__ns1__PrefixNotConfiguredException(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PrefixNotConfiguredException::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__PrefixNotConfiguredException(struct soap *soap, _ns1__PrefixNotConfiguredException const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PrefixNotConfiguredException", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PrefixNotConfiguredException * SOAP_FMAC4 soap_get__ns1__PrefixNotConfiguredException(struct soap*, _ns1__PrefixNotConfiguredException *, const char*, const char*);

inline int soap_read__ns1__PrefixNotConfiguredException(struct soap *soap, _ns1__PrefixNotConfiguredException *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PrefixNotConfiguredException(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InPointToPointCallFault_DEFINED
#define SOAP_TYPE__ns1__InPointToPointCallFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InPointToPointCallFault(struct soap*, const char*, int, const _ns1__InPointToPointCallFault *, const char*);
SOAP_FMAC3 _ns1__InPointToPointCallFault * SOAP_FMAC4 soap_in__ns1__InPointToPointCallFault(struct soap*, const char*, _ns1__InPointToPointCallFault *, const char*);
SOAP_FMAC1 _ns1__InPointToPointCallFault * SOAP_FMAC2 soap_instantiate__ns1__InPointToPointCallFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InPointToPointCallFault * soap_new__ns1__InPointToPointCallFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__InPointToPointCallFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__InPointToPointCallFault * soap_new_req__ns1__InPointToPointCallFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__InPointToPointCallFault *_p = soap_new__ns1__InPointToPointCallFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InPointToPointCallFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__InPointToPointCallFault * soap_new_set__ns1__InPointToPointCallFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__InPointToPointCallFault *_p = soap_new__ns1__InPointToPointCallFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InPointToPointCallFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__InPointToPointCallFault(struct soap *soap, _ns1__InPointToPointCallFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InPointToPointCallFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InPointToPointCallFault * SOAP_FMAC4 soap_get__ns1__InPointToPointCallFault(struct soap*, _ns1__InPointToPointCallFault *, const char*, const char*);

inline int soap_read__ns1__InPointToPointCallFault(struct soap *soap, _ns1__InPointToPointCallFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InPointToPointCallFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__EndpointNotBoundFault_DEFINED
#define SOAP_TYPE__ns1__EndpointNotBoundFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndpointNotBoundFault(struct soap*, const char*, int, const _ns1__EndpointNotBoundFault *, const char*);
SOAP_FMAC3 _ns1__EndpointNotBoundFault * SOAP_FMAC4 soap_in__ns1__EndpointNotBoundFault(struct soap*, const char*, _ns1__EndpointNotBoundFault *, const char*);
SOAP_FMAC1 _ns1__EndpointNotBoundFault * SOAP_FMAC2 soap_instantiate__ns1__EndpointNotBoundFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndpointNotBoundFault * soap_new__ns1__EndpointNotBoundFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__EndpointNotBoundFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__EndpointNotBoundFault * soap_new_req__ns1__EndpointNotBoundFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__EndpointNotBoundFault *_p = soap_new__ns1__EndpointNotBoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EndpointNotBoundFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__EndpointNotBoundFault * soap_new_set__ns1__EndpointNotBoundFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__EndpointNotBoundFault *_p = soap_new__ns1__EndpointNotBoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EndpointNotBoundFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__EndpointNotBoundFault(struct soap *soap, _ns1__EndpointNotBoundFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndpointNotBoundFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EndpointNotBoundFault * SOAP_FMAC4 soap_get__ns1__EndpointNotBoundFault(struct soap*, _ns1__EndpointNotBoundFault *, const char*, const char*);

inline int soap_read__ns1__EndpointNotBoundFault(struct soap *soap, _ns1__EndpointNotBoundFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__EndpointNotBoundFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ScheduledRoomCreationFault_DEFINED
#define SOAP_TYPE__ns1__ScheduledRoomCreationFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ScheduledRoomCreationFault(struct soap*, const char*, int, const _ns1__ScheduledRoomCreationFault *, const char*);
SOAP_FMAC3 _ns1__ScheduledRoomCreationFault * SOAP_FMAC4 soap_in__ns1__ScheduledRoomCreationFault(struct soap*, const char*, _ns1__ScheduledRoomCreationFault *, const char*);
SOAP_FMAC1 _ns1__ScheduledRoomCreationFault * SOAP_FMAC2 soap_instantiate__ns1__ScheduledRoomCreationFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ScheduledRoomCreationFault * soap_new__ns1__ScheduledRoomCreationFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__ScheduledRoomCreationFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__ScheduledRoomCreationFault * soap_new_req__ns1__ScheduledRoomCreationFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__ScheduledRoomCreationFault *_p = soap_new__ns1__ScheduledRoomCreationFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ScheduledRoomCreationFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__ScheduledRoomCreationFault * soap_new_set__ns1__ScheduledRoomCreationFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__ScheduledRoomCreationFault *_p = soap_new__ns1__ScheduledRoomCreationFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ScheduledRoomCreationFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__ScheduledRoomCreationFault(struct soap *soap, _ns1__ScheduledRoomCreationFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledRoomCreationFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ScheduledRoomCreationFault * SOAP_FMAC4 soap_get__ns1__ScheduledRoomCreationFault(struct soap*, _ns1__ScheduledRoomCreationFault *, const char*, const char*);

inline int soap_read__ns1__ScheduledRoomCreationFault(struct soap *soap, _ns1__ScheduledRoomCreationFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ScheduledRoomCreationFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ControlMeetingFault_DEFINED
#define SOAP_TYPE__ns1__ControlMeetingFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ControlMeetingFault(struct soap*, const char*, int, const _ns1__ControlMeetingFault *, const char*);
SOAP_FMAC3 _ns1__ControlMeetingFault * SOAP_FMAC4 soap_in__ns1__ControlMeetingFault(struct soap*, const char*, _ns1__ControlMeetingFault *, const char*);
SOAP_FMAC1 _ns1__ControlMeetingFault * SOAP_FMAC2 soap_instantiate__ns1__ControlMeetingFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ControlMeetingFault * soap_new__ns1__ControlMeetingFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__ControlMeetingFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__ControlMeetingFault * soap_new_req__ns1__ControlMeetingFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__ControlMeetingFault *_p = soap_new__ns1__ControlMeetingFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ControlMeetingFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__ControlMeetingFault * soap_new_set__ns1__ControlMeetingFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__ControlMeetingFault *_p = soap_new__ns1__ControlMeetingFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ControlMeetingFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__ControlMeetingFault(struct soap *soap, _ns1__ControlMeetingFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ControlMeetingFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ControlMeetingFault * SOAP_FMAC4 soap_get__ns1__ControlMeetingFault(struct soap*, _ns1__ControlMeetingFault *, const char*, const char*);

inline int soap_read__ns1__ControlMeetingFault(struct soap *soap, _ns1__ControlMeetingFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ControlMeetingFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InvalidModeratorPINFormatFault_DEFINED
#define SOAP_TYPE__ns1__InvalidModeratorPINFormatFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InvalidModeratorPINFormatFault(struct soap*, const char*, int, const _ns1__InvalidModeratorPINFormatFault *, const char*);
SOAP_FMAC3 _ns1__InvalidModeratorPINFormatFault * SOAP_FMAC4 soap_in__ns1__InvalidModeratorPINFormatFault(struct soap*, const char*, _ns1__InvalidModeratorPINFormatFault *, const char*);
SOAP_FMAC1 _ns1__InvalidModeratorPINFormatFault * SOAP_FMAC2 soap_instantiate__ns1__InvalidModeratorPINFormatFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InvalidModeratorPINFormatFault * soap_new__ns1__InvalidModeratorPINFormatFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__InvalidModeratorPINFormatFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__InvalidModeratorPINFormatFault * soap_new_req__ns1__InvalidModeratorPINFormatFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__InvalidModeratorPINFormatFault *_p = soap_new__ns1__InvalidModeratorPINFormatFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InvalidModeratorPINFormatFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__InvalidModeratorPINFormatFault * soap_new_set__ns1__InvalidModeratorPINFormatFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__InvalidModeratorPINFormatFault *_p = soap_new__ns1__InvalidModeratorPINFormatFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InvalidModeratorPINFormatFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__InvalidModeratorPINFormatFault(struct soap *soap, _ns1__InvalidModeratorPINFormatFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvalidModeratorPINFormatFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InvalidModeratorPINFormatFault * SOAP_FMAC4 soap_get__ns1__InvalidModeratorPINFormatFault(struct soap*, _ns1__InvalidModeratorPINFormatFault *, const char*, const char*);

inline int soap_read__ns1__InvalidModeratorPINFormatFault(struct soap *soap, _ns1__InvalidModeratorPINFormatFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InvalidModeratorPINFormatFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AccessRestrictedFault_DEFINED
#define SOAP_TYPE__ns1__AccessRestrictedFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AccessRestrictedFault(struct soap*, const char*, int, const _ns1__AccessRestrictedFault *, const char*);
SOAP_FMAC3 _ns1__AccessRestrictedFault * SOAP_FMAC4 soap_in__ns1__AccessRestrictedFault(struct soap*, const char*, _ns1__AccessRestrictedFault *, const char*);
SOAP_FMAC1 _ns1__AccessRestrictedFault * SOAP_FMAC2 soap_instantiate__ns1__AccessRestrictedFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AccessRestrictedFault * soap_new__ns1__AccessRestrictedFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__AccessRestrictedFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__AccessRestrictedFault * soap_new_req__ns1__AccessRestrictedFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__AccessRestrictedFault *_p = soap_new__ns1__AccessRestrictedFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AccessRestrictedFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__AccessRestrictedFault * soap_new_set__ns1__AccessRestrictedFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__AccessRestrictedFault *_p = soap_new__ns1__AccessRestrictedFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AccessRestrictedFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__AccessRestrictedFault(struct soap *soap, _ns1__AccessRestrictedFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccessRestrictedFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AccessRestrictedFault * SOAP_FMAC4 soap_get__ns1__AccessRestrictedFault(struct soap*, _ns1__AccessRestrictedFault *, const char*, const char*);

inline int soap_read__ns1__AccessRestrictedFault(struct soap *soap, _ns1__AccessRestrictedFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AccessRestrictedFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ResourceNotAvailableFault_DEFINED
#define SOAP_TYPE__ns1__ResourceNotAvailableFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ResourceNotAvailableFault(struct soap*, const char*, int, const _ns1__ResourceNotAvailableFault *, const char*);
SOAP_FMAC3 _ns1__ResourceNotAvailableFault * SOAP_FMAC4 soap_in__ns1__ResourceNotAvailableFault(struct soap*, const char*, _ns1__ResourceNotAvailableFault *, const char*);
SOAP_FMAC1 _ns1__ResourceNotAvailableFault * SOAP_FMAC2 soap_instantiate__ns1__ResourceNotAvailableFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ResourceNotAvailableFault * soap_new__ns1__ResourceNotAvailableFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__ResourceNotAvailableFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__ResourceNotAvailableFault * soap_new_req__ns1__ResourceNotAvailableFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__ResourceNotAvailableFault *_p = soap_new__ns1__ResourceNotAvailableFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ResourceNotAvailableFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__ResourceNotAvailableFault * soap_new_set__ns1__ResourceNotAvailableFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__ResourceNotAvailableFault *_p = soap_new__ns1__ResourceNotAvailableFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ResourceNotAvailableFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__ResourceNotAvailableFault(struct soap *soap, _ns1__ResourceNotAvailableFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResourceNotAvailableFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ResourceNotAvailableFault * SOAP_FMAC4 soap_get__ns1__ResourceNotAvailableFault(struct soap*, _ns1__ResourceNotAvailableFault *, const char*, const char*);

inline int soap_read__ns1__ResourceNotAvailableFault(struct soap *soap, _ns1__ResourceNotAvailableFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ResourceNotAvailableFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__NotLicensedFault_DEFINED
#define SOAP_TYPE__ns1__NotLicensedFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NotLicensedFault(struct soap*, const char*, int, const _ns1__NotLicensedFault *, const char*);
SOAP_FMAC3 _ns1__NotLicensedFault * SOAP_FMAC4 soap_in__ns1__NotLicensedFault(struct soap*, const char*, _ns1__NotLicensedFault *, const char*);
SOAP_FMAC1 _ns1__NotLicensedFault * SOAP_FMAC2 soap_instantiate__ns1__NotLicensedFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__NotLicensedFault * soap_new__ns1__NotLicensedFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__NotLicensedFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__NotLicensedFault * soap_new_req__ns1__NotLicensedFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__NotLicensedFault *_p = soap_new__ns1__NotLicensedFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__NotLicensedFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__NotLicensedFault * soap_new_set__ns1__NotLicensedFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__NotLicensedFault *_p = soap_new__ns1__NotLicensedFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__NotLicensedFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__NotLicensedFault(struct soap *soap, _ns1__NotLicensedFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NotLicensedFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__NotLicensedFault * SOAP_FMAC4 soap_get__ns1__NotLicensedFault(struct soap*, _ns1__NotLicensedFault *, const char*, const char*);

inline int soap_read__ns1__NotLicensedFault(struct soap *soap, _ns1__NotLicensedFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__NotLicensedFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ConferenceLockedFault_DEFINED
#define SOAP_TYPE__ns1__ConferenceLockedFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ConferenceLockedFault(struct soap*, const char*, int, const _ns1__ConferenceLockedFault *, const char*);
SOAP_FMAC3 _ns1__ConferenceLockedFault * SOAP_FMAC4 soap_in__ns1__ConferenceLockedFault(struct soap*, const char*, _ns1__ConferenceLockedFault *, const char*);
SOAP_FMAC1 _ns1__ConferenceLockedFault * SOAP_FMAC2 soap_instantiate__ns1__ConferenceLockedFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ConferenceLockedFault * soap_new__ns1__ConferenceLockedFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__ConferenceLockedFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__ConferenceLockedFault * soap_new_req__ns1__ConferenceLockedFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__ConferenceLockedFault *_p = soap_new__ns1__ConferenceLockedFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ConferenceLockedFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__ConferenceLockedFault * soap_new_set__ns1__ConferenceLockedFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__ConferenceLockedFault *_p = soap_new__ns1__ConferenceLockedFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ConferenceLockedFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__ConferenceLockedFault(struct soap *soap, _ns1__ConferenceLockedFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConferenceLockedFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ConferenceLockedFault * SOAP_FMAC4 soap_get__ns1__ConferenceLockedFault(struct soap*, _ns1__ConferenceLockedFault *, const char*, const char*);

inline int soap_read__ns1__ConferenceLockedFault(struct soap *soap, _ns1__ConferenceLockedFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ConferenceLockedFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__WrongPINFault_DEFINED
#define SOAP_TYPE__ns1__WrongPINFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__WrongPINFault(struct soap*, const char*, int, const _ns1__WrongPINFault *, const char*);
SOAP_FMAC3 _ns1__WrongPINFault * SOAP_FMAC4 soap_in__ns1__WrongPINFault(struct soap*, const char*, _ns1__WrongPINFault *, const char*);
SOAP_FMAC1 _ns1__WrongPINFault * SOAP_FMAC2 soap_instantiate__ns1__WrongPINFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__WrongPINFault * soap_new__ns1__WrongPINFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__WrongPINFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__WrongPINFault * soap_new_req__ns1__WrongPINFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__WrongPINFault *_p = soap_new__ns1__WrongPINFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__WrongPINFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__WrongPINFault * soap_new_set__ns1__WrongPINFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__WrongPINFault *_p = soap_new__ns1__WrongPINFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__WrongPINFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__WrongPINFault(struct soap *soap, _ns1__WrongPINFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WrongPINFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__WrongPINFault * SOAP_FMAC4 soap_get__ns1__WrongPINFault(struct soap*, _ns1__WrongPINFault *, const char*, const char*);

inline int soap_read__ns1__WrongPINFault(struct soap *soap, _ns1__WrongPINFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__WrongPINFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SeatLicenseExpiredFault_DEFINED
#define SOAP_TYPE__ns1__SeatLicenseExpiredFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SeatLicenseExpiredFault(struct soap*, const char*, int, const _ns1__SeatLicenseExpiredFault *, const char*);
SOAP_FMAC3 _ns1__SeatLicenseExpiredFault * SOAP_FMAC4 soap_in__ns1__SeatLicenseExpiredFault(struct soap*, const char*, _ns1__SeatLicenseExpiredFault *, const char*);
SOAP_FMAC1 _ns1__SeatLicenseExpiredFault * SOAP_FMAC2 soap_instantiate__ns1__SeatLicenseExpiredFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SeatLicenseExpiredFault * soap_new__ns1__SeatLicenseExpiredFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__SeatLicenseExpiredFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__SeatLicenseExpiredFault * soap_new_req__ns1__SeatLicenseExpiredFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__SeatLicenseExpiredFault *_p = soap_new__ns1__SeatLicenseExpiredFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SeatLicenseExpiredFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__SeatLicenseExpiredFault * soap_new_set__ns1__SeatLicenseExpiredFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__SeatLicenseExpiredFault *_p = soap_new__ns1__SeatLicenseExpiredFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SeatLicenseExpiredFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__SeatLicenseExpiredFault(struct soap *soap, _ns1__SeatLicenseExpiredFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SeatLicenseExpiredFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SeatLicenseExpiredFault * SOAP_FMAC4 soap_get__ns1__SeatLicenseExpiredFault(struct soap*, _ns1__SeatLicenseExpiredFault *, const char*, const char*);

inline int soap_read__ns1__SeatLicenseExpiredFault(struct soap *soap, _ns1__SeatLicenseExpiredFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SeatLicenseExpiredFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InvalidArgumentFault_DEFINED
#define SOAP_TYPE__ns1__InvalidArgumentFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InvalidArgumentFault(struct soap*, const char*, int, const _ns1__InvalidArgumentFault *, const char*);
SOAP_FMAC3 _ns1__InvalidArgumentFault * SOAP_FMAC4 soap_in__ns1__InvalidArgumentFault(struct soap*, const char*, _ns1__InvalidArgumentFault *, const char*);
SOAP_FMAC1 _ns1__InvalidArgumentFault * SOAP_FMAC2 soap_instantiate__ns1__InvalidArgumentFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InvalidArgumentFault * soap_new__ns1__InvalidArgumentFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__InvalidArgumentFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__InvalidArgumentFault * soap_new_req__ns1__InvalidArgumentFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__InvalidArgumentFault *_p = soap_new__ns1__InvalidArgumentFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InvalidArgumentFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__InvalidArgumentFault * soap_new_set__ns1__InvalidArgumentFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__InvalidArgumentFault *_p = soap_new__ns1__InvalidArgumentFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InvalidArgumentFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__InvalidArgumentFault(struct soap *soap, _ns1__InvalidArgumentFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvalidArgumentFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InvalidArgumentFault * SOAP_FMAC4 soap_get__ns1__InvalidArgumentFault(struct soap*, _ns1__InvalidArgumentFault *, const char*, const char*);

inline int soap_read__ns1__InvalidArgumentFault(struct soap *soap, _ns1__InvalidArgumentFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InvalidArgumentFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GeneralFault_DEFINED
#define SOAP_TYPE__ns1__GeneralFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GeneralFault(struct soap*, const char*, int, const _ns1__GeneralFault *, const char*);
SOAP_FMAC3 _ns1__GeneralFault * SOAP_FMAC4 soap_in__ns1__GeneralFault(struct soap*, const char*, _ns1__GeneralFault *, const char*);
SOAP_FMAC1 _ns1__GeneralFault * SOAP_FMAC2 soap_instantiate__ns1__GeneralFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GeneralFault * soap_new__ns1__GeneralFault(struct soap *soap, int n = -1)
{	return soap_instantiate__ns1__GeneralFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__GeneralFault * soap_new_req__ns1__GeneralFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__GeneralFault *_p = soap_new__ns1__GeneralFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GeneralFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline _ns1__GeneralFault * soap_new_set__ns1__GeneralFault(
	struct soap *soap,
	char *ErrorMessage)
{	_ns1__GeneralFault *_p = soap_new__ns1__GeneralFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GeneralFault::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write__ns1__GeneralFault(struct soap *soap, _ns1__GeneralFault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GeneralFault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GeneralFault * SOAP_FMAC4 soap_get__ns1__GeneralFault(struct soap*, _ns1__GeneralFault *, const char*, const char*);

inline int soap_read__ns1__GeneralFault(struct soap *soap, _ns1__GeneralFault *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GeneralFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RoomProfile_DEFINED
#define SOAP_TYPE_ns1__RoomProfile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RoomProfile(struct soap*, const char*, int, const ns1__RoomProfile *, const char*);
SOAP_FMAC3 ns1__RoomProfile * SOAP_FMAC4 soap_in_ns1__RoomProfile(struct soap*, const char*, ns1__RoomProfile *, const char*);
SOAP_FMAC1 ns1__RoomProfile * SOAP_FMAC2 soap_instantiate_ns1__RoomProfile(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RoomProfile * soap_new_ns1__RoomProfile(struct soap *soap, int n = -1)
{	return soap_instantiate_ns1__RoomProfile(soap, n, NULL, NULL, NULL);
}

inline ns1__RoomProfile * soap_new_req_ns1__RoomProfile(
	struct soap *soap,
	char *roomProfileName,
	char *description)
{	ns1__RoomProfile *_p = soap_new_ns1__RoomProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RoomProfile::roomProfileName = roomProfileName;
		_p->ns1__RoomProfile::description = description;
	}
	return _p;
}

inline ns1__RoomProfile * soap_new_set_ns1__RoomProfile(
	struct soap *soap,
	char *roomProfileName,
	char *description)
{	ns1__RoomProfile *_p = soap_new_ns1__RoomProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RoomProfile::roomProfileName = roomProfileName;
		_p->ns1__RoomProfile::description = description;
	}
	return _p;
}

inline int soap_write_ns1__RoomProfile(struct soap *soap, ns1__RoomProfile const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RoomProfile", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RoomProfile * SOAP_FMAC4 soap_get_ns1__RoomProfile(struct soap*, ns1__RoomProfile *, const char*, const char*);

inline int soap_read_ns1__RoomProfile(struct soap *soap, ns1__RoomProfile *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RoomProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Recorder_DEFINED
#define SOAP_TYPE_ns1__Recorder_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Recorder(struct soap*, const char*, int, const ns1__Recorder *, const char*);
SOAP_FMAC3 ns1__Recorder * SOAP_FMAC4 soap_in_ns1__Recorder(struct soap*, const char*, ns1__Recorder *, const char*);
SOAP_FMAC1 ns1__Recorder * SOAP_FMAC2 soap_instantiate_ns1__Recorder(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Recorder * soap_new_ns1__Recorder(struct soap *soap, int n = -1)
{	return soap_instantiate_ns1__Recorder(soap, n, NULL, NULL, NULL);
}

inline ns1__Recorder * soap_new_req_ns1__Recorder(
	struct soap *soap,
	char *recorderPrefix,
	char *description)
{	ns1__Recorder *_p = soap_new_ns1__Recorder(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Recorder::recorderPrefix = recorderPrefix;
		_p->ns1__Recorder::description = description;
	}
	return _p;
}

inline ns1__Recorder * soap_new_set_ns1__Recorder(
	struct soap *soap,
	char *recorderPrefix,
	char *description)
{	ns1__Recorder *_p = soap_new_ns1__Recorder(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Recorder::recorderPrefix = recorderPrefix;
		_p->ns1__Recorder::description = description;
	}
	return _p;
}

inline int soap_write_ns1__Recorder(struct soap *soap, ns1__Recorder const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Recorder", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Recorder * SOAP_FMAC4 soap_get_ns1__Recorder(struct soap*, ns1__Recorder *, const char*, const char*);

inline int soap_read_ns1__Recorder(struct soap *soap, ns1__Recorder *p)
{	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Recorder(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__getChangePasswordHtmlUrlWithToken_DEFINED
#define SOAP_TYPE___ns1__getChangePasswordHtmlUrlWithToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getChangePasswordHtmlUrlWithToken(struct soap*, struct __ns1__getChangePasswordHtmlUrlWithToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getChangePasswordHtmlUrlWithToken(struct soap*, const struct __ns1__getChangePasswordHtmlUrlWithToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getChangePasswordHtmlUrlWithToken(struct soap*, const char*, int, const struct __ns1__getChangePasswordHtmlUrlWithToken *, const char*);
SOAP_FMAC3 struct __ns1__getChangePasswordHtmlUrlWithToken * SOAP_FMAC4 soap_in___ns1__getChangePasswordHtmlUrlWithToken(struct soap*, const char*, struct __ns1__getChangePasswordHtmlUrlWithToken *, const char*);
SOAP_FMAC1 struct __ns1__getChangePasswordHtmlUrlWithToken * SOAP_FMAC2 soap_instantiate___ns1__getChangePasswordHtmlUrlWithToken(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getChangePasswordHtmlUrlWithToken * soap_new___ns1__getChangePasswordHtmlUrlWithToken(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getChangePasswordHtmlUrlWithToken(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getChangePasswordHtmlUrlWithToken * soap_new_req___ns1__getChangePasswordHtmlUrlWithToken(
	struct soap *soap)
{	struct __ns1__getChangePasswordHtmlUrlWithToken *_p = soap_new___ns1__getChangePasswordHtmlUrlWithToken(soap);
	if (_p)
	{	soap_default___ns1__getChangePasswordHtmlUrlWithToken(soap, _p);
	}
	return _p;
}

inline struct __ns1__getChangePasswordHtmlUrlWithToken * soap_new_set___ns1__getChangePasswordHtmlUrlWithToken(
	struct soap *soap,
	_ns1__GetChangePasswordHtmlUrlWithTokenRequest *ns1__GetChangePasswordHtmlUrlWithTokenRequest)
{	struct __ns1__getChangePasswordHtmlUrlWithToken *_p = soap_new___ns1__getChangePasswordHtmlUrlWithToken(soap);
	if (_p)
	{	soap_default___ns1__getChangePasswordHtmlUrlWithToken(soap, _p);
		_p->ns1__GetChangePasswordHtmlUrlWithTokenRequest = ns1__GetChangePasswordHtmlUrlWithTokenRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getChangePasswordHtmlUrlWithToken(struct soap*, const struct __ns1__getChangePasswordHtmlUrlWithToken *, const char*, const char*);

inline int soap_write___ns1__getChangePasswordHtmlUrlWithToken(struct soap *soap, struct __ns1__getChangePasswordHtmlUrlWithToken const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getChangePasswordHtmlUrlWithToken(soap, p), 0) || soap_put___ns1__getChangePasswordHtmlUrlWithToken(soap, p, "-ns1:getChangePasswordHtmlUrlWithToken", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getChangePasswordHtmlUrlWithToken * SOAP_FMAC4 soap_get___ns1__getChangePasswordHtmlUrlWithToken(struct soap*, struct __ns1__getChangePasswordHtmlUrlWithToken *, const char*, const char*);

inline int soap_read___ns1__getChangePasswordHtmlUrlWithToken(struct soap *soap, struct __ns1__getChangePasswordHtmlUrlWithToken *p)
{	if (p)
	{	soap_default___ns1__getChangePasswordHtmlUrlWithToken(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getChangePasswordHtmlUrlWithToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__whatIsMyIPAddress_DEFINED
#define SOAP_TYPE___ns1__whatIsMyIPAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__whatIsMyIPAddress(struct soap*, struct __ns1__whatIsMyIPAddress *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__whatIsMyIPAddress(struct soap*, const struct __ns1__whatIsMyIPAddress *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__whatIsMyIPAddress(struct soap*, const char*, int, const struct __ns1__whatIsMyIPAddress *, const char*);
SOAP_FMAC3 struct __ns1__whatIsMyIPAddress * SOAP_FMAC4 soap_in___ns1__whatIsMyIPAddress(struct soap*, const char*, struct __ns1__whatIsMyIPAddress *, const char*);
SOAP_FMAC1 struct __ns1__whatIsMyIPAddress * SOAP_FMAC2 soap_instantiate___ns1__whatIsMyIPAddress(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__whatIsMyIPAddress * soap_new___ns1__whatIsMyIPAddress(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__whatIsMyIPAddress(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__whatIsMyIPAddress * soap_new_req___ns1__whatIsMyIPAddress(
	struct soap *soap)
{	struct __ns1__whatIsMyIPAddress *_p = soap_new___ns1__whatIsMyIPAddress(soap);
	if (_p)
	{	soap_default___ns1__whatIsMyIPAddress(soap, _p);
	}
	return _p;
}

inline struct __ns1__whatIsMyIPAddress * soap_new_set___ns1__whatIsMyIPAddress(
	struct soap *soap,
	_ns1__WhatIsMyIPAddressRequest *ns1__WhatIsMyIPAddressRequest)
{	struct __ns1__whatIsMyIPAddress *_p = soap_new___ns1__whatIsMyIPAddress(soap);
	if (_p)
	{	soap_default___ns1__whatIsMyIPAddress(soap, _p);
		_p->ns1__WhatIsMyIPAddressRequest = ns1__WhatIsMyIPAddressRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__whatIsMyIPAddress(struct soap*, const struct __ns1__whatIsMyIPAddress *, const char*, const char*);

inline int soap_write___ns1__whatIsMyIPAddress(struct soap *soap, struct __ns1__whatIsMyIPAddress const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__whatIsMyIPAddress(soap, p), 0) || soap_put___ns1__whatIsMyIPAddress(soap, p, "-ns1:whatIsMyIPAddress", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__whatIsMyIPAddress * SOAP_FMAC4 soap_get___ns1__whatIsMyIPAddress(struct soap*, struct __ns1__whatIsMyIPAddress *, const char*, const char*);

inline int soap_read___ns1__whatIsMyIPAddress(struct soap *soap, struct __ns1__whatIsMyIPAddress *p)
{	if (p)
	{	soap_default___ns1__whatIsMyIPAddress(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__whatIsMyIPAddress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getVidyoReplayLibrary_DEFINED
#define SOAP_TYPE___ns1__getVidyoReplayLibrary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getVidyoReplayLibrary(struct soap*, struct __ns1__getVidyoReplayLibrary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getVidyoReplayLibrary(struct soap*, const struct __ns1__getVidyoReplayLibrary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getVidyoReplayLibrary(struct soap*, const char*, int, const struct __ns1__getVidyoReplayLibrary *, const char*);
SOAP_FMAC3 struct __ns1__getVidyoReplayLibrary * SOAP_FMAC4 soap_in___ns1__getVidyoReplayLibrary(struct soap*, const char*, struct __ns1__getVidyoReplayLibrary *, const char*);
SOAP_FMAC1 struct __ns1__getVidyoReplayLibrary * SOAP_FMAC2 soap_instantiate___ns1__getVidyoReplayLibrary(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getVidyoReplayLibrary * soap_new___ns1__getVidyoReplayLibrary(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getVidyoReplayLibrary(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getVidyoReplayLibrary * soap_new_req___ns1__getVidyoReplayLibrary(
	struct soap *soap)
{	struct __ns1__getVidyoReplayLibrary *_p = soap_new___ns1__getVidyoReplayLibrary(soap);
	if (_p)
	{	soap_default___ns1__getVidyoReplayLibrary(soap, _p);
	}
	return _p;
}

inline struct __ns1__getVidyoReplayLibrary * soap_new_set___ns1__getVidyoReplayLibrary(
	struct soap *soap,
	_ns1__GetVidyoReplayLibraryRequest *ns1__GetVidyoReplayLibraryRequest)
{	struct __ns1__getVidyoReplayLibrary *_p = soap_new___ns1__getVidyoReplayLibrary(soap);
	if (_p)
	{	soap_default___ns1__getVidyoReplayLibrary(soap, _p);
		_p->ns1__GetVidyoReplayLibraryRequest = ns1__GetVidyoReplayLibraryRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getVidyoReplayLibrary(struct soap*, const struct __ns1__getVidyoReplayLibrary *, const char*, const char*);

inline int soap_write___ns1__getVidyoReplayLibrary(struct soap *soap, struct __ns1__getVidyoReplayLibrary const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getVidyoReplayLibrary(soap, p), 0) || soap_put___ns1__getVidyoReplayLibrary(soap, p, "-ns1:getVidyoReplayLibrary", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getVidyoReplayLibrary * SOAP_FMAC4 soap_get___ns1__getVidyoReplayLibrary(struct soap*, struct __ns1__getVidyoReplayLibrary *, const char*, const char*);

inline int soap_read___ns1__getVidyoReplayLibrary(struct soap *soap, struct __ns1__getVidyoReplayLibrary *p)
{	if (p)
	{	soap_default___ns1__getVidyoReplayLibrary(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getVidyoReplayLibrary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removePresenter_DEFINED
#define SOAP_TYPE___ns1__removePresenter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removePresenter(struct soap*, struct __ns1__removePresenter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removePresenter(struct soap*, const struct __ns1__removePresenter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removePresenter(struct soap*, const char*, int, const struct __ns1__removePresenter *, const char*);
SOAP_FMAC3 struct __ns1__removePresenter * SOAP_FMAC4 soap_in___ns1__removePresenter(struct soap*, const char*, struct __ns1__removePresenter *, const char*);
SOAP_FMAC1 struct __ns1__removePresenter * SOAP_FMAC2 soap_instantiate___ns1__removePresenter(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removePresenter * soap_new___ns1__removePresenter(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__removePresenter(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removePresenter * soap_new_req___ns1__removePresenter(
	struct soap *soap)
{	struct __ns1__removePresenter *_p = soap_new___ns1__removePresenter(soap);
	if (_p)
	{	soap_default___ns1__removePresenter(soap, _p);
	}
	return _p;
}

inline struct __ns1__removePresenter * soap_new_set___ns1__removePresenter(
	struct soap *soap,
	_ns1__RemovePresenterRequest *ns1__RemovePresenterRequest)
{	struct __ns1__removePresenter *_p = soap_new___ns1__removePresenter(soap);
	if (_p)
	{	soap_default___ns1__removePresenter(soap, _p);
		_p->ns1__RemovePresenterRequest = ns1__RemovePresenterRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removePresenter(struct soap*, const struct __ns1__removePresenter *, const char*, const char*);

inline int soap_write___ns1__removePresenter(struct soap *soap, struct __ns1__removePresenter const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removePresenter(soap, p), 0) || soap_put___ns1__removePresenter(soap, p, "-ns1:removePresenter", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removePresenter * SOAP_FMAC4 soap_get___ns1__removePresenter(struct soap*, struct __ns1__removePresenter *, const char*, const char*);

inline int soap_read___ns1__removePresenter(struct soap *soap, struct __ns1__removePresenter *p)
{	if (p)
	{	soap_default___ns1__removePresenter(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removePresenter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__setPresenter_DEFINED
#define SOAP_TYPE___ns1__setPresenter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setPresenter(struct soap*, struct __ns1__setPresenter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setPresenter(struct soap*, const struct __ns1__setPresenter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setPresenter(struct soap*, const char*, int, const struct __ns1__setPresenter *, const char*);
SOAP_FMAC3 struct __ns1__setPresenter * SOAP_FMAC4 soap_in___ns1__setPresenter(struct soap*, const char*, struct __ns1__setPresenter *, const char*);
SOAP_FMAC1 struct __ns1__setPresenter * SOAP_FMAC2 soap_instantiate___ns1__setPresenter(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setPresenter * soap_new___ns1__setPresenter(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__setPresenter(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__setPresenter * soap_new_req___ns1__setPresenter(
	struct soap *soap)
{	struct __ns1__setPresenter *_p = soap_new___ns1__setPresenter(soap);
	if (_p)
	{	soap_default___ns1__setPresenter(soap, _p);
	}
	return _p;
}

inline struct __ns1__setPresenter * soap_new_set___ns1__setPresenter(
	struct soap *soap,
	_ns1__SetPresenterRequest *ns1__SetPresenterRequest)
{	struct __ns1__setPresenter *_p = soap_new___ns1__setPresenter(soap);
	if (_p)
	{	soap_default___ns1__setPresenter(soap, _p);
		_p->ns1__SetPresenterRequest = ns1__SetPresenterRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setPresenter(struct soap*, const struct __ns1__setPresenter *, const char*, const char*);

inline int soap_write___ns1__setPresenter(struct soap *soap, struct __ns1__setPresenter const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__setPresenter(soap, p), 0) || soap_put___ns1__setPresenter(soap, p, "-ns1:setPresenter", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__setPresenter * SOAP_FMAC4 soap_get___ns1__setPresenter(struct soap*, struct __ns1__setPresenter *, const char*, const char*);

inline int soap_read___ns1__setPresenter(struct soap *soap, struct __ns1__setPresenter *p)
{	if (p)
	{	soap_default___ns1__setPresenter(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__setPresenter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__dismissAllRaisedHand_DEFINED
#define SOAP_TYPE___ns1__dismissAllRaisedHand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__dismissAllRaisedHand(struct soap*, struct __ns1__dismissAllRaisedHand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__dismissAllRaisedHand(struct soap*, const struct __ns1__dismissAllRaisedHand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__dismissAllRaisedHand(struct soap*, const char*, int, const struct __ns1__dismissAllRaisedHand *, const char*);
SOAP_FMAC3 struct __ns1__dismissAllRaisedHand * SOAP_FMAC4 soap_in___ns1__dismissAllRaisedHand(struct soap*, const char*, struct __ns1__dismissAllRaisedHand *, const char*);
SOAP_FMAC1 struct __ns1__dismissAllRaisedHand * SOAP_FMAC2 soap_instantiate___ns1__dismissAllRaisedHand(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__dismissAllRaisedHand * soap_new___ns1__dismissAllRaisedHand(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__dismissAllRaisedHand(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__dismissAllRaisedHand * soap_new_req___ns1__dismissAllRaisedHand(
	struct soap *soap)
{	struct __ns1__dismissAllRaisedHand *_p = soap_new___ns1__dismissAllRaisedHand(soap);
	if (_p)
	{	soap_default___ns1__dismissAllRaisedHand(soap, _p);
	}
	return _p;
}

inline struct __ns1__dismissAllRaisedHand * soap_new_set___ns1__dismissAllRaisedHand(
	struct soap *soap,
	_ns1__DismissAllRaisedHandRequest *ns1__DismissAllRaisedHandRequest)
{	struct __ns1__dismissAllRaisedHand *_p = soap_new___ns1__dismissAllRaisedHand(soap);
	if (_p)
	{	soap_default___ns1__dismissAllRaisedHand(soap, _p);
		_p->ns1__DismissAllRaisedHandRequest = ns1__DismissAllRaisedHandRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__dismissAllRaisedHand(struct soap*, const struct __ns1__dismissAllRaisedHand *, const char*, const char*);

inline int soap_write___ns1__dismissAllRaisedHand(struct soap *soap, struct __ns1__dismissAllRaisedHand const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__dismissAllRaisedHand(soap, p), 0) || soap_put___ns1__dismissAllRaisedHand(soap, p, "-ns1:dismissAllRaisedHand", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__dismissAllRaisedHand * SOAP_FMAC4 soap_get___ns1__dismissAllRaisedHand(struct soap*, struct __ns1__dismissAllRaisedHand *, const char*, const char*);

inline int soap_read___ns1__dismissAllRaisedHand(struct soap *soap, struct __ns1__dismissAllRaisedHand *p)
{	if (p)
	{	soap_default___ns1__dismissAllRaisedHand(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__dismissAllRaisedHand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__dismissRaisedHand_DEFINED
#define SOAP_TYPE___ns1__dismissRaisedHand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__dismissRaisedHand(struct soap*, struct __ns1__dismissRaisedHand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__dismissRaisedHand(struct soap*, const struct __ns1__dismissRaisedHand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__dismissRaisedHand(struct soap*, const char*, int, const struct __ns1__dismissRaisedHand *, const char*);
SOAP_FMAC3 struct __ns1__dismissRaisedHand * SOAP_FMAC4 soap_in___ns1__dismissRaisedHand(struct soap*, const char*, struct __ns1__dismissRaisedHand *, const char*);
SOAP_FMAC1 struct __ns1__dismissRaisedHand * SOAP_FMAC2 soap_instantiate___ns1__dismissRaisedHand(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__dismissRaisedHand * soap_new___ns1__dismissRaisedHand(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__dismissRaisedHand(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__dismissRaisedHand * soap_new_req___ns1__dismissRaisedHand(
	struct soap *soap)
{	struct __ns1__dismissRaisedHand *_p = soap_new___ns1__dismissRaisedHand(soap);
	if (_p)
	{	soap_default___ns1__dismissRaisedHand(soap, _p);
	}
	return _p;
}

inline struct __ns1__dismissRaisedHand * soap_new_set___ns1__dismissRaisedHand(
	struct soap *soap,
	_ns1__DismissRaisedHandRequest *ns1__DismissRaisedHandRequest)
{	struct __ns1__dismissRaisedHand *_p = soap_new___ns1__dismissRaisedHand(soap);
	if (_p)
	{	soap_default___ns1__dismissRaisedHand(soap, _p);
		_p->ns1__DismissRaisedHandRequest = ns1__DismissRaisedHandRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__dismissRaisedHand(struct soap*, const struct __ns1__dismissRaisedHand *, const char*, const char*);

inline int soap_write___ns1__dismissRaisedHand(struct soap *soap, struct __ns1__dismissRaisedHand const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__dismissRaisedHand(soap, p), 0) || soap_put___ns1__dismissRaisedHand(soap, p, "-ns1:dismissRaisedHand", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__dismissRaisedHand * SOAP_FMAC4 soap_get___ns1__dismissRaisedHand(struct soap*, struct __ns1__dismissRaisedHand *, const char*, const char*);

inline int soap_read___ns1__dismissRaisedHand(struct soap *soap, struct __ns1__dismissRaisedHand *p)
{	if (p)
	{	soap_default___ns1__dismissRaisedHand(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__dismissRaisedHand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__unraiseHand_DEFINED
#define SOAP_TYPE___ns1__unraiseHand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__unraiseHand(struct soap*, struct __ns1__unraiseHand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__unraiseHand(struct soap*, const struct __ns1__unraiseHand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__unraiseHand(struct soap*, const char*, int, const struct __ns1__unraiseHand *, const char*);
SOAP_FMAC3 struct __ns1__unraiseHand * SOAP_FMAC4 soap_in___ns1__unraiseHand(struct soap*, const char*, struct __ns1__unraiseHand *, const char*);
SOAP_FMAC1 struct __ns1__unraiseHand * SOAP_FMAC2 soap_instantiate___ns1__unraiseHand(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__unraiseHand * soap_new___ns1__unraiseHand(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__unraiseHand(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__unraiseHand * soap_new_req___ns1__unraiseHand(
	struct soap *soap)
{	struct __ns1__unraiseHand *_p = soap_new___ns1__unraiseHand(soap);
	if (_p)
	{	soap_default___ns1__unraiseHand(soap, _p);
	}
	return _p;
}

inline struct __ns1__unraiseHand * soap_new_set___ns1__unraiseHand(
	struct soap *soap,
	char *ns1__UnraiseHandRequest)
{	struct __ns1__unraiseHand *_p = soap_new___ns1__unraiseHand(soap);
	if (_p)
	{	soap_default___ns1__unraiseHand(soap, _p);
		_p->ns1__UnraiseHandRequest = ns1__UnraiseHandRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__unraiseHand(struct soap*, const struct __ns1__unraiseHand *, const char*, const char*);

inline int soap_write___ns1__unraiseHand(struct soap *soap, struct __ns1__unraiseHand const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__unraiseHand(soap, p), 0) || soap_put___ns1__unraiseHand(soap, p, "-ns1:unraiseHand", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__unraiseHand * SOAP_FMAC4 soap_get___ns1__unraiseHand(struct soap*, struct __ns1__unraiseHand *, const char*, const char*);

inline int soap_read___ns1__unraiseHand(struct soap *soap, struct __ns1__unraiseHand *p)
{	if (p)
	{	soap_default___ns1__unraiseHand(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__unraiseHand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__raiseHand_DEFINED
#define SOAP_TYPE___ns1__raiseHand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__raiseHand(struct soap*, struct __ns1__raiseHand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__raiseHand(struct soap*, const struct __ns1__raiseHand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__raiseHand(struct soap*, const char*, int, const struct __ns1__raiseHand *, const char*);
SOAP_FMAC3 struct __ns1__raiseHand * SOAP_FMAC4 soap_in___ns1__raiseHand(struct soap*, const char*, struct __ns1__raiseHand *, const char*);
SOAP_FMAC1 struct __ns1__raiseHand * SOAP_FMAC2 soap_instantiate___ns1__raiseHand(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__raiseHand * soap_new___ns1__raiseHand(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__raiseHand(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__raiseHand * soap_new_req___ns1__raiseHand(
	struct soap *soap)
{	struct __ns1__raiseHand *_p = soap_new___ns1__raiseHand(soap);
	if (_p)
	{	soap_default___ns1__raiseHand(soap, _p);
	}
	return _p;
}

inline struct __ns1__raiseHand * soap_new_set___ns1__raiseHand(
	struct soap *soap,
	char *ns1__RaiseHandRequest)
{	struct __ns1__raiseHand *_p = soap_new___ns1__raiseHand(soap);
	if (_p)
	{	soap_default___ns1__raiseHand(soap, _p);
		_p->ns1__RaiseHandRequest = ns1__RaiseHandRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__raiseHand(struct soap*, const struct __ns1__raiseHand *, const char*, const char*);

inline int soap_write___ns1__raiseHand(struct soap *soap, struct __ns1__raiseHand const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__raiseHand(soap, p), 0) || soap_put___ns1__raiseHand(soap, p, "-ns1:raiseHand", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__raiseHand * SOAP_FMAC4 soap_get___ns1__raiseHand(struct soap*, struct __ns1__raiseHand *, const char*, const char*);

inline int soap_read___ns1__raiseHand(struct soap *soap, struct __ns1__raiseHand *p)
{	if (p)
	{	soap_default___ns1__raiseHand(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__raiseHand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__stopLectureMode_DEFINED
#define SOAP_TYPE___ns1__stopLectureMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__stopLectureMode(struct soap*, struct __ns1__stopLectureMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__stopLectureMode(struct soap*, const struct __ns1__stopLectureMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__stopLectureMode(struct soap*, const char*, int, const struct __ns1__stopLectureMode *, const char*);
SOAP_FMAC3 struct __ns1__stopLectureMode * SOAP_FMAC4 soap_in___ns1__stopLectureMode(struct soap*, const char*, struct __ns1__stopLectureMode *, const char*);
SOAP_FMAC1 struct __ns1__stopLectureMode * SOAP_FMAC2 soap_instantiate___ns1__stopLectureMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__stopLectureMode * soap_new___ns1__stopLectureMode(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__stopLectureMode(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__stopLectureMode * soap_new_req___ns1__stopLectureMode(
	struct soap *soap)
{	struct __ns1__stopLectureMode *_p = soap_new___ns1__stopLectureMode(soap);
	if (_p)
	{	soap_default___ns1__stopLectureMode(soap, _p);
	}
	return _p;
}

inline struct __ns1__stopLectureMode * soap_new_set___ns1__stopLectureMode(
	struct soap *soap,
	_ns1__StopLectureModeRequest *ns1__StopLectureModeRequest)
{	struct __ns1__stopLectureMode *_p = soap_new___ns1__stopLectureMode(soap);
	if (_p)
	{	soap_default___ns1__stopLectureMode(soap, _p);
		_p->ns1__StopLectureModeRequest = ns1__StopLectureModeRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__stopLectureMode(struct soap*, const struct __ns1__stopLectureMode *, const char*, const char*);

inline int soap_write___ns1__stopLectureMode(struct soap *soap, struct __ns1__stopLectureMode const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__stopLectureMode(soap, p), 0) || soap_put___ns1__stopLectureMode(soap, p, "-ns1:stopLectureMode", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__stopLectureMode * SOAP_FMAC4 soap_get___ns1__stopLectureMode(struct soap*, struct __ns1__stopLectureMode *, const char*, const char*);

inline int soap_read___ns1__stopLectureMode(struct soap *soap, struct __ns1__stopLectureMode *p)
{	if (p)
	{	soap_default___ns1__stopLectureMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__stopLectureMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__startLectureMode_DEFINED
#define SOAP_TYPE___ns1__startLectureMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__startLectureMode(struct soap*, struct __ns1__startLectureMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__startLectureMode(struct soap*, const struct __ns1__startLectureMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__startLectureMode(struct soap*, const char*, int, const struct __ns1__startLectureMode *, const char*);
SOAP_FMAC3 struct __ns1__startLectureMode * SOAP_FMAC4 soap_in___ns1__startLectureMode(struct soap*, const char*, struct __ns1__startLectureMode *, const char*);
SOAP_FMAC1 struct __ns1__startLectureMode * SOAP_FMAC2 soap_instantiate___ns1__startLectureMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__startLectureMode * soap_new___ns1__startLectureMode(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__startLectureMode(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__startLectureMode * soap_new_req___ns1__startLectureMode(
	struct soap *soap)
{	struct __ns1__startLectureMode *_p = soap_new___ns1__startLectureMode(soap);
	if (_p)
	{	soap_default___ns1__startLectureMode(soap, _p);
	}
	return _p;
}

inline struct __ns1__startLectureMode * soap_new_set___ns1__startLectureMode(
	struct soap *soap,
	_ns1__StartLectureModeRequest *ns1__StartLectureModeRequest)
{	struct __ns1__startLectureMode *_p = soap_new___ns1__startLectureMode(soap);
	if (_p)
	{	soap_default___ns1__startLectureMode(soap, _p);
		_p->ns1__StartLectureModeRequest = ns1__StartLectureModeRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__startLectureMode(struct soap*, const struct __ns1__startLectureMode *, const char*, const char*);

inline int soap_write___ns1__startLectureMode(struct soap *soap, struct __ns1__startLectureMode const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__startLectureMode(soap, p), 0) || soap_put___ns1__startLectureMode(soap, p, "-ns1:startLectureMode", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__startLectureMode * SOAP_FMAC4 soap_get___ns1__startLectureMode(struct soap*, struct __ns1__startLectureMode *, const char*, const char*);

inline int soap_read___ns1__startLectureMode(struct soap *soap, struct __ns1__startLectureMode *p)
{	if (p)
	{	soap_default___ns1__startLectureMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__startLectureMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getUserAccountType_DEFINED
#define SOAP_TYPE___ns1__getUserAccountType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getUserAccountType(struct soap*, struct __ns1__getUserAccountType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getUserAccountType(struct soap*, const struct __ns1__getUserAccountType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getUserAccountType(struct soap*, const char*, int, const struct __ns1__getUserAccountType *, const char*);
SOAP_FMAC3 struct __ns1__getUserAccountType * SOAP_FMAC4 soap_in___ns1__getUserAccountType(struct soap*, const char*, struct __ns1__getUserAccountType *, const char*);
SOAP_FMAC1 struct __ns1__getUserAccountType * SOAP_FMAC2 soap_instantiate___ns1__getUserAccountType(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getUserAccountType * soap_new___ns1__getUserAccountType(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getUserAccountType(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getUserAccountType * soap_new_req___ns1__getUserAccountType(
	struct soap *soap)
{	struct __ns1__getUserAccountType *_p = soap_new___ns1__getUserAccountType(soap);
	if (_p)
	{	soap_default___ns1__getUserAccountType(soap, _p);
	}
	return _p;
}

inline struct __ns1__getUserAccountType * soap_new_set___ns1__getUserAccountType(
	struct soap *soap,
	_ns1__getUserAccountTypeRequest *ns1__getUserAccountTypeRequest)
{	struct __ns1__getUserAccountType *_p = soap_new___ns1__getUserAccountType(soap);
	if (_p)
	{	soap_default___ns1__getUserAccountType(soap, _p);
		_p->ns1__getUserAccountTypeRequest = ns1__getUserAccountTypeRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getUserAccountType(struct soap*, const struct __ns1__getUserAccountType *, const char*, const char*);

inline int soap_write___ns1__getUserAccountType(struct soap *soap, struct __ns1__getUserAccountType const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getUserAccountType(soap, p), 0) || soap_put___ns1__getUserAccountType(soap, p, "-ns1:getUserAccountType", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getUserAccountType * SOAP_FMAC4 soap_get___ns1__getUserAccountType(struct soap*, struct __ns1__getUserAccountType *, const char*, const char*);

inline int soap_read___ns1__getUserAccountType(struct soap *soap, struct __ns1__getUserAccountType *p)
{	if (p)
	{	soap_default___ns1__getUserAccountType(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getUserAccountType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getLoginAndWelcomeBanner_DEFINED
#define SOAP_TYPE___ns1__getLoginAndWelcomeBanner_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getLoginAndWelcomeBanner(struct soap*, struct __ns1__getLoginAndWelcomeBanner *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getLoginAndWelcomeBanner(struct soap*, const struct __ns1__getLoginAndWelcomeBanner *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getLoginAndWelcomeBanner(struct soap*, const char*, int, const struct __ns1__getLoginAndWelcomeBanner *, const char*);
SOAP_FMAC3 struct __ns1__getLoginAndWelcomeBanner * SOAP_FMAC4 soap_in___ns1__getLoginAndWelcomeBanner(struct soap*, const char*, struct __ns1__getLoginAndWelcomeBanner *, const char*);
SOAP_FMAC1 struct __ns1__getLoginAndWelcomeBanner * SOAP_FMAC2 soap_instantiate___ns1__getLoginAndWelcomeBanner(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getLoginAndWelcomeBanner * soap_new___ns1__getLoginAndWelcomeBanner(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getLoginAndWelcomeBanner(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getLoginAndWelcomeBanner * soap_new_req___ns1__getLoginAndWelcomeBanner(
	struct soap *soap)
{	struct __ns1__getLoginAndWelcomeBanner *_p = soap_new___ns1__getLoginAndWelcomeBanner(soap);
	if (_p)
	{	soap_default___ns1__getLoginAndWelcomeBanner(soap, _p);
	}
	return _p;
}

inline struct __ns1__getLoginAndWelcomeBanner * soap_new_set___ns1__getLoginAndWelcomeBanner(
	struct soap *soap,
	_ns1__getLoginAndWelcomeBannerRequest *ns1__getLoginAndWelcomeBannerRequest)
{	struct __ns1__getLoginAndWelcomeBanner *_p = soap_new___ns1__getLoginAndWelcomeBanner(soap);
	if (_p)
	{	soap_default___ns1__getLoginAndWelcomeBanner(soap, _p);
		_p->ns1__getLoginAndWelcomeBannerRequest = ns1__getLoginAndWelcomeBannerRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getLoginAndWelcomeBanner(struct soap*, const struct __ns1__getLoginAndWelcomeBanner *, const char*, const char*);

inline int soap_write___ns1__getLoginAndWelcomeBanner(struct soap *soap, struct __ns1__getLoginAndWelcomeBanner const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getLoginAndWelcomeBanner(soap, p), 0) || soap_put___ns1__getLoginAndWelcomeBanner(soap, p, "-ns1:getLoginAndWelcomeBanner", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getLoginAndWelcomeBanner * SOAP_FMAC4 soap_get___ns1__getLoginAndWelcomeBanner(struct soap*, struct __ns1__getLoginAndWelcomeBanner *, const char*, const char*);

inline int soap_read___ns1__getLoginAndWelcomeBanner(struct soap *soap, struct __ns1__getLoginAndWelcomeBanner *p)
{	if (p)
	{	soap_default___ns1__getLoginAndWelcomeBanner(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getLoginAndWelcomeBanner(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPortalPrefix_DEFINED
#define SOAP_TYPE___ns1__getPortalPrefix_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPortalPrefix(struct soap*, struct __ns1__getPortalPrefix *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPortalPrefix(struct soap*, const struct __ns1__getPortalPrefix *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPortalPrefix(struct soap*, const char*, int, const struct __ns1__getPortalPrefix *, const char*);
SOAP_FMAC3 struct __ns1__getPortalPrefix * SOAP_FMAC4 soap_in___ns1__getPortalPrefix(struct soap*, const char*, struct __ns1__getPortalPrefix *, const char*);
SOAP_FMAC1 struct __ns1__getPortalPrefix * SOAP_FMAC2 soap_instantiate___ns1__getPortalPrefix(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPortalPrefix * soap_new___ns1__getPortalPrefix(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getPortalPrefix(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPortalPrefix * soap_new_req___ns1__getPortalPrefix(
	struct soap *soap)
{	struct __ns1__getPortalPrefix *_p = soap_new___ns1__getPortalPrefix(soap);
	if (_p)
	{	soap_default___ns1__getPortalPrefix(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPortalPrefix * soap_new_set___ns1__getPortalPrefix(
	struct soap *soap,
	char *ns1__PortalPrefixRequest)
{	struct __ns1__getPortalPrefix *_p = soap_new___ns1__getPortalPrefix(soap);
	if (_p)
	{	soap_default___ns1__getPortalPrefix(soap, _p);
		_p->ns1__PortalPrefixRequest = ns1__PortalPrefixRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPortalPrefix(struct soap*, const struct __ns1__getPortalPrefix *, const char*, const char*);

inline int soap_write___ns1__getPortalPrefix(struct soap *soap, struct __ns1__getPortalPrefix const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getPortalPrefix(soap, p), 0) || soap_put___ns1__getPortalPrefix(soap, p, "-ns1:getPortalPrefix", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPortalPrefix * SOAP_FMAC4 soap_get___ns1__getPortalPrefix(struct soap*, struct __ns1__getPortalPrefix *, const char*, const char*);

inline int soap_read___ns1__getPortalPrefix(struct soap *soap, struct __ns1__getPortalPrefix *p)
{	if (p)
	{	soap_default___ns1__getPortalPrefix(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPortalPrefix(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRoomAccessOptions_DEFINED
#define SOAP_TYPE___ns1__getRoomAccessOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRoomAccessOptions(struct soap*, struct __ns1__getRoomAccessOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRoomAccessOptions(struct soap*, const struct __ns1__getRoomAccessOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRoomAccessOptions(struct soap*, const char*, int, const struct __ns1__getRoomAccessOptions *, const char*);
SOAP_FMAC3 struct __ns1__getRoomAccessOptions * SOAP_FMAC4 soap_in___ns1__getRoomAccessOptions(struct soap*, const char*, struct __ns1__getRoomAccessOptions *, const char*);
SOAP_FMAC1 struct __ns1__getRoomAccessOptions * SOAP_FMAC2 soap_instantiate___ns1__getRoomAccessOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRoomAccessOptions * soap_new___ns1__getRoomAccessOptions(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getRoomAccessOptions(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRoomAccessOptions * soap_new_req___ns1__getRoomAccessOptions(
	struct soap *soap)
{	struct __ns1__getRoomAccessOptions *_p = soap_new___ns1__getRoomAccessOptions(soap);
	if (_p)
	{	soap_default___ns1__getRoomAccessOptions(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRoomAccessOptions * soap_new_set___ns1__getRoomAccessOptions(
	struct soap *soap,
	_ns1__RoomAccessOptionsRequest *ns1__RoomAccessOptionsRequest)
{	struct __ns1__getRoomAccessOptions *_p = soap_new___ns1__getRoomAccessOptions(soap);
	if (_p)
	{	soap_default___ns1__getRoomAccessOptions(soap, _p);
		_p->ns1__RoomAccessOptionsRequest = ns1__RoomAccessOptionsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRoomAccessOptions(struct soap*, const struct __ns1__getRoomAccessOptions *, const char*, const char*);

inline int soap_write___ns1__getRoomAccessOptions(struct soap *soap, struct __ns1__getRoomAccessOptions const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getRoomAccessOptions(soap, p), 0) || soap_put___ns1__getRoomAccessOptions(soap, p, "-ns1:getRoomAccessOptions", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRoomAccessOptions * SOAP_FMAC4 soap_get___ns1__getRoomAccessOptions(struct soap*, struct __ns1__getRoomAccessOptions *, const char*, const char*);

inline int soap_read___ns1__getRoomAccessOptions(struct soap *soap, struct __ns1__getRoomAccessOptions *p)
{	if (p)
	{	soap_default___ns1__getRoomAccessOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getRoomAccessOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getOnetimeAccessUrl_DEFINED
#define SOAP_TYPE___ns1__getOnetimeAccessUrl_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getOnetimeAccessUrl(struct soap*, struct __ns1__getOnetimeAccessUrl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getOnetimeAccessUrl(struct soap*, const struct __ns1__getOnetimeAccessUrl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getOnetimeAccessUrl(struct soap*, const char*, int, const struct __ns1__getOnetimeAccessUrl *, const char*);
SOAP_FMAC3 struct __ns1__getOnetimeAccessUrl * SOAP_FMAC4 soap_in___ns1__getOnetimeAccessUrl(struct soap*, const char*, struct __ns1__getOnetimeAccessUrl *, const char*);
SOAP_FMAC1 struct __ns1__getOnetimeAccessUrl * SOAP_FMAC2 soap_instantiate___ns1__getOnetimeAccessUrl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getOnetimeAccessUrl * soap_new___ns1__getOnetimeAccessUrl(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getOnetimeAccessUrl(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getOnetimeAccessUrl * soap_new_req___ns1__getOnetimeAccessUrl(
	struct soap *soap)
{	struct __ns1__getOnetimeAccessUrl *_p = soap_new___ns1__getOnetimeAccessUrl(soap);
	if (_p)
	{	soap_default___ns1__getOnetimeAccessUrl(soap, _p);
	}
	return _p;
}

inline struct __ns1__getOnetimeAccessUrl * soap_new_set___ns1__getOnetimeAccessUrl(
	struct soap *soap,
	char *ns1__OnetimeAccessRequest)
{	struct __ns1__getOnetimeAccessUrl *_p = soap_new___ns1__getOnetimeAccessUrl(soap);
	if (_p)
	{	soap_default___ns1__getOnetimeAccessUrl(soap, _p);
		_p->ns1__OnetimeAccessRequest = ns1__OnetimeAccessRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getOnetimeAccessUrl(struct soap*, const struct __ns1__getOnetimeAccessUrl *, const char*, const char*);

inline int soap_write___ns1__getOnetimeAccessUrl(struct soap *soap, struct __ns1__getOnetimeAccessUrl const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getOnetimeAccessUrl(soap, p), 0) || soap_put___ns1__getOnetimeAccessUrl(soap, p, "-ns1:getOnetimeAccessUrl", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getOnetimeAccessUrl * SOAP_FMAC4 soap_get___ns1__getOnetimeAccessUrl(struct soap*, struct __ns1__getOnetimeAccessUrl *, const char*, const char*);

inline int soap_read___ns1__getOnetimeAccessUrl(struct soap *soap, struct __ns1__getOnetimeAccessUrl *p)
{	if (p)
	{	soap_default___ns1__getOnetimeAccessUrl(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getOnetimeAccessUrl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__muteVideoClientAll_DEFINED
#define SOAP_TYPE___ns1__muteVideoClientAll_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__muteVideoClientAll(struct soap*, struct __ns1__muteVideoClientAll *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__muteVideoClientAll(struct soap*, const struct __ns1__muteVideoClientAll *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__muteVideoClientAll(struct soap*, const char*, int, const struct __ns1__muteVideoClientAll *, const char*);
SOAP_FMAC3 struct __ns1__muteVideoClientAll * SOAP_FMAC4 soap_in___ns1__muteVideoClientAll(struct soap*, const char*, struct __ns1__muteVideoClientAll *, const char*);
SOAP_FMAC1 struct __ns1__muteVideoClientAll * SOAP_FMAC2 soap_instantiate___ns1__muteVideoClientAll(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__muteVideoClientAll * soap_new___ns1__muteVideoClientAll(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__muteVideoClientAll(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__muteVideoClientAll * soap_new_req___ns1__muteVideoClientAll(
	struct soap *soap)
{	struct __ns1__muteVideoClientAll *_p = soap_new___ns1__muteVideoClientAll(soap);
	if (_p)
	{	soap_default___ns1__muteVideoClientAll(soap, _p);
	}
	return _p;
}

inline struct __ns1__muteVideoClientAll * soap_new_set___ns1__muteVideoClientAll(
	struct soap *soap,
	_ns1__muteVideoClientAllRequest *ns1__muteVideoClientAllRequest)
{	struct __ns1__muteVideoClientAll *_p = soap_new___ns1__muteVideoClientAll(soap);
	if (_p)
	{	soap_default___ns1__muteVideoClientAll(soap, _p);
		_p->ns1__muteVideoClientAllRequest = ns1__muteVideoClientAllRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__muteVideoClientAll(struct soap*, const struct __ns1__muteVideoClientAll *, const char*, const char*);

inline int soap_write___ns1__muteVideoClientAll(struct soap *soap, struct __ns1__muteVideoClientAll const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__muteVideoClientAll(soap, p), 0) || soap_put___ns1__muteVideoClientAll(soap, p, "-ns1:muteVideoClientAll", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__muteVideoClientAll * SOAP_FMAC4 soap_get___ns1__muteVideoClientAll(struct soap*, struct __ns1__muteVideoClientAll *, const char*, const char*);

inline int soap_read___ns1__muteVideoClientAll(struct soap *soap, struct __ns1__muteVideoClientAll *p)
{	if (p)
	{	soap_default___ns1__muteVideoClientAll(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__muteVideoClientAll(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__muteVideoServerAll_DEFINED
#define SOAP_TYPE___ns1__muteVideoServerAll_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__muteVideoServerAll(struct soap*, struct __ns1__muteVideoServerAll *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__muteVideoServerAll(struct soap*, const struct __ns1__muteVideoServerAll *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__muteVideoServerAll(struct soap*, const char*, int, const struct __ns1__muteVideoServerAll *, const char*);
SOAP_FMAC3 struct __ns1__muteVideoServerAll * SOAP_FMAC4 soap_in___ns1__muteVideoServerAll(struct soap*, const char*, struct __ns1__muteVideoServerAll *, const char*);
SOAP_FMAC1 struct __ns1__muteVideoServerAll * SOAP_FMAC2 soap_instantiate___ns1__muteVideoServerAll(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__muteVideoServerAll * soap_new___ns1__muteVideoServerAll(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__muteVideoServerAll(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__muteVideoServerAll * soap_new_req___ns1__muteVideoServerAll(
	struct soap *soap)
{	struct __ns1__muteVideoServerAll *_p = soap_new___ns1__muteVideoServerAll(soap);
	if (_p)
	{	soap_default___ns1__muteVideoServerAll(soap, _p);
	}
	return _p;
}

inline struct __ns1__muteVideoServerAll * soap_new_set___ns1__muteVideoServerAll(
	struct soap *soap,
	_ns1__muteVideoServerAllRequest *ns1__muteVideoServerAllRequest)
{	struct __ns1__muteVideoServerAll *_p = soap_new___ns1__muteVideoServerAll(soap);
	if (_p)
	{	soap_default___ns1__muteVideoServerAll(soap, _p);
		_p->ns1__muteVideoServerAllRequest = ns1__muteVideoServerAllRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__muteVideoServerAll(struct soap*, const struct __ns1__muteVideoServerAll *, const char*, const char*);

inline int soap_write___ns1__muteVideoServerAll(struct soap *soap, struct __ns1__muteVideoServerAll const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__muteVideoServerAll(soap, p), 0) || soap_put___ns1__muteVideoServerAll(soap, p, "-ns1:muteVideoServerAll", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__muteVideoServerAll * SOAP_FMAC4 soap_get___ns1__muteVideoServerAll(struct soap*, struct __ns1__muteVideoServerAll *, const char*, const char*);

inline int soap_read___ns1__muteVideoServerAll(struct soap *soap, struct __ns1__muteVideoServerAll *p)
{	if (p)
	{	soap_default___ns1__muteVideoServerAll(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__muteVideoServerAll(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__muteAudioClientAll_DEFINED
#define SOAP_TYPE___ns1__muteAudioClientAll_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__muteAudioClientAll(struct soap*, struct __ns1__muteAudioClientAll *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__muteAudioClientAll(struct soap*, const struct __ns1__muteAudioClientAll *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__muteAudioClientAll(struct soap*, const char*, int, const struct __ns1__muteAudioClientAll *, const char*);
SOAP_FMAC3 struct __ns1__muteAudioClientAll * SOAP_FMAC4 soap_in___ns1__muteAudioClientAll(struct soap*, const char*, struct __ns1__muteAudioClientAll *, const char*);
SOAP_FMAC1 struct __ns1__muteAudioClientAll * SOAP_FMAC2 soap_instantiate___ns1__muteAudioClientAll(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__muteAudioClientAll * soap_new___ns1__muteAudioClientAll(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__muteAudioClientAll(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__muteAudioClientAll * soap_new_req___ns1__muteAudioClientAll(
	struct soap *soap)
{	struct __ns1__muteAudioClientAll *_p = soap_new___ns1__muteAudioClientAll(soap);
	if (_p)
	{	soap_default___ns1__muteAudioClientAll(soap, _p);
	}
	return _p;
}

inline struct __ns1__muteAudioClientAll * soap_new_set___ns1__muteAudioClientAll(
	struct soap *soap,
	_ns1__muteAudioClientAllRequest *ns1__muteAudioClientAllRequest)
{	struct __ns1__muteAudioClientAll *_p = soap_new___ns1__muteAudioClientAll(soap);
	if (_p)
	{	soap_default___ns1__muteAudioClientAll(soap, _p);
		_p->ns1__muteAudioClientAllRequest = ns1__muteAudioClientAllRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__muteAudioClientAll(struct soap*, const struct __ns1__muteAudioClientAll *, const char*, const char*);

inline int soap_write___ns1__muteAudioClientAll(struct soap *soap, struct __ns1__muteAudioClientAll const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__muteAudioClientAll(soap, p), 0) || soap_put___ns1__muteAudioClientAll(soap, p, "-ns1:muteAudioClientAll", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__muteAudioClientAll * SOAP_FMAC4 soap_get___ns1__muteAudioClientAll(struct soap*, struct __ns1__muteAudioClientAll *, const char*, const char*);

inline int soap_read___ns1__muteAudioClientAll(struct soap *soap, struct __ns1__muteAudioClientAll *p)
{	if (p)
	{	soap_default___ns1__muteAudioClientAll(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__muteAudioClientAll(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__muteAudioServerAll_DEFINED
#define SOAP_TYPE___ns1__muteAudioServerAll_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__muteAudioServerAll(struct soap*, struct __ns1__muteAudioServerAll *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__muteAudioServerAll(struct soap*, const struct __ns1__muteAudioServerAll *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__muteAudioServerAll(struct soap*, const char*, int, const struct __ns1__muteAudioServerAll *, const char*);
SOAP_FMAC3 struct __ns1__muteAudioServerAll * SOAP_FMAC4 soap_in___ns1__muteAudioServerAll(struct soap*, const char*, struct __ns1__muteAudioServerAll *, const char*);
SOAP_FMAC1 struct __ns1__muteAudioServerAll * SOAP_FMAC2 soap_instantiate___ns1__muteAudioServerAll(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__muteAudioServerAll * soap_new___ns1__muteAudioServerAll(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__muteAudioServerAll(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__muteAudioServerAll * soap_new_req___ns1__muteAudioServerAll(
	struct soap *soap)
{	struct __ns1__muteAudioServerAll *_p = soap_new___ns1__muteAudioServerAll(soap);
	if (_p)
	{	soap_default___ns1__muteAudioServerAll(soap, _p);
	}
	return _p;
}

inline struct __ns1__muteAudioServerAll * soap_new_set___ns1__muteAudioServerAll(
	struct soap *soap,
	_ns1__muteAudioServerAllRequest *ns1__muteAudioServerAllRequest)
{	struct __ns1__muteAudioServerAll *_p = soap_new___ns1__muteAudioServerAll(soap);
	if (_p)
	{	soap_default___ns1__muteAudioServerAll(soap, _p);
		_p->ns1__muteAudioServerAllRequest = ns1__muteAudioServerAllRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__muteAudioServerAll(struct soap*, const struct __ns1__muteAudioServerAll *, const char*, const char*);

inline int soap_write___ns1__muteAudioServerAll(struct soap *soap, struct __ns1__muteAudioServerAll const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__muteAudioServerAll(soap, p), 0) || soap_put___ns1__muteAudioServerAll(soap, p, "-ns1:muteAudioServerAll", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__muteAudioServerAll * SOAP_FMAC4 soap_get___ns1__muteAudioServerAll(struct soap*, struct __ns1__muteAudioServerAll *, const char*, const char*);

inline int soap_read___ns1__muteAudioServerAll(struct soap *soap, struct __ns1__muteAudioServerAll *p)
{	if (p)
	{	soap_default___ns1__muteAudioServerAll(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__muteAudioServerAll(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__disconnectConferenceAll_DEFINED
#define SOAP_TYPE___ns1__disconnectConferenceAll_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__disconnectConferenceAll(struct soap*, struct __ns1__disconnectConferenceAll *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__disconnectConferenceAll(struct soap*, const struct __ns1__disconnectConferenceAll *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__disconnectConferenceAll(struct soap*, const char*, int, const struct __ns1__disconnectConferenceAll *, const char*);
SOAP_FMAC3 struct __ns1__disconnectConferenceAll * SOAP_FMAC4 soap_in___ns1__disconnectConferenceAll(struct soap*, const char*, struct __ns1__disconnectConferenceAll *, const char*);
SOAP_FMAC1 struct __ns1__disconnectConferenceAll * SOAP_FMAC2 soap_instantiate___ns1__disconnectConferenceAll(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__disconnectConferenceAll * soap_new___ns1__disconnectConferenceAll(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__disconnectConferenceAll(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__disconnectConferenceAll * soap_new_req___ns1__disconnectConferenceAll(
	struct soap *soap)
{	struct __ns1__disconnectConferenceAll *_p = soap_new___ns1__disconnectConferenceAll(soap);
	if (_p)
	{	soap_default___ns1__disconnectConferenceAll(soap, _p);
	}
	return _p;
}

inline struct __ns1__disconnectConferenceAll * soap_new_set___ns1__disconnectConferenceAll(
	struct soap *soap,
	_ns1__disconnectConferenceAllRequest *ns1__disconnectConferenceAllRequest)
{	struct __ns1__disconnectConferenceAll *_p = soap_new___ns1__disconnectConferenceAll(soap);
	if (_p)
	{	soap_default___ns1__disconnectConferenceAll(soap, _p);
		_p->ns1__disconnectConferenceAllRequest = ns1__disconnectConferenceAllRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__disconnectConferenceAll(struct soap*, const struct __ns1__disconnectConferenceAll *, const char*, const char*);

inline int soap_write___ns1__disconnectConferenceAll(struct soap *soap, struct __ns1__disconnectConferenceAll const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__disconnectConferenceAll(soap, p), 0) || soap_put___ns1__disconnectConferenceAll(soap, p, "-ns1:disconnectConferenceAll", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__disconnectConferenceAll * SOAP_FMAC4 soap_get___ns1__disconnectConferenceAll(struct soap*, struct __ns1__disconnectConferenceAll *, const char*, const char*);

inline int soap_read___ns1__disconnectConferenceAll(struct soap *soap, struct __ns1__disconnectConferenceAll *p)
{	if (p)
	{	soap_default___ns1__disconnectConferenceAll(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__disconnectConferenceAll(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__logoutAllOtherSessions_DEFINED
#define SOAP_TYPE___ns1__logoutAllOtherSessions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logoutAllOtherSessions(struct soap*, struct __ns1__logoutAllOtherSessions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logoutAllOtherSessions(struct soap*, const struct __ns1__logoutAllOtherSessions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logoutAllOtherSessions(struct soap*, const char*, int, const struct __ns1__logoutAllOtherSessions *, const char*);
SOAP_FMAC3 struct __ns1__logoutAllOtherSessions * SOAP_FMAC4 soap_in___ns1__logoutAllOtherSessions(struct soap*, const char*, struct __ns1__logoutAllOtherSessions *, const char*);
SOAP_FMAC1 struct __ns1__logoutAllOtherSessions * SOAP_FMAC2 soap_instantiate___ns1__logoutAllOtherSessions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__logoutAllOtherSessions * soap_new___ns1__logoutAllOtherSessions(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__logoutAllOtherSessions(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__logoutAllOtherSessions * soap_new_req___ns1__logoutAllOtherSessions(
	struct soap *soap)
{	struct __ns1__logoutAllOtherSessions *_p = soap_new___ns1__logoutAllOtherSessions(soap);
	if (_p)
	{	soap_default___ns1__logoutAllOtherSessions(soap, _p);
	}
	return _p;
}

inline struct __ns1__logoutAllOtherSessions * soap_new_set___ns1__logoutAllOtherSessions(
	struct soap *soap,
	char *ns1__LogoutAllOtherSessionsRequest)
{	struct __ns1__logoutAllOtherSessions *_p = soap_new___ns1__logoutAllOtherSessions(soap);
	if (_p)
	{	soap_default___ns1__logoutAllOtherSessions(soap, _p);
		_p->ns1__LogoutAllOtherSessionsRequest = ns1__LogoutAllOtherSessionsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logoutAllOtherSessions(struct soap*, const struct __ns1__logoutAllOtherSessions *, const char*, const char*);

inline int soap_write___ns1__logoutAllOtherSessions(struct soap *soap, struct __ns1__logoutAllOtherSessions const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__logoutAllOtherSessions(soap, p), 0) || soap_put___ns1__logoutAllOtherSessions(soap, p, "-ns1:logoutAllOtherSessions", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__logoutAllOtherSessions * SOAP_FMAC4 soap_get___ns1__logoutAllOtherSessions(struct soap*, struct __ns1__logoutAllOtherSessions *, const char*, const char*);

inline int soap_read___ns1__logoutAllOtherSessions(struct soap *soap, struct __ns1__logoutAllOtherSessions *p)
{	if (p)
	{	soap_default___ns1__logoutAllOtherSessions(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__logoutAllOtherSessions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getActiveSessions_DEFINED
#define SOAP_TYPE___ns1__getActiveSessions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getActiveSessions(struct soap*, struct __ns1__getActiveSessions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getActiveSessions(struct soap*, const struct __ns1__getActiveSessions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getActiveSessions(struct soap*, const char*, int, const struct __ns1__getActiveSessions *, const char*);
SOAP_FMAC3 struct __ns1__getActiveSessions * SOAP_FMAC4 soap_in___ns1__getActiveSessions(struct soap*, const char*, struct __ns1__getActiveSessions *, const char*);
SOAP_FMAC1 struct __ns1__getActiveSessions * SOAP_FMAC2 soap_instantiate___ns1__getActiveSessions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getActiveSessions * soap_new___ns1__getActiveSessions(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getActiveSessions(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getActiveSessions * soap_new_req___ns1__getActiveSessions(
	struct soap *soap)
{	struct __ns1__getActiveSessions *_p = soap_new___ns1__getActiveSessions(soap);
	if (_p)
	{	soap_default___ns1__getActiveSessions(soap, _p);
	}
	return _p;
}

inline struct __ns1__getActiveSessions * soap_new_set___ns1__getActiveSessions(
	struct soap *soap,
	char *ns1__GetActiveSessionsRequest)
{	struct __ns1__getActiveSessions *_p = soap_new___ns1__getActiveSessions(soap);
	if (_p)
	{	soap_default___ns1__getActiveSessions(soap, _p);
		_p->ns1__GetActiveSessionsRequest = ns1__GetActiveSessionsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getActiveSessions(struct soap*, const struct __ns1__getActiveSessions *, const char*, const char*);

inline int soap_write___ns1__getActiveSessions(struct soap *soap, struct __ns1__getActiveSessions const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getActiveSessions(soap, p), 0) || soap_put___ns1__getActiveSessions(soap, p, "-ns1:getActiveSessions", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getActiveSessions * SOAP_FMAC4 soap_get___ns1__getActiveSessions(struct soap*, struct __ns1__getActiveSessions *, const char*, const char*);

inline int soap_read___ns1__getActiveSessions(struct soap *soap, struct __ns1__getActiveSessions *p)
{	if (p)
	{	soap_default___ns1__getActiveSessions(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getActiveSessions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__setEndpointDetails_DEFINED
#define SOAP_TYPE___ns1__setEndpointDetails_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setEndpointDetails(struct soap*, struct __ns1__setEndpointDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setEndpointDetails(struct soap*, const struct __ns1__setEndpointDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setEndpointDetails(struct soap*, const char*, int, const struct __ns1__setEndpointDetails *, const char*);
SOAP_FMAC3 struct __ns1__setEndpointDetails * SOAP_FMAC4 soap_in___ns1__setEndpointDetails(struct soap*, const char*, struct __ns1__setEndpointDetails *, const char*);
SOAP_FMAC1 struct __ns1__setEndpointDetails * SOAP_FMAC2 soap_instantiate___ns1__setEndpointDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setEndpointDetails * soap_new___ns1__setEndpointDetails(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__setEndpointDetails(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__setEndpointDetails * soap_new_req___ns1__setEndpointDetails(
	struct soap *soap)
{	struct __ns1__setEndpointDetails *_p = soap_new___ns1__setEndpointDetails(soap);
	if (_p)
	{	soap_default___ns1__setEndpointDetails(soap, _p);
	}
	return _p;
}

inline struct __ns1__setEndpointDetails * soap_new_set___ns1__setEndpointDetails(
	struct soap *soap,
	_ns1__SetEndpointDetailsRequest *ns1__SetEndpointDetailsRequest)
{	struct __ns1__setEndpointDetails *_p = soap_new___ns1__setEndpointDetails(soap);
	if (_p)
	{	soap_default___ns1__setEndpointDetails(soap, _p);
		_p->ns1__SetEndpointDetailsRequest = ns1__SetEndpointDetailsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setEndpointDetails(struct soap*, const struct __ns1__setEndpointDetails *, const char*, const char*);

inline int soap_write___ns1__setEndpointDetails(struct soap *soap, struct __ns1__setEndpointDetails const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__setEndpointDetails(soap, p), 0) || soap_put___ns1__setEndpointDetails(soap, p, "-ns1:setEndpointDetails", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__setEndpointDetails * SOAP_FMAC4 soap_get___ns1__setEndpointDetails(struct soap*, struct __ns1__setEndpointDetails *, const char*, const char*);

inline int soap_read___ns1__setEndpointDetails(struct soap *soap, struct __ns1__setEndpointDetails *p)
{	if (p)
	{	soap_default___ns1__setEndpointDetails(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__setEndpointDetails(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPortalFeatures_DEFINED
#define SOAP_TYPE___ns1__getPortalFeatures_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPortalFeatures(struct soap*, struct __ns1__getPortalFeatures *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPortalFeatures(struct soap*, const struct __ns1__getPortalFeatures *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPortalFeatures(struct soap*, const char*, int, const struct __ns1__getPortalFeatures *, const char*);
SOAP_FMAC3 struct __ns1__getPortalFeatures * SOAP_FMAC4 soap_in___ns1__getPortalFeatures(struct soap*, const char*, struct __ns1__getPortalFeatures *, const char*);
SOAP_FMAC1 struct __ns1__getPortalFeatures * SOAP_FMAC2 soap_instantiate___ns1__getPortalFeatures(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPortalFeatures * soap_new___ns1__getPortalFeatures(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getPortalFeatures(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPortalFeatures * soap_new_req___ns1__getPortalFeatures(
	struct soap *soap)
{	struct __ns1__getPortalFeatures *_p = soap_new___ns1__getPortalFeatures(soap);
	if (_p)
	{	soap_default___ns1__getPortalFeatures(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPortalFeatures * soap_new_set___ns1__getPortalFeatures(
	struct soap *soap,
	char *ns1__GetPortalFeaturesRequest)
{	struct __ns1__getPortalFeatures *_p = soap_new___ns1__getPortalFeatures(soap);
	if (_p)
	{	soap_default___ns1__getPortalFeatures(soap, _p);
		_p->ns1__GetPortalFeaturesRequest = ns1__GetPortalFeaturesRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPortalFeatures(struct soap*, const struct __ns1__getPortalFeatures *, const char*, const char*);

inline int soap_write___ns1__getPortalFeatures(struct soap *soap, struct __ns1__getPortalFeatures const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getPortalFeatures(soap, p), 0) || soap_put___ns1__getPortalFeatures(soap, p, "-ns1:getPortalFeatures", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPortalFeatures * SOAP_FMAC4 soap_get___ns1__getPortalFeatures(struct soap*, struct __ns1__getPortalFeatures *, const char*, const char*);

inline int soap_read___ns1__getPortalFeatures(struct soap *soap, struct __ns1__getPortalFeatures *p)
{	if (p)
	{	soap_default___ns1__getPortalFeatures(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPortalFeatures(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__deleteScheduledRoom_DEFINED
#define SOAP_TYPE___ns1__deleteScheduledRoom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteScheduledRoom(struct soap*, struct __ns1__deleteScheduledRoom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteScheduledRoom(struct soap*, const struct __ns1__deleteScheduledRoom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteScheduledRoom(struct soap*, const char*, int, const struct __ns1__deleteScheduledRoom *, const char*);
SOAP_FMAC3 struct __ns1__deleteScheduledRoom * SOAP_FMAC4 soap_in___ns1__deleteScheduledRoom(struct soap*, const char*, struct __ns1__deleteScheduledRoom *, const char*);
SOAP_FMAC1 struct __ns1__deleteScheduledRoom * SOAP_FMAC2 soap_instantiate___ns1__deleteScheduledRoom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteScheduledRoom * soap_new___ns1__deleteScheduledRoom(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__deleteScheduledRoom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteScheduledRoom * soap_new_req___ns1__deleteScheduledRoom(
	struct soap *soap)
{	struct __ns1__deleteScheduledRoom *_p = soap_new___ns1__deleteScheduledRoom(soap);
	if (_p)
	{	soap_default___ns1__deleteScheduledRoom(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteScheduledRoom * soap_new_set___ns1__deleteScheduledRoom(
	struct soap *soap,
	_ns1__DeleteScheduledRoomRequest *ns1__DeleteScheduledRoomRequest)
{	struct __ns1__deleteScheduledRoom *_p = soap_new___ns1__deleteScheduledRoom(soap);
	if (_p)
	{	soap_default___ns1__deleteScheduledRoom(soap, _p);
		_p->ns1__DeleteScheduledRoomRequest = ns1__DeleteScheduledRoomRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteScheduledRoom(struct soap*, const struct __ns1__deleteScheduledRoom *, const char*, const char*);

inline int soap_write___ns1__deleteScheduledRoom(struct soap *soap, struct __ns1__deleteScheduledRoom const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__deleteScheduledRoom(soap, p), 0) || soap_put___ns1__deleteScheduledRoom(soap, p, "-ns1:deleteScheduledRoom", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteScheduledRoom * SOAP_FMAC4 soap_get___ns1__deleteScheduledRoom(struct soap*, struct __ns1__deleteScheduledRoom *, const char*, const char*);

inline int soap_read___ns1__deleteScheduledRoom(struct soap *soap, struct __ns1__deleteScheduledRoom *p)
{	if (p)
	{	soap_default___ns1__deleteScheduledRoom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__deleteScheduledRoom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__createScheduledRoom_DEFINED
#define SOAP_TYPE___ns1__createScheduledRoom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createScheduledRoom(struct soap*, struct __ns1__createScheduledRoom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createScheduledRoom(struct soap*, const struct __ns1__createScheduledRoom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createScheduledRoom(struct soap*, const char*, int, const struct __ns1__createScheduledRoom *, const char*);
SOAP_FMAC3 struct __ns1__createScheduledRoom * SOAP_FMAC4 soap_in___ns1__createScheduledRoom(struct soap*, const char*, struct __ns1__createScheduledRoom *, const char*);
SOAP_FMAC1 struct __ns1__createScheduledRoom * SOAP_FMAC2 soap_instantiate___ns1__createScheduledRoom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__createScheduledRoom * soap_new___ns1__createScheduledRoom(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__createScheduledRoom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__createScheduledRoom * soap_new_req___ns1__createScheduledRoom(
	struct soap *soap)
{	struct __ns1__createScheduledRoom *_p = soap_new___ns1__createScheduledRoom(soap);
	if (_p)
	{	soap_default___ns1__createScheduledRoom(soap, _p);
	}
	return _p;
}

inline struct __ns1__createScheduledRoom * soap_new_set___ns1__createScheduledRoom(
	struct soap *soap,
	_ns1__CreateScheduledRoomRequest *ns1__CreateScheduledRoomRequest)
{	struct __ns1__createScheduledRoom *_p = soap_new___ns1__createScheduledRoom(soap);
	if (_p)
	{	soap_default___ns1__createScheduledRoom(soap, _p);
		_p->ns1__CreateScheduledRoomRequest = ns1__CreateScheduledRoomRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createScheduledRoom(struct soap*, const struct __ns1__createScheduledRoom *, const char*, const char*);

inline int soap_write___ns1__createScheduledRoom(struct soap *soap, struct __ns1__createScheduledRoom const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__createScheduledRoom(soap, p), 0) || soap_put___ns1__createScheduledRoom(soap, p, "-ns1:createScheduledRoom", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__createScheduledRoom * SOAP_FMAC4 soap_get___ns1__createScheduledRoom(struct soap*, struct __ns1__createScheduledRoom *, const char*, const char*);

inline int soap_read___ns1__createScheduledRoom(struct soap *soap, struct __ns1__createScheduledRoom *p)
{	if (p)
	{	soap_default___ns1__createScheduledRoom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__createScheduledRoom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__generateAuthToken_DEFINED
#define SOAP_TYPE___ns1__generateAuthToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__generateAuthToken(struct soap*, struct __ns1__generateAuthToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__generateAuthToken(struct soap*, const struct __ns1__generateAuthToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__generateAuthToken(struct soap*, const char*, int, const struct __ns1__generateAuthToken *, const char*);
SOAP_FMAC3 struct __ns1__generateAuthToken * SOAP_FMAC4 soap_in___ns1__generateAuthToken(struct soap*, const char*, struct __ns1__generateAuthToken *, const char*);
SOAP_FMAC1 struct __ns1__generateAuthToken * SOAP_FMAC2 soap_instantiate___ns1__generateAuthToken(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__generateAuthToken * soap_new___ns1__generateAuthToken(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__generateAuthToken(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__generateAuthToken * soap_new_req___ns1__generateAuthToken(
	struct soap *soap)
{	struct __ns1__generateAuthToken *_p = soap_new___ns1__generateAuthToken(soap);
	if (_p)
	{	soap_default___ns1__generateAuthToken(soap, _p);
	}
	return _p;
}

inline struct __ns1__generateAuthToken * soap_new_set___ns1__generateAuthToken(
	struct soap *soap,
	_ns1__GenerateAuthTokenRequest *ns1__GenerateAuthTokenRequest)
{	struct __ns1__generateAuthToken *_p = soap_new___ns1__generateAuthToken(soap);
	if (_p)
	{	soap_default___ns1__generateAuthToken(soap, _p);
		_p->ns1__GenerateAuthTokenRequest = ns1__GenerateAuthTokenRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__generateAuthToken(struct soap*, const struct __ns1__generateAuthToken *, const char*, const char*);

inline int soap_write___ns1__generateAuthToken(struct soap *soap, struct __ns1__generateAuthToken const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__generateAuthToken(soap, p), 0) || soap_put___ns1__generateAuthToken(soap, p, "-ns1:generateAuthToken", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__generateAuthToken * SOAP_FMAC4 soap_get___ns1__generateAuthToken(struct soap*, struct __ns1__generateAuthToken *, const char*, const char*);

inline int soap_read___ns1__generateAuthToken(struct soap *soap, struct __ns1__generateAuthToken *p)
{	if (p)
	{	soap_default___ns1__generateAuthToken(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__generateAuthToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getConferenceID_DEFINED
#define SOAP_TYPE___ns1__getConferenceID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getConferenceID(struct soap*, struct __ns1__getConferenceID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getConferenceID(struct soap*, const struct __ns1__getConferenceID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getConferenceID(struct soap*, const char*, int, const struct __ns1__getConferenceID *, const char*);
SOAP_FMAC3 struct __ns1__getConferenceID * SOAP_FMAC4 soap_in___ns1__getConferenceID(struct soap*, const char*, struct __ns1__getConferenceID *, const char*);
SOAP_FMAC1 struct __ns1__getConferenceID * SOAP_FMAC2 soap_instantiate___ns1__getConferenceID(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getConferenceID * soap_new___ns1__getConferenceID(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getConferenceID(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getConferenceID * soap_new_req___ns1__getConferenceID(
	struct soap *soap)
{	struct __ns1__getConferenceID *_p = soap_new___ns1__getConferenceID(soap);
	if (_p)
	{	soap_default___ns1__getConferenceID(soap, _p);
	}
	return _p;
}

inline struct __ns1__getConferenceID * soap_new_set___ns1__getConferenceID(
	struct soap *soap,
	_ns1__GetConferenceIDRequest *ns1__GetConferenceIDRequest)
{	struct __ns1__getConferenceID *_p = soap_new___ns1__getConferenceID(soap);
	if (_p)
	{	soap_default___ns1__getConferenceID(soap, _p);
		_p->ns1__GetConferenceIDRequest = ns1__GetConferenceIDRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getConferenceID(struct soap*, const struct __ns1__getConferenceID *, const char*, const char*);

inline int soap_write___ns1__getConferenceID(struct soap *soap, struct __ns1__getConferenceID const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getConferenceID(soap, p), 0) || soap_put___ns1__getConferenceID(soap, p, "-ns1:getConferenceID", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getConferenceID * SOAP_FMAC4 soap_get___ns1__getConferenceID(struct soap*, struct __ns1__getConferenceID *, const char*, const char*);

inline int soap_read___ns1__getConferenceID(struct soap *soap, struct __ns1__getConferenceID *p)
{	if (p)
	{	soap_default___ns1__getConferenceID(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getConferenceID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removeModeratorPIN_DEFINED
#define SOAP_TYPE___ns1__removeModeratorPIN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeModeratorPIN(struct soap*, struct __ns1__removeModeratorPIN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeModeratorPIN(struct soap*, const struct __ns1__removeModeratorPIN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeModeratorPIN(struct soap*, const char*, int, const struct __ns1__removeModeratorPIN *, const char*);
SOAP_FMAC3 struct __ns1__removeModeratorPIN * SOAP_FMAC4 soap_in___ns1__removeModeratorPIN(struct soap*, const char*, struct __ns1__removeModeratorPIN *, const char*);
SOAP_FMAC1 struct __ns1__removeModeratorPIN * SOAP_FMAC2 soap_instantiate___ns1__removeModeratorPIN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removeModeratorPIN * soap_new___ns1__removeModeratorPIN(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__removeModeratorPIN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removeModeratorPIN * soap_new_req___ns1__removeModeratorPIN(
	struct soap *soap)
{	struct __ns1__removeModeratorPIN *_p = soap_new___ns1__removeModeratorPIN(soap);
	if (_p)
	{	soap_default___ns1__removeModeratorPIN(soap, _p);
	}
	return _p;
}

inline struct __ns1__removeModeratorPIN * soap_new_set___ns1__removeModeratorPIN(
	struct soap *soap,
	_ns1__RemoveModeratorPINRequest *ns1__RemoveModeratorPINRequest)
{	struct __ns1__removeModeratorPIN *_p = soap_new___ns1__removeModeratorPIN(soap);
	if (_p)
	{	soap_default___ns1__removeModeratorPIN(soap, _p);
		_p->ns1__RemoveModeratorPINRequest = ns1__RemoveModeratorPINRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeModeratorPIN(struct soap*, const struct __ns1__removeModeratorPIN *, const char*, const char*);

inline int soap_write___ns1__removeModeratorPIN(struct soap *soap, struct __ns1__removeModeratorPIN const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removeModeratorPIN(soap, p), 0) || soap_put___ns1__removeModeratorPIN(soap, p, "-ns1:removeModeratorPIN", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removeModeratorPIN * SOAP_FMAC4 soap_get___ns1__removeModeratorPIN(struct soap*, struct __ns1__removeModeratorPIN *, const char*, const char*);

inline int soap_read___ns1__removeModeratorPIN(struct soap *soap, struct __ns1__removeModeratorPIN *p)
{	if (p)
	{	soap_default___ns1__removeModeratorPIN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removeModeratorPIN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__createModeratorPIN_DEFINED
#define SOAP_TYPE___ns1__createModeratorPIN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createModeratorPIN(struct soap*, struct __ns1__createModeratorPIN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createModeratorPIN(struct soap*, const struct __ns1__createModeratorPIN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createModeratorPIN(struct soap*, const char*, int, const struct __ns1__createModeratorPIN *, const char*);
SOAP_FMAC3 struct __ns1__createModeratorPIN * SOAP_FMAC4 soap_in___ns1__createModeratorPIN(struct soap*, const char*, struct __ns1__createModeratorPIN *, const char*);
SOAP_FMAC1 struct __ns1__createModeratorPIN * SOAP_FMAC2 soap_instantiate___ns1__createModeratorPIN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__createModeratorPIN * soap_new___ns1__createModeratorPIN(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__createModeratorPIN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__createModeratorPIN * soap_new_req___ns1__createModeratorPIN(
	struct soap *soap)
{	struct __ns1__createModeratorPIN *_p = soap_new___ns1__createModeratorPIN(soap);
	if (_p)
	{	soap_default___ns1__createModeratorPIN(soap, _p);
	}
	return _p;
}

inline struct __ns1__createModeratorPIN * soap_new_set___ns1__createModeratorPIN(
	struct soap *soap,
	_ns1__CreateModeratorPINRequest *ns1__CreateModeratorPINRequest)
{	struct __ns1__createModeratorPIN *_p = soap_new___ns1__createModeratorPIN(soap);
	if (_p)
	{	soap_default___ns1__createModeratorPIN(soap, _p);
		_p->ns1__CreateModeratorPINRequest = ns1__CreateModeratorPINRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createModeratorPIN(struct soap*, const struct __ns1__createModeratorPIN *, const char*, const char*);

inline int soap_write___ns1__createModeratorPIN(struct soap *soap, struct __ns1__createModeratorPIN const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__createModeratorPIN(soap, p), 0) || soap_put___ns1__createModeratorPIN(soap, p, "-ns1:createModeratorPIN", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__createModeratorPIN * SOAP_FMAC4 soap_get___ns1__createModeratorPIN(struct soap*, struct __ns1__createModeratorPIN *, const char*, const char*);

inline int soap_read___ns1__createModeratorPIN(struct soap *soap, struct __ns1__createModeratorPIN *p)
{	if (p)
	{	soap_default___ns1__createModeratorPIN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__createModeratorPIN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getModeratorURLWithToken_DEFINED
#define SOAP_TYPE___ns1__getModeratorURLWithToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getModeratorURLWithToken(struct soap*, struct __ns1__getModeratorURLWithToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getModeratorURLWithToken(struct soap*, const struct __ns1__getModeratorURLWithToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getModeratorURLWithToken(struct soap*, const char*, int, const struct __ns1__getModeratorURLWithToken *, const char*);
SOAP_FMAC3 struct __ns1__getModeratorURLWithToken * SOAP_FMAC4 soap_in___ns1__getModeratorURLWithToken(struct soap*, const char*, struct __ns1__getModeratorURLWithToken *, const char*);
SOAP_FMAC1 struct __ns1__getModeratorURLWithToken * SOAP_FMAC2 soap_instantiate___ns1__getModeratorURLWithToken(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getModeratorURLWithToken * soap_new___ns1__getModeratorURLWithToken(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getModeratorURLWithToken(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getModeratorURLWithToken * soap_new_req___ns1__getModeratorURLWithToken(
	struct soap *soap)
{	struct __ns1__getModeratorURLWithToken *_p = soap_new___ns1__getModeratorURLWithToken(soap);
	if (_p)
	{	soap_default___ns1__getModeratorURLWithToken(soap, _p);
	}
	return _p;
}

inline struct __ns1__getModeratorURLWithToken * soap_new_set___ns1__getModeratorURLWithToken(
	struct soap *soap,
	_ns1__GetModeratorURLWithTokenRequest *ns1__GetModeratorURLWithTokenRequest)
{	struct __ns1__getModeratorURLWithToken *_p = soap_new___ns1__getModeratorURLWithToken(soap);
	if (_p)
	{	soap_default___ns1__getModeratorURLWithToken(soap, _p);
		_p->ns1__GetModeratorURLWithTokenRequest = ns1__GetModeratorURLWithTokenRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getModeratorURLWithToken(struct soap*, const struct __ns1__getModeratorURLWithToken *, const char*, const char*);

inline int soap_write___ns1__getModeratorURLWithToken(struct soap *soap, struct __ns1__getModeratorURLWithToken const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getModeratorURLWithToken(soap, p), 0) || soap_put___ns1__getModeratorURLWithToken(soap, p, "-ns1:getModeratorURLWithToken", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getModeratorURLWithToken * SOAP_FMAC4 soap_get___ns1__getModeratorURLWithToken(struct soap*, struct __ns1__getModeratorURLWithToken *, const char*, const char*);

inline int soap_read___ns1__getModeratorURLWithToken(struct soap *soap, struct __ns1__getModeratorURLWithToken *p)
{	if (p)
	{	soap_default___ns1__getModeratorURLWithToken(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getModeratorURLWithToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getModeratorURL_DEFINED
#define SOAP_TYPE___ns1__getModeratorURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getModeratorURL(struct soap*, struct __ns1__getModeratorURL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getModeratorURL(struct soap*, const struct __ns1__getModeratorURL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getModeratorURL(struct soap*, const char*, int, const struct __ns1__getModeratorURL *, const char*);
SOAP_FMAC3 struct __ns1__getModeratorURL * SOAP_FMAC4 soap_in___ns1__getModeratorURL(struct soap*, const char*, struct __ns1__getModeratorURL *, const char*);
SOAP_FMAC1 struct __ns1__getModeratorURL * SOAP_FMAC2 soap_instantiate___ns1__getModeratorURL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getModeratorURL * soap_new___ns1__getModeratorURL(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getModeratorURL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getModeratorURL * soap_new_req___ns1__getModeratorURL(
	struct soap *soap)
{	struct __ns1__getModeratorURL *_p = soap_new___ns1__getModeratorURL(soap);
	if (_p)
	{	soap_default___ns1__getModeratorURL(soap, _p);
	}
	return _p;
}

inline struct __ns1__getModeratorURL * soap_new_set___ns1__getModeratorURL(
	struct soap *soap,
	_ns1__GetModeratorURLRequest *ns1__GetModeratorURLRequest)
{	struct __ns1__getModeratorURL *_p = soap_new___ns1__getModeratorURL(soap);
	if (_p)
	{	soap_default___ns1__getModeratorURL(soap, _p);
		_p->ns1__GetModeratorURLRequest = ns1__GetModeratorURLRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getModeratorURL(struct soap*, const struct __ns1__getModeratorURL *, const char*, const char*);

inline int soap_write___ns1__getModeratorURL(struct soap *soap, struct __ns1__getModeratorURL const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getModeratorURL(soap, p), 0) || soap_put___ns1__getModeratorURL(soap, p, "-ns1:getModeratorURL", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getModeratorURL * SOAP_FMAC4 soap_get___ns1__getModeratorURL(struct soap*, struct __ns1__getModeratorURL *, const char*, const char*);

inline int soap_read___ns1__getModeratorURL(struct soap *soap, struct __ns1__getModeratorURL *p)
{	if (p)
	{	soap_default___ns1__getModeratorURL(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getModeratorURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removeModeratorURL_DEFINED
#define SOAP_TYPE___ns1__removeModeratorURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeModeratorURL(struct soap*, struct __ns1__removeModeratorURL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeModeratorURL(struct soap*, const struct __ns1__removeModeratorURL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeModeratorURL(struct soap*, const char*, int, const struct __ns1__removeModeratorURL *, const char*);
SOAP_FMAC3 struct __ns1__removeModeratorURL * SOAP_FMAC4 soap_in___ns1__removeModeratorURL(struct soap*, const char*, struct __ns1__removeModeratorURL *, const char*);
SOAP_FMAC1 struct __ns1__removeModeratorURL * SOAP_FMAC2 soap_instantiate___ns1__removeModeratorURL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removeModeratorURL * soap_new___ns1__removeModeratorURL(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__removeModeratorURL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removeModeratorURL * soap_new_req___ns1__removeModeratorURL(
	struct soap *soap)
{	struct __ns1__removeModeratorURL *_p = soap_new___ns1__removeModeratorURL(soap);
	if (_p)
	{	soap_default___ns1__removeModeratorURL(soap, _p);
	}
	return _p;
}

inline struct __ns1__removeModeratorURL * soap_new_set___ns1__removeModeratorURL(
	struct soap *soap,
	_ns1__RemoveModeratorURLRequest *ns1__RemoveModeratorURLRequest)
{	struct __ns1__removeModeratorURL *_p = soap_new___ns1__removeModeratorURL(soap);
	if (_p)
	{	soap_default___ns1__removeModeratorURL(soap, _p);
		_p->ns1__RemoveModeratorURLRequest = ns1__RemoveModeratorURLRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeModeratorURL(struct soap*, const struct __ns1__removeModeratorURL *, const char*, const char*);

inline int soap_write___ns1__removeModeratorURL(struct soap *soap, struct __ns1__removeModeratorURL const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removeModeratorURL(soap, p), 0) || soap_put___ns1__removeModeratorURL(soap, p, "-ns1:removeModeratorURL", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removeModeratorURL * SOAP_FMAC4 soap_get___ns1__removeModeratorURL(struct soap*, struct __ns1__removeModeratorURL *, const char*, const char*);

inline int soap_read___ns1__removeModeratorURL(struct soap *soap, struct __ns1__removeModeratorURL *p)
{	if (p)
	{	soap_default___ns1__removeModeratorURL(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removeModeratorURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__createModeratorURL_DEFINED
#define SOAP_TYPE___ns1__createModeratorURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createModeratorURL(struct soap*, struct __ns1__createModeratorURL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createModeratorURL(struct soap*, const struct __ns1__createModeratorURL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createModeratorURL(struct soap*, const char*, int, const struct __ns1__createModeratorURL *, const char*);
SOAP_FMAC3 struct __ns1__createModeratorURL * SOAP_FMAC4 soap_in___ns1__createModeratorURL(struct soap*, const char*, struct __ns1__createModeratorURL *, const char*);
SOAP_FMAC1 struct __ns1__createModeratorURL * SOAP_FMAC2 soap_instantiate___ns1__createModeratorURL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__createModeratorURL * soap_new___ns1__createModeratorURL(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__createModeratorURL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__createModeratorURL * soap_new_req___ns1__createModeratorURL(
	struct soap *soap)
{	struct __ns1__createModeratorURL *_p = soap_new___ns1__createModeratorURL(soap);
	if (_p)
	{	soap_default___ns1__createModeratorURL(soap, _p);
	}
	return _p;
}

inline struct __ns1__createModeratorURL * soap_new_set___ns1__createModeratorURL(
	struct soap *soap,
	_ns1__CreateModeratorURLRequest *ns1__CreateModeratorURLRequest)
{	struct __ns1__createModeratorURL *_p = soap_new___ns1__createModeratorURL(soap);
	if (_p)
	{	soap_default___ns1__createModeratorURL(soap, _p);
		_p->ns1__CreateModeratorURLRequest = ns1__CreateModeratorURLRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createModeratorURL(struct soap*, const struct __ns1__createModeratorURL *, const char*, const char*);

inline int soap_write___ns1__createModeratorURL(struct soap *soap, struct __ns1__createModeratorURL const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__createModeratorURL(soap, p), 0) || soap_put___ns1__createModeratorURL(soap, p, "-ns1:createModeratorURL", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__createModeratorURL * SOAP_FMAC4 soap_get___ns1__createModeratorURL(struct soap*, struct __ns1__createModeratorURL *, const char*, const char*);

inline int soap_read___ns1__createModeratorURL(struct soap *soap, struct __ns1__createModeratorURL *p)
{	if (p)
	{	soap_default___ns1__createModeratorURL(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__createModeratorURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removeRoomProfile_DEFINED
#define SOAP_TYPE___ns1__removeRoomProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeRoomProfile(struct soap*, struct __ns1__removeRoomProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeRoomProfile(struct soap*, const struct __ns1__removeRoomProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeRoomProfile(struct soap*, const char*, int, const struct __ns1__removeRoomProfile *, const char*);
SOAP_FMAC3 struct __ns1__removeRoomProfile * SOAP_FMAC4 soap_in___ns1__removeRoomProfile(struct soap*, const char*, struct __ns1__removeRoomProfile *, const char*);
SOAP_FMAC1 struct __ns1__removeRoomProfile * SOAP_FMAC2 soap_instantiate___ns1__removeRoomProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removeRoomProfile * soap_new___ns1__removeRoomProfile(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__removeRoomProfile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removeRoomProfile * soap_new_req___ns1__removeRoomProfile(
	struct soap *soap)
{	struct __ns1__removeRoomProfile *_p = soap_new___ns1__removeRoomProfile(soap);
	if (_p)
	{	soap_default___ns1__removeRoomProfile(soap, _p);
	}
	return _p;
}

inline struct __ns1__removeRoomProfile * soap_new_set___ns1__removeRoomProfile(
	struct soap *soap,
	_ns1__RemoveRoomProfileRequest *ns1__RemoveRoomProfileRequest)
{	struct __ns1__removeRoomProfile *_p = soap_new___ns1__removeRoomProfile(soap);
	if (_p)
	{	soap_default___ns1__removeRoomProfile(soap, _p);
		_p->ns1__RemoveRoomProfileRequest = ns1__RemoveRoomProfileRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeRoomProfile(struct soap*, const struct __ns1__removeRoomProfile *, const char*, const char*);

inline int soap_write___ns1__removeRoomProfile(struct soap *soap, struct __ns1__removeRoomProfile const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removeRoomProfile(soap, p), 0) || soap_put___ns1__removeRoomProfile(soap, p, "-ns1:removeRoomProfile", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removeRoomProfile * SOAP_FMAC4 soap_get___ns1__removeRoomProfile(struct soap*, struct __ns1__removeRoomProfile *, const char*, const char*);

inline int soap_read___ns1__removeRoomProfile(struct soap *soap, struct __ns1__removeRoomProfile *p)
{	if (p)
	{	soap_default___ns1__removeRoomProfile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removeRoomProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__setRoomProfile_DEFINED
#define SOAP_TYPE___ns1__setRoomProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setRoomProfile(struct soap*, struct __ns1__setRoomProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setRoomProfile(struct soap*, const struct __ns1__setRoomProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setRoomProfile(struct soap*, const char*, int, const struct __ns1__setRoomProfile *, const char*);
SOAP_FMAC3 struct __ns1__setRoomProfile * SOAP_FMAC4 soap_in___ns1__setRoomProfile(struct soap*, const char*, struct __ns1__setRoomProfile *, const char*);
SOAP_FMAC1 struct __ns1__setRoomProfile * SOAP_FMAC2 soap_instantiate___ns1__setRoomProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setRoomProfile * soap_new___ns1__setRoomProfile(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__setRoomProfile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__setRoomProfile * soap_new_req___ns1__setRoomProfile(
	struct soap *soap)
{	struct __ns1__setRoomProfile *_p = soap_new___ns1__setRoomProfile(soap);
	if (_p)
	{	soap_default___ns1__setRoomProfile(soap, _p);
	}
	return _p;
}

inline struct __ns1__setRoomProfile * soap_new_set___ns1__setRoomProfile(
	struct soap *soap,
	_ns1__SetRoomProfileRequest *ns1__SetRoomProfileRequest)
{	struct __ns1__setRoomProfile *_p = soap_new___ns1__setRoomProfile(soap);
	if (_p)
	{	soap_default___ns1__setRoomProfile(soap, _p);
		_p->ns1__SetRoomProfileRequest = ns1__SetRoomProfileRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setRoomProfile(struct soap*, const struct __ns1__setRoomProfile *, const char*, const char*);

inline int soap_write___ns1__setRoomProfile(struct soap *soap, struct __ns1__setRoomProfile const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__setRoomProfile(soap, p), 0) || soap_put___ns1__setRoomProfile(soap, p, "-ns1:setRoomProfile", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__setRoomProfile * SOAP_FMAC4 soap_get___ns1__setRoomProfile(struct soap*, struct __ns1__setRoomProfile *, const char*, const char*);

inline int soap_read___ns1__setRoomProfile(struct soap *soap, struct __ns1__setRoomProfile *p)
{	if (p)
	{	soap_default___ns1__setRoomProfile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__setRoomProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRoomProfile_DEFINED
#define SOAP_TYPE___ns1__getRoomProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRoomProfile(struct soap*, struct __ns1__getRoomProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRoomProfile(struct soap*, const struct __ns1__getRoomProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRoomProfile(struct soap*, const char*, int, const struct __ns1__getRoomProfile *, const char*);
SOAP_FMAC3 struct __ns1__getRoomProfile * SOAP_FMAC4 soap_in___ns1__getRoomProfile(struct soap*, const char*, struct __ns1__getRoomProfile *, const char*);
SOAP_FMAC1 struct __ns1__getRoomProfile * SOAP_FMAC2 soap_instantiate___ns1__getRoomProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRoomProfile * soap_new___ns1__getRoomProfile(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getRoomProfile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRoomProfile * soap_new_req___ns1__getRoomProfile(
	struct soap *soap)
{	struct __ns1__getRoomProfile *_p = soap_new___ns1__getRoomProfile(soap);
	if (_p)
	{	soap_default___ns1__getRoomProfile(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRoomProfile * soap_new_set___ns1__getRoomProfile(
	struct soap *soap,
	_ns1__GetRoomProfileRequest *ns1__GetRoomProfileRequest)
{	struct __ns1__getRoomProfile *_p = soap_new___ns1__getRoomProfile(soap);
	if (_p)
	{	soap_default___ns1__getRoomProfile(soap, _p);
		_p->ns1__GetRoomProfileRequest = ns1__GetRoomProfileRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRoomProfile(struct soap*, const struct __ns1__getRoomProfile *, const char*, const char*);

inline int soap_write___ns1__getRoomProfile(struct soap *soap, struct __ns1__getRoomProfile const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getRoomProfile(soap, p), 0) || soap_put___ns1__getRoomProfile(soap, p, "-ns1:getRoomProfile", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRoomProfile * SOAP_FMAC4 soap_get___ns1__getRoomProfile(struct soap*, struct __ns1__getRoomProfile *, const char*, const char*);

inline int soap_read___ns1__getRoomProfile(struct soap *soap, struct __ns1__getRoomProfile *p)
{	if (p)
	{	soap_default___ns1__getRoomProfile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getRoomProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRoomProfiles_DEFINED
#define SOAP_TYPE___ns1__getRoomProfiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRoomProfiles(struct soap*, struct __ns1__getRoomProfiles *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRoomProfiles(struct soap*, const struct __ns1__getRoomProfiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRoomProfiles(struct soap*, const char*, int, const struct __ns1__getRoomProfiles *, const char*);
SOAP_FMAC3 struct __ns1__getRoomProfiles * SOAP_FMAC4 soap_in___ns1__getRoomProfiles(struct soap*, const char*, struct __ns1__getRoomProfiles *, const char*);
SOAP_FMAC1 struct __ns1__getRoomProfiles * SOAP_FMAC2 soap_instantiate___ns1__getRoomProfiles(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRoomProfiles * soap_new___ns1__getRoomProfiles(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getRoomProfiles(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRoomProfiles * soap_new_req___ns1__getRoomProfiles(
	struct soap *soap)
{	struct __ns1__getRoomProfiles *_p = soap_new___ns1__getRoomProfiles(soap);
	if (_p)
	{	soap_default___ns1__getRoomProfiles(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRoomProfiles * soap_new_set___ns1__getRoomProfiles(
	struct soap *soap,
	char *ns1__GetRoomProfilesRequest)
{	struct __ns1__getRoomProfiles *_p = soap_new___ns1__getRoomProfiles(soap);
	if (_p)
	{	soap_default___ns1__getRoomProfiles(soap, _p);
		_p->ns1__GetRoomProfilesRequest = ns1__GetRoomProfilesRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRoomProfiles(struct soap*, const struct __ns1__getRoomProfiles *, const char*, const char*);

inline int soap_write___ns1__getRoomProfiles(struct soap *soap, struct __ns1__getRoomProfiles const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getRoomProfiles(soap, p), 0) || soap_put___ns1__getRoomProfiles(soap, p, "-ns1:getRoomProfiles", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRoomProfiles * SOAP_FMAC4 soap_get___ns1__getRoomProfiles(struct soap*, struct __ns1__getRoomProfiles *, const char*, const char*);

inline int soap_read___ns1__getRoomProfiles(struct soap *soap, struct __ns1__getRoomProfiles *p)
{	if (p)
	{	soap_default___ns1__getRoomProfiles(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getRoomProfiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getInviteContent_DEFINED
#define SOAP_TYPE___ns1__getInviteContent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getInviteContent(struct soap*, struct __ns1__getInviteContent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getInviteContent(struct soap*, const struct __ns1__getInviteContent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getInviteContent(struct soap*, const char*, int, const struct __ns1__getInviteContent *, const char*);
SOAP_FMAC3 struct __ns1__getInviteContent * SOAP_FMAC4 soap_in___ns1__getInviteContent(struct soap*, const char*, struct __ns1__getInviteContent *, const char*);
SOAP_FMAC1 struct __ns1__getInviteContent * SOAP_FMAC2 soap_instantiate___ns1__getInviteContent(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getInviteContent * soap_new___ns1__getInviteContent(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getInviteContent(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getInviteContent * soap_new_req___ns1__getInviteContent(
	struct soap *soap)
{	struct __ns1__getInviteContent *_p = soap_new___ns1__getInviteContent(soap);
	if (_p)
	{	soap_default___ns1__getInviteContent(soap, _p);
	}
	return _p;
}

inline struct __ns1__getInviteContent * soap_new_set___ns1__getInviteContent(
	struct soap *soap,
	_ns1__GetInviteContentRequest *ns1__GetInviteContentRequest)
{	struct __ns1__getInviteContent *_p = soap_new___ns1__getInviteContent(soap);
	if (_p)
	{	soap_default___ns1__getInviteContent(soap, _p);
		_p->ns1__GetInviteContentRequest = ns1__GetInviteContentRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getInviteContent(struct soap*, const struct __ns1__getInviteContent *, const char*, const char*);

inline int soap_write___ns1__getInviteContent(struct soap *soap, struct __ns1__getInviteContent const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getInviteContent(soap, p), 0) || soap_put___ns1__getInviteContent(soap, p, "-ns1:getInviteContent", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getInviteContent * SOAP_FMAC4 soap_get___ns1__getInviteContent(struct soap*, struct __ns1__getInviteContent *, const char*, const char*);

inline int soap_read___ns1__getInviteContent(struct soap *soap, struct __ns1__getInviteContent *p)
{	if (p)
	{	soap_default___ns1__getInviteContent(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getInviteContent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getEntityByRoomKey_DEFINED
#define SOAP_TYPE___ns1__getEntityByRoomKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getEntityByRoomKey(struct soap*, struct __ns1__getEntityByRoomKey *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getEntityByRoomKey(struct soap*, const struct __ns1__getEntityByRoomKey *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getEntityByRoomKey(struct soap*, const char*, int, const struct __ns1__getEntityByRoomKey *, const char*);
SOAP_FMAC3 struct __ns1__getEntityByRoomKey * SOAP_FMAC4 soap_in___ns1__getEntityByRoomKey(struct soap*, const char*, struct __ns1__getEntityByRoomKey *, const char*);
SOAP_FMAC1 struct __ns1__getEntityByRoomKey * SOAP_FMAC2 soap_instantiate___ns1__getEntityByRoomKey(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getEntityByRoomKey * soap_new___ns1__getEntityByRoomKey(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getEntityByRoomKey(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getEntityByRoomKey * soap_new_req___ns1__getEntityByRoomKey(
	struct soap *soap)
{	struct __ns1__getEntityByRoomKey *_p = soap_new___ns1__getEntityByRoomKey(soap);
	if (_p)
	{	soap_default___ns1__getEntityByRoomKey(soap, _p);
	}
	return _p;
}

inline struct __ns1__getEntityByRoomKey * soap_new_set___ns1__getEntityByRoomKey(
	struct soap *soap,
	_ns1__GetEntityByRoomKeyRequest *ns1__GetEntityByRoomKeyRequest)
{	struct __ns1__getEntityByRoomKey *_p = soap_new___ns1__getEntityByRoomKey(soap);
	if (_p)
	{	soap_default___ns1__getEntityByRoomKey(soap, _p);
		_p->ns1__GetEntityByRoomKeyRequest = ns1__GetEntityByRoomKeyRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getEntityByRoomKey(struct soap*, const struct __ns1__getEntityByRoomKey *, const char*, const char*);

inline int soap_write___ns1__getEntityByRoomKey(struct soap *soap, struct __ns1__getEntityByRoomKey const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getEntityByRoomKey(soap, p), 0) || soap_put___ns1__getEntityByRoomKey(soap, p, "-ns1:getEntityByRoomKey", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getEntityByRoomKey * SOAP_FMAC4 soap_get___ns1__getEntityByRoomKey(struct soap*, struct __ns1__getEntityByRoomKey *, const char*, const char*);

inline int soap_read___ns1__getEntityByRoomKey(struct soap *soap, struct __ns1__getEntityByRoomKey *p)
{	if (p)
	{	soap_default___ns1__getEntityByRoomKey(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getEntityByRoomKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getUserName_DEFINED
#define SOAP_TYPE___ns1__getUserName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getUserName(struct soap*, struct __ns1__getUserName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getUserName(struct soap*, const struct __ns1__getUserName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getUserName(struct soap*, const char*, int, const struct __ns1__getUserName *, const char*);
SOAP_FMAC3 struct __ns1__getUserName * SOAP_FMAC4 soap_in___ns1__getUserName(struct soap*, const char*, struct __ns1__getUserName *, const char*);
SOAP_FMAC1 struct __ns1__getUserName * SOAP_FMAC2 soap_instantiate___ns1__getUserName(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getUserName * soap_new___ns1__getUserName(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getUserName(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getUserName * soap_new_req___ns1__getUserName(
	struct soap *soap)
{	struct __ns1__getUserName *_p = soap_new___ns1__getUserName(soap);
	if (_p)
	{	soap_default___ns1__getUserName(soap, _p);
	}
	return _p;
}

inline struct __ns1__getUserName * soap_new_set___ns1__getUserName(
	struct soap *soap,
	_ns1__GetUserNameRequest *ns1__GetUserNameRequest)
{	struct __ns1__getUserName *_p = soap_new___ns1__getUserName(soap);
	if (_p)
	{	soap_default___ns1__getUserName(soap, _p);
		_p->ns1__GetUserNameRequest = ns1__GetUserNameRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getUserName(struct soap*, const struct __ns1__getUserName *, const char*, const char*);

inline int soap_write___ns1__getUserName(struct soap *soap, struct __ns1__getUserName const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getUserName(soap, p), 0) || soap_put___ns1__getUserName(soap, p, "-ns1:getUserName", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getUserName * SOAP_FMAC4 soap_get___ns1__getUserName(struct soap*, struct __ns1__getUserName *, const char*, const char*);

inline int soap_read___ns1__getUserName(struct soap *soap, struct __ns1__getUserName *p)
{	if (p)
	{	soap_default___ns1__getUserName(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getUserName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getWebcastURL_DEFINED
#define SOAP_TYPE___ns1__getWebcastURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWebcastURL(struct soap*, struct __ns1__getWebcastURL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWebcastURL(struct soap*, const struct __ns1__getWebcastURL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWebcastURL(struct soap*, const char*, int, const struct __ns1__getWebcastURL *, const char*);
SOAP_FMAC3 struct __ns1__getWebcastURL * SOAP_FMAC4 soap_in___ns1__getWebcastURL(struct soap*, const char*, struct __ns1__getWebcastURL *, const char*);
SOAP_FMAC1 struct __ns1__getWebcastURL * SOAP_FMAC2 soap_instantiate___ns1__getWebcastURL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getWebcastURL * soap_new___ns1__getWebcastURL(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getWebcastURL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getWebcastURL * soap_new_req___ns1__getWebcastURL(
	struct soap *soap)
{	struct __ns1__getWebcastURL *_p = soap_new___ns1__getWebcastURL(soap);
	if (_p)
	{	soap_default___ns1__getWebcastURL(soap, _p);
	}
	return _p;
}

inline struct __ns1__getWebcastURL * soap_new_set___ns1__getWebcastURL(
	struct soap *soap,
	_ns1__GetWebcastURLRequest *ns1__GetWebcastURLRequest)
{	struct __ns1__getWebcastURL *_p = soap_new___ns1__getWebcastURL(soap);
	if (_p)
	{	soap_default___ns1__getWebcastURL(soap, _p);
		_p->ns1__GetWebcastURLRequest = ns1__GetWebcastURLRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWebcastURL(struct soap*, const struct __ns1__getWebcastURL *, const char*, const char*);

inline int soap_write___ns1__getWebcastURL(struct soap *soap, struct __ns1__getWebcastURL const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getWebcastURL(soap, p), 0) || soap_put___ns1__getWebcastURL(soap, p, "-ns1:getWebcastURL", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getWebcastURL * SOAP_FMAC4 soap_get___ns1__getWebcastURL(struct soap*, struct __ns1__getWebcastURL *, const char*, const char*);

inline int soap_read___ns1__getWebcastURL(struct soap *soap, struct __ns1__getWebcastURL *p)
{	if (p)
	{	soap_default___ns1__getWebcastURL(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getWebcastURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removeWebcastPIN_DEFINED
#define SOAP_TYPE___ns1__removeWebcastPIN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeWebcastPIN(struct soap*, struct __ns1__removeWebcastPIN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeWebcastPIN(struct soap*, const struct __ns1__removeWebcastPIN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeWebcastPIN(struct soap*, const char*, int, const struct __ns1__removeWebcastPIN *, const char*);
SOAP_FMAC3 struct __ns1__removeWebcastPIN * SOAP_FMAC4 soap_in___ns1__removeWebcastPIN(struct soap*, const char*, struct __ns1__removeWebcastPIN *, const char*);
SOAP_FMAC1 struct __ns1__removeWebcastPIN * SOAP_FMAC2 soap_instantiate___ns1__removeWebcastPIN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removeWebcastPIN * soap_new___ns1__removeWebcastPIN(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__removeWebcastPIN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removeWebcastPIN * soap_new_req___ns1__removeWebcastPIN(
	struct soap *soap)
{	struct __ns1__removeWebcastPIN *_p = soap_new___ns1__removeWebcastPIN(soap);
	if (_p)
	{	soap_default___ns1__removeWebcastPIN(soap, _p);
	}
	return _p;
}

inline struct __ns1__removeWebcastPIN * soap_new_set___ns1__removeWebcastPIN(
	struct soap *soap,
	_ns1__RemoveWebcastPINRequest *ns1__RemoveWebcastPINRequest)
{	struct __ns1__removeWebcastPIN *_p = soap_new___ns1__removeWebcastPIN(soap);
	if (_p)
	{	soap_default___ns1__removeWebcastPIN(soap, _p);
		_p->ns1__RemoveWebcastPINRequest = ns1__RemoveWebcastPINRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeWebcastPIN(struct soap*, const struct __ns1__removeWebcastPIN *, const char*, const char*);

inline int soap_write___ns1__removeWebcastPIN(struct soap *soap, struct __ns1__removeWebcastPIN const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removeWebcastPIN(soap, p), 0) || soap_put___ns1__removeWebcastPIN(soap, p, "-ns1:removeWebcastPIN", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removeWebcastPIN * SOAP_FMAC4 soap_get___ns1__removeWebcastPIN(struct soap*, struct __ns1__removeWebcastPIN *, const char*, const char*);

inline int soap_read___ns1__removeWebcastPIN(struct soap *soap, struct __ns1__removeWebcastPIN *p)
{	if (p)
	{	soap_default___ns1__removeWebcastPIN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removeWebcastPIN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removeWebcastURL_DEFINED
#define SOAP_TYPE___ns1__removeWebcastURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeWebcastURL(struct soap*, struct __ns1__removeWebcastURL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeWebcastURL(struct soap*, const struct __ns1__removeWebcastURL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeWebcastURL(struct soap*, const char*, int, const struct __ns1__removeWebcastURL *, const char*);
SOAP_FMAC3 struct __ns1__removeWebcastURL * SOAP_FMAC4 soap_in___ns1__removeWebcastURL(struct soap*, const char*, struct __ns1__removeWebcastURL *, const char*);
SOAP_FMAC1 struct __ns1__removeWebcastURL * SOAP_FMAC2 soap_instantiate___ns1__removeWebcastURL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removeWebcastURL * soap_new___ns1__removeWebcastURL(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__removeWebcastURL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removeWebcastURL * soap_new_req___ns1__removeWebcastURL(
	struct soap *soap)
{	struct __ns1__removeWebcastURL *_p = soap_new___ns1__removeWebcastURL(soap);
	if (_p)
	{	soap_default___ns1__removeWebcastURL(soap, _p);
	}
	return _p;
}

inline struct __ns1__removeWebcastURL * soap_new_set___ns1__removeWebcastURL(
	struct soap *soap,
	_ns1__RemoveWebcastURLRequest *ns1__RemoveWebcastURLRequest)
{	struct __ns1__removeWebcastURL *_p = soap_new___ns1__removeWebcastURL(soap);
	if (_p)
	{	soap_default___ns1__removeWebcastURL(soap, _p);
		_p->ns1__RemoveWebcastURLRequest = ns1__RemoveWebcastURLRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeWebcastURL(struct soap*, const struct __ns1__removeWebcastURL *, const char*, const char*);

inline int soap_write___ns1__removeWebcastURL(struct soap *soap, struct __ns1__removeWebcastURL const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removeWebcastURL(soap, p), 0) || soap_put___ns1__removeWebcastURL(soap, p, "-ns1:removeWebcastURL", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removeWebcastURL * SOAP_FMAC4 soap_get___ns1__removeWebcastURL(struct soap*, struct __ns1__removeWebcastURL *, const char*, const char*);

inline int soap_read___ns1__removeWebcastURL(struct soap *soap, struct __ns1__removeWebcastURL *p)
{	if (p)
	{	soap_default___ns1__removeWebcastURL(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removeWebcastURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__createWebcastPIN_DEFINED
#define SOAP_TYPE___ns1__createWebcastPIN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createWebcastPIN(struct soap*, struct __ns1__createWebcastPIN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createWebcastPIN(struct soap*, const struct __ns1__createWebcastPIN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createWebcastPIN(struct soap*, const char*, int, const struct __ns1__createWebcastPIN *, const char*);
SOAP_FMAC3 struct __ns1__createWebcastPIN * SOAP_FMAC4 soap_in___ns1__createWebcastPIN(struct soap*, const char*, struct __ns1__createWebcastPIN *, const char*);
SOAP_FMAC1 struct __ns1__createWebcastPIN * SOAP_FMAC2 soap_instantiate___ns1__createWebcastPIN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__createWebcastPIN * soap_new___ns1__createWebcastPIN(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__createWebcastPIN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__createWebcastPIN * soap_new_req___ns1__createWebcastPIN(
	struct soap *soap)
{	struct __ns1__createWebcastPIN *_p = soap_new___ns1__createWebcastPIN(soap);
	if (_p)
	{	soap_default___ns1__createWebcastPIN(soap, _p);
	}
	return _p;
}

inline struct __ns1__createWebcastPIN * soap_new_set___ns1__createWebcastPIN(
	struct soap *soap,
	_ns1__CreateWebcastPINRequest *ns1__CreateWebcastPINRequest)
{	struct __ns1__createWebcastPIN *_p = soap_new___ns1__createWebcastPIN(soap);
	if (_p)
	{	soap_default___ns1__createWebcastPIN(soap, _p);
		_p->ns1__CreateWebcastPINRequest = ns1__CreateWebcastPINRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createWebcastPIN(struct soap*, const struct __ns1__createWebcastPIN *, const char*, const char*);

inline int soap_write___ns1__createWebcastPIN(struct soap *soap, struct __ns1__createWebcastPIN const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__createWebcastPIN(soap, p), 0) || soap_put___ns1__createWebcastPIN(soap, p, "-ns1:createWebcastPIN", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__createWebcastPIN * SOAP_FMAC4 soap_get___ns1__createWebcastPIN(struct soap*, struct __ns1__createWebcastPIN *, const char*, const char*);

inline int soap_read___ns1__createWebcastPIN(struct soap *soap, struct __ns1__createWebcastPIN *p)
{	if (p)
	{	soap_default___ns1__createWebcastPIN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__createWebcastPIN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__createWebcastURL_DEFINED
#define SOAP_TYPE___ns1__createWebcastURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createWebcastURL(struct soap*, struct __ns1__createWebcastURL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createWebcastURL(struct soap*, const struct __ns1__createWebcastURL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createWebcastURL(struct soap*, const char*, int, const struct __ns1__createWebcastURL *, const char*);
SOAP_FMAC3 struct __ns1__createWebcastURL * SOAP_FMAC4 soap_in___ns1__createWebcastURL(struct soap*, const char*, struct __ns1__createWebcastURL *, const char*);
SOAP_FMAC1 struct __ns1__createWebcastURL * SOAP_FMAC2 soap_instantiate___ns1__createWebcastURL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__createWebcastURL * soap_new___ns1__createWebcastURL(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__createWebcastURL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__createWebcastURL * soap_new_req___ns1__createWebcastURL(
	struct soap *soap)
{	struct __ns1__createWebcastURL *_p = soap_new___ns1__createWebcastURL(soap);
	if (_p)
	{	soap_default___ns1__createWebcastURL(soap, _p);
	}
	return _p;
}

inline struct __ns1__createWebcastURL * soap_new_set___ns1__createWebcastURL(
	struct soap *soap,
	_ns1__CreateWebcastURLRequest *ns1__CreateWebcastURLRequest)
{	struct __ns1__createWebcastURL *_p = soap_new___ns1__createWebcastURL(soap);
	if (_p)
	{	soap_default___ns1__createWebcastURL(soap, _p);
		_p->ns1__CreateWebcastURLRequest = ns1__CreateWebcastURLRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createWebcastURL(struct soap*, const struct __ns1__createWebcastURL *, const char*, const char*);

inline int soap_write___ns1__createWebcastURL(struct soap *soap, struct __ns1__createWebcastURL const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__createWebcastURL(soap, p), 0) || soap_put___ns1__createWebcastURL(soap, p, "-ns1:createWebcastURL", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__createWebcastURL * SOAP_FMAC4 soap_get___ns1__createWebcastURL(struct soap*, struct __ns1__createWebcastURL *, const char*, const char*);

inline int soap_read___ns1__createWebcastURL(struct soap *soap, struct __ns1__createWebcastURL *p)
{	if (p)
	{	soap_default___ns1__createWebcastURL(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__createWebcastURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__stopRecording_DEFINED
#define SOAP_TYPE___ns1__stopRecording_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__stopRecording(struct soap*, struct __ns1__stopRecording *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__stopRecording(struct soap*, const struct __ns1__stopRecording *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__stopRecording(struct soap*, const char*, int, const struct __ns1__stopRecording *, const char*);
SOAP_FMAC3 struct __ns1__stopRecording * SOAP_FMAC4 soap_in___ns1__stopRecording(struct soap*, const char*, struct __ns1__stopRecording *, const char*);
SOAP_FMAC1 struct __ns1__stopRecording * SOAP_FMAC2 soap_instantiate___ns1__stopRecording(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__stopRecording * soap_new___ns1__stopRecording(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__stopRecording(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__stopRecording * soap_new_req___ns1__stopRecording(
	struct soap *soap)
{	struct __ns1__stopRecording *_p = soap_new___ns1__stopRecording(soap);
	if (_p)
	{	soap_default___ns1__stopRecording(soap, _p);
	}
	return _p;
}

inline struct __ns1__stopRecording * soap_new_set___ns1__stopRecording(
	struct soap *soap,
	_ns1__StopRecordingRequest *ns1__StopRecordingRequest)
{	struct __ns1__stopRecording *_p = soap_new___ns1__stopRecording(soap);
	if (_p)
	{	soap_default___ns1__stopRecording(soap, _p);
		_p->ns1__StopRecordingRequest = ns1__StopRecordingRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__stopRecording(struct soap*, const struct __ns1__stopRecording *, const char*, const char*);

inline int soap_write___ns1__stopRecording(struct soap *soap, struct __ns1__stopRecording const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__stopRecording(soap, p), 0) || soap_put___ns1__stopRecording(soap, p, "-ns1:stopRecording", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__stopRecording * SOAP_FMAC4 soap_get___ns1__stopRecording(struct soap*, struct __ns1__stopRecording *, const char*, const char*);

inline int soap_read___ns1__stopRecording(struct soap *soap, struct __ns1__stopRecording *p)
{	if (p)
	{	soap_default___ns1__stopRecording(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__stopRecording(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__resumeRecording_DEFINED
#define SOAP_TYPE___ns1__resumeRecording_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__resumeRecording(struct soap*, struct __ns1__resumeRecording *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__resumeRecording(struct soap*, const struct __ns1__resumeRecording *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__resumeRecording(struct soap*, const char*, int, const struct __ns1__resumeRecording *, const char*);
SOAP_FMAC3 struct __ns1__resumeRecording * SOAP_FMAC4 soap_in___ns1__resumeRecording(struct soap*, const char*, struct __ns1__resumeRecording *, const char*);
SOAP_FMAC1 struct __ns1__resumeRecording * SOAP_FMAC2 soap_instantiate___ns1__resumeRecording(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__resumeRecording * soap_new___ns1__resumeRecording(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__resumeRecording(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__resumeRecording * soap_new_req___ns1__resumeRecording(
	struct soap *soap)
{	struct __ns1__resumeRecording *_p = soap_new___ns1__resumeRecording(soap);
	if (_p)
	{	soap_default___ns1__resumeRecording(soap, _p);
	}
	return _p;
}

inline struct __ns1__resumeRecording * soap_new_set___ns1__resumeRecording(
	struct soap *soap,
	_ns1__ResumeRecordingRequest *ns1__ResumeRecordingRequest)
{	struct __ns1__resumeRecording *_p = soap_new___ns1__resumeRecording(soap);
	if (_p)
	{	soap_default___ns1__resumeRecording(soap, _p);
		_p->ns1__ResumeRecordingRequest = ns1__ResumeRecordingRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__resumeRecording(struct soap*, const struct __ns1__resumeRecording *, const char*, const char*);

inline int soap_write___ns1__resumeRecording(struct soap *soap, struct __ns1__resumeRecording const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__resumeRecording(soap, p), 0) || soap_put___ns1__resumeRecording(soap, p, "-ns1:resumeRecording", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__resumeRecording * SOAP_FMAC4 soap_get___ns1__resumeRecording(struct soap*, struct __ns1__resumeRecording *, const char*, const char*);

inline int soap_read___ns1__resumeRecording(struct soap *soap, struct __ns1__resumeRecording *p)
{	if (p)
	{	soap_default___ns1__resumeRecording(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__resumeRecording(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__pauseRecording_DEFINED
#define SOAP_TYPE___ns1__pauseRecording_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__pauseRecording(struct soap*, struct __ns1__pauseRecording *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__pauseRecording(struct soap*, const struct __ns1__pauseRecording *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__pauseRecording(struct soap*, const char*, int, const struct __ns1__pauseRecording *, const char*);
SOAP_FMAC3 struct __ns1__pauseRecording * SOAP_FMAC4 soap_in___ns1__pauseRecording(struct soap*, const char*, struct __ns1__pauseRecording *, const char*);
SOAP_FMAC1 struct __ns1__pauseRecording * SOAP_FMAC2 soap_instantiate___ns1__pauseRecording(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__pauseRecording * soap_new___ns1__pauseRecording(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__pauseRecording(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__pauseRecording * soap_new_req___ns1__pauseRecording(
	struct soap *soap)
{	struct __ns1__pauseRecording *_p = soap_new___ns1__pauseRecording(soap);
	if (_p)
	{	soap_default___ns1__pauseRecording(soap, _p);
	}
	return _p;
}

inline struct __ns1__pauseRecording * soap_new_set___ns1__pauseRecording(
	struct soap *soap,
	_ns1__PauseRecordingRequest *ns1__PauseRecordingRequest)
{	struct __ns1__pauseRecording *_p = soap_new___ns1__pauseRecording(soap);
	if (_p)
	{	soap_default___ns1__pauseRecording(soap, _p);
		_p->ns1__PauseRecordingRequest = ns1__PauseRecordingRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__pauseRecording(struct soap*, const struct __ns1__pauseRecording *, const char*, const char*);

inline int soap_write___ns1__pauseRecording(struct soap *soap, struct __ns1__pauseRecording const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__pauseRecording(soap, p), 0) || soap_put___ns1__pauseRecording(soap, p, "-ns1:pauseRecording", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__pauseRecording * SOAP_FMAC4 soap_get___ns1__pauseRecording(struct soap*, struct __ns1__pauseRecording *, const char*, const char*);

inline int soap_read___ns1__pauseRecording(struct soap *soap, struct __ns1__pauseRecording *p)
{	if (p)
	{	soap_default___ns1__pauseRecording(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__pauseRecording(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getPortalVersion_DEFINED
#define SOAP_TYPE___ns1__getPortalVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPortalVersion(struct soap*, struct __ns1__getPortalVersion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPortalVersion(struct soap*, const struct __ns1__getPortalVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPortalVersion(struct soap*, const char*, int, const struct __ns1__getPortalVersion *, const char*);
SOAP_FMAC3 struct __ns1__getPortalVersion * SOAP_FMAC4 soap_in___ns1__getPortalVersion(struct soap*, const char*, struct __ns1__getPortalVersion *, const char*);
SOAP_FMAC1 struct __ns1__getPortalVersion * SOAP_FMAC2 soap_instantiate___ns1__getPortalVersion(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPortalVersion * soap_new___ns1__getPortalVersion(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getPortalVersion(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPortalVersion * soap_new_req___ns1__getPortalVersion(
	struct soap *soap)
{	struct __ns1__getPortalVersion *_p = soap_new___ns1__getPortalVersion(soap);
	if (_p)
	{	soap_default___ns1__getPortalVersion(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPortalVersion * soap_new_set___ns1__getPortalVersion(
	struct soap *soap,
	_ns1__GetPortalVersionRequest *ns1__GetPortalVersionRequest)
{	struct __ns1__getPortalVersion *_p = soap_new___ns1__getPortalVersion(soap);
	if (_p)
	{	soap_default___ns1__getPortalVersion(soap, _p);
		_p->ns1__GetPortalVersionRequest = ns1__GetPortalVersionRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPortalVersion(struct soap*, const struct __ns1__getPortalVersion *, const char*, const char*);

inline int soap_write___ns1__getPortalVersion(struct soap *soap, struct __ns1__getPortalVersion const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getPortalVersion(soap, p), 0) || soap_put___ns1__getPortalVersion(soap, p, "-ns1:getPortalVersion", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPortalVersion * SOAP_FMAC4 soap_get___ns1__getPortalVersion(struct soap*, struct __ns1__getPortalVersion *, const char*, const char*);

inline int soap_read___ns1__getPortalVersion(struct soap *soap, struct __ns1__getPortalVersion *p)
{	if (p)
	{	soap_default___ns1__getPortalVersion(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getPortalVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__startRecording_DEFINED
#define SOAP_TYPE___ns1__startRecording_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__startRecording(struct soap*, struct __ns1__startRecording *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__startRecording(struct soap*, const struct __ns1__startRecording *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__startRecording(struct soap*, const char*, int, const struct __ns1__startRecording *, const char*);
SOAP_FMAC3 struct __ns1__startRecording * SOAP_FMAC4 soap_in___ns1__startRecording(struct soap*, const char*, struct __ns1__startRecording *, const char*);
SOAP_FMAC1 struct __ns1__startRecording * SOAP_FMAC2 soap_instantiate___ns1__startRecording(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__startRecording * soap_new___ns1__startRecording(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__startRecording(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__startRecording * soap_new_req___ns1__startRecording(
	struct soap *soap)
{	struct __ns1__startRecording *_p = soap_new___ns1__startRecording(soap);
	if (_p)
	{	soap_default___ns1__startRecording(soap, _p);
	}
	return _p;
}

inline struct __ns1__startRecording * soap_new_set___ns1__startRecording(
	struct soap *soap,
	_ns1__StartRecordingRequest *ns1__StartRecordingRequest)
{	struct __ns1__startRecording *_p = soap_new___ns1__startRecording(soap);
	if (_p)
	{	soap_default___ns1__startRecording(soap, _p);
		_p->ns1__StartRecordingRequest = ns1__StartRecordingRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__startRecording(struct soap*, const struct __ns1__startRecording *, const char*, const char*);

inline int soap_write___ns1__startRecording(struct soap *soap, struct __ns1__startRecording const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__startRecording(soap, p), 0) || soap_put___ns1__startRecording(soap, p, "-ns1:startRecording", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__startRecording * SOAP_FMAC4 soap_get___ns1__startRecording(struct soap*, struct __ns1__startRecording *, const char*, const char*);

inline int soap_read___ns1__startRecording(struct soap *soap, struct __ns1__startRecording *p)
{	if (p)
	{	soap_default___ns1__startRecording(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__startRecording(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRecordingProfiles_DEFINED
#define SOAP_TYPE___ns1__getRecordingProfiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRecordingProfiles(struct soap*, struct __ns1__getRecordingProfiles *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRecordingProfiles(struct soap*, const struct __ns1__getRecordingProfiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRecordingProfiles(struct soap*, const char*, int, const struct __ns1__getRecordingProfiles *, const char*);
SOAP_FMAC3 struct __ns1__getRecordingProfiles * SOAP_FMAC4 soap_in___ns1__getRecordingProfiles(struct soap*, const char*, struct __ns1__getRecordingProfiles *, const char*);
SOAP_FMAC1 struct __ns1__getRecordingProfiles * SOAP_FMAC2 soap_instantiate___ns1__getRecordingProfiles(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRecordingProfiles * soap_new___ns1__getRecordingProfiles(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getRecordingProfiles(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRecordingProfiles * soap_new_req___ns1__getRecordingProfiles(
	struct soap *soap)
{	struct __ns1__getRecordingProfiles *_p = soap_new___ns1__getRecordingProfiles(soap);
	if (_p)
	{	soap_default___ns1__getRecordingProfiles(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRecordingProfiles * soap_new_set___ns1__getRecordingProfiles(
	struct soap *soap,
	_ns1__GetRecordingProfilesRequest *ns1__GetRecordingProfilesRequest)
{	struct __ns1__getRecordingProfiles *_p = soap_new___ns1__getRecordingProfiles(soap);
	if (_p)
	{	soap_default___ns1__getRecordingProfiles(soap, _p);
		_p->ns1__GetRecordingProfilesRequest = ns1__GetRecordingProfilesRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRecordingProfiles(struct soap*, const struct __ns1__getRecordingProfiles *, const char*, const char*);

inline int soap_write___ns1__getRecordingProfiles(struct soap *soap, struct __ns1__getRecordingProfiles const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getRecordingProfiles(soap, p), 0) || soap_put___ns1__getRecordingProfiles(soap, p, "-ns1:getRecordingProfiles", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRecordingProfiles * SOAP_FMAC4 soap_get___ns1__getRecordingProfiles(struct soap*, struct __ns1__getRecordingProfiles *, const char*, const char*);

inline int soap_read___ns1__getRecordingProfiles(struct soap *soap, struct __ns1__getRecordingProfiles *p)
{	if (p)
	{	soap_default___ns1__getRecordingProfiles(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getRecordingProfiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__setMemberMode_DEFINED
#define SOAP_TYPE___ns1__setMemberMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setMemberMode(struct soap*, struct __ns1__setMemberMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setMemberMode(struct soap*, const struct __ns1__setMemberMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setMemberMode(struct soap*, const char*, int, const struct __ns1__setMemberMode *, const char*);
SOAP_FMAC3 struct __ns1__setMemberMode * SOAP_FMAC4 soap_in___ns1__setMemberMode(struct soap*, const char*, struct __ns1__setMemberMode *, const char*);
SOAP_FMAC1 struct __ns1__setMemberMode * SOAP_FMAC2 soap_instantiate___ns1__setMemberMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setMemberMode * soap_new___ns1__setMemberMode(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__setMemberMode(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__setMemberMode * soap_new_req___ns1__setMemberMode(
	struct soap *soap)
{	struct __ns1__setMemberMode *_p = soap_new___ns1__setMemberMode(soap);
	if (_p)
	{	soap_default___ns1__setMemberMode(soap, _p);
	}
	return _p;
}

inline struct __ns1__setMemberMode * soap_new_set___ns1__setMemberMode(
	struct soap *soap,
	_ns1__SetMemberModeRequest *ns1__SetMemberModeRequest)
{	struct __ns1__setMemberMode *_p = soap_new___ns1__setMemberMode(soap);
	if (_p)
	{	soap_default___ns1__setMemberMode(soap, _p);
		_p->ns1__SetMemberModeRequest = ns1__SetMemberModeRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setMemberMode(struct soap*, const struct __ns1__setMemberMode *, const char*, const char*);

inline int soap_write___ns1__setMemberMode(struct soap *soap, struct __ns1__setMemberMode const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__setMemberMode(soap, p), 0) || soap_put___ns1__setMemberMode(soap, p, "-ns1:setMemberMode", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__setMemberMode * SOAP_FMAC4 soap_get___ns1__setMemberMode(struct soap*, struct __ns1__setMemberMode *, const char*, const char*);

inline int soap_read___ns1__setMemberMode(struct soap *soap, struct __ns1__setMemberMode *p)
{	if (p)
	{	soap_default___ns1__setMemberMode(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__setMemberMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__unlockRoom_DEFINED
#define SOAP_TYPE___ns1__unlockRoom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__unlockRoom(struct soap*, struct __ns1__unlockRoom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__unlockRoom(struct soap*, const struct __ns1__unlockRoom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__unlockRoom(struct soap*, const char*, int, const struct __ns1__unlockRoom *, const char*);
SOAP_FMAC3 struct __ns1__unlockRoom * SOAP_FMAC4 soap_in___ns1__unlockRoom(struct soap*, const char*, struct __ns1__unlockRoom *, const char*);
SOAP_FMAC1 struct __ns1__unlockRoom * SOAP_FMAC2 soap_instantiate___ns1__unlockRoom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__unlockRoom * soap_new___ns1__unlockRoom(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__unlockRoom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__unlockRoom * soap_new_req___ns1__unlockRoom(
	struct soap *soap)
{	struct __ns1__unlockRoom *_p = soap_new___ns1__unlockRoom(soap);
	if (_p)
	{	soap_default___ns1__unlockRoom(soap, _p);
	}
	return _p;
}

inline struct __ns1__unlockRoom * soap_new_set___ns1__unlockRoom(
	struct soap *soap,
	_ns1__UnlockRoomRequest *ns1__UnlockRoomRequest)
{	struct __ns1__unlockRoom *_p = soap_new___ns1__unlockRoom(soap);
	if (_p)
	{	soap_default___ns1__unlockRoom(soap, _p);
		_p->ns1__UnlockRoomRequest = ns1__UnlockRoomRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__unlockRoom(struct soap*, const struct __ns1__unlockRoom *, const char*, const char*);

inline int soap_write___ns1__unlockRoom(struct soap *soap, struct __ns1__unlockRoom const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__unlockRoom(soap, p), 0) || soap_put___ns1__unlockRoom(soap, p, "-ns1:unlockRoom", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__unlockRoom * SOAP_FMAC4 soap_get___ns1__unlockRoom(struct soap*, struct __ns1__unlockRoom *, const char*, const char*);

inline int soap_read___ns1__unlockRoom(struct soap *soap, struct __ns1__unlockRoom *p)
{	if (p)
	{	soap_default___ns1__unlockRoom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__unlockRoom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__lockRoom_DEFINED
#define SOAP_TYPE___ns1__lockRoom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__lockRoom(struct soap*, struct __ns1__lockRoom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__lockRoom(struct soap*, const struct __ns1__lockRoom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__lockRoom(struct soap*, const char*, int, const struct __ns1__lockRoom *, const char*);
SOAP_FMAC3 struct __ns1__lockRoom * SOAP_FMAC4 soap_in___ns1__lockRoom(struct soap*, const char*, struct __ns1__lockRoom *, const char*);
SOAP_FMAC1 struct __ns1__lockRoom * SOAP_FMAC2 soap_instantiate___ns1__lockRoom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__lockRoom * soap_new___ns1__lockRoom(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__lockRoom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__lockRoom * soap_new_req___ns1__lockRoom(
	struct soap *soap)
{	struct __ns1__lockRoom *_p = soap_new___ns1__lockRoom(soap);
	if (_p)
	{	soap_default___ns1__lockRoom(soap, _p);
	}
	return _p;
}

inline struct __ns1__lockRoom * soap_new_set___ns1__lockRoom(
	struct soap *soap,
	_ns1__LockRoomRequest *ns1__LockRoomRequest)
{	struct __ns1__lockRoom *_p = soap_new___ns1__lockRoom(soap);
	if (_p)
	{	soap_default___ns1__lockRoom(soap, _p);
		_p->ns1__LockRoomRequest = ns1__LockRoomRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__lockRoom(struct soap*, const struct __ns1__lockRoom *, const char*, const char*);

inline int soap_write___ns1__lockRoom(struct soap *soap, struct __ns1__lockRoom const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__lockRoom(soap, p), 0) || soap_put___ns1__lockRoom(soap, p, "-ns1:lockRoom", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__lockRoom * SOAP_FMAC4 soap_get___ns1__lockRoom(struct soap*, struct __ns1__lockRoom *, const char*, const char*);

inline int soap_read___ns1__lockRoom(struct soap *soap, struct __ns1__lockRoom *p)
{	if (p)
	{	soap_default___ns1__lockRoom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__lockRoom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__updateLanguage_DEFINED
#define SOAP_TYPE___ns1__updateLanguage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateLanguage(struct soap*, struct __ns1__updateLanguage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateLanguage(struct soap*, const struct __ns1__updateLanguage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateLanguage(struct soap*, const char*, int, const struct __ns1__updateLanguage *, const char*);
SOAP_FMAC3 struct __ns1__updateLanguage * SOAP_FMAC4 soap_in___ns1__updateLanguage(struct soap*, const char*, struct __ns1__updateLanguage *, const char*);
SOAP_FMAC1 struct __ns1__updateLanguage * SOAP_FMAC2 soap_instantiate___ns1__updateLanguage(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__updateLanguage * soap_new___ns1__updateLanguage(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__updateLanguage(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__updateLanguage * soap_new_req___ns1__updateLanguage(
	struct soap *soap)
{	struct __ns1__updateLanguage *_p = soap_new___ns1__updateLanguage(soap);
	if (_p)
	{	soap_default___ns1__updateLanguage(soap, _p);
	}
	return _p;
}

inline struct __ns1__updateLanguage * soap_new_set___ns1__updateLanguage(
	struct soap *soap,
	_ns1__UpdateLanguageRequest *ns1__UpdateLanguageRequest)
{	struct __ns1__updateLanguage *_p = soap_new___ns1__updateLanguage(soap);
	if (_p)
	{	soap_default___ns1__updateLanguage(soap, _p);
		_p->ns1__UpdateLanguageRequest = ns1__UpdateLanguageRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateLanguage(struct soap*, const struct __ns1__updateLanguage *, const char*, const char*);

inline int soap_write___ns1__updateLanguage(struct soap *soap, struct __ns1__updateLanguage const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__updateLanguage(soap, p), 0) || soap_put___ns1__updateLanguage(soap, p, "-ns1:updateLanguage", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__updateLanguage * SOAP_FMAC4 soap_get___ns1__updateLanguage(struct soap*, struct __ns1__updateLanguage *, const char*, const char*);

inline int soap_read___ns1__updateLanguage(struct soap *soap, struct __ns1__updateLanguage *p)
{	if (p)
	{	soap_default___ns1__updateLanguage(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__updateLanguage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__updatePassword_DEFINED
#define SOAP_TYPE___ns1__updatePassword_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updatePassword(struct soap*, struct __ns1__updatePassword *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updatePassword(struct soap*, const struct __ns1__updatePassword *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updatePassword(struct soap*, const char*, int, const struct __ns1__updatePassword *, const char*);
SOAP_FMAC3 struct __ns1__updatePassword * SOAP_FMAC4 soap_in___ns1__updatePassword(struct soap*, const char*, struct __ns1__updatePassword *, const char*);
SOAP_FMAC1 struct __ns1__updatePassword * SOAP_FMAC2 soap_instantiate___ns1__updatePassword(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__updatePassword * soap_new___ns1__updatePassword(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__updatePassword(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__updatePassword * soap_new_req___ns1__updatePassword(
	struct soap *soap)
{	struct __ns1__updatePassword *_p = soap_new___ns1__updatePassword(soap);
	if (_p)
	{	soap_default___ns1__updatePassword(soap, _p);
	}
	return _p;
}

inline struct __ns1__updatePassword * soap_new_set___ns1__updatePassword(
	struct soap *soap,
	_ns1__UpdatePasswordRequest *ns1__UpdatePasswordRequest)
{	struct __ns1__updatePassword *_p = soap_new___ns1__updatePassword(soap);
	if (_p)
	{	soap_default___ns1__updatePassword(soap, _p);
		_p->ns1__UpdatePasswordRequest = ns1__UpdatePasswordRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updatePassword(struct soap*, const struct __ns1__updatePassword *, const char*, const char*);

inline int soap_write___ns1__updatePassword(struct soap *soap, struct __ns1__updatePassword const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__updatePassword(soap, p), 0) || soap_put___ns1__updatePassword(soap, p, "-ns1:updatePassword", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__updatePassword * SOAP_FMAC4 soap_get___ns1__updatePassword(struct soap*, struct __ns1__updatePassword *, const char*, const char*);

inline int soap_read___ns1__updatePassword(struct soap *soap, struct __ns1__updatePassword *p)
{	if (p)
	{	soap_default___ns1__updatePassword(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__updatePassword(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__deleteRoom_DEFINED
#define SOAP_TYPE___ns1__deleteRoom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteRoom(struct soap*, struct __ns1__deleteRoom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteRoom(struct soap*, const struct __ns1__deleteRoom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteRoom(struct soap*, const char*, int, const struct __ns1__deleteRoom *, const char*);
SOAP_FMAC3 struct __ns1__deleteRoom * SOAP_FMAC4 soap_in___ns1__deleteRoom(struct soap*, const char*, struct __ns1__deleteRoom *, const char*);
SOAP_FMAC1 struct __ns1__deleteRoom * SOAP_FMAC2 soap_instantiate___ns1__deleteRoom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteRoom * soap_new___ns1__deleteRoom(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__deleteRoom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteRoom * soap_new_req___ns1__deleteRoom(
	struct soap *soap)
{	struct __ns1__deleteRoom *_p = soap_new___ns1__deleteRoom(soap);
	if (_p)
	{	soap_default___ns1__deleteRoom(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteRoom * soap_new_set___ns1__deleteRoom(
	struct soap *soap,
	_ns1__DeleteRoomRequest *ns1__DeleteRoomRequest)
{	struct __ns1__deleteRoom *_p = soap_new___ns1__deleteRoom(soap);
	if (_p)
	{	soap_default___ns1__deleteRoom(soap, _p);
		_p->ns1__DeleteRoomRequest = ns1__DeleteRoomRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteRoom(struct soap*, const struct __ns1__deleteRoom *, const char*, const char*);

inline int soap_write___ns1__deleteRoom(struct soap *soap, struct __ns1__deleteRoom const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__deleteRoom(soap, p), 0) || soap_put___ns1__deleteRoom(soap, p, "-ns1:deleteRoom", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteRoom * SOAP_FMAC4 soap_get___ns1__deleteRoom(struct soap*, struct __ns1__deleteRoom *, const char*, const char*);

inline int soap_read___ns1__deleteRoom(struct soap *soap, struct __ns1__deleteRoom *p)
{	if (p)
	{	soap_default___ns1__deleteRoom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__deleteRoom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__createRoom_DEFINED
#define SOAP_TYPE___ns1__createRoom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createRoom(struct soap*, struct __ns1__createRoom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createRoom(struct soap*, const struct __ns1__createRoom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createRoom(struct soap*, const char*, int, const struct __ns1__createRoom *, const char*);
SOAP_FMAC3 struct __ns1__createRoom * SOAP_FMAC4 soap_in___ns1__createRoom(struct soap*, const char*, struct __ns1__createRoom *, const char*);
SOAP_FMAC1 struct __ns1__createRoom * SOAP_FMAC2 soap_instantiate___ns1__createRoom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__createRoom * soap_new___ns1__createRoom(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__createRoom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__createRoom * soap_new_req___ns1__createRoom(
	struct soap *soap)
{	struct __ns1__createRoom *_p = soap_new___ns1__createRoom(soap);
	if (_p)
	{	soap_default___ns1__createRoom(soap, _p);
	}
	return _p;
}

inline struct __ns1__createRoom * soap_new_set___ns1__createRoom(
	struct soap *soap,
	_ns1__CreateRoomRequest *ns1__CreateRoomRequest)
{	struct __ns1__createRoom *_p = soap_new___ns1__createRoom(soap);
	if (_p)
	{	soap_default___ns1__createRoom(soap, _p);
		_p->ns1__CreateRoomRequest = ns1__CreateRoomRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createRoom(struct soap*, const struct __ns1__createRoom *, const char*, const char*);

inline int soap_write___ns1__createRoom(struct soap *soap, struct __ns1__createRoom const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__createRoom(soap, p), 0) || soap_put___ns1__createRoom(soap, p, "-ns1:createRoom", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__createRoom * SOAP_FMAC4 soap_get___ns1__createRoom(struct soap*, struct __ns1__createRoom *, const char*, const char*);

inline int soap_read___ns1__createRoom(struct soap *soap, struct __ns1__createRoom *p)
{	if (p)
	{	soap_default___ns1__createRoom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__createRoom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removeRoomPIN_DEFINED
#define SOAP_TYPE___ns1__removeRoomPIN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeRoomPIN(struct soap*, struct __ns1__removeRoomPIN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeRoomPIN(struct soap*, const struct __ns1__removeRoomPIN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeRoomPIN(struct soap*, const char*, int, const struct __ns1__removeRoomPIN *, const char*);
SOAP_FMAC3 struct __ns1__removeRoomPIN * SOAP_FMAC4 soap_in___ns1__removeRoomPIN(struct soap*, const char*, struct __ns1__removeRoomPIN *, const char*);
SOAP_FMAC1 struct __ns1__removeRoomPIN * SOAP_FMAC2 soap_instantiate___ns1__removeRoomPIN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removeRoomPIN * soap_new___ns1__removeRoomPIN(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__removeRoomPIN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removeRoomPIN * soap_new_req___ns1__removeRoomPIN(
	struct soap *soap)
{	struct __ns1__removeRoomPIN *_p = soap_new___ns1__removeRoomPIN(soap);
	if (_p)
	{	soap_default___ns1__removeRoomPIN(soap, _p);
	}
	return _p;
}

inline struct __ns1__removeRoomPIN * soap_new_set___ns1__removeRoomPIN(
	struct soap *soap,
	_ns1__RemoveRoomPINRequest *ns1__RemoveRoomPINRequest)
{	struct __ns1__removeRoomPIN *_p = soap_new___ns1__removeRoomPIN(soap);
	if (_p)
	{	soap_default___ns1__removeRoomPIN(soap, _p);
		_p->ns1__RemoveRoomPINRequest = ns1__RemoveRoomPINRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeRoomPIN(struct soap*, const struct __ns1__removeRoomPIN *, const char*, const char*);

inline int soap_write___ns1__removeRoomPIN(struct soap *soap, struct __ns1__removeRoomPIN const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removeRoomPIN(soap, p), 0) || soap_put___ns1__removeRoomPIN(soap, p, "-ns1:removeRoomPIN", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removeRoomPIN * SOAP_FMAC4 soap_get___ns1__removeRoomPIN(struct soap*, struct __ns1__removeRoomPIN *, const char*, const char*);

inline int soap_read___ns1__removeRoomPIN(struct soap *soap, struct __ns1__removeRoomPIN *p)
{	if (p)
	{	soap_default___ns1__removeRoomPIN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removeRoomPIN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__createRoomPIN_DEFINED
#define SOAP_TYPE___ns1__createRoomPIN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createRoomPIN(struct soap*, struct __ns1__createRoomPIN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createRoomPIN(struct soap*, const struct __ns1__createRoomPIN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createRoomPIN(struct soap*, const char*, int, const struct __ns1__createRoomPIN *, const char*);
SOAP_FMAC3 struct __ns1__createRoomPIN * SOAP_FMAC4 soap_in___ns1__createRoomPIN(struct soap*, const char*, struct __ns1__createRoomPIN *, const char*);
SOAP_FMAC1 struct __ns1__createRoomPIN * SOAP_FMAC2 soap_instantiate___ns1__createRoomPIN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__createRoomPIN * soap_new___ns1__createRoomPIN(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__createRoomPIN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__createRoomPIN * soap_new_req___ns1__createRoomPIN(
	struct soap *soap)
{	struct __ns1__createRoomPIN *_p = soap_new___ns1__createRoomPIN(soap);
	if (_p)
	{	soap_default___ns1__createRoomPIN(soap, _p);
	}
	return _p;
}

inline struct __ns1__createRoomPIN * soap_new_set___ns1__createRoomPIN(
	struct soap *soap,
	_ns1__CreateRoomPINRequest *ns1__CreateRoomPINRequest)
{	struct __ns1__createRoomPIN *_p = soap_new___ns1__createRoomPIN(soap);
	if (_p)
	{	soap_default___ns1__createRoomPIN(soap, _p);
		_p->ns1__CreateRoomPINRequest = ns1__CreateRoomPINRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createRoomPIN(struct soap*, const struct __ns1__createRoomPIN *, const char*, const char*);

inline int soap_write___ns1__createRoomPIN(struct soap *soap, struct __ns1__createRoomPIN const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__createRoomPIN(soap, p), 0) || soap_put___ns1__createRoomPIN(soap, p, "-ns1:createRoomPIN", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__createRoomPIN * SOAP_FMAC4 soap_get___ns1__createRoomPIN(struct soap*, struct __ns1__createRoomPIN *, const char*, const char*);

inline int soap_read___ns1__createRoomPIN(struct soap *soap, struct __ns1__createRoomPIN *p)
{	if (p)
	{	soap_default___ns1__createRoomPIN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__createRoomPIN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removeRoomURL_DEFINED
#define SOAP_TYPE___ns1__removeRoomURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeRoomURL(struct soap*, struct __ns1__removeRoomURL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeRoomURL(struct soap*, const struct __ns1__removeRoomURL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeRoomURL(struct soap*, const char*, int, const struct __ns1__removeRoomURL *, const char*);
SOAP_FMAC3 struct __ns1__removeRoomURL * SOAP_FMAC4 soap_in___ns1__removeRoomURL(struct soap*, const char*, struct __ns1__removeRoomURL *, const char*);
SOAP_FMAC1 struct __ns1__removeRoomURL * SOAP_FMAC2 soap_instantiate___ns1__removeRoomURL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removeRoomURL * soap_new___ns1__removeRoomURL(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__removeRoomURL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removeRoomURL * soap_new_req___ns1__removeRoomURL(
	struct soap *soap)
{	struct __ns1__removeRoomURL *_p = soap_new___ns1__removeRoomURL(soap);
	if (_p)
	{	soap_default___ns1__removeRoomURL(soap, _p);
	}
	return _p;
}

inline struct __ns1__removeRoomURL * soap_new_set___ns1__removeRoomURL(
	struct soap *soap,
	_ns1__RemoveRoomURLRequest *ns1__RemoveRoomURLRequest)
{	struct __ns1__removeRoomURL *_p = soap_new___ns1__removeRoomURL(soap);
	if (_p)
	{	soap_default___ns1__removeRoomURL(soap, _p);
		_p->ns1__RemoveRoomURLRequest = ns1__RemoveRoomURLRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeRoomURL(struct soap*, const struct __ns1__removeRoomURL *, const char*, const char*);

inline int soap_write___ns1__removeRoomURL(struct soap *soap, struct __ns1__removeRoomURL const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removeRoomURL(soap, p), 0) || soap_put___ns1__removeRoomURL(soap, p, "-ns1:removeRoomURL", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removeRoomURL * SOAP_FMAC4 soap_get___ns1__removeRoomURL(struct soap*, struct __ns1__removeRoomURL *, const char*, const char*);

inline int soap_read___ns1__removeRoomURL(struct soap *soap, struct __ns1__removeRoomURL *p)
{	if (p)
	{	soap_default___ns1__removeRoomURL(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removeRoomURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__createRoomURL_DEFINED
#define SOAP_TYPE___ns1__createRoomURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__createRoomURL(struct soap*, struct __ns1__createRoomURL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__createRoomURL(struct soap*, const struct __ns1__createRoomURL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__createRoomURL(struct soap*, const char*, int, const struct __ns1__createRoomURL *, const char*);
SOAP_FMAC3 struct __ns1__createRoomURL * SOAP_FMAC4 soap_in___ns1__createRoomURL(struct soap*, const char*, struct __ns1__createRoomURL *, const char*);
SOAP_FMAC1 struct __ns1__createRoomURL * SOAP_FMAC2 soap_instantiate___ns1__createRoomURL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__createRoomURL * soap_new___ns1__createRoomURL(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__createRoomURL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__createRoomURL * soap_new_req___ns1__createRoomURL(
	struct soap *soap)
{	struct __ns1__createRoomURL *_p = soap_new___ns1__createRoomURL(soap);
	if (_p)
	{	soap_default___ns1__createRoomURL(soap, _p);
	}
	return _p;
}

inline struct __ns1__createRoomURL * soap_new_set___ns1__createRoomURL(
	struct soap *soap,
	_ns1__CreateRoomURLRequest *ns1__CreateRoomURLRequest)
{	struct __ns1__createRoomURL *_p = soap_new___ns1__createRoomURL(soap);
	if (_p)
	{	soap_default___ns1__createRoomURL(soap, _p);
		_p->ns1__CreateRoomURLRequest = ns1__CreateRoomURLRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__createRoomURL(struct soap*, const struct __ns1__createRoomURL *, const char*, const char*);

inline int soap_write___ns1__createRoomURL(struct soap *soap, struct __ns1__createRoomURL const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__createRoomURL(soap, p), 0) || soap_put___ns1__createRoomURL(soap, p, "-ns1:createRoomURL", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__createRoomURL * SOAP_FMAC4 soap_get___ns1__createRoomURL(struct soap*, struct __ns1__createRoomURL *, const char*, const char*);

inline int soap_read___ns1__createRoomURL(struct soap *soap, struct __ns1__createRoomURL *p)
{	if (p)
	{	soap_default___ns1__createRoomURL(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__createRoomURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__myAccount_DEFINED
#define SOAP_TYPE___ns1__myAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__myAccount(struct soap*, struct __ns1__myAccount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__myAccount(struct soap*, const struct __ns1__myAccount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__myAccount(struct soap*, const char*, int, const struct __ns1__myAccount *, const char*);
SOAP_FMAC3 struct __ns1__myAccount * SOAP_FMAC4 soap_in___ns1__myAccount(struct soap*, const char*, struct __ns1__myAccount *, const char*);
SOAP_FMAC1 struct __ns1__myAccount * SOAP_FMAC2 soap_instantiate___ns1__myAccount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__myAccount * soap_new___ns1__myAccount(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__myAccount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__myAccount * soap_new_req___ns1__myAccount(
	struct soap *soap)
{	struct __ns1__myAccount *_p = soap_new___ns1__myAccount(soap);
	if (_p)
	{	soap_default___ns1__myAccount(soap, _p);
	}
	return _p;
}

inline struct __ns1__myAccount * soap_new_set___ns1__myAccount(
	struct soap *soap,
	_ns1__MyAccountRequest *ns1__MyAccountRequest)
{	struct __ns1__myAccount *_p = soap_new___ns1__myAccount(soap);
	if (_p)
	{	soap_default___ns1__myAccount(soap, _p);
		_p->ns1__MyAccountRequest = ns1__MyAccountRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__myAccount(struct soap*, const struct __ns1__myAccount *, const char*, const char*);

inline int soap_write___ns1__myAccount(struct soap *soap, struct __ns1__myAccount const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__myAccount(soap, p), 0) || soap_put___ns1__myAccount(soap, p, "-ns1:myAccount", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__myAccount * SOAP_FMAC4 soap_get___ns1__myAccount(struct soap*, struct __ns1__myAccount *, const char*, const char*);

inline int soap_read___ns1__myAccount(struct soap *soap, struct __ns1__myAccount *p)
{	if (p)
	{	soap_default___ns1__myAccount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__myAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__stopVideo_DEFINED
#define SOAP_TYPE___ns1__stopVideo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__stopVideo(struct soap*, struct __ns1__stopVideo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__stopVideo(struct soap*, const struct __ns1__stopVideo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__stopVideo(struct soap*, const char*, int, const struct __ns1__stopVideo *, const char*);
SOAP_FMAC3 struct __ns1__stopVideo * SOAP_FMAC4 soap_in___ns1__stopVideo(struct soap*, const char*, struct __ns1__stopVideo *, const char*);
SOAP_FMAC1 struct __ns1__stopVideo * SOAP_FMAC2 soap_instantiate___ns1__stopVideo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__stopVideo * soap_new___ns1__stopVideo(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__stopVideo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__stopVideo * soap_new_req___ns1__stopVideo(
	struct soap *soap)
{	struct __ns1__stopVideo *_p = soap_new___ns1__stopVideo(soap);
	if (_p)
	{	soap_default___ns1__stopVideo(soap, _p);
	}
	return _p;
}

inline struct __ns1__stopVideo * soap_new_set___ns1__stopVideo(
	struct soap *soap,
	_ns1__StopVideoRequest *ns1__StopVideoRequest)
{	struct __ns1__stopVideo *_p = soap_new___ns1__stopVideo(soap);
	if (_p)
	{	soap_default___ns1__stopVideo(soap, _p);
		_p->ns1__StopVideoRequest = ns1__StopVideoRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__stopVideo(struct soap*, const struct __ns1__stopVideo *, const char*, const char*);

inline int soap_write___ns1__stopVideo(struct soap *soap, struct __ns1__stopVideo const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__stopVideo(soap, p), 0) || soap_put___ns1__stopVideo(soap, p, "-ns1:stopVideo", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__stopVideo * SOAP_FMAC4 soap_get___ns1__stopVideo(struct soap*, struct __ns1__stopVideo *, const char*, const char*);

inline int soap_read___ns1__stopVideo(struct soap *soap, struct __ns1__stopVideo *p)
{	if (p)
	{	soap_default___ns1__stopVideo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__stopVideo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__startVideo_DEFINED
#define SOAP_TYPE___ns1__startVideo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__startVideo(struct soap*, struct __ns1__startVideo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__startVideo(struct soap*, const struct __ns1__startVideo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__startVideo(struct soap*, const char*, int, const struct __ns1__startVideo *, const char*);
SOAP_FMAC3 struct __ns1__startVideo * SOAP_FMAC4 soap_in___ns1__startVideo(struct soap*, const char*, struct __ns1__startVideo *, const char*);
SOAP_FMAC1 struct __ns1__startVideo * SOAP_FMAC2 soap_instantiate___ns1__startVideo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__startVideo * soap_new___ns1__startVideo(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__startVideo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__startVideo * soap_new_req___ns1__startVideo(
	struct soap *soap)
{	struct __ns1__startVideo *_p = soap_new___ns1__startVideo(soap);
	if (_p)
	{	soap_default___ns1__startVideo(soap, _p);
	}
	return _p;
}

inline struct __ns1__startVideo * soap_new_set___ns1__startVideo(
	struct soap *soap,
	_ns1__StartVideoRequest *ns1__StartVideoRequest)
{	struct __ns1__startVideo *_p = soap_new___ns1__startVideo(soap);
	if (_p)
	{	soap_default___ns1__startVideo(soap, _p);
		_p->ns1__StartVideoRequest = ns1__StartVideoRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__startVideo(struct soap*, const struct __ns1__startVideo *, const char*, const char*);

inline int soap_write___ns1__startVideo(struct soap *soap, struct __ns1__startVideo const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__startVideo(soap, p), 0) || soap_put___ns1__startVideo(soap, p, "-ns1:startVideo", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__startVideo * SOAP_FMAC4 soap_get___ns1__startVideo(struct soap*, struct __ns1__startVideo *, const char*, const char*);

inline int soap_read___ns1__startVideo(struct soap *soap, struct __ns1__startVideo *p)
{	if (p)
	{	soap_default___ns1__startVideo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__startVideo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__unmuteAudio_DEFINED
#define SOAP_TYPE___ns1__unmuteAudio_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__unmuteAudio(struct soap*, struct __ns1__unmuteAudio *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__unmuteAudio(struct soap*, const struct __ns1__unmuteAudio *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__unmuteAudio(struct soap*, const char*, int, const struct __ns1__unmuteAudio *, const char*);
SOAP_FMAC3 struct __ns1__unmuteAudio * SOAP_FMAC4 soap_in___ns1__unmuteAudio(struct soap*, const char*, struct __ns1__unmuteAudio *, const char*);
SOAP_FMAC1 struct __ns1__unmuteAudio * SOAP_FMAC2 soap_instantiate___ns1__unmuteAudio(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__unmuteAudio * soap_new___ns1__unmuteAudio(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__unmuteAudio(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__unmuteAudio * soap_new_req___ns1__unmuteAudio(
	struct soap *soap)
{	struct __ns1__unmuteAudio *_p = soap_new___ns1__unmuteAudio(soap);
	if (_p)
	{	soap_default___ns1__unmuteAudio(soap, _p);
	}
	return _p;
}

inline struct __ns1__unmuteAudio * soap_new_set___ns1__unmuteAudio(
	struct soap *soap,
	_ns1__UnmuteAudioRequest *ns1__UnmuteAudioRequest)
{	struct __ns1__unmuteAudio *_p = soap_new___ns1__unmuteAudio(soap);
	if (_p)
	{	soap_default___ns1__unmuteAudio(soap, _p);
		_p->ns1__UnmuteAudioRequest = ns1__UnmuteAudioRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__unmuteAudio(struct soap*, const struct __ns1__unmuteAudio *, const char*, const char*);

inline int soap_write___ns1__unmuteAudio(struct soap *soap, struct __ns1__unmuteAudio const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__unmuteAudio(soap, p), 0) || soap_put___ns1__unmuteAudio(soap, p, "-ns1:unmuteAudio", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__unmuteAudio * SOAP_FMAC4 soap_get___ns1__unmuteAudio(struct soap*, struct __ns1__unmuteAudio *, const char*, const char*);

inline int soap_read___ns1__unmuteAudio(struct soap *soap, struct __ns1__unmuteAudio *p)
{	if (p)
	{	soap_default___ns1__unmuteAudio(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__unmuteAudio(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__muteAudio_DEFINED
#define SOAP_TYPE___ns1__muteAudio_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__muteAudio(struct soap*, struct __ns1__muteAudio *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__muteAudio(struct soap*, const struct __ns1__muteAudio *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__muteAudio(struct soap*, const char*, int, const struct __ns1__muteAudio *, const char*);
SOAP_FMAC3 struct __ns1__muteAudio * SOAP_FMAC4 soap_in___ns1__muteAudio(struct soap*, const char*, struct __ns1__muteAudio *, const char*);
SOAP_FMAC1 struct __ns1__muteAudio * SOAP_FMAC2 soap_instantiate___ns1__muteAudio(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__muteAudio * soap_new___ns1__muteAudio(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__muteAudio(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__muteAudio * soap_new_req___ns1__muteAudio(
	struct soap *soap)
{	struct __ns1__muteAudio *_p = soap_new___ns1__muteAudio(soap);
	if (_p)
	{	soap_default___ns1__muteAudio(soap, _p);
	}
	return _p;
}

inline struct __ns1__muteAudio * soap_new_set___ns1__muteAudio(
	struct soap *soap,
	_ns1__MuteAudioRequest *ns1__MuteAudioRequest)
{	struct __ns1__muteAudio *_p = soap_new___ns1__muteAudio(soap);
	if (_p)
	{	soap_default___ns1__muteAudio(soap, _p);
		_p->ns1__MuteAudioRequest = ns1__MuteAudioRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__muteAudio(struct soap*, const struct __ns1__muteAudio *, const char*, const char*);

inline int soap_write___ns1__muteAudio(struct soap *soap, struct __ns1__muteAudio const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__muteAudio(soap, p), 0) || soap_put___ns1__muteAudio(soap, p, "-ns1:muteAudio", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__muteAudio * SOAP_FMAC4 soap_get___ns1__muteAudio(struct soap*, struct __ns1__muteAudio *, const char*, const char*);

inline int soap_read___ns1__muteAudio(struct soap *soap, struct __ns1__muteAudio *p)
{	if (p)
	{	soap_default___ns1__muteAudio(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__muteAudio(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__leaveConference_DEFINED
#define SOAP_TYPE___ns1__leaveConference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__leaveConference(struct soap*, struct __ns1__leaveConference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__leaveConference(struct soap*, const struct __ns1__leaveConference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__leaveConference(struct soap*, const char*, int, const struct __ns1__leaveConference *, const char*);
SOAP_FMAC3 struct __ns1__leaveConference * SOAP_FMAC4 soap_in___ns1__leaveConference(struct soap*, const char*, struct __ns1__leaveConference *, const char*);
SOAP_FMAC1 struct __ns1__leaveConference * SOAP_FMAC2 soap_instantiate___ns1__leaveConference(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__leaveConference * soap_new___ns1__leaveConference(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__leaveConference(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__leaveConference * soap_new_req___ns1__leaveConference(
	struct soap *soap)
{	struct __ns1__leaveConference *_p = soap_new___ns1__leaveConference(soap);
	if (_p)
	{	soap_default___ns1__leaveConference(soap, _p);
	}
	return _p;
}

inline struct __ns1__leaveConference * soap_new_set___ns1__leaveConference(
	struct soap *soap,
	_ns1__LeaveConferenceRequest *ns1__LeaveConferenceRequest)
{	struct __ns1__leaveConference *_p = soap_new___ns1__leaveConference(soap);
	if (_p)
	{	soap_default___ns1__leaveConference(soap, _p);
		_p->ns1__LeaveConferenceRequest = ns1__LeaveConferenceRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__leaveConference(struct soap*, const struct __ns1__leaveConference *, const char*, const char*);

inline int soap_write___ns1__leaveConference(struct soap *soap, struct __ns1__leaveConference const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__leaveConference(soap, p), 0) || soap_put___ns1__leaveConference(soap, p, "-ns1:leaveConference", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__leaveConference * SOAP_FMAC4 soap_get___ns1__leaveConference(struct soap*, struct __ns1__leaveConference *, const char*, const char*);

inline int soap_read___ns1__leaveConference(struct soap *soap, struct __ns1__leaveConference *p)
{	if (p)
	{	soap_default___ns1__leaveConference(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__leaveConference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getLectureModeParticipants_DEFINED
#define SOAP_TYPE___ns1__getLectureModeParticipants_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getLectureModeParticipants(struct soap*, struct __ns1__getLectureModeParticipants *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getLectureModeParticipants(struct soap*, const struct __ns1__getLectureModeParticipants *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getLectureModeParticipants(struct soap*, const char*, int, const struct __ns1__getLectureModeParticipants *, const char*);
SOAP_FMAC3 struct __ns1__getLectureModeParticipants * SOAP_FMAC4 soap_in___ns1__getLectureModeParticipants(struct soap*, const char*, struct __ns1__getLectureModeParticipants *, const char*);
SOAP_FMAC1 struct __ns1__getLectureModeParticipants * SOAP_FMAC2 soap_instantiate___ns1__getLectureModeParticipants(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getLectureModeParticipants * soap_new___ns1__getLectureModeParticipants(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getLectureModeParticipants(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getLectureModeParticipants * soap_new_req___ns1__getLectureModeParticipants(
	struct soap *soap)
{	struct __ns1__getLectureModeParticipants *_p = soap_new___ns1__getLectureModeParticipants(soap);
	if (_p)
	{	soap_default___ns1__getLectureModeParticipants(soap, _p);
	}
	return _p;
}

inline struct __ns1__getLectureModeParticipants * soap_new_set___ns1__getLectureModeParticipants(
	struct soap *soap,
	_ns1__GetLectureModeParticipantsRequest *ns1__GetLectureModeParticipantsRequest)
{	struct __ns1__getLectureModeParticipants *_p = soap_new___ns1__getLectureModeParticipants(soap);
	if (_p)
	{	soap_default___ns1__getLectureModeParticipants(soap, _p);
		_p->ns1__GetLectureModeParticipantsRequest = ns1__GetLectureModeParticipantsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getLectureModeParticipants(struct soap*, const struct __ns1__getLectureModeParticipants *, const char*, const char*);

inline int soap_write___ns1__getLectureModeParticipants(struct soap *soap, struct __ns1__getLectureModeParticipants const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getLectureModeParticipants(soap, p), 0) || soap_put___ns1__getLectureModeParticipants(soap, p, "-ns1:getLectureModeParticipants", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getLectureModeParticipants * SOAP_FMAC4 soap_get___ns1__getLectureModeParticipants(struct soap*, struct __ns1__getLectureModeParticipants *, const char*, const char*);

inline int soap_read___ns1__getLectureModeParticipants(struct soap *soap, struct __ns1__getLectureModeParticipants *p)
{	if (p)
	{	soap_default___ns1__getLectureModeParticipants(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getLectureModeParticipants(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getParticipants_DEFINED
#define SOAP_TYPE___ns1__getParticipants_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getParticipants(struct soap*, struct __ns1__getParticipants *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getParticipants(struct soap*, const struct __ns1__getParticipants *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getParticipants(struct soap*, const char*, int, const struct __ns1__getParticipants *, const char*);
SOAP_FMAC3 struct __ns1__getParticipants * SOAP_FMAC4 soap_in___ns1__getParticipants(struct soap*, const char*, struct __ns1__getParticipants *, const char*);
SOAP_FMAC1 struct __ns1__getParticipants * SOAP_FMAC2 soap_instantiate___ns1__getParticipants(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getParticipants * soap_new___ns1__getParticipants(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getParticipants(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getParticipants * soap_new_req___ns1__getParticipants(
	struct soap *soap)
{	struct __ns1__getParticipants *_p = soap_new___ns1__getParticipants(soap);
	if (_p)
	{	soap_default___ns1__getParticipants(soap, _p);
	}
	return _p;
}

inline struct __ns1__getParticipants * soap_new_set___ns1__getParticipants(
	struct soap *soap,
	_ns1__GetParticipantsRequest *ns1__GetParticipantsRequest)
{	struct __ns1__getParticipants *_p = soap_new___ns1__getParticipants(soap);
	if (_p)
	{	soap_default___ns1__getParticipants(soap, _p);
		_p->ns1__GetParticipantsRequest = ns1__GetParticipantsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getParticipants(struct soap*, const struct __ns1__getParticipants *, const char*, const char*);

inline int soap_write___ns1__getParticipants(struct soap *soap, struct __ns1__getParticipants const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getParticipants(soap, p), 0) || soap_put___ns1__getParticipants(soap, p, "-ns1:getParticipants", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getParticipants * SOAP_FMAC4 soap_get___ns1__getParticipants(struct soap*, struct __ns1__getParticipants *, const char*, const char*);

inline int soap_read___ns1__getParticipants(struct soap *soap, struct __ns1__getParticipants *p)
{	if (p)
	{	soap_default___ns1__getParticipants(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getParticipants(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__directCall_DEFINED
#define SOAP_TYPE___ns1__directCall_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__directCall(struct soap*, struct __ns1__directCall *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__directCall(struct soap*, const struct __ns1__directCall *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__directCall(struct soap*, const char*, int, const struct __ns1__directCall *, const char*);
SOAP_FMAC3 struct __ns1__directCall * SOAP_FMAC4 soap_in___ns1__directCall(struct soap*, const char*, struct __ns1__directCall *, const char*);
SOAP_FMAC1 struct __ns1__directCall * SOAP_FMAC2 soap_instantiate___ns1__directCall(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__directCall * soap_new___ns1__directCall(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__directCall(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__directCall * soap_new_req___ns1__directCall(
	struct soap *soap)
{	struct __ns1__directCall *_p = soap_new___ns1__directCall(soap);
	if (_p)
	{	soap_default___ns1__directCall(soap, _p);
	}
	return _p;
}

inline struct __ns1__directCall * soap_new_set___ns1__directCall(
	struct soap *soap,
	_ns1__DirectCallRequest *ns1__DirectCallRequest)
{	struct __ns1__directCall *_p = soap_new___ns1__directCall(soap);
	if (_p)
	{	soap_default___ns1__directCall(soap, _p);
		_p->ns1__DirectCallRequest = ns1__DirectCallRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__directCall(struct soap*, const struct __ns1__directCall *, const char*, const char*);

inline int soap_write___ns1__directCall(struct soap *soap, struct __ns1__directCall const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__directCall(soap, p), 0) || soap_put___ns1__directCall(soap, p, "-ns1:directCall", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__directCall * SOAP_FMAC4 soap_get___ns1__directCall(struct soap*, struct __ns1__directCall *, const char*, const char*);

inline int soap_read___ns1__directCall(struct soap *soap, struct __ns1__directCall *p)
{	if (p)
	{	soap_default___ns1__directCall(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__directCall(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__joinIPCConference_DEFINED
#define SOAP_TYPE___ns1__joinIPCConference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__joinIPCConference(struct soap*, struct __ns1__joinIPCConference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__joinIPCConference(struct soap*, const struct __ns1__joinIPCConference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__joinIPCConference(struct soap*, const char*, int, const struct __ns1__joinIPCConference *, const char*);
SOAP_FMAC3 struct __ns1__joinIPCConference * SOAP_FMAC4 soap_in___ns1__joinIPCConference(struct soap*, const char*, struct __ns1__joinIPCConference *, const char*);
SOAP_FMAC1 struct __ns1__joinIPCConference * SOAP_FMAC2 soap_instantiate___ns1__joinIPCConference(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__joinIPCConference * soap_new___ns1__joinIPCConference(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__joinIPCConference(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__joinIPCConference * soap_new_req___ns1__joinIPCConference(
	struct soap *soap)
{	struct __ns1__joinIPCConference *_p = soap_new___ns1__joinIPCConference(soap);
	if (_p)
	{	soap_default___ns1__joinIPCConference(soap, _p);
	}
	return _p;
}

inline struct __ns1__joinIPCConference * soap_new_set___ns1__joinIPCConference(
	struct soap *soap,
	_ns1__JoinIPCConferenceRequest *ns1__JoinIPCConferenceRequest)
{	struct __ns1__joinIPCConference *_p = soap_new___ns1__joinIPCConference(soap);
	if (_p)
	{	soap_default___ns1__joinIPCConference(soap, _p);
		_p->ns1__JoinIPCConferenceRequest = ns1__JoinIPCConferenceRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__joinIPCConference(struct soap*, const struct __ns1__joinIPCConference *, const char*, const char*);

inline int soap_write___ns1__joinIPCConference(struct soap *soap, struct __ns1__joinIPCConference const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__joinIPCConference(soap, p), 0) || soap_put___ns1__joinIPCConference(soap, p, "-ns1:joinIPCConference", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__joinIPCConference * SOAP_FMAC4 soap_get___ns1__joinIPCConference(struct soap*, struct __ns1__joinIPCConference *, const char*, const char*);

inline int soap_read___ns1__joinIPCConference(struct soap *soap, struct __ns1__joinIPCConference *p)
{	if (p)
	{	soap_default___ns1__joinIPCConference(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__joinIPCConference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__joinConference_DEFINED
#define SOAP_TYPE___ns1__joinConference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__joinConference(struct soap*, struct __ns1__joinConference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__joinConference(struct soap*, const struct __ns1__joinConference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__joinConference(struct soap*, const char*, int, const struct __ns1__joinConference *, const char*);
SOAP_FMAC3 struct __ns1__joinConference * SOAP_FMAC4 soap_in___ns1__joinConference(struct soap*, const char*, struct __ns1__joinConference *, const char*);
SOAP_FMAC1 struct __ns1__joinConference * SOAP_FMAC2 soap_instantiate___ns1__joinConference(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__joinConference * soap_new___ns1__joinConference(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__joinConference(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__joinConference * soap_new_req___ns1__joinConference(
	struct soap *soap)
{	struct __ns1__joinConference *_p = soap_new___ns1__joinConference(soap);
	if (_p)
	{	soap_default___ns1__joinConference(soap, _p);
	}
	return _p;
}

inline struct __ns1__joinConference * soap_new_set___ns1__joinConference(
	struct soap *soap,
	_ns1__JoinConferenceRequest *ns1__JoinConferenceRequest)
{	struct __ns1__joinConference *_p = soap_new___ns1__joinConference(soap);
	if (_p)
	{	soap_default___ns1__joinConference(soap, _p);
		_p->ns1__JoinConferenceRequest = ns1__JoinConferenceRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__joinConference(struct soap*, const struct __ns1__joinConference *, const char*, const char*);

inline int soap_write___ns1__joinConference(struct soap *soap, struct __ns1__joinConference const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__joinConference(soap, p), 0) || soap_put___ns1__joinConference(soap, p, "-ns1:joinConference", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__joinConference * SOAP_FMAC4 soap_get___ns1__joinConference(struct soap*, struct __ns1__joinConference *, const char*, const char*);

inline int soap_read___ns1__joinConference(struct soap *soap, struct __ns1__joinConference *p)
{	if (p)
	{	soap_default___ns1__joinConference(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__joinConference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__cancelOutboundCall_DEFINED
#define SOAP_TYPE___ns1__cancelOutboundCall_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__cancelOutboundCall(struct soap*, struct __ns1__cancelOutboundCall *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__cancelOutboundCall(struct soap*, const struct __ns1__cancelOutboundCall *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__cancelOutboundCall(struct soap*, const char*, int, const struct __ns1__cancelOutboundCall *, const char*);
SOAP_FMAC3 struct __ns1__cancelOutboundCall * SOAP_FMAC4 soap_in___ns1__cancelOutboundCall(struct soap*, const char*, struct __ns1__cancelOutboundCall *, const char*);
SOAP_FMAC1 struct __ns1__cancelOutboundCall * SOAP_FMAC2 soap_instantiate___ns1__cancelOutboundCall(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__cancelOutboundCall * soap_new___ns1__cancelOutboundCall(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__cancelOutboundCall(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__cancelOutboundCall * soap_new_req___ns1__cancelOutboundCall(
	struct soap *soap)
{	struct __ns1__cancelOutboundCall *_p = soap_new___ns1__cancelOutboundCall(soap);
	if (_p)
	{	soap_default___ns1__cancelOutboundCall(soap, _p);
	}
	return _p;
}

inline struct __ns1__cancelOutboundCall * soap_new_set___ns1__cancelOutboundCall(
	struct soap *soap,
	_ns1__CancelOutboundCallRequest *ns1__CancelOutboundCallRequest)
{	struct __ns1__cancelOutboundCall *_p = soap_new___ns1__cancelOutboundCall(soap);
	if (_p)
	{	soap_default___ns1__cancelOutboundCall(soap, _p);
		_p->ns1__CancelOutboundCallRequest = ns1__CancelOutboundCallRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__cancelOutboundCall(struct soap*, const struct __ns1__cancelOutboundCall *, const char*, const char*);

inline int soap_write___ns1__cancelOutboundCall(struct soap *soap, struct __ns1__cancelOutboundCall const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__cancelOutboundCall(soap, p), 0) || soap_put___ns1__cancelOutboundCall(soap, p, "-ns1:cancelOutboundCall", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__cancelOutboundCall * SOAP_FMAC4 soap_get___ns1__cancelOutboundCall(struct soap*, struct __ns1__cancelOutboundCall *, const char*, const char*);

inline int soap_read___ns1__cancelOutboundCall(struct soap *soap, struct __ns1__cancelOutboundCall *p)
{	if (p)
	{	soap_default___ns1__cancelOutboundCall(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__cancelOutboundCall(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__inviteToConference_DEFINED
#define SOAP_TYPE___ns1__inviteToConference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__inviteToConference(struct soap*, struct __ns1__inviteToConference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__inviteToConference(struct soap*, const struct __ns1__inviteToConference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__inviteToConference(struct soap*, const char*, int, const struct __ns1__inviteToConference *, const char*);
SOAP_FMAC3 struct __ns1__inviteToConference * SOAP_FMAC4 soap_in___ns1__inviteToConference(struct soap*, const char*, struct __ns1__inviteToConference *, const char*);
SOAP_FMAC1 struct __ns1__inviteToConference * SOAP_FMAC2 soap_instantiate___ns1__inviteToConference(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__inviteToConference * soap_new___ns1__inviteToConference(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__inviteToConference(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__inviteToConference * soap_new_req___ns1__inviteToConference(
	struct soap *soap)
{	struct __ns1__inviteToConference *_p = soap_new___ns1__inviteToConference(soap);
	if (_p)
	{	soap_default___ns1__inviteToConference(soap, _p);
	}
	return _p;
}

inline struct __ns1__inviteToConference * soap_new_set___ns1__inviteToConference(
	struct soap *soap,
	_ns1__InviteToConferenceRequest *ns1__InviteToConferenceRequest)
{	struct __ns1__inviteToConference *_p = soap_new___ns1__inviteToConference(soap);
	if (_p)
	{	soap_default___ns1__inviteToConference(soap, _p);
		_p->ns1__InviteToConferenceRequest = ns1__InviteToConferenceRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__inviteToConference(struct soap*, const struct __ns1__inviteToConference *, const char*, const char*);

inline int soap_write___ns1__inviteToConference(struct soap *soap, struct __ns1__inviteToConference const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__inviteToConference(soap, p), 0) || soap_put___ns1__inviteToConference(soap, p, "-ns1:inviteToConference", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__inviteToConference * SOAP_FMAC4 soap_get___ns1__inviteToConference(struct soap*, struct __ns1__inviteToConference *, const char*, const char*);

inline int soap_read___ns1__inviteToConference(struct soap *soap, struct __ns1__inviteToConference *p)
{	if (p)
	{	soap_default___ns1__inviteToConference(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__inviteToConference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getEntityByEntityID_DEFINED
#define SOAP_TYPE___ns1__getEntityByEntityID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getEntityByEntityID(struct soap*, struct __ns1__getEntityByEntityID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getEntityByEntityID(struct soap*, const struct __ns1__getEntityByEntityID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getEntityByEntityID(struct soap*, const char*, int, const struct __ns1__getEntityByEntityID *, const char*);
SOAP_FMAC3 struct __ns1__getEntityByEntityID * SOAP_FMAC4 soap_in___ns1__getEntityByEntityID(struct soap*, const char*, struct __ns1__getEntityByEntityID *, const char*);
SOAP_FMAC1 struct __ns1__getEntityByEntityID * SOAP_FMAC2 soap_instantiate___ns1__getEntityByEntityID(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getEntityByEntityID * soap_new___ns1__getEntityByEntityID(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__getEntityByEntityID(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getEntityByEntityID * soap_new_req___ns1__getEntityByEntityID(
	struct soap *soap)
{	struct __ns1__getEntityByEntityID *_p = soap_new___ns1__getEntityByEntityID(soap);
	if (_p)
	{	soap_default___ns1__getEntityByEntityID(soap, _p);
	}
	return _p;
}

inline struct __ns1__getEntityByEntityID * soap_new_set___ns1__getEntityByEntityID(
	struct soap *soap,
	_ns1__GetEntityByEntityIDRequest *ns1__GetEntityByEntityIDRequest)
{	struct __ns1__getEntityByEntityID *_p = soap_new___ns1__getEntityByEntityID(soap);
	if (_p)
	{	soap_default___ns1__getEntityByEntityID(soap, _p);
		_p->ns1__GetEntityByEntityIDRequest = ns1__GetEntityByEntityIDRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getEntityByEntityID(struct soap*, const struct __ns1__getEntityByEntityID *, const char*, const char*);

inline int soap_write___ns1__getEntityByEntityID(struct soap *soap, struct __ns1__getEntityByEntityID const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getEntityByEntityID(soap, p), 0) || soap_put___ns1__getEntityByEntityID(soap, p, "-ns1:getEntityByEntityID", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getEntityByEntityID * SOAP_FMAC4 soap_get___ns1__getEntityByEntityID(struct soap*, struct __ns1__getEntityByEntityID *, const char*, const char*);

inline int soap_read___ns1__getEntityByEntityID(struct soap *soap, struct __ns1__getEntityByEntityID *p)
{	if (p)
	{	soap_default___ns1__getEntityByEntityID(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getEntityByEntityID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__searchByEmail_DEFINED
#define SOAP_TYPE___ns1__searchByEmail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__searchByEmail(struct soap*, struct __ns1__searchByEmail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__searchByEmail(struct soap*, const struct __ns1__searchByEmail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__searchByEmail(struct soap*, const char*, int, const struct __ns1__searchByEmail *, const char*);
SOAP_FMAC3 struct __ns1__searchByEmail * SOAP_FMAC4 soap_in___ns1__searchByEmail(struct soap*, const char*, struct __ns1__searchByEmail *, const char*);
SOAP_FMAC1 struct __ns1__searchByEmail * SOAP_FMAC2 soap_instantiate___ns1__searchByEmail(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__searchByEmail * soap_new___ns1__searchByEmail(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__searchByEmail(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__searchByEmail * soap_new_req___ns1__searchByEmail(
	struct soap *soap)
{	struct __ns1__searchByEmail *_p = soap_new___ns1__searchByEmail(soap);
	if (_p)
	{	soap_default___ns1__searchByEmail(soap, _p);
	}
	return _p;
}

inline struct __ns1__searchByEmail * soap_new_set___ns1__searchByEmail(
	struct soap *soap,
	_ns1__SearchByEmailRequest *ns1__SearchByEmailRequest)
{	struct __ns1__searchByEmail *_p = soap_new___ns1__searchByEmail(soap);
	if (_p)
	{	soap_default___ns1__searchByEmail(soap, _p);
		_p->ns1__SearchByEmailRequest = ns1__SearchByEmailRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__searchByEmail(struct soap*, const struct __ns1__searchByEmail *, const char*, const char*);

inline int soap_write___ns1__searchByEmail(struct soap *soap, struct __ns1__searchByEmail const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__searchByEmail(soap, p), 0) || soap_put___ns1__searchByEmail(soap, p, "-ns1:searchByEmail", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__searchByEmail * SOAP_FMAC4 soap_get___ns1__searchByEmail(struct soap*, struct __ns1__searchByEmail *, const char*, const char*);

inline int soap_read___ns1__searchByEmail(struct soap *soap, struct __ns1__searchByEmail *p)
{	if (p)
	{	soap_default___ns1__searchByEmail(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__searchByEmail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__searchByEntityID_DEFINED
#define SOAP_TYPE___ns1__searchByEntityID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__searchByEntityID(struct soap*, struct __ns1__searchByEntityID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__searchByEntityID(struct soap*, const struct __ns1__searchByEntityID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__searchByEntityID(struct soap*, const char*, int, const struct __ns1__searchByEntityID *, const char*);
SOAP_FMAC3 struct __ns1__searchByEntityID * SOAP_FMAC4 soap_in___ns1__searchByEntityID(struct soap*, const char*, struct __ns1__searchByEntityID *, const char*);
SOAP_FMAC1 struct __ns1__searchByEntityID * SOAP_FMAC2 soap_instantiate___ns1__searchByEntityID(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__searchByEntityID * soap_new___ns1__searchByEntityID(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__searchByEntityID(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__searchByEntityID * soap_new_req___ns1__searchByEntityID(
	struct soap *soap)
{	struct __ns1__searchByEntityID *_p = soap_new___ns1__searchByEntityID(soap);
	if (_p)
	{	soap_default___ns1__searchByEntityID(soap, _p);
	}
	return _p;
}

inline struct __ns1__searchByEntityID * soap_new_set___ns1__searchByEntityID(
	struct soap *soap,
	_ns1__SearchByEntityIDRequest *ns1__SearchByEntityIDRequest)
{	struct __ns1__searchByEntityID *_p = soap_new___ns1__searchByEntityID(soap);
	if (_p)
	{	soap_default___ns1__searchByEntityID(soap, _p);
		_p->ns1__SearchByEntityIDRequest = ns1__SearchByEntityIDRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__searchByEntityID(struct soap*, const struct __ns1__searchByEntityID *, const char*, const char*);

inline int soap_write___ns1__searchByEntityID(struct soap *soap, struct __ns1__searchByEntityID const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__searchByEntityID(soap, p), 0) || soap_put___ns1__searchByEntityID(soap, p, "-ns1:searchByEntityID", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__searchByEntityID * SOAP_FMAC4 soap_get___ns1__searchByEntityID(struct soap*, struct __ns1__searchByEntityID *, const char*, const char*);

inline int soap_read___ns1__searchByEntityID(struct soap *soap, struct __ns1__searchByEntityID *p)
{	if (p)
	{	soap_default___ns1__searchByEntityID(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__searchByEntityID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__search_DEFINED
#define SOAP_TYPE___ns1__search_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__search(struct soap*, struct __ns1__search *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__search(struct soap*, const struct __ns1__search *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__search(struct soap*, const char*, int, const struct __ns1__search *, const char*);
SOAP_FMAC3 struct __ns1__search * SOAP_FMAC4 soap_in___ns1__search(struct soap*, const char*, struct __ns1__search *, const char*);
SOAP_FMAC1 struct __ns1__search * SOAP_FMAC2 soap_instantiate___ns1__search(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__search * soap_new___ns1__search(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__search(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__search * soap_new_req___ns1__search(
	struct soap *soap)
{	struct __ns1__search *_p = soap_new___ns1__search(soap);
	if (_p)
	{	soap_default___ns1__search(soap, _p);
	}
	return _p;
}

inline struct __ns1__search * soap_new_set___ns1__search(
	struct soap *soap,
	_ns1__SearchRequest *ns1__SearchRequest)
{	struct __ns1__search *_p = soap_new___ns1__search(soap);
	if (_p)
	{	soap_default___ns1__search(soap, _p);
		_p->ns1__SearchRequest = ns1__SearchRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__search(struct soap*, const struct __ns1__search *, const char*, const char*);

inline int soap_write___ns1__search(struct soap *soap, struct __ns1__search const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__search(soap, p), 0) || soap_put___ns1__search(soap, p, "-ns1:search", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__search * SOAP_FMAC4 soap_get___ns1__search(struct soap*, struct __ns1__search *, const char*, const char*);

inline int soap_read___ns1__search(struct soap *soap, struct __ns1__search *p)
{	if (p)
	{	soap_default___ns1__search(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__search(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__removeFromMyContacts_DEFINED
#define SOAP_TYPE___ns1__removeFromMyContacts_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeFromMyContacts(struct soap*, struct __ns1__removeFromMyContacts *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeFromMyContacts(struct soap*, const struct __ns1__removeFromMyContacts *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeFromMyContacts(struct soap*, const char*, int, const struct __ns1__removeFromMyContacts *, const char*);
SOAP_FMAC3 struct __ns1__removeFromMyContacts * SOAP_FMAC4 soap_in___ns1__removeFromMyContacts(struct soap*, const char*, struct __ns1__removeFromMyContacts *, const char*);
SOAP_FMAC1 struct __ns1__removeFromMyContacts * SOAP_FMAC2 soap_instantiate___ns1__removeFromMyContacts(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__removeFromMyContacts * soap_new___ns1__removeFromMyContacts(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__removeFromMyContacts(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__removeFromMyContacts * soap_new_req___ns1__removeFromMyContacts(
	struct soap *soap)
{	struct __ns1__removeFromMyContacts *_p = soap_new___ns1__removeFromMyContacts(soap);
	if (_p)
	{	soap_default___ns1__removeFromMyContacts(soap, _p);
	}
	return _p;
}

inline struct __ns1__removeFromMyContacts * soap_new_set___ns1__removeFromMyContacts(
	struct soap *soap,
	_ns1__RemoveFromMyContactsRequest *ns1__RemoveFromMyContactsRequest)
{	struct __ns1__removeFromMyContacts *_p = soap_new___ns1__removeFromMyContacts(soap);
	if (_p)
	{	soap_default___ns1__removeFromMyContacts(soap, _p);
		_p->ns1__RemoveFromMyContactsRequest = ns1__RemoveFromMyContactsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeFromMyContacts(struct soap*, const struct __ns1__removeFromMyContacts *, const char*, const char*);

inline int soap_write___ns1__removeFromMyContacts(struct soap *soap, struct __ns1__removeFromMyContacts const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__removeFromMyContacts(soap, p), 0) || soap_put___ns1__removeFromMyContacts(soap, p, "-ns1:removeFromMyContacts", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__removeFromMyContacts * SOAP_FMAC4 soap_get___ns1__removeFromMyContacts(struct soap*, struct __ns1__removeFromMyContacts *, const char*, const char*);

inline int soap_read___ns1__removeFromMyContacts(struct soap *soap, struct __ns1__removeFromMyContacts *p)
{	if (p)
	{	soap_default___ns1__removeFromMyContacts(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__removeFromMyContacts(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__addToMyContacts_DEFINED
#define SOAP_TYPE___ns1__addToMyContacts_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__addToMyContacts(struct soap*, struct __ns1__addToMyContacts *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__addToMyContacts(struct soap*, const struct __ns1__addToMyContacts *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__addToMyContacts(struct soap*, const char*, int, const struct __ns1__addToMyContacts *, const char*);
SOAP_FMAC3 struct __ns1__addToMyContacts * SOAP_FMAC4 soap_in___ns1__addToMyContacts(struct soap*, const char*, struct __ns1__addToMyContacts *, const char*);
SOAP_FMAC1 struct __ns1__addToMyContacts * SOAP_FMAC2 soap_instantiate___ns1__addToMyContacts(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__addToMyContacts * soap_new___ns1__addToMyContacts(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__addToMyContacts(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__addToMyContacts * soap_new_req___ns1__addToMyContacts(
	struct soap *soap)
{	struct __ns1__addToMyContacts *_p = soap_new___ns1__addToMyContacts(soap);
	if (_p)
	{	soap_default___ns1__addToMyContacts(soap, _p);
	}
	return _p;
}

inline struct __ns1__addToMyContacts * soap_new_set___ns1__addToMyContacts(
	struct soap *soap,
	_ns1__AddToMyContactsRequest *ns1__AddToMyContactsRequest)
{	struct __ns1__addToMyContacts *_p = soap_new___ns1__addToMyContacts(soap);
	if (_p)
	{	soap_default___ns1__addToMyContacts(soap, _p);
		_p->ns1__AddToMyContactsRequest = ns1__AddToMyContactsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__addToMyContacts(struct soap*, const struct __ns1__addToMyContacts *, const char*, const char*);

inline int soap_write___ns1__addToMyContacts(struct soap *soap, struct __ns1__addToMyContacts const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__addToMyContacts(soap, p), 0) || soap_put___ns1__addToMyContacts(soap, p, "-ns1:addToMyContacts", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__addToMyContacts * SOAP_FMAC4 soap_get___ns1__addToMyContacts(struct soap*, struct __ns1__addToMyContacts *, const char*, const char*);

inline int soap_read___ns1__addToMyContacts(struct soap *soap, struct __ns1__addToMyContacts *p)
{	if (p)
	{	soap_default___ns1__addToMyContacts(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__addToMyContacts(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__searchMyContacts_DEFINED
#define SOAP_TYPE___ns1__searchMyContacts_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__searchMyContacts(struct soap*, struct __ns1__searchMyContacts *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__searchMyContacts(struct soap*, const struct __ns1__searchMyContacts *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__searchMyContacts(struct soap*, const char*, int, const struct __ns1__searchMyContacts *, const char*);
SOAP_FMAC3 struct __ns1__searchMyContacts * SOAP_FMAC4 soap_in___ns1__searchMyContacts(struct soap*, const char*, struct __ns1__searchMyContacts *, const char*);
SOAP_FMAC1 struct __ns1__searchMyContacts * SOAP_FMAC2 soap_instantiate___ns1__searchMyContacts(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__searchMyContacts * soap_new___ns1__searchMyContacts(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__searchMyContacts(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__searchMyContacts * soap_new_req___ns1__searchMyContacts(
	struct soap *soap)
{	struct __ns1__searchMyContacts *_p = soap_new___ns1__searchMyContacts(soap);
	if (_p)
	{	soap_default___ns1__searchMyContacts(soap, _p);
	}
	return _p;
}

inline struct __ns1__searchMyContacts * soap_new_set___ns1__searchMyContacts(
	struct soap *soap,
	_ns1__SearchMyContactsRequest *ns1__SearchMyContactsRequest)
{	struct __ns1__searchMyContacts *_p = soap_new___ns1__searchMyContacts(soap);
	if (_p)
	{	soap_default___ns1__searchMyContacts(soap, _p);
		_p->ns1__SearchMyContactsRequest = ns1__SearchMyContactsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__searchMyContacts(struct soap*, const struct __ns1__searchMyContacts *, const char*, const char*);

inline int soap_write___ns1__searchMyContacts(struct soap *soap, struct __ns1__searchMyContacts const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__searchMyContacts(soap, p), 0) || soap_put___ns1__searchMyContacts(soap, p, "-ns1:searchMyContacts", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__searchMyContacts * SOAP_FMAC4 soap_get___ns1__searchMyContacts(struct soap*, struct __ns1__searchMyContacts *, const char*, const char*);

inline int soap_read___ns1__searchMyContacts(struct soap *soap, struct __ns1__searchMyContacts *p)
{	if (p)
	{	soap_default___ns1__searchMyContacts(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__searchMyContacts(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__myEndpointStatus_DEFINED
#define SOAP_TYPE___ns1__myEndpointStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__myEndpointStatus(struct soap*, struct __ns1__myEndpointStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__myEndpointStatus(struct soap*, const struct __ns1__myEndpointStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__myEndpointStatus(struct soap*, const char*, int, const struct __ns1__myEndpointStatus *, const char*);
SOAP_FMAC3 struct __ns1__myEndpointStatus * SOAP_FMAC4 soap_in___ns1__myEndpointStatus(struct soap*, const char*, struct __ns1__myEndpointStatus *, const char*);
SOAP_FMAC1 struct __ns1__myEndpointStatus * SOAP_FMAC2 soap_instantiate___ns1__myEndpointStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__myEndpointStatus * soap_new___ns1__myEndpointStatus(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__myEndpointStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__myEndpointStatus * soap_new_req___ns1__myEndpointStatus(
	struct soap *soap)
{	struct __ns1__myEndpointStatus *_p = soap_new___ns1__myEndpointStatus(soap);
	if (_p)
	{	soap_default___ns1__myEndpointStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__myEndpointStatus * soap_new_set___ns1__myEndpointStatus(
	struct soap *soap,
	_ns1__MyEndpointStatusRequest *ns1__MyEndpointStatusRequest)
{	struct __ns1__myEndpointStatus *_p = soap_new___ns1__myEndpointStatus(soap);
	if (_p)
	{	soap_default___ns1__myEndpointStatus(soap, _p);
		_p->ns1__MyEndpointStatusRequest = ns1__MyEndpointStatusRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__myEndpointStatus(struct soap*, const struct __ns1__myEndpointStatus *, const char*, const char*);

inline int soap_write___ns1__myEndpointStatus(struct soap *soap, struct __ns1__myEndpointStatus const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__myEndpointStatus(soap, p), 0) || soap_put___ns1__myEndpointStatus(soap, p, "-ns1:myEndpointStatus", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__myEndpointStatus * SOAP_FMAC4 soap_get___ns1__myEndpointStatus(struct soap*, struct __ns1__myEndpointStatus *, const char*, const char*);

inline int soap_read___ns1__myEndpointStatus(struct soap *soap, struct __ns1__myEndpointStatus *p)
{	if (p)
	{	soap_default___ns1__myEndpointStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__myEndpointStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__logOut_DEFINED
#define SOAP_TYPE___ns1__logOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logOut(struct soap*, struct __ns1__logOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logOut(struct soap*, const struct __ns1__logOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logOut(struct soap*, const char*, int, const struct __ns1__logOut *, const char*);
SOAP_FMAC3 struct __ns1__logOut * SOAP_FMAC4 soap_in___ns1__logOut(struct soap*, const char*, struct __ns1__logOut *, const char*);
SOAP_FMAC1 struct __ns1__logOut * SOAP_FMAC2 soap_instantiate___ns1__logOut(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__logOut * soap_new___ns1__logOut(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__logOut(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__logOut * soap_new_req___ns1__logOut(
	struct soap *soap)
{	struct __ns1__logOut *_p = soap_new___ns1__logOut(soap);
	if (_p)
	{	soap_default___ns1__logOut(soap, _p);
	}
	return _p;
}

inline struct __ns1__logOut * soap_new_set___ns1__logOut(
	struct soap *soap,
	_ns1__LogOutRequest *ns1__LogOutRequest)
{	struct __ns1__logOut *_p = soap_new___ns1__logOut(soap);
	if (_p)
	{	soap_default___ns1__logOut(soap, _p);
		_p->ns1__LogOutRequest = ns1__LogOutRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logOut(struct soap*, const struct __ns1__logOut *, const char*, const char*);

inline int soap_write___ns1__logOut(struct soap *soap, struct __ns1__logOut const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__logOut(soap, p), 0) || soap_put___ns1__logOut(soap, p, "-ns1:logOut", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__logOut * SOAP_FMAC4 soap_get___ns1__logOut(struct soap*, struct __ns1__logOut *, const char*, const char*);

inline int soap_read___ns1__logOut(struct soap *soap, struct __ns1__logOut *p)
{	if (p)
	{	soap_default___ns1__logOut(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__logOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__linkEndpoint_DEFINED
#define SOAP_TYPE___ns1__linkEndpoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__linkEndpoint(struct soap*, struct __ns1__linkEndpoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__linkEndpoint(struct soap*, const struct __ns1__linkEndpoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__linkEndpoint(struct soap*, const char*, int, const struct __ns1__linkEndpoint *, const char*);
SOAP_FMAC3 struct __ns1__linkEndpoint * SOAP_FMAC4 soap_in___ns1__linkEndpoint(struct soap*, const char*, struct __ns1__linkEndpoint *, const char*);
SOAP_FMAC1 struct __ns1__linkEndpoint * SOAP_FMAC2 soap_instantiate___ns1__linkEndpoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__linkEndpoint * soap_new___ns1__linkEndpoint(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__linkEndpoint(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__linkEndpoint * soap_new_req___ns1__linkEndpoint(
	struct soap *soap)
{	struct __ns1__linkEndpoint *_p = soap_new___ns1__linkEndpoint(soap);
	if (_p)
	{	soap_default___ns1__linkEndpoint(soap, _p);
	}
	return _p;
}

inline struct __ns1__linkEndpoint * soap_new_set___ns1__linkEndpoint(
	struct soap *soap,
	_ns1__LinkEndpointRequest *ns1__LinkEndpointRequest)
{	struct __ns1__linkEndpoint *_p = soap_new___ns1__linkEndpoint(soap);
	if (_p)
	{	soap_default___ns1__linkEndpoint(soap, _p);
		_p->ns1__LinkEndpointRequest = ns1__LinkEndpointRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__linkEndpoint(struct soap*, const struct __ns1__linkEndpoint *, const char*, const char*);

inline int soap_write___ns1__linkEndpoint(struct soap *soap, struct __ns1__linkEndpoint const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__linkEndpoint(soap, p), 0) || soap_put___ns1__linkEndpoint(soap, p, "-ns1:linkEndpoint", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__linkEndpoint * SOAP_FMAC4 soap_get___ns1__linkEndpoint(struct soap*, struct __ns1__linkEndpoint *, const char*, const char*);

inline int soap_read___ns1__linkEndpoint(struct soap *soap, struct __ns1__linkEndpoint *p)
{	if (p)
	{	soap_default___ns1__linkEndpoint(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__linkEndpoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__logIn_DEFINED
#define SOAP_TYPE___ns1__logIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logIn(struct soap*, struct __ns1__logIn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logIn(struct soap*, const struct __ns1__logIn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logIn(struct soap*, const char*, int, const struct __ns1__logIn *, const char*);
SOAP_FMAC3 struct __ns1__logIn * SOAP_FMAC4 soap_in___ns1__logIn(struct soap*, const char*, struct __ns1__logIn *, const char*);
SOAP_FMAC1 struct __ns1__logIn * SOAP_FMAC2 soap_instantiate___ns1__logIn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__logIn * soap_new___ns1__logIn(struct soap *soap, int n = -1)
{	return soap_instantiate___ns1__logIn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__logIn * soap_new_req___ns1__logIn(
	struct soap *soap)
{	struct __ns1__logIn *_p = soap_new___ns1__logIn(soap);
	if (_p)
	{	soap_default___ns1__logIn(soap, _p);
	}
	return _p;
}

inline struct __ns1__logIn * soap_new_set___ns1__logIn(
	struct soap *soap,
	_ns1__LogInRequest *ns1__LogInRequest)
{	struct __ns1__logIn *_p = soap_new___ns1__logIn(soap);
	if (_p)
	{	soap_default___ns1__logIn(soap, _p);
		_p->ns1__LogInRequest = ns1__LogInRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logIn(struct soap*, const struct __ns1__logIn *, const char*, const char*);

inline int soap_write___ns1__logIn(struct soap *soap, struct __ns1__logIn const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__logIn(soap, p), 0) || soap_put___ns1__logIn(soap, p, "-ns1:logIn", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__logIn * SOAP_FMAC4 soap_get___ns1__logIn(struct soap*, struct __ns1__logIn *, const char*, const char*);

inline int soap_read___ns1__logIn(struct soap *soap, struct __ns1__logIn *p)
{	if (p)
	{	soap_default___ns1__logIn(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__logIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	_ns1__AccessRestrictedFault *ns1__AccessRestrictedFault,
	_ns1__ConferenceLockedFault *ns1__ConferenceLockedFault,
	_ns1__ControlMeetingFault *ns1__ControlMeetingFault,
	_ns1__EndpointNotBoundFault *ns1__EndpointNotBoundFault,
	_ns1__FeatureNotAvailableFault *ns1__FeatureNotAvailableFault,
	_ns1__GeneralFault *ns1__GeneralFault,
	_ns1__InPointToPointCallFault *ns1__InPointToPointCallFault,
	_ns1__InvalidArgumentFault *ns1__InvalidArgumentFault,
	_ns1__InvalidModeratorPINFormatFault *ns1__InvalidModeratorPINFormatFault,
	_ns1__NotLicensedFault *ns1__NotLicensedFault,
	_ns1__PrefixNotConfiguredFault *ns1__PrefixNotConfiguredFault,
	_ns1__ResourceNotAvailableFault *ns1__ResourceNotAvailableFault,
	_ns1__RoomNotFoundFault *ns1__RoomNotFoundFault,
	_ns1__ScheduledRoomCreationFault *ns1__ScheduledRoomCreationFault,
	_ns1__SeatLicenseExpiredFault *ns1__SeatLicenseExpiredFault,
	_ns1__VidyoReplayNotAvailableFault *ns1__VidyoReplayNotAvailableFault,
	_ns1__WrongPINFault *ns1__WrongPINFault,
	int __type,
	void *fault,
	char *__any)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->ns1__AccessRestrictedFault = ns1__AccessRestrictedFault;
		_p->ns1__ConferenceLockedFault = ns1__ConferenceLockedFault;
		_p->ns1__ControlMeetingFault = ns1__ControlMeetingFault;
		_p->ns1__EndpointNotBoundFault = ns1__EndpointNotBoundFault;
		_p->ns1__FeatureNotAvailableFault = ns1__FeatureNotAvailableFault;
		_p->ns1__GeneralFault = ns1__GeneralFault;
		_p->ns1__InPointToPointCallFault = ns1__InPointToPointCallFault;
		_p->ns1__InvalidArgumentFault = ns1__InvalidArgumentFault;
		_p->ns1__InvalidModeratorPINFormatFault = ns1__InvalidModeratorPINFormatFault;
		_p->ns1__NotLicensedFault = ns1__NotLicensedFault;
		_p->ns1__PrefixNotConfiguredFault = ns1__PrefixNotConfiguredFault;
		_p->ns1__ResourceNotAvailableFault = ns1__ResourceNotAvailableFault;
		_p->ns1__RoomNotFoundFault = ns1__RoomNotFoundFault;
		_p->ns1__ScheduledRoomCreationFault = ns1__ScheduledRoomCreationFault;
		_p->ns1__SeatLicenseExpiredFault = ns1__SeatLicenseExpiredFault;
		_p->ns1__VidyoReplayNotAvailableFault = ns1__VidyoReplayNotAvailableFault;
		_p->ns1__WrongPINFault = ns1__WrongPINFault;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE__ns1__union_DirectCallRequest_DEFINED
#define SOAP_TYPE__ns1__union_DirectCallRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_DirectCallRequest(struct soap*, int, const union _ns1__union_DirectCallRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_DirectCallRequest(struct soap*, int, const union _ns1__union_DirectCallRequest *);
SOAP_FMAC3 union _ns1__union_DirectCallRequest * SOAP_FMAC4 soap_in__ns1__union_DirectCallRequest(struct soap*, int*, union _ns1__union_DirectCallRequest *);
#endif

#ifndef SOAP_TYPE__ns1__union_JoinConferenceRequest_DEFINED
#define SOAP_TYPE__ns1__union_JoinConferenceRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_JoinConferenceRequest(struct soap*, int, const union _ns1__union_JoinConferenceRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_JoinConferenceRequest(struct soap*, int, const union _ns1__union_JoinConferenceRequest *);
SOAP_FMAC3 union _ns1__union_JoinConferenceRequest * SOAP_FMAC4 soap_in__ns1__union_JoinConferenceRequest(struct soap*, int*, union _ns1__union_JoinConferenceRequest *);
#endif

#ifndef SOAP_TYPE__ns1__union_InviteToConferenceRequest_DEFINED
#define SOAP_TYPE__ns1__union_InviteToConferenceRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_InviteToConferenceRequest(struct soap*, int, const union _ns1__union_InviteToConferenceRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_InviteToConferenceRequest(struct soap*, int, const union _ns1__union_InviteToConferenceRequest *);
SOAP_FMAC3 union _ns1__union_InviteToConferenceRequest * SOAP_FMAC4 soap_in__ns1__union_InviteToConferenceRequest(struct soap*, int*, union _ns1__union_InviteToConferenceRequest *);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetChangePasswordHtmlUrlWithTokenRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetChangePasswordHtmlUrlWithTokenRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, const char *, int, _ns1__GetChangePasswordHtmlUrlWithTokenRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetChangePasswordHtmlUrlWithTokenRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, const char*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetChangePasswordHtmlUrlWithTokenRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetChangePasswordHtmlUrlWithTokenRequest(struct soap*, _ns1__GetChangePasswordHtmlUrlWithTokenRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__WhatIsMyIPAddressRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__WhatIsMyIPAddressRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__WhatIsMyIPAddressRequest(struct soap*, _ns1__WhatIsMyIPAddressRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__WhatIsMyIPAddressRequest(struct soap*, const char *, int, _ns1__WhatIsMyIPAddressRequest *const*, const char *);
SOAP_FMAC3 _ns1__WhatIsMyIPAddressRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__WhatIsMyIPAddressRequest(struct soap*, const char*, _ns1__WhatIsMyIPAddressRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__WhatIsMyIPAddressRequest(struct soap*, _ns1__WhatIsMyIPAddressRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__WhatIsMyIPAddressRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__WhatIsMyIPAddressRequest(struct soap*, _ns1__WhatIsMyIPAddressRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetVidyoReplayLibraryRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetVidyoReplayLibraryRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVidyoReplayLibraryRequest(struct soap*, _ns1__GetVidyoReplayLibraryRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVidyoReplayLibraryRequest(struct soap*, const char *, int, _ns1__GetVidyoReplayLibraryRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetVidyoReplayLibraryRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVidyoReplayLibraryRequest(struct soap*, const char*, _ns1__GetVidyoReplayLibraryRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVidyoReplayLibraryRequest(struct soap*, _ns1__GetVidyoReplayLibraryRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetVidyoReplayLibraryRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVidyoReplayLibraryRequest(struct soap*, _ns1__GetVidyoReplayLibraryRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemovePresenterRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemovePresenterRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemovePresenterRequest(struct soap*, _ns1__RemovePresenterRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemovePresenterRequest(struct soap*, const char *, int, _ns1__RemovePresenterRequest *const*, const char *);
SOAP_FMAC3 _ns1__RemovePresenterRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemovePresenterRequest(struct soap*, const char*, _ns1__RemovePresenterRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemovePresenterRequest(struct soap*, _ns1__RemovePresenterRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemovePresenterRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemovePresenterRequest(struct soap*, _ns1__RemovePresenterRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetPresenterRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetPresenterRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetPresenterRequest(struct soap*, _ns1__SetPresenterRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetPresenterRequest(struct soap*, const char *, int, _ns1__SetPresenterRequest *const*, const char *);
SOAP_FMAC3 _ns1__SetPresenterRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetPresenterRequest(struct soap*, const char*, _ns1__SetPresenterRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetPresenterRequest(struct soap*, _ns1__SetPresenterRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetPresenterRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetPresenterRequest(struct soap*, _ns1__SetPresenterRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DismissAllRaisedHandRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DismissAllRaisedHandRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DismissAllRaisedHandRequest(struct soap*, _ns1__DismissAllRaisedHandRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DismissAllRaisedHandRequest(struct soap*, const char *, int, _ns1__DismissAllRaisedHandRequest *const*, const char *);
SOAP_FMAC3 _ns1__DismissAllRaisedHandRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__DismissAllRaisedHandRequest(struct soap*, const char*, _ns1__DismissAllRaisedHandRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DismissAllRaisedHandRequest(struct soap*, _ns1__DismissAllRaisedHandRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DismissAllRaisedHandRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__DismissAllRaisedHandRequest(struct soap*, _ns1__DismissAllRaisedHandRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DismissRaisedHandRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DismissRaisedHandRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DismissRaisedHandRequest(struct soap*, _ns1__DismissRaisedHandRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DismissRaisedHandRequest(struct soap*, const char *, int, _ns1__DismissRaisedHandRequest *const*, const char *);
SOAP_FMAC3 _ns1__DismissRaisedHandRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__DismissRaisedHandRequest(struct soap*, const char*, _ns1__DismissRaisedHandRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DismissRaisedHandRequest(struct soap*, _ns1__DismissRaisedHandRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DismissRaisedHandRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__DismissRaisedHandRequest(struct soap*, _ns1__DismissRaisedHandRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__StopLectureModeRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__StopLectureModeRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StopLectureModeRequest(struct soap*, _ns1__StopLectureModeRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StopLectureModeRequest(struct soap*, const char *, int, _ns1__StopLectureModeRequest *const*, const char *);
SOAP_FMAC3 _ns1__StopLectureModeRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__StopLectureModeRequest(struct soap*, const char*, _ns1__StopLectureModeRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StopLectureModeRequest(struct soap*, _ns1__StopLectureModeRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__StopLectureModeRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__StopLectureModeRequest(struct soap*, _ns1__StopLectureModeRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__StartLectureModeRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__StartLectureModeRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StartLectureModeRequest(struct soap*, _ns1__StartLectureModeRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StartLectureModeRequest(struct soap*, const char *, int, _ns1__StartLectureModeRequest *const*, const char *);
SOAP_FMAC3 _ns1__StartLectureModeRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__StartLectureModeRequest(struct soap*, const char*, _ns1__StartLectureModeRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StartLectureModeRequest(struct soap*, _ns1__StartLectureModeRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__StartLectureModeRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__StartLectureModeRequest(struct soap*, _ns1__StartLectureModeRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getUserAccountTypeRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getUserAccountTypeRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getUserAccountTypeRequest(struct soap*, _ns1__getUserAccountTypeRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getUserAccountTypeRequest(struct soap*, const char *, int, _ns1__getUserAccountTypeRequest *const*, const char *);
SOAP_FMAC3 _ns1__getUserAccountTypeRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__getUserAccountTypeRequest(struct soap*, const char*, _ns1__getUserAccountTypeRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getUserAccountTypeRequest(struct soap*, _ns1__getUserAccountTypeRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getUserAccountTypeRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__getUserAccountTypeRequest(struct soap*, _ns1__getUserAccountTypeRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getLoginAndWelcomeBannerRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getLoginAndWelcomeBannerRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getLoginAndWelcomeBannerRequest(struct soap*, _ns1__getLoginAndWelcomeBannerRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getLoginAndWelcomeBannerRequest(struct soap*, const char *, int, _ns1__getLoginAndWelcomeBannerRequest *const*, const char *);
SOAP_FMAC3 _ns1__getLoginAndWelcomeBannerRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__getLoginAndWelcomeBannerRequest(struct soap*, const char*, _ns1__getLoginAndWelcomeBannerRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getLoginAndWelcomeBannerRequest(struct soap*, _ns1__getLoginAndWelcomeBannerRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getLoginAndWelcomeBannerRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__getLoginAndWelcomeBannerRequest(struct soap*, _ns1__getLoginAndWelcomeBannerRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RoomAccessOptionsRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RoomAccessOptionsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RoomAccessOptionsRequest(struct soap*, _ns1__RoomAccessOptionsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RoomAccessOptionsRequest(struct soap*, const char *, int, _ns1__RoomAccessOptionsRequest *const*, const char *);
SOAP_FMAC3 _ns1__RoomAccessOptionsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RoomAccessOptionsRequest(struct soap*, const char*, _ns1__RoomAccessOptionsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RoomAccessOptionsRequest(struct soap*, _ns1__RoomAccessOptionsRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RoomAccessOptionsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RoomAccessOptionsRequest(struct soap*, _ns1__RoomAccessOptionsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__muteVideoClientAllRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__muteVideoClientAllRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__muteVideoClientAllRequest(struct soap*, _ns1__muteVideoClientAllRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__muteVideoClientAllRequest(struct soap*, const char *, int, _ns1__muteVideoClientAllRequest *const*, const char *);
SOAP_FMAC3 _ns1__muteVideoClientAllRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__muteVideoClientAllRequest(struct soap*, const char*, _ns1__muteVideoClientAllRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__muteVideoClientAllRequest(struct soap*, _ns1__muteVideoClientAllRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__muteVideoClientAllRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__muteVideoClientAllRequest(struct soap*, _ns1__muteVideoClientAllRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__muteVideoServerAllRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__muteVideoServerAllRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__muteVideoServerAllRequest(struct soap*, _ns1__muteVideoServerAllRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__muteVideoServerAllRequest(struct soap*, const char *, int, _ns1__muteVideoServerAllRequest *const*, const char *);
SOAP_FMAC3 _ns1__muteVideoServerAllRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__muteVideoServerAllRequest(struct soap*, const char*, _ns1__muteVideoServerAllRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__muteVideoServerAllRequest(struct soap*, _ns1__muteVideoServerAllRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__muteVideoServerAllRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__muteVideoServerAllRequest(struct soap*, _ns1__muteVideoServerAllRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__muteAudioClientAllRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__muteAudioClientAllRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__muteAudioClientAllRequest(struct soap*, _ns1__muteAudioClientAllRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__muteAudioClientAllRequest(struct soap*, const char *, int, _ns1__muteAudioClientAllRequest *const*, const char *);
SOAP_FMAC3 _ns1__muteAudioClientAllRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__muteAudioClientAllRequest(struct soap*, const char*, _ns1__muteAudioClientAllRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__muteAudioClientAllRequest(struct soap*, _ns1__muteAudioClientAllRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__muteAudioClientAllRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__muteAudioClientAllRequest(struct soap*, _ns1__muteAudioClientAllRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__muteAudioServerAllRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__muteAudioServerAllRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__muteAudioServerAllRequest(struct soap*, _ns1__muteAudioServerAllRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__muteAudioServerAllRequest(struct soap*, const char *, int, _ns1__muteAudioServerAllRequest *const*, const char *);
SOAP_FMAC3 _ns1__muteAudioServerAllRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__muteAudioServerAllRequest(struct soap*, const char*, _ns1__muteAudioServerAllRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__muteAudioServerAllRequest(struct soap*, _ns1__muteAudioServerAllRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__muteAudioServerAllRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__muteAudioServerAllRequest(struct soap*, _ns1__muteAudioServerAllRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__disconnectConferenceAllRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__disconnectConferenceAllRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__disconnectConferenceAllRequest(struct soap*, _ns1__disconnectConferenceAllRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__disconnectConferenceAllRequest(struct soap*, const char *, int, _ns1__disconnectConferenceAllRequest *const*, const char *);
SOAP_FMAC3 _ns1__disconnectConferenceAllRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__disconnectConferenceAllRequest(struct soap*, const char*, _ns1__disconnectConferenceAllRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__disconnectConferenceAllRequest(struct soap*, _ns1__disconnectConferenceAllRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__disconnectConferenceAllRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__disconnectConferenceAllRequest(struct soap*, _ns1__disconnectConferenceAllRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetEndpointDetailsRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetEndpointDetailsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetEndpointDetailsRequest(struct soap*, _ns1__SetEndpointDetailsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetEndpointDetailsRequest(struct soap*, const char *, int, _ns1__SetEndpointDetailsRequest *const*, const char *);
SOAP_FMAC3 _ns1__SetEndpointDetailsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetEndpointDetailsRequest(struct soap*, const char*, _ns1__SetEndpointDetailsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetEndpointDetailsRequest(struct soap*, _ns1__SetEndpointDetailsRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetEndpointDetailsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetEndpointDetailsRequest(struct soap*, _ns1__SetEndpointDetailsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DeleteScheduledRoomRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DeleteScheduledRoomRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteScheduledRoomRequest(struct soap*, _ns1__DeleteScheduledRoomRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteScheduledRoomRequest(struct soap*, const char *, int, _ns1__DeleteScheduledRoomRequest *const*, const char *);
SOAP_FMAC3 _ns1__DeleteScheduledRoomRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteScheduledRoomRequest(struct soap*, const char*, _ns1__DeleteScheduledRoomRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteScheduledRoomRequest(struct soap*, _ns1__DeleteScheduledRoomRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DeleteScheduledRoomRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteScheduledRoomRequest(struct soap*, _ns1__DeleteScheduledRoomRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateScheduledRoomRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateScheduledRoomRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateScheduledRoomRequest(struct soap*, _ns1__CreateScheduledRoomRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateScheduledRoomRequest(struct soap*, const char *, int, _ns1__CreateScheduledRoomRequest *const*, const char *);
SOAP_FMAC3 _ns1__CreateScheduledRoomRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateScheduledRoomRequest(struct soap*, const char*, _ns1__CreateScheduledRoomRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateScheduledRoomRequest(struct soap*, _ns1__CreateScheduledRoomRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateScheduledRoomRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateScheduledRoomRequest(struct soap*, _ns1__CreateScheduledRoomRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GenerateAuthTokenRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GenerateAuthTokenRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GenerateAuthTokenRequest(struct soap*, _ns1__GenerateAuthTokenRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GenerateAuthTokenRequest(struct soap*, const char *, int, _ns1__GenerateAuthTokenRequest *const*, const char *);
SOAP_FMAC3 _ns1__GenerateAuthTokenRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GenerateAuthTokenRequest(struct soap*, const char*, _ns1__GenerateAuthTokenRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GenerateAuthTokenRequest(struct soap*, _ns1__GenerateAuthTokenRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GenerateAuthTokenRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GenerateAuthTokenRequest(struct soap*, _ns1__GenerateAuthTokenRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetConferenceIDRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetConferenceIDRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetConferenceIDRequest(struct soap*, _ns1__GetConferenceIDRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetConferenceIDRequest(struct soap*, const char *, int, _ns1__GetConferenceIDRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetConferenceIDRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetConferenceIDRequest(struct soap*, const char*, _ns1__GetConferenceIDRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetConferenceIDRequest(struct soap*, _ns1__GetConferenceIDRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetConferenceIDRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetConferenceIDRequest(struct soap*, _ns1__GetConferenceIDRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemoveModeratorPINRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemoveModeratorPINRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveModeratorPINRequest(struct soap*, _ns1__RemoveModeratorPINRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveModeratorPINRequest(struct soap*, const char *, int, _ns1__RemoveModeratorPINRequest *const*, const char *);
SOAP_FMAC3 _ns1__RemoveModeratorPINRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveModeratorPINRequest(struct soap*, const char*, _ns1__RemoveModeratorPINRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveModeratorPINRequest(struct soap*, _ns1__RemoveModeratorPINRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemoveModeratorPINRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveModeratorPINRequest(struct soap*, _ns1__RemoveModeratorPINRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateModeratorPINRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateModeratorPINRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateModeratorPINRequest(struct soap*, _ns1__CreateModeratorPINRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateModeratorPINRequest(struct soap*, const char *, int, _ns1__CreateModeratorPINRequest *const*, const char *);
SOAP_FMAC3 _ns1__CreateModeratorPINRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateModeratorPINRequest(struct soap*, const char*, _ns1__CreateModeratorPINRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateModeratorPINRequest(struct soap*, _ns1__CreateModeratorPINRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateModeratorPINRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateModeratorPINRequest(struct soap*, _ns1__CreateModeratorPINRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetModeratorURLWithTokenRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetModeratorURLWithTokenRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetModeratorURLWithTokenRequest(struct soap*, _ns1__GetModeratorURLWithTokenRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetModeratorURLWithTokenRequest(struct soap*, const char *, int, _ns1__GetModeratorURLWithTokenRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetModeratorURLWithTokenRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetModeratorURLWithTokenRequest(struct soap*, const char*, _ns1__GetModeratorURLWithTokenRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetModeratorURLWithTokenRequest(struct soap*, _ns1__GetModeratorURLWithTokenRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetModeratorURLWithTokenRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetModeratorURLWithTokenRequest(struct soap*, _ns1__GetModeratorURLWithTokenRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetModeratorURLRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetModeratorURLRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetModeratorURLRequest(struct soap*, _ns1__GetModeratorURLRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetModeratorURLRequest(struct soap*, const char *, int, _ns1__GetModeratorURLRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetModeratorURLRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetModeratorURLRequest(struct soap*, const char*, _ns1__GetModeratorURLRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetModeratorURLRequest(struct soap*, _ns1__GetModeratorURLRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetModeratorURLRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetModeratorURLRequest(struct soap*, _ns1__GetModeratorURLRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemoveModeratorURLRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemoveModeratorURLRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveModeratorURLRequest(struct soap*, _ns1__RemoveModeratorURLRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveModeratorURLRequest(struct soap*, const char *, int, _ns1__RemoveModeratorURLRequest *const*, const char *);
SOAP_FMAC3 _ns1__RemoveModeratorURLRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveModeratorURLRequest(struct soap*, const char*, _ns1__RemoveModeratorURLRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveModeratorURLRequest(struct soap*, _ns1__RemoveModeratorURLRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemoveModeratorURLRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveModeratorURLRequest(struct soap*, _ns1__RemoveModeratorURLRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateModeratorURLRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateModeratorURLRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateModeratorURLRequest(struct soap*, _ns1__CreateModeratorURLRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateModeratorURLRequest(struct soap*, const char *, int, _ns1__CreateModeratorURLRequest *const*, const char *);
SOAP_FMAC3 _ns1__CreateModeratorURLRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateModeratorURLRequest(struct soap*, const char*, _ns1__CreateModeratorURLRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateModeratorURLRequest(struct soap*, _ns1__CreateModeratorURLRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateModeratorURLRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateModeratorURLRequest(struct soap*, _ns1__CreateModeratorURLRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemoveRoomProfileRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemoveRoomProfileRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveRoomProfileRequest(struct soap*, _ns1__RemoveRoomProfileRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveRoomProfileRequest(struct soap*, const char *, int, _ns1__RemoveRoomProfileRequest *const*, const char *);
SOAP_FMAC3 _ns1__RemoveRoomProfileRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveRoomProfileRequest(struct soap*, const char*, _ns1__RemoveRoomProfileRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveRoomProfileRequest(struct soap*, _ns1__RemoveRoomProfileRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemoveRoomProfileRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveRoomProfileRequest(struct soap*, _ns1__RemoveRoomProfileRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetRoomProfileRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetRoomProfileRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRoomProfileRequest(struct soap*, _ns1__SetRoomProfileRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRoomProfileRequest(struct soap*, const char *, int, _ns1__SetRoomProfileRequest *const*, const char *);
SOAP_FMAC3 _ns1__SetRoomProfileRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRoomProfileRequest(struct soap*, const char*, _ns1__SetRoomProfileRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRoomProfileRequest(struct soap*, _ns1__SetRoomProfileRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetRoomProfileRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRoomProfileRequest(struct soap*, _ns1__SetRoomProfileRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetRoomProfileRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetRoomProfileRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetRoomProfileRequest(struct soap*, _ns1__GetRoomProfileRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetRoomProfileRequest(struct soap*, const char *, int, _ns1__GetRoomProfileRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetRoomProfileRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetRoomProfileRequest(struct soap*, const char*, _ns1__GetRoomProfileRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetRoomProfileRequest(struct soap*, _ns1__GetRoomProfileRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetRoomProfileRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetRoomProfileRequest(struct soap*, _ns1__GetRoomProfileRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetInviteContentRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetInviteContentRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetInviteContentRequest(struct soap*, _ns1__GetInviteContentRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetInviteContentRequest(struct soap*, const char *, int, _ns1__GetInviteContentRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetInviteContentRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetInviteContentRequest(struct soap*, const char*, _ns1__GetInviteContentRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetInviteContentRequest(struct soap*, _ns1__GetInviteContentRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetInviteContentRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetInviteContentRequest(struct soap*, _ns1__GetInviteContentRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetEntityByRoomKeyRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetEntityByRoomKeyRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEntityByRoomKeyRequest(struct soap*, _ns1__GetEntityByRoomKeyRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEntityByRoomKeyRequest(struct soap*, const char *, int, _ns1__GetEntityByRoomKeyRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetEntityByRoomKeyRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEntityByRoomKeyRequest(struct soap*, const char*, _ns1__GetEntityByRoomKeyRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEntityByRoomKeyRequest(struct soap*, _ns1__GetEntityByRoomKeyRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetEntityByRoomKeyRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEntityByRoomKeyRequest(struct soap*, _ns1__GetEntityByRoomKeyRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetUserNameRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetUserNameRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetUserNameRequest(struct soap*, _ns1__GetUserNameRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetUserNameRequest(struct soap*, const char *, int, _ns1__GetUserNameRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetUserNameRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetUserNameRequest(struct soap*, const char*, _ns1__GetUserNameRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetUserNameRequest(struct soap*, _ns1__GetUserNameRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetUserNameRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetUserNameRequest(struct soap*, _ns1__GetUserNameRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetWebcastURLRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetWebcastURLRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetWebcastURLRequest(struct soap*, _ns1__GetWebcastURLRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetWebcastURLRequest(struct soap*, const char *, int, _ns1__GetWebcastURLRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetWebcastURLRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetWebcastURLRequest(struct soap*, const char*, _ns1__GetWebcastURLRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetWebcastURLRequest(struct soap*, _ns1__GetWebcastURLRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetWebcastURLRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetWebcastURLRequest(struct soap*, _ns1__GetWebcastURLRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemoveWebcastPINRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemoveWebcastPINRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveWebcastPINRequest(struct soap*, _ns1__RemoveWebcastPINRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveWebcastPINRequest(struct soap*, const char *, int, _ns1__RemoveWebcastPINRequest *const*, const char *);
SOAP_FMAC3 _ns1__RemoveWebcastPINRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveWebcastPINRequest(struct soap*, const char*, _ns1__RemoveWebcastPINRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveWebcastPINRequest(struct soap*, _ns1__RemoveWebcastPINRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemoveWebcastPINRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveWebcastPINRequest(struct soap*, _ns1__RemoveWebcastPINRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemoveWebcastURLRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemoveWebcastURLRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveWebcastURLRequest(struct soap*, _ns1__RemoveWebcastURLRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveWebcastURLRequest(struct soap*, const char *, int, _ns1__RemoveWebcastURLRequest *const*, const char *);
SOAP_FMAC3 _ns1__RemoveWebcastURLRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveWebcastURLRequest(struct soap*, const char*, _ns1__RemoveWebcastURLRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveWebcastURLRequest(struct soap*, _ns1__RemoveWebcastURLRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemoveWebcastURLRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveWebcastURLRequest(struct soap*, _ns1__RemoveWebcastURLRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateWebcastPINRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateWebcastPINRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateWebcastPINRequest(struct soap*, _ns1__CreateWebcastPINRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateWebcastPINRequest(struct soap*, const char *, int, _ns1__CreateWebcastPINRequest *const*, const char *);
SOAP_FMAC3 _ns1__CreateWebcastPINRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateWebcastPINRequest(struct soap*, const char*, _ns1__CreateWebcastPINRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateWebcastPINRequest(struct soap*, _ns1__CreateWebcastPINRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateWebcastPINRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateWebcastPINRequest(struct soap*, _ns1__CreateWebcastPINRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateWebcastURLRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateWebcastURLRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateWebcastURLRequest(struct soap*, _ns1__CreateWebcastURLRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateWebcastURLRequest(struct soap*, const char *, int, _ns1__CreateWebcastURLRequest *const*, const char *);
SOAP_FMAC3 _ns1__CreateWebcastURLRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateWebcastURLRequest(struct soap*, const char*, _ns1__CreateWebcastURLRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateWebcastURLRequest(struct soap*, _ns1__CreateWebcastURLRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateWebcastURLRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateWebcastURLRequest(struct soap*, _ns1__CreateWebcastURLRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__StopRecordingRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__StopRecordingRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StopRecordingRequest(struct soap*, _ns1__StopRecordingRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StopRecordingRequest(struct soap*, const char *, int, _ns1__StopRecordingRequest *const*, const char *);
SOAP_FMAC3 _ns1__StopRecordingRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__StopRecordingRequest(struct soap*, const char*, _ns1__StopRecordingRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StopRecordingRequest(struct soap*, _ns1__StopRecordingRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__StopRecordingRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__StopRecordingRequest(struct soap*, _ns1__StopRecordingRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ResumeRecordingRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ResumeRecordingRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ResumeRecordingRequest(struct soap*, _ns1__ResumeRecordingRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ResumeRecordingRequest(struct soap*, const char *, int, _ns1__ResumeRecordingRequest *const*, const char *);
SOAP_FMAC3 _ns1__ResumeRecordingRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__ResumeRecordingRequest(struct soap*, const char*, _ns1__ResumeRecordingRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ResumeRecordingRequest(struct soap*, _ns1__ResumeRecordingRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ResumeRecordingRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__ResumeRecordingRequest(struct soap*, _ns1__ResumeRecordingRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__PauseRecordingRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__PauseRecordingRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PauseRecordingRequest(struct soap*, _ns1__PauseRecordingRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PauseRecordingRequest(struct soap*, const char *, int, _ns1__PauseRecordingRequest *const*, const char *);
SOAP_FMAC3 _ns1__PauseRecordingRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__PauseRecordingRequest(struct soap*, const char*, _ns1__PauseRecordingRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PauseRecordingRequest(struct soap*, _ns1__PauseRecordingRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__PauseRecordingRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__PauseRecordingRequest(struct soap*, _ns1__PauseRecordingRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetPortalVersionRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetPortalVersionRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPortalVersionRequest(struct soap*, _ns1__GetPortalVersionRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPortalVersionRequest(struct soap*, const char *, int, _ns1__GetPortalVersionRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetPortalVersionRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPortalVersionRequest(struct soap*, const char*, _ns1__GetPortalVersionRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPortalVersionRequest(struct soap*, _ns1__GetPortalVersionRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetPortalVersionRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPortalVersionRequest(struct soap*, _ns1__GetPortalVersionRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__StartRecordingRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__StartRecordingRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StartRecordingRequest(struct soap*, _ns1__StartRecordingRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StartRecordingRequest(struct soap*, const char *, int, _ns1__StartRecordingRequest *const*, const char *);
SOAP_FMAC3 _ns1__StartRecordingRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__StartRecordingRequest(struct soap*, const char*, _ns1__StartRecordingRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StartRecordingRequest(struct soap*, _ns1__StartRecordingRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__StartRecordingRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__StartRecordingRequest(struct soap*, _ns1__StartRecordingRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetRecordingProfilesRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetRecordingProfilesRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetRecordingProfilesRequest(struct soap*, _ns1__GetRecordingProfilesRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetRecordingProfilesRequest(struct soap*, const char *, int, _ns1__GetRecordingProfilesRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetRecordingProfilesRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetRecordingProfilesRequest(struct soap*, const char*, _ns1__GetRecordingProfilesRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetRecordingProfilesRequest(struct soap*, _ns1__GetRecordingProfilesRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetRecordingProfilesRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetRecordingProfilesRequest(struct soap*, _ns1__GetRecordingProfilesRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetMemberModeRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetMemberModeRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMemberModeRequest(struct soap*, _ns1__SetMemberModeRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMemberModeRequest(struct soap*, const char *, int, _ns1__SetMemberModeRequest *const*, const char *);
SOAP_FMAC3 _ns1__SetMemberModeRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMemberModeRequest(struct soap*, const char*, _ns1__SetMemberModeRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMemberModeRequest(struct soap*, _ns1__SetMemberModeRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetMemberModeRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMemberModeRequest(struct soap*, _ns1__SetMemberModeRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UnlockRoomRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UnlockRoomRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UnlockRoomRequest(struct soap*, _ns1__UnlockRoomRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UnlockRoomRequest(struct soap*, const char *, int, _ns1__UnlockRoomRequest *const*, const char *);
SOAP_FMAC3 _ns1__UnlockRoomRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__UnlockRoomRequest(struct soap*, const char*, _ns1__UnlockRoomRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UnlockRoomRequest(struct soap*, _ns1__UnlockRoomRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UnlockRoomRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__UnlockRoomRequest(struct soap*, _ns1__UnlockRoomRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LockRoomRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LockRoomRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LockRoomRequest(struct soap*, _ns1__LockRoomRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LockRoomRequest(struct soap*, const char *, int, _ns1__LockRoomRequest *const*, const char *);
SOAP_FMAC3 _ns1__LockRoomRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__LockRoomRequest(struct soap*, const char*, _ns1__LockRoomRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LockRoomRequest(struct soap*, _ns1__LockRoomRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LockRoomRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__LockRoomRequest(struct soap*, _ns1__LockRoomRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UpdateLanguageRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UpdateLanguageRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdateLanguageRequest(struct soap*, _ns1__UpdateLanguageRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdateLanguageRequest(struct soap*, const char *, int, _ns1__UpdateLanguageRequest *const*, const char *);
SOAP_FMAC3 _ns1__UpdateLanguageRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdateLanguageRequest(struct soap*, const char*, _ns1__UpdateLanguageRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdateLanguageRequest(struct soap*, _ns1__UpdateLanguageRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UpdateLanguageRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdateLanguageRequest(struct soap*, _ns1__UpdateLanguageRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UpdatePasswordRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UpdatePasswordRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdatePasswordRequest(struct soap*, _ns1__UpdatePasswordRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdatePasswordRequest(struct soap*, const char *, int, _ns1__UpdatePasswordRequest *const*, const char *);
SOAP_FMAC3 _ns1__UpdatePasswordRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdatePasswordRequest(struct soap*, const char*, _ns1__UpdatePasswordRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdatePasswordRequest(struct soap*, _ns1__UpdatePasswordRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UpdatePasswordRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdatePasswordRequest(struct soap*, _ns1__UpdatePasswordRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DeleteRoomRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DeleteRoomRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteRoomRequest(struct soap*, _ns1__DeleteRoomRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteRoomRequest(struct soap*, const char *, int, _ns1__DeleteRoomRequest *const*, const char *);
SOAP_FMAC3 _ns1__DeleteRoomRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteRoomRequest(struct soap*, const char*, _ns1__DeleteRoomRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteRoomRequest(struct soap*, _ns1__DeleteRoomRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DeleteRoomRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteRoomRequest(struct soap*, _ns1__DeleteRoomRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateRoomRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateRoomRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateRoomRequest(struct soap*, _ns1__CreateRoomRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateRoomRequest(struct soap*, const char *, int, _ns1__CreateRoomRequest *const*, const char *);
SOAP_FMAC3 _ns1__CreateRoomRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateRoomRequest(struct soap*, const char*, _ns1__CreateRoomRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateRoomRequest(struct soap*, _ns1__CreateRoomRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateRoomRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateRoomRequest(struct soap*, _ns1__CreateRoomRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemoveRoomPINRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemoveRoomPINRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveRoomPINRequest(struct soap*, _ns1__RemoveRoomPINRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveRoomPINRequest(struct soap*, const char *, int, _ns1__RemoveRoomPINRequest *const*, const char *);
SOAP_FMAC3 _ns1__RemoveRoomPINRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveRoomPINRequest(struct soap*, const char*, _ns1__RemoveRoomPINRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveRoomPINRequest(struct soap*, _ns1__RemoveRoomPINRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemoveRoomPINRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveRoomPINRequest(struct soap*, _ns1__RemoveRoomPINRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateRoomPINRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateRoomPINRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateRoomPINRequest(struct soap*, _ns1__CreateRoomPINRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateRoomPINRequest(struct soap*, const char *, int, _ns1__CreateRoomPINRequest *const*, const char *);
SOAP_FMAC3 _ns1__CreateRoomPINRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateRoomPINRequest(struct soap*, const char*, _ns1__CreateRoomPINRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateRoomPINRequest(struct soap*, _ns1__CreateRoomPINRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateRoomPINRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateRoomPINRequest(struct soap*, _ns1__CreateRoomPINRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemoveRoomURLRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemoveRoomURLRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveRoomURLRequest(struct soap*, _ns1__RemoveRoomURLRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveRoomURLRequest(struct soap*, const char *, int, _ns1__RemoveRoomURLRequest *const*, const char *);
SOAP_FMAC3 _ns1__RemoveRoomURLRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveRoomURLRequest(struct soap*, const char*, _ns1__RemoveRoomURLRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveRoomURLRequest(struct soap*, _ns1__RemoveRoomURLRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemoveRoomURLRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveRoomURLRequest(struct soap*, _ns1__RemoveRoomURLRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateRoomURLRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateRoomURLRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateRoomURLRequest(struct soap*, _ns1__CreateRoomURLRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateRoomURLRequest(struct soap*, const char *, int, _ns1__CreateRoomURLRequest *const*, const char *);
SOAP_FMAC3 _ns1__CreateRoomURLRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateRoomURLRequest(struct soap*, const char*, _ns1__CreateRoomURLRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateRoomURLRequest(struct soap*, _ns1__CreateRoomURLRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateRoomURLRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateRoomURLRequest(struct soap*, _ns1__CreateRoomURLRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__MyAccountRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__MyAccountRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MyAccountRequest(struct soap*, _ns1__MyAccountRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MyAccountRequest(struct soap*, const char *, int, _ns1__MyAccountRequest *const*, const char *);
SOAP_FMAC3 _ns1__MyAccountRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__MyAccountRequest(struct soap*, const char*, _ns1__MyAccountRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MyAccountRequest(struct soap*, _ns1__MyAccountRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__MyAccountRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__MyAccountRequest(struct soap*, _ns1__MyAccountRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__StopVideoRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__StopVideoRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StopVideoRequest(struct soap*, _ns1__StopVideoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StopVideoRequest(struct soap*, const char *, int, _ns1__StopVideoRequest *const*, const char *);
SOAP_FMAC3 _ns1__StopVideoRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__StopVideoRequest(struct soap*, const char*, _ns1__StopVideoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StopVideoRequest(struct soap*, _ns1__StopVideoRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__StopVideoRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__StopVideoRequest(struct soap*, _ns1__StopVideoRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__StartVideoRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__StartVideoRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StartVideoRequest(struct soap*, _ns1__StartVideoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StartVideoRequest(struct soap*, const char *, int, _ns1__StartVideoRequest *const*, const char *);
SOAP_FMAC3 _ns1__StartVideoRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__StartVideoRequest(struct soap*, const char*, _ns1__StartVideoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StartVideoRequest(struct soap*, _ns1__StartVideoRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__StartVideoRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__StartVideoRequest(struct soap*, _ns1__StartVideoRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UnmuteAudioRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UnmuteAudioRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UnmuteAudioRequest(struct soap*, _ns1__UnmuteAudioRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UnmuteAudioRequest(struct soap*, const char *, int, _ns1__UnmuteAudioRequest *const*, const char *);
SOAP_FMAC3 _ns1__UnmuteAudioRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__UnmuteAudioRequest(struct soap*, const char*, _ns1__UnmuteAudioRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UnmuteAudioRequest(struct soap*, _ns1__UnmuteAudioRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UnmuteAudioRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__UnmuteAudioRequest(struct soap*, _ns1__UnmuteAudioRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__MuteAudioRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__MuteAudioRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MuteAudioRequest(struct soap*, _ns1__MuteAudioRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MuteAudioRequest(struct soap*, const char *, int, _ns1__MuteAudioRequest *const*, const char *);
SOAP_FMAC3 _ns1__MuteAudioRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__MuteAudioRequest(struct soap*, const char*, _ns1__MuteAudioRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MuteAudioRequest(struct soap*, _ns1__MuteAudioRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__MuteAudioRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__MuteAudioRequest(struct soap*, _ns1__MuteAudioRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LeaveConferenceRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LeaveConferenceRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LeaveConferenceRequest(struct soap*, _ns1__LeaveConferenceRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LeaveConferenceRequest(struct soap*, const char *, int, _ns1__LeaveConferenceRequest *const*, const char *);
SOAP_FMAC3 _ns1__LeaveConferenceRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__LeaveConferenceRequest(struct soap*, const char*, _ns1__LeaveConferenceRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LeaveConferenceRequest(struct soap*, _ns1__LeaveConferenceRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LeaveConferenceRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__LeaveConferenceRequest(struct soap*, _ns1__LeaveConferenceRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetLectureModeParticipantsRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetLectureModeParticipantsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLectureModeParticipantsRequest(struct soap*, _ns1__GetLectureModeParticipantsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLectureModeParticipantsRequest(struct soap*, const char *, int, _ns1__GetLectureModeParticipantsRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetLectureModeParticipantsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLectureModeParticipantsRequest(struct soap*, const char*, _ns1__GetLectureModeParticipantsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLectureModeParticipantsRequest(struct soap*, _ns1__GetLectureModeParticipantsRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetLectureModeParticipantsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLectureModeParticipantsRequest(struct soap*, _ns1__GetLectureModeParticipantsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetParticipantsRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetParticipantsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetParticipantsRequest(struct soap*, _ns1__GetParticipantsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetParticipantsRequest(struct soap*, const char *, int, _ns1__GetParticipantsRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetParticipantsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetParticipantsRequest(struct soap*, const char*, _ns1__GetParticipantsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetParticipantsRequest(struct soap*, _ns1__GetParticipantsRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetParticipantsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetParticipantsRequest(struct soap*, _ns1__GetParticipantsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DirectCallRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DirectCallRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DirectCallRequest(struct soap*, _ns1__DirectCallRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DirectCallRequest(struct soap*, const char *, int, _ns1__DirectCallRequest *const*, const char *);
SOAP_FMAC3 _ns1__DirectCallRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__DirectCallRequest(struct soap*, const char*, _ns1__DirectCallRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DirectCallRequest(struct soap*, _ns1__DirectCallRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DirectCallRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__DirectCallRequest(struct soap*, _ns1__DirectCallRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__JoinIPCConferenceRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__JoinIPCConferenceRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__JoinIPCConferenceRequest(struct soap*, _ns1__JoinIPCConferenceRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__JoinIPCConferenceRequest(struct soap*, const char *, int, _ns1__JoinIPCConferenceRequest *const*, const char *);
SOAP_FMAC3 _ns1__JoinIPCConferenceRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__JoinIPCConferenceRequest(struct soap*, const char*, _ns1__JoinIPCConferenceRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__JoinIPCConferenceRequest(struct soap*, _ns1__JoinIPCConferenceRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__JoinIPCConferenceRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__JoinIPCConferenceRequest(struct soap*, _ns1__JoinIPCConferenceRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__JoinConferenceRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__JoinConferenceRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__JoinConferenceRequest(struct soap*, _ns1__JoinConferenceRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__JoinConferenceRequest(struct soap*, const char *, int, _ns1__JoinConferenceRequest *const*, const char *);
SOAP_FMAC3 _ns1__JoinConferenceRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__JoinConferenceRequest(struct soap*, const char*, _ns1__JoinConferenceRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__JoinConferenceRequest(struct soap*, _ns1__JoinConferenceRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__JoinConferenceRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__JoinConferenceRequest(struct soap*, _ns1__JoinConferenceRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CancelOutboundCallRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CancelOutboundCallRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CancelOutboundCallRequest(struct soap*, _ns1__CancelOutboundCallRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CancelOutboundCallRequest(struct soap*, const char *, int, _ns1__CancelOutboundCallRequest *const*, const char *);
SOAP_FMAC3 _ns1__CancelOutboundCallRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__CancelOutboundCallRequest(struct soap*, const char*, _ns1__CancelOutboundCallRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CancelOutboundCallRequest(struct soap*, _ns1__CancelOutboundCallRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CancelOutboundCallRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__CancelOutboundCallRequest(struct soap*, _ns1__CancelOutboundCallRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InviteToConferenceRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InviteToConferenceRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InviteToConferenceRequest(struct soap*, _ns1__InviteToConferenceRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InviteToConferenceRequest(struct soap*, const char *, int, _ns1__InviteToConferenceRequest *const*, const char *);
SOAP_FMAC3 _ns1__InviteToConferenceRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__InviteToConferenceRequest(struct soap*, const char*, _ns1__InviteToConferenceRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InviteToConferenceRequest(struct soap*, _ns1__InviteToConferenceRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InviteToConferenceRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__InviteToConferenceRequest(struct soap*, _ns1__InviteToConferenceRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetEntityByEntityIDRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetEntityByEntityIDRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEntityByEntityIDRequest(struct soap*, _ns1__GetEntityByEntityIDRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEntityByEntityIDRequest(struct soap*, const char *, int, _ns1__GetEntityByEntityIDRequest *const*, const char *);
SOAP_FMAC3 _ns1__GetEntityByEntityIDRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEntityByEntityIDRequest(struct soap*, const char*, _ns1__GetEntityByEntityIDRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEntityByEntityIDRequest(struct soap*, _ns1__GetEntityByEntityIDRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetEntityByEntityIDRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEntityByEntityIDRequest(struct soap*, _ns1__GetEntityByEntityIDRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SearchByEmailRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SearchByEmailRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SearchByEmailRequest(struct soap*, _ns1__SearchByEmailRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SearchByEmailRequest(struct soap*, const char *, int, _ns1__SearchByEmailRequest *const*, const char *);
SOAP_FMAC3 _ns1__SearchByEmailRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SearchByEmailRequest(struct soap*, const char*, _ns1__SearchByEmailRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SearchByEmailRequest(struct soap*, _ns1__SearchByEmailRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SearchByEmailRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SearchByEmailRequest(struct soap*, _ns1__SearchByEmailRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SearchByEntityIDRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SearchByEntityIDRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SearchByEntityIDRequest(struct soap*, _ns1__SearchByEntityIDRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SearchByEntityIDRequest(struct soap*, const char *, int, _ns1__SearchByEntityIDRequest *const*, const char *);
SOAP_FMAC3 _ns1__SearchByEntityIDRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SearchByEntityIDRequest(struct soap*, const char*, _ns1__SearchByEntityIDRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SearchByEntityIDRequest(struct soap*, _ns1__SearchByEntityIDRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SearchByEntityIDRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SearchByEntityIDRequest(struct soap*, _ns1__SearchByEntityIDRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SearchRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SearchRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SearchRequest(struct soap*, _ns1__SearchRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SearchRequest(struct soap*, const char *, int, _ns1__SearchRequest *const*, const char *);
SOAP_FMAC3 _ns1__SearchRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SearchRequest(struct soap*, const char*, _ns1__SearchRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SearchRequest(struct soap*, _ns1__SearchRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SearchRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SearchRequest(struct soap*, _ns1__SearchRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemoveFromMyContactsRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemoveFromMyContactsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveFromMyContactsRequest(struct soap*, _ns1__RemoveFromMyContactsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveFromMyContactsRequest(struct soap*, const char *, int, _ns1__RemoveFromMyContactsRequest *const*, const char *);
SOAP_FMAC3 _ns1__RemoveFromMyContactsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveFromMyContactsRequest(struct soap*, const char*, _ns1__RemoveFromMyContactsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveFromMyContactsRequest(struct soap*, _ns1__RemoveFromMyContactsRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemoveFromMyContactsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveFromMyContactsRequest(struct soap*, _ns1__RemoveFromMyContactsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__AddToMyContactsRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__AddToMyContactsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddToMyContactsRequest(struct soap*, _ns1__AddToMyContactsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddToMyContactsRequest(struct soap*, const char *, int, _ns1__AddToMyContactsRequest *const*, const char *);
SOAP_FMAC3 _ns1__AddToMyContactsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddToMyContactsRequest(struct soap*, const char*, _ns1__AddToMyContactsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddToMyContactsRequest(struct soap*, _ns1__AddToMyContactsRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AddToMyContactsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddToMyContactsRequest(struct soap*, _ns1__AddToMyContactsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SearchMyContactsRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SearchMyContactsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SearchMyContactsRequest(struct soap*, _ns1__SearchMyContactsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SearchMyContactsRequest(struct soap*, const char *, int, _ns1__SearchMyContactsRequest *const*, const char *);
SOAP_FMAC3 _ns1__SearchMyContactsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SearchMyContactsRequest(struct soap*, const char*, _ns1__SearchMyContactsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SearchMyContactsRequest(struct soap*, _ns1__SearchMyContactsRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SearchMyContactsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SearchMyContactsRequest(struct soap*, _ns1__SearchMyContactsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__MyEndpointStatusRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__MyEndpointStatusRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MyEndpointStatusRequest(struct soap*, _ns1__MyEndpointStatusRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MyEndpointStatusRequest(struct soap*, const char *, int, _ns1__MyEndpointStatusRequest *const*, const char *);
SOAP_FMAC3 _ns1__MyEndpointStatusRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__MyEndpointStatusRequest(struct soap*, const char*, _ns1__MyEndpointStatusRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MyEndpointStatusRequest(struct soap*, _ns1__MyEndpointStatusRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__MyEndpointStatusRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__MyEndpointStatusRequest(struct soap*, _ns1__MyEndpointStatusRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LogOutRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LogOutRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LogOutRequest(struct soap*, _ns1__LogOutRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LogOutRequest(struct soap*, const char *, int, _ns1__LogOutRequest *const*, const char *);
SOAP_FMAC3 _ns1__LogOutRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__LogOutRequest(struct soap*, const char*, _ns1__LogOutRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LogOutRequest(struct soap*, _ns1__LogOutRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LogOutRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__LogOutRequest(struct soap*, _ns1__LogOutRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LinkEndpointRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LinkEndpointRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LinkEndpointRequest(struct soap*, _ns1__LinkEndpointRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LinkEndpointRequest(struct soap*, const char *, int, _ns1__LinkEndpointRequest *const*, const char *);
SOAP_FMAC3 _ns1__LinkEndpointRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__LinkEndpointRequest(struct soap*, const char*, _ns1__LinkEndpointRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LinkEndpointRequest(struct soap*, _ns1__LinkEndpointRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LinkEndpointRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__LinkEndpointRequest(struct soap*, _ns1__LinkEndpointRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LogInRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LogInRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LogInRequest(struct soap*, _ns1__LogInRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LogInRequest(struct soap*, const char *, int, _ns1__LogInRequest *const*, const char *);
SOAP_FMAC3 _ns1__LogInRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__LogInRequest(struct soap*, const char*, _ns1__LogInRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LogInRequest(struct soap*, _ns1__LogInRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LogInRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__LogInRequest(struct soap*, _ns1__LogInRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__WrongPINFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__WrongPINFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__WrongPINFault(struct soap*, _ns1__WrongPINFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__WrongPINFault(struct soap*, const char *, int, _ns1__WrongPINFault *const*, const char *);
SOAP_FMAC3 _ns1__WrongPINFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__WrongPINFault(struct soap*, const char*, _ns1__WrongPINFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__WrongPINFault(struct soap*, _ns1__WrongPINFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__WrongPINFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__WrongPINFault(struct soap*, _ns1__WrongPINFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__VidyoReplayNotAvailableFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__VidyoReplayNotAvailableFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__VidyoReplayNotAvailableFault(struct soap*, _ns1__VidyoReplayNotAvailableFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__VidyoReplayNotAvailableFault(struct soap*, const char *, int, _ns1__VidyoReplayNotAvailableFault *const*, const char *);
SOAP_FMAC3 _ns1__VidyoReplayNotAvailableFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__VidyoReplayNotAvailableFault(struct soap*, const char*, _ns1__VidyoReplayNotAvailableFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__VidyoReplayNotAvailableFault(struct soap*, _ns1__VidyoReplayNotAvailableFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__VidyoReplayNotAvailableFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__VidyoReplayNotAvailableFault(struct soap*, _ns1__VidyoReplayNotAvailableFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SeatLicenseExpiredFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SeatLicenseExpiredFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SeatLicenseExpiredFault(struct soap*, _ns1__SeatLicenseExpiredFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SeatLicenseExpiredFault(struct soap*, const char *, int, _ns1__SeatLicenseExpiredFault *const*, const char *);
SOAP_FMAC3 _ns1__SeatLicenseExpiredFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__SeatLicenseExpiredFault(struct soap*, const char*, _ns1__SeatLicenseExpiredFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SeatLicenseExpiredFault(struct soap*, _ns1__SeatLicenseExpiredFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SeatLicenseExpiredFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__SeatLicenseExpiredFault(struct soap*, _ns1__SeatLicenseExpiredFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ScheduledRoomCreationFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ScheduledRoomCreationFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ScheduledRoomCreationFault(struct soap*, _ns1__ScheduledRoomCreationFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ScheduledRoomCreationFault(struct soap*, const char *, int, _ns1__ScheduledRoomCreationFault *const*, const char *);
SOAP_FMAC3 _ns1__ScheduledRoomCreationFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__ScheduledRoomCreationFault(struct soap*, const char*, _ns1__ScheduledRoomCreationFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ScheduledRoomCreationFault(struct soap*, _ns1__ScheduledRoomCreationFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ScheduledRoomCreationFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__ScheduledRoomCreationFault(struct soap*, _ns1__ScheduledRoomCreationFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RoomNotFoundFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RoomNotFoundFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RoomNotFoundFault(struct soap*, _ns1__RoomNotFoundFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RoomNotFoundFault(struct soap*, const char *, int, _ns1__RoomNotFoundFault *const*, const char *);
SOAP_FMAC3 _ns1__RoomNotFoundFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__RoomNotFoundFault(struct soap*, const char*, _ns1__RoomNotFoundFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RoomNotFoundFault(struct soap*, _ns1__RoomNotFoundFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RoomNotFoundFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__RoomNotFoundFault(struct soap*, _ns1__RoomNotFoundFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ResourceNotAvailableFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ResourceNotAvailableFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ResourceNotAvailableFault(struct soap*, _ns1__ResourceNotAvailableFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ResourceNotAvailableFault(struct soap*, const char *, int, _ns1__ResourceNotAvailableFault *const*, const char *);
SOAP_FMAC3 _ns1__ResourceNotAvailableFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__ResourceNotAvailableFault(struct soap*, const char*, _ns1__ResourceNotAvailableFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ResourceNotAvailableFault(struct soap*, _ns1__ResourceNotAvailableFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ResourceNotAvailableFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__ResourceNotAvailableFault(struct soap*, _ns1__ResourceNotAvailableFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__PrefixNotConfiguredFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__PrefixNotConfiguredFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PrefixNotConfiguredFault(struct soap*, _ns1__PrefixNotConfiguredFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PrefixNotConfiguredFault(struct soap*, const char *, int, _ns1__PrefixNotConfiguredFault *const*, const char *);
SOAP_FMAC3 _ns1__PrefixNotConfiguredFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__PrefixNotConfiguredFault(struct soap*, const char*, _ns1__PrefixNotConfiguredFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PrefixNotConfiguredFault(struct soap*, _ns1__PrefixNotConfiguredFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__PrefixNotConfiguredFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__PrefixNotConfiguredFault(struct soap*, _ns1__PrefixNotConfiguredFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__NotLicensedFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__NotLicensedFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__NotLicensedFault(struct soap*, _ns1__NotLicensedFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__NotLicensedFault(struct soap*, const char *, int, _ns1__NotLicensedFault *const*, const char *);
SOAP_FMAC3 _ns1__NotLicensedFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__NotLicensedFault(struct soap*, const char*, _ns1__NotLicensedFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__NotLicensedFault(struct soap*, _ns1__NotLicensedFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__NotLicensedFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__NotLicensedFault(struct soap*, _ns1__NotLicensedFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InvalidModeratorPINFormatFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InvalidModeratorPINFormatFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InvalidModeratorPINFormatFault(struct soap*, _ns1__InvalidModeratorPINFormatFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InvalidModeratorPINFormatFault(struct soap*, const char *, int, _ns1__InvalidModeratorPINFormatFault *const*, const char *);
SOAP_FMAC3 _ns1__InvalidModeratorPINFormatFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__InvalidModeratorPINFormatFault(struct soap*, const char*, _ns1__InvalidModeratorPINFormatFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InvalidModeratorPINFormatFault(struct soap*, _ns1__InvalidModeratorPINFormatFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InvalidModeratorPINFormatFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__InvalidModeratorPINFormatFault(struct soap*, _ns1__InvalidModeratorPINFormatFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InvalidArgumentFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InvalidArgumentFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InvalidArgumentFault(struct soap*, _ns1__InvalidArgumentFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InvalidArgumentFault(struct soap*, const char *, int, _ns1__InvalidArgumentFault *const*, const char *);
SOAP_FMAC3 _ns1__InvalidArgumentFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__InvalidArgumentFault(struct soap*, const char*, _ns1__InvalidArgumentFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InvalidArgumentFault(struct soap*, _ns1__InvalidArgumentFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InvalidArgumentFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__InvalidArgumentFault(struct soap*, _ns1__InvalidArgumentFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InPointToPointCallFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InPointToPointCallFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InPointToPointCallFault(struct soap*, _ns1__InPointToPointCallFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InPointToPointCallFault(struct soap*, const char *, int, _ns1__InPointToPointCallFault *const*, const char *);
SOAP_FMAC3 _ns1__InPointToPointCallFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__InPointToPointCallFault(struct soap*, const char*, _ns1__InPointToPointCallFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InPointToPointCallFault(struct soap*, _ns1__InPointToPointCallFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InPointToPointCallFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__InPointToPointCallFault(struct soap*, _ns1__InPointToPointCallFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GeneralFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GeneralFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GeneralFault(struct soap*, _ns1__GeneralFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GeneralFault(struct soap*, const char *, int, _ns1__GeneralFault *const*, const char *);
SOAP_FMAC3 _ns1__GeneralFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__GeneralFault(struct soap*, const char*, _ns1__GeneralFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GeneralFault(struct soap*, _ns1__GeneralFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GeneralFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__GeneralFault(struct soap*, _ns1__GeneralFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__FeatureNotAvailableFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__FeatureNotAvailableFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__FeatureNotAvailableFault(struct soap*, _ns1__FeatureNotAvailableFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__FeatureNotAvailableFault(struct soap*, const char *, int, _ns1__FeatureNotAvailableFault *const*, const char *);
SOAP_FMAC3 _ns1__FeatureNotAvailableFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__FeatureNotAvailableFault(struct soap*, const char*, _ns1__FeatureNotAvailableFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__FeatureNotAvailableFault(struct soap*, _ns1__FeatureNotAvailableFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__FeatureNotAvailableFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__FeatureNotAvailableFault(struct soap*, _ns1__FeatureNotAvailableFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__EndpointNotBoundFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__EndpointNotBoundFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EndpointNotBoundFault(struct soap*, _ns1__EndpointNotBoundFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EndpointNotBoundFault(struct soap*, const char *, int, _ns1__EndpointNotBoundFault *const*, const char *);
SOAP_FMAC3 _ns1__EndpointNotBoundFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__EndpointNotBoundFault(struct soap*, const char*, _ns1__EndpointNotBoundFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EndpointNotBoundFault(struct soap*, _ns1__EndpointNotBoundFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__EndpointNotBoundFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__EndpointNotBoundFault(struct soap*, _ns1__EndpointNotBoundFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ControlMeetingFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ControlMeetingFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ControlMeetingFault(struct soap*, _ns1__ControlMeetingFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ControlMeetingFault(struct soap*, const char *, int, _ns1__ControlMeetingFault *const*, const char *);
SOAP_FMAC3 _ns1__ControlMeetingFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__ControlMeetingFault(struct soap*, const char*, _ns1__ControlMeetingFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ControlMeetingFault(struct soap*, _ns1__ControlMeetingFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ControlMeetingFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__ControlMeetingFault(struct soap*, _ns1__ControlMeetingFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ConferenceLockedFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ConferenceLockedFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ConferenceLockedFault(struct soap*, _ns1__ConferenceLockedFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ConferenceLockedFault(struct soap*, const char *, int, _ns1__ConferenceLockedFault *const*, const char *);
SOAP_FMAC3 _ns1__ConferenceLockedFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__ConferenceLockedFault(struct soap*, const char*, _ns1__ConferenceLockedFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ConferenceLockedFault(struct soap*, _ns1__ConferenceLockedFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ConferenceLockedFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__ConferenceLockedFault(struct soap*, _ns1__ConferenceLockedFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__AccessRestrictedFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__AccessRestrictedFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AccessRestrictedFault(struct soap*, _ns1__AccessRestrictedFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AccessRestrictedFault(struct soap*, const char *, int, _ns1__AccessRestrictedFault *const*, const char *);
SOAP_FMAC3 _ns1__AccessRestrictedFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__AccessRestrictedFault(struct soap*, const char*, _ns1__AccessRestrictedFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AccessRestrictedFault(struct soap*, _ns1__AccessRestrictedFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AccessRestrictedFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__AccessRestrictedFault(struct soap*, _ns1__AccessRestrictedFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__WelcomeBannerContent_DEFINED
#define SOAP_TYPE_PointerTo_ns1__WelcomeBannerContent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__WelcomeBannerContent(struct soap*, _ns1__WelcomeBannerContent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__WelcomeBannerContent(struct soap*, const char *, int, _ns1__WelcomeBannerContent *const*, const char *);
SOAP_FMAC3 _ns1__WelcomeBannerContent ** SOAP_FMAC4 soap_in_PointerTo_ns1__WelcomeBannerContent(struct soap*, const char*, _ns1__WelcomeBannerContent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__WelcomeBannerContent(struct soap*, _ns1__WelcomeBannerContent *const*, const char*, const char*);
SOAP_FMAC3 _ns1__WelcomeBannerContent ** SOAP_FMAC4 soap_get_PointerTo_ns1__WelcomeBannerContent(struct soap*, _ns1__WelcomeBannerContent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ns1__RoomAccessOption_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ns1__RoomAccessOption_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ns1__RoomAccessOption(struct soap*, _ns1__RoomAccessOption **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ns1__RoomAccessOption(struct soap*, const char *, int, _ns1__RoomAccessOption **const*, const char *);
SOAP_FMAC3 _ns1__RoomAccessOption *** SOAP_FMAC4 soap_in_PointerToPointerTo_ns1__RoomAccessOption(struct soap*, const char*, _ns1__RoomAccessOption ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ns1__RoomAccessOption(struct soap*, _ns1__RoomAccessOption **const*, const char*, const char*);
SOAP_FMAC3 _ns1__RoomAccessOption *** SOAP_FMAC4 soap_get_PointerToPointerTo_ns1__RoomAccessOption(struct soap*, _ns1__RoomAccessOption ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RoomAccessOption_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RoomAccessOption_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RoomAccessOption(struct soap*, _ns1__RoomAccessOption *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RoomAccessOption(struct soap*, const char *, int, _ns1__RoomAccessOption *const*, const char *);
SOAP_FMAC3 _ns1__RoomAccessOption ** SOAP_FMAC4 soap_in_PointerTo_ns1__RoomAccessOption(struct soap*, const char*, _ns1__RoomAccessOption **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RoomAccessOption(struct soap*, _ns1__RoomAccessOption *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RoomAccessOption ** SOAP_FMAC4 soap_get_PointerTo_ns1__RoomAccessOption(struct soap*, _ns1__RoomAccessOption **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ns1__EndpointFeature_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ns1__EndpointFeature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ns1__EndpointFeature(struct soap*, _ns1__EndpointFeature **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ns1__EndpointFeature(struct soap*, const char *, int, _ns1__EndpointFeature **const*, const char *);
SOAP_FMAC3 _ns1__EndpointFeature *** SOAP_FMAC4 soap_in_PointerToPointerTo_ns1__EndpointFeature(struct soap*, const char*, _ns1__EndpointFeature ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ns1__EndpointFeature(struct soap*, _ns1__EndpointFeature **const*, const char*, const char*);
SOAP_FMAC3 _ns1__EndpointFeature *** SOAP_FMAC4 soap_get_PointerToPointerTo_ns1__EndpointFeature(struct soap*, _ns1__EndpointFeature ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__EndpointFeature_DEFINED
#define SOAP_TYPE_PointerTo_ns1__EndpointFeature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EndpointFeature(struct soap*, _ns1__EndpointFeature *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EndpointFeature(struct soap*, const char *, int, _ns1__EndpointFeature *const*, const char *);
SOAP_FMAC3 _ns1__EndpointFeature ** SOAP_FMAC4 soap_in_PointerTo_ns1__EndpointFeature(struct soap*, const char*, _ns1__EndpointFeature **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EndpointFeature(struct soap*, _ns1__EndpointFeature *const*, const char*, const char*);
SOAP_FMAC3 _ns1__EndpointFeature ** SOAP_FMAC4 soap_get_PointerTo_ns1__EndpointFeature(struct soap*, _ns1__EndpointFeature **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ns1__PortalFeature_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ns1__PortalFeature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ns1__PortalFeature(struct soap*, _ns1__PortalFeature **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ns1__PortalFeature(struct soap*, const char *, int, _ns1__PortalFeature **const*, const char *);
SOAP_FMAC3 _ns1__PortalFeature *** SOAP_FMAC4 soap_in_PointerToPointerTo_ns1__PortalFeature(struct soap*, const char*, _ns1__PortalFeature ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ns1__PortalFeature(struct soap*, _ns1__PortalFeature **const*, const char*, const char*);
SOAP_FMAC3 _ns1__PortalFeature *** SOAP_FMAC4 soap_get_PointerToPointerTo_ns1__PortalFeature(struct soap*, _ns1__PortalFeature ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__PortalFeature_DEFINED
#define SOAP_TYPE_PointerTo_ns1__PortalFeature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PortalFeature(struct soap*, _ns1__PortalFeature *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PortalFeature(struct soap*, const char *, int, _ns1__PortalFeature *const*, const char *);
SOAP_FMAC3 _ns1__PortalFeature ** SOAP_FMAC4 soap_in_PointerTo_ns1__PortalFeature(struct soap*, const char*, _ns1__PortalFeature **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PortalFeature(struct soap*, _ns1__PortalFeature *const*, const char*, const char*);
SOAP_FMAC3 _ns1__PortalFeature ** SOAP_FMAC4 soap_get_PointerTo_ns1__PortalFeature(struct soap*, _ns1__PortalFeature **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__RoomProfile_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__RoomProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__RoomProfile(struct soap*, ns1__RoomProfile **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__RoomProfile(struct soap*, const char *, int, ns1__RoomProfile **const*, const char *);
SOAP_FMAC3 ns1__RoomProfile *** SOAP_FMAC4 soap_in_PointerToPointerTons1__RoomProfile(struct soap*, const char*, ns1__RoomProfile ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__RoomProfile(struct soap*, ns1__RoomProfile **const*, const char*, const char*);
SOAP_FMAC3 ns1__RoomProfile *** SOAP_FMAC4 soap_get_PointerToPointerTons1__RoomProfile(struct soap*, ns1__RoomProfile ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RoomProfile_DEFINED
#define SOAP_TYPE_PointerTons1__RoomProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RoomProfile(struct soap*, ns1__RoomProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RoomProfile(struct soap*, const char *, int, ns1__RoomProfile *const*, const char *);
SOAP_FMAC3 ns1__RoomProfile ** SOAP_FMAC4 soap_in_PointerTons1__RoomProfile(struct soap*, const char*, ns1__RoomProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RoomProfile(struct soap*, ns1__RoomProfile *const*, const char*, const char*);
SOAP_FMAC3 ns1__RoomProfile ** SOAP_FMAC4 soap_get_PointerTons1__RoomProfile(struct soap*, ns1__RoomProfile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__Recorder_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__Recorder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__Recorder(struct soap*, ns1__Recorder **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__Recorder(struct soap*, const char *, int, ns1__Recorder **const*, const char *);
SOAP_FMAC3 ns1__Recorder *** SOAP_FMAC4 soap_in_PointerToPointerTons1__Recorder(struct soap*, const char*, ns1__Recorder ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__Recorder(struct soap*, ns1__Recorder **const*, const char*, const char*);
SOAP_FMAC3 ns1__Recorder *** SOAP_FMAC4 soap_get_PointerToPointerTons1__Recorder(struct soap*, ns1__Recorder ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Recorder_DEFINED
#define SOAP_TYPE_PointerTons1__Recorder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Recorder(struct soap*, ns1__Recorder *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Recorder(struct soap*, const char *, int, ns1__Recorder *const*, const char *);
SOAP_FMAC3 ns1__Recorder ** SOAP_FMAC4 soap_in_PointerTons1__Recorder(struct soap*, const char*, ns1__Recorder **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Recorder(struct soap*, ns1__Recorder *const*, const char*, const char*);
SOAP_FMAC3 ns1__Recorder ** SOAP_FMAC4 soap_get_PointerTons1__Recorder(struct soap*, ns1__Recorder **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ns1__LectureModeParticipant_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ns1__LectureModeParticipant_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ns1__LectureModeParticipant(struct soap*, _ns1__LectureModeParticipant **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ns1__LectureModeParticipant(struct soap*, const char *, int, _ns1__LectureModeParticipant **const*, const char *);
SOAP_FMAC3 _ns1__LectureModeParticipant *** SOAP_FMAC4 soap_in_PointerToPointerTo_ns1__LectureModeParticipant(struct soap*, const char*, _ns1__LectureModeParticipant ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ns1__LectureModeParticipant(struct soap*, _ns1__LectureModeParticipant **const*, const char*, const char*);
SOAP_FMAC3 _ns1__LectureModeParticipant *** SOAP_FMAC4 soap_get_PointerToPointerTo_ns1__LectureModeParticipant(struct soap*, _ns1__LectureModeParticipant ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LectureModeParticipant_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LectureModeParticipant_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LectureModeParticipant(struct soap*, _ns1__LectureModeParticipant *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LectureModeParticipant(struct soap*, const char *, int, _ns1__LectureModeParticipant *const*, const char *);
SOAP_FMAC3 _ns1__LectureModeParticipant ** SOAP_FMAC4 soap_in_PointerTo_ns1__LectureModeParticipant(struct soap*, const char*, _ns1__LectureModeParticipant **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LectureModeParticipant(struct soap*, _ns1__LectureModeParticipant *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LectureModeParticipant ** SOAP_FMAC4 soap_get_PointerTo_ns1__LectureModeParticipant(struct soap*, _ns1__LectureModeParticipant **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EntityID_DEFINED
#define SOAP_TYPE_PointerTons1__EntityID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EntityID(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EntityID(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTons1__EntityID(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EntityID(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTons1__EntityID(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ns1__Entity_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ns1__Entity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ns1__Entity(struct soap*, _ns1__Entity **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ns1__Entity(struct soap*, const char *, int, _ns1__Entity **const*, const char *);
SOAP_FMAC3 _ns1__Entity *** SOAP_FMAC4 soap_in_PointerToPointerTo_ns1__Entity(struct soap*, const char*, _ns1__Entity ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ns1__Entity(struct soap*, _ns1__Entity **const*, const char*, const char*);
SOAP_FMAC3 _ns1__Entity *** SOAP_FMAC4 soap_get_PointerToPointerTo_ns1__Entity(struct soap*, _ns1__Entity ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Filter_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Filter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Filter(struct soap*, _ns1__Filter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Filter(struct soap*, const char *, int, _ns1__Filter *const*, const char *);
SOAP_FMAC3 _ns1__Filter ** SOAP_FMAC4 soap_in_PointerTo_ns1__Filter(struct soap*, const char*, _ns1__Filter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Filter(struct soap*, _ns1__Filter *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Filter ** SOAP_FMAC4 soap_get_PointerTo_ns1__Filter(struct soap*, _ns1__Filter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Entity_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Entity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Entity(struct soap*, _ns1__Entity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Entity(struct soap*, const char *, int, _ns1__Entity *const*, const char *);
SOAP_FMAC3 _ns1__Entity ** SOAP_FMAC4 soap_in_PointerTo_ns1__Entity(struct soap*, const char*, _ns1__Entity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Entity(struct soap*, _ns1__Entity *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Entity ** SOAP_FMAC4 soap_get_PointerTo_ns1__Entity(struct soap*, _ns1__Entity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ClientType_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ClientType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ClientType(struct soap*, enum _ns1__ClientType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ClientType(struct soap*, const char *, int, enum _ns1__ClientType *const*, const char *);
SOAP_FMAC3 enum _ns1__ClientType ** SOAP_FMAC4 soap_in_PointerTo_ns1__ClientType(struct soap*, const char*, enum _ns1__ClientType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ClientType(struct soap*, enum _ns1__ClientType *const*, const char*, const char*);
SOAP_FMAC3 enum _ns1__ClientType ** SOAP_FMAC4 soap_get_PointerTo_ns1__ClientType(struct soap*, enum _ns1__ClientType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ns1__LoginAttempt_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ns1__LoginAttempt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ns1__LoginAttempt(struct soap*, _ns1__LoginAttempt **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ns1__LoginAttempt(struct soap*, const char *, int, _ns1__LoginAttempt **const*, const char *);
SOAP_FMAC3 _ns1__LoginAttempt *** SOAP_FMAC4 soap_in_PointerToPointerTo_ns1__LoginAttempt(struct soap*, const char*, _ns1__LoginAttempt ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ns1__LoginAttempt(struct soap*, _ns1__LoginAttempt **const*, const char*, const char*);
SOAP_FMAC3 _ns1__LoginAttempt *** SOAP_FMAC4 soap_get_PointerToPointerTo_ns1__LoginAttempt(struct soap*, _ns1__LoginAttempt ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LoginAttempt_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LoginAttempt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LoginAttempt(struct soap*, _ns1__LoginAttempt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LoginAttempt(struct soap*, const char *, int, _ns1__LoginAttempt *const*, const char *);
SOAP_FMAC3 _ns1__LoginAttempt ** SOAP_FMAC4 soap_in_PointerTo_ns1__LoginAttempt(struct soap*, const char*, _ns1__LoginAttempt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LoginAttempt(struct soap*, _ns1__LoginAttempt *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LoginAttempt ** SOAP_FMAC4 soap_get_PointerTo_ns1__LoginAttempt(struct soap*, _ns1__LoginAttempt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RoomMode_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RoomMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RoomMode(struct soap*, _ns1__RoomMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RoomMode(struct soap*, const char *, int, _ns1__RoomMode *const*, const char *);
SOAP_FMAC3 _ns1__RoomMode ** SOAP_FMAC4 soap_in_PointerTo_ns1__RoomMode(struct soap*, const char*, _ns1__RoomMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RoomMode(struct soap*, _ns1__RoomMode *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RoomMode ** SOAP_FMAC4 soap_get_PointerTo_ns1__RoomMode(struct soap*, _ns1__RoomMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RoomStatus_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RoomStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RoomStatus(struct soap*, enum _ns1__RoomStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RoomStatus(struct soap*, const char *, int, enum _ns1__RoomStatus *const*, const char *);
SOAP_FMAC3 enum _ns1__RoomStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__RoomStatus(struct soap*, const char*, enum _ns1__RoomStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RoomStatus(struct soap*, enum _ns1__RoomStatus *const*, const char*, const char*);
SOAP_FMAC3 enum _ns1__RoomStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__RoomStatus(struct soap*, enum _ns1__RoomStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__MemberMode_DEFINED
#define SOAP_TYPE_PointerTo_ns1__MemberMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberMode(struct soap*, enum _ns1__MemberMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberMode(struct soap*, const char *, int, enum _ns1__MemberMode *const*, const char *);
SOAP_FMAC3 enum _ns1__MemberMode ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberMode(struct soap*, const char*, enum _ns1__MemberMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberMode(struct soap*, enum _ns1__MemberMode *const*, const char*, const char*);
SOAP_FMAC3 enum _ns1__MemberMode ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberMode(struct soap*, enum _ns1__MemberMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__MemberStatus_DEFINED
#define SOAP_TYPE_PointerTo_ns1__MemberStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MemberStatus(struct soap*, enum _ns1__MemberStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MemberStatus(struct soap*, const char *, int, enum _ns1__MemberStatus *const*, const char *);
SOAP_FMAC3 enum _ns1__MemberStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__MemberStatus(struct soap*, const char*, enum _ns1__MemberStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MemberStatus(struct soap*, enum _ns1__MemberStatus *const*, const char*, const char*);
SOAP_FMAC3 enum _ns1__MemberStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__MemberStatus(struct soap*, enum _ns1__MemberStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Language_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Language_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Language(struct soap*, enum _ns1__Language *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Language(struct soap*, const char *, int, enum _ns1__Language *const*, const char *);
SOAP_FMAC3 enum _ns1__Language ** SOAP_FMAC4 soap_in_PointerTo_ns1__Language(struct soap*, const char*, enum _ns1__Language **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Language(struct soap*, enum _ns1__Language *const*, const char*, const char*);
SOAP_FMAC3 enum _ns1__Language ** SOAP_FMAC4 soap_get_PointerTo_ns1__Language(struct soap*, enum _ns1__Language **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__EntityType_DEFINED
#define SOAP_TYPE_PointerTo_ns1__EntityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EntityType(struct soap*, enum _ns1__EntityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EntityType(struct soap*, const char *, int, enum _ns1__EntityType *const*, const char *);
SOAP_FMAC3 enum _ns1__EntityType ** SOAP_FMAC4 soap_in_PointerTo_ns1__EntityType(struct soap*, const char*, enum _ns1__EntityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EntityType(struct soap*, enum _ns1__EntityType *const*, const char*, const char*);
SOAP_FMAC3 enum _ns1__EntityType ** SOAP_FMAC4 soap_get_PointerTo_ns1__EntityType(struct soap*, enum _ns1__EntityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__sortDir_DEFINED
#define SOAP_TYPE_PointerTons1__sortDir_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sortDir(struct soap*, enum ns1__sortDir *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sortDir(struct soap*, const char *, int, enum ns1__sortDir *const*, const char *);
SOAP_FMAC3 enum ns1__sortDir ** SOAP_FMAC4 soap_in_PointerTons1__sortDir(struct soap*, const char*, enum ns1__sortDir **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sortDir(struct soap*, enum ns1__sortDir *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__sortDir ** SOAP_FMAC4 soap_get_PointerTons1__sortDir(struct soap*, enum ns1__sortDir **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_ns1__EndpointFeatureName_DEFINED
#define SOAP_TYPE_ns1__EndpointFeatureName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__EndpointFeatureName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__EndpointFeatureName(struct soap*, char *const*);

#define soap_ns1__EndpointFeatureName2s soap_string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EndpointFeatureName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2ns1__EndpointFeatureName soap_s2string

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns1__EndpointFeatureName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__EndpointFeatureName(struct soap*, char *const*, const char*, const char*);

inline int soap_write_ns1__EndpointFeatureName(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__EndpointFeatureName(soap, p, "ns1:EndpointFeatureName", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns1__EndpointFeatureName(struct soap*, char **, const char*, const char*);

inline int soap_read_ns1__EndpointFeatureName(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__EndpointFeatureName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PortalFeatureName_DEFINED
#define SOAP_TYPE_ns1__PortalFeatureName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__PortalFeatureName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__PortalFeatureName(struct soap*, char *const*);

#define soap_ns1__PortalFeatureName2s soap_string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PortalFeatureName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2ns1__PortalFeatureName soap_s2string

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns1__PortalFeatureName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__PortalFeatureName(struct soap*, char *const*, const char*, const char*);

inline int soap_write_ns1__PortalFeatureName(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__PortalFeatureName(soap, p, "ns1:PortalFeatureName", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns1__PortalFeatureName(struct soap*, char **, const char*, const char*);

inline int soap_read_ns1__PortalFeatureName(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__PortalFeatureName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__EntityID_DEFINED
#define SOAP_TYPE_ns1__EntityID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__EntityID(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__EntityID(struct soap*, char *const*);

#define soap_ns1__EntityID2s soap_string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EntityID(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2ns1__EntityID soap_s2string

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns1__EntityID(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__EntityID(struct soap*, char *const*, const char*, const char*);

inline int soap_write_ns1__EntityID(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__EntityID(soap, p, "ns1:EntityID", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns1__EntityID(struct soap*, char **, const char*, const char*);

inline int soap_read_ns1__EntityID(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__EntityID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, char *const*);

#define soap_xsd__anyURI2s soap_string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__anyURI soap_s2string

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
