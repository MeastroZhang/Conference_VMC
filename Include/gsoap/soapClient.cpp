/* soapClient.cpp
   Generated by gSOAP 2.8.30 for WSVidyoUser.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.30 2016-05-09 02:26:05 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__logIn(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__LogInRequest *ns1__LogInRequest, _ns1__LogInResponse &ns1__LogInResponse)
{	struct __ns1__logIn soap_tmp___ns1__logIn;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "logIn";
	soap_tmp___ns1__logIn.ns1__LogInRequest = ns1__LogInRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__logIn(soap, &soap_tmp___ns1__logIn);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__logIn(soap, &soap_tmp___ns1__logIn, "-ns1:logIn", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__logIn(soap, &soap_tmp___ns1__logIn, "-ns1:logIn", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__LogInResponse)
		return soap_closesock(soap);
	ns1__LogInResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LogInResponse.soap_get(soap, "ns1:LogInResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__linkEndpoint(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__LinkEndpointRequest *ns1__LinkEndpointRequest, _ns1__LinkEndpointResponse &ns1__LinkEndpointResponse)
{	struct __ns1__linkEndpoint soap_tmp___ns1__linkEndpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "linkEndpoint";
	soap_tmp___ns1__linkEndpoint.ns1__LinkEndpointRequest = ns1__LinkEndpointRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__linkEndpoint(soap, &soap_tmp___ns1__linkEndpoint);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__linkEndpoint(soap, &soap_tmp___ns1__linkEndpoint, "-ns1:linkEndpoint", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__linkEndpoint(soap, &soap_tmp___ns1__linkEndpoint, "-ns1:linkEndpoint", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__LinkEndpointResponse)
		return soap_closesock(soap);
	ns1__LinkEndpointResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LinkEndpointResponse.soap_get(soap, "ns1:LinkEndpointResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__logOut(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__LogOutRequest *ns1__LogOutRequest, _ns1__LogOutResponse &ns1__LogOutResponse)
{	struct __ns1__logOut soap_tmp___ns1__logOut;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "logOut";
	soap_tmp___ns1__logOut.ns1__LogOutRequest = ns1__LogOutRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__logOut(soap, &soap_tmp___ns1__logOut);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__logOut(soap, &soap_tmp___ns1__logOut, "-ns1:logOut", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__logOut(soap, &soap_tmp___ns1__logOut, "-ns1:logOut", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__LogOutResponse)
		return soap_closesock(soap);
	ns1__LogOutResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LogOutResponse.soap_get(soap, "ns1:LogOutResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__myEndpointStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MyEndpointStatusRequest *ns1__MyEndpointStatusRequest, _ns1__MyEndpointStatusResponse &ns1__MyEndpointStatusResponse)
{	struct __ns1__myEndpointStatus soap_tmp___ns1__myEndpointStatus;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "myEndpointStatus";
	soap_tmp___ns1__myEndpointStatus.ns1__MyEndpointStatusRequest = ns1__MyEndpointStatusRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__myEndpointStatus(soap, &soap_tmp___ns1__myEndpointStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__myEndpointStatus(soap, &soap_tmp___ns1__myEndpointStatus, "-ns1:myEndpointStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__myEndpointStatus(soap, &soap_tmp___ns1__myEndpointStatus, "-ns1:myEndpointStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__MyEndpointStatusResponse)
		return soap_closesock(soap);
	ns1__MyEndpointStatusResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MyEndpointStatusResponse.soap_get(soap, "ns1:MyEndpointStatusResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__searchMyContacts(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SearchMyContactsRequest *ns1__SearchMyContactsRequest, _ns1__SearchMyContactsResponse &ns1__SearchMyContactsResponse)
{	struct __ns1__searchMyContacts soap_tmp___ns1__searchMyContacts;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "searchMyContacts";
	soap_tmp___ns1__searchMyContacts.ns1__SearchMyContactsRequest = ns1__SearchMyContactsRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__searchMyContacts(soap, &soap_tmp___ns1__searchMyContacts);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchMyContacts(soap, &soap_tmp___ns1__searchMyContacts, "-ns1:searchMyContacts", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchMyContacts(soap, &soap_tmp___ns1__searchMyContacts, "-ns1:searchMyContacts", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__SearchMyContactsResponse)
		return soap_closesock(soap);
	ns1__SearchMyContactsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SearchMyContactsResponse.soap_get(soap, "ns1:SearchMyContactsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__addToMyContacts(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddToMyContactsRequest *ns1__AddToMyContactsRequest, _ns1__AddToMyContactsResponse &ns1__AddToMyContactsResponse)
{	struct __ns1__addToMyContacts soap_tmp___ns1__addToMyContacts;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "addToMyContacts";
	soap_tmp___ns1__addToMyContacts.ns1__AddToMyContactsRequest = ns1__AddToMyContactsRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__addToMyContacts(soap, &soap_tmp___ns1__addToMyContacts);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addToMyContacts(soap, &soap_tmp___ns1__addToMyContacts, "-ns1:addToMyContacts", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addToMyContacts(soap, &soap_tmp___ns1__addToMyContacts, "-ns1:addToMyContacts", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__AddToMyContactsResponse)
		return soap_closesock(soap);
	ns1__AddToMyContactsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddToMyContactsResponse.soap_get(soap, "ns1:AddToMyContactsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeFromMyContacts(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RemoveFromMyContactsRequest *ns1__RemoveFromMyContactsRequest, _ns1__RemoveFromMyContactsResponse &ns1__RemoveFromMyContactsResponse)
{	struct __ns1__removeFromMyContacts soap_tmp___ns1__removeFromMyContacts;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "removeFromMyContacts";
	soap_tmp___ns1__removeFromMyContacts.ns1__RemoveFromMyContactsRequest = ns1__RemoveFromMyContactsRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removeFromMyContacts(soap, &soap_tmp___ns1__removeFromMyContacts);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeFromMyContacts(soap, &soap_tmp___ns1__removeFromMyContacts, "-ns1:removeFromMyContacts", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeFromMyContacts(soap, &soap_tmp___ns1__removeFromMyContacts, "-ns1:removeFromMyContacts", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RemoveFromMyContactsResponse)
		return soap_closesock(soap);
	ns1__RemoveFromMyContactsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveFromMyContactsResponse.soap_get(soap, "ns1:RemoveFromMyContactsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__search(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SearchRequest *ns1__SearchRequest, _ns1__SearchResponse &ns1__SearchResponse)
{	struct __ns1__search soap_tmp___ns1__search;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "search";
	soap_tmp___ns1__search.ns1__SearchRequest = ns1__SearchRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__search(soap, &soap_tmp___ns1__search);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__search(soap, &soap_tmp___ns1__search, "-ns1:search", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__search(soap, &soap_tmp___ns1__search, "-ns1:search", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__SearchResponse)
		return soap_closesock(soap);
	ns1__SearchResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SearchResponse.soap_get(soap, "ns1:SearchResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__searchByEntityID(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SearchByEntityIDRequest *ns1__SearchByEntityIDRequest, _ns1__SearchByEntityIDResponse &ns1__SearchByEntityIDResponse)
{	struct __ns1__searchByEntityID soap_tmp___ns1__searchByEntityID;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "searchByEntityID";
	soap_tmp___ns1__searchByEntityID.ns1__SearchByEntityIDRequest = ns1__SearchByEntityIDRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByEntityID(soap, &soap_tmp___ns1__searchByEntityID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByEntityID(soap, &soap_tmp___ns1__searchByEntityID, "-ns1:searchByEntityID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByEntityID(soap, &soap_tmp___ns1__searchByEntityID, "-ns1:searchByEntityID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__SearchByEntityIDResponse)
		return soap_closesock(soap);
	ns1__SearchByEntityIDResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SearchByEntityIDResponse.soap_get(soap, "ns1:SearchByEntityIDResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__searchByEmail(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SearchByEmailRequest *ns1__SearchByEmailRequest, _ns1__SearchByEmailResponse &ns1__SearchByEmailResponse)
{	struct __ns1__searchByEmail soap_tmp___ns1__searchByEmail;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "searchByEmail";
	soap_tmp___ns1__searchByEmail.ns1__SearchByEmailRequest = ns1__SearchByEmailRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByEmail(soap, &soap_tmp___ns1__searchByEmail);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByEmail(soap, &soap_tmp___ns1__searchByEmail, "-ns1:searchByEmail", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByEmail(soap, &soap_tmp___ns1__searchByEmail, "-ns1:searchByEmail", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__SearchByEmailResponse)
		return soap_closesock(soap);
	ns1__SearchByEmailResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SearchByEmailResponse.soap_get(soap, "ns1:SearchByEmailResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getEntityByEntityID(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetEntityByEntityIDRequest *ns1__GetEntityByEntityIDRequest, _ns1__GetEntityByEntityIDResponse &ns1__GetEntityByEntityIDResponse)
{	struct __ns1__getEntityByEntityID soap_tmp___ns1__getEntityByEntityID;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getEntityByEntityID";
	soap_tmp___ns1__getEntityByEntityID.ns1__GetEntityByEntityIDRequest = ns1__GetEntityByEntityIDRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getEntityByEntityID(soap, &soap_tmp___ns1__getEntityByEntityID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getEntityByEntityID(soap, &soap_tmp___ns1__getEntityByEntityID, "-ns1:getEntityByEntityID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getEntityByEntityID(soap, &soap_tmp___ns1__getEntityByEntityID, "-ns1:getEntityByEntityID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetEntityByEntityIDResponse)
		return soap_closesock(soap);
	ns1__GetEntityByEntityIDResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetEntityByEntityIDResponse.soap_get(soap, "ns1:GetEntityByEntityIDResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__inviteToConference(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__InviteToConferenceRequest *ns1__InviteToConferenceRequest, _ns1__InviteToConferenceResponse &ns1__InviteToConferenceResponse)
{	struct __ns1__inviteToConference soap_tmp___ns1__inviteToConference;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "inviteToConference";
	soap_tmp___ns1__inviteToConference.ns1__InviteToConferenceRequest = ns1__InviteToConferenceRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__inviteToConference(soap, &soap_tmp___ns1__inviteToConference);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__inviteToConference(soap, &soap_tmp___ns1__inviteToConference, "-ns1:inviteToConference", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__inviteToConference(soap, &soap_tmp___ns1__inviteToConference, "-ns1:inviteToConference", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__InviteToConferenceResponse)
		return soap_closesock(soap);
	ns1__InviteToConferenceResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InviteToConferenceResponse.soap_get(soap, "ns1:InviteToConferenceResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__cancelOutboundCall(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CancelOutboundCallRequest *ns1__CancelOutboundCallRequest, _ns1__CancelOutboundCallResponse &ns1__CancelOutboundCallResponse)
{	struct __ns1__cancelOutboundCall soap_tmp___ns1__cancelOutboundCall;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "cancelOutboundCall";
	soap_tmp___ns1__cancelOutboundCall.ns1__CancelOutboundCallRequest = ns1__CancelOutboundCallRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__cancelOutboundCall(soap, &soap_tmp___ns1__cancelOutboundCall);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__cancelOutboundCall(soap, &soap_tmp___ns1__cancelOutboundCall, "-ns1:cancelOutboundCall", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__cancelOutboundCall(soap, &soap_tmp___ns1__cancelOutboundCall, "-ns1:cancelOutboundCall", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__CancelOutboundCallResponse)
		return soap_closesock(soap);
	ns1__CancelOutboundCallResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CancelOutboundCallResponse.soap_get(soap, "ns1:CancelOutboundCallResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__joinConference(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__JoinConferenceRequest *ns1__JoinConferenceRequest, _ns1__JoinConferenceResponse &ns1__JoinConferenceResponse)
{	struct __ns1__joinConference soap_tmp___ns1__joinConference;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "joinConference";
	soap_tmp___ns1__joinConference.ns1__JoinConferenceRequest = ns1__JoinConferenceRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__joinConference(soap, &soap_tmp___ns1__joinConference);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__joinConference(soap, &soap_tmp___ns1__joinConference, "-ns1:joinConference", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__joinConference(soap, &soap_tmp___ns1__joinConference, "-ns1:joinConference", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__JoinConferenceResponse)
		return soap_closesock(soap);
	ns1__JoinConferenceResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__JoinConferenceResponse.soap_get(soap, "ns1:JoinConferenceResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__joinIPCConference(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__JoinIPCConferenceRequest *ns1__JoinIPCConferenceRequest, _ns1__JoinIPCConferenceResponse &ns1__JoinIPCConferenceResponse)
{	struct __ns1__joinIPCConference soap_tmp___ns1__joinIPCConference;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "joinIPCConference";
	soap_tmp___ns1__joinIPCConference.ns1__JoinIPCConferenceRequest = ns1__JoinIPCConferenceRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__joinIPCConference(soap, &soap_tmp___ns1__joinIPCConference);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__joinIPCConference(soap, &soap_tmp___ns1__joinIPCConference, "-ns1:joinIPCConference", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__joinIPCConference(soap, &soap_tmp___ns1__joinIPCConference, "-ns1:joinIPCConference", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__JoinIPCConferenceResponse)
		return soap_closesock(soap);
	ns1__JoinIPCConferenceResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__JoinIPCConferenceResponse.soap_get(soap, "ns1:JoinIPCConferenceResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__directCall(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DirectCallRequest *ns1__DirectCallRequest, _ns1__DirectCallResponse &ns1__DirectCallResponse)
{	struct __ns1__directCall soap_tmp___ns1__directCall;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "directCall";
	soap_tmp___ns1__directCall.ns1__DirectCallRequest = ns1__DirectCallRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__directCall(soap, &soap_tmp___ns1__directCall);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__directCall(soap, &soap_tmp___ns1__directCall, "-ns1:directCall", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__directCall(soap, &soap_tmp___ns1__directCall, "-ns1:directCall", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__DirectCallResponse)
		return soap_closesock(soap);
	ns1__DirectCallResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DirectCallResponse.soap_get(soap, "ns1:DirectCallResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getParticipants(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetParticipantsRequest *ns1__GetParticipantsRequest, _ns1__GetParticipantsResponse &ns1__GetParticipantsResponse)
{	struct __ns1__getParticipants soap_tmp___ns1__getParticipants;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getParticipants";
	soap_tmp___ns1__getParticipants.ns1__GetParticipantsRequest = ns1__GetParticipantsRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getParticipants(soap, &soap_tmp___ns1__getParticipants);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getParticipants(soap, &soap_tmp___ns1__getParticipants, "-ns1:getParticipants", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getParticipants(soap, &soap_tmp___ns1__getParticipants, "-ns1:getParticipants", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetParticipantsResponse)
		return soap_closesock(soap);
	ns1__GetParticipantsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetParticipantsResponse.soap_get(soap, "ns1:GetParticipantsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getLectureModeParticipants(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetLectureModeParticipantsRequest *ns1__GetLectureModeParticipantsRequest, _ns1__GetLectureModeParticipantsResponse &ns1__GetLectureModeParticipantsResponse)
{	struct __ns1__getLectureModeParticipants soap_tmp___ns1__getLectureModeParticipants;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getLectureModeParticipants";
	soap_tmp___ns1__getLectureModeParticipants.ns1__GetLectureModeParticipantsRequest = ns1__GetLectureModeParticipantsRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getLectureModeParticipants(soap, &soap_tmp___ns1__getLectureModeParticipants);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getLectureModeParticipants(soap, &soap_tmp___ns1__getLectureModeParticipants, "-ns1:getLectureModeParticipants", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getLectureModeParticipants(soap, &soap_tmp___ns1__getLectureModeParticipants, "-ns1:getLectureModeParticipants", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetLectureModeParticipantsResponse)
		return soap_closesock(soap);
	ns1__GetLectureModeParticipantsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetLectureModeParticipantsResponse.soap_get(soap, "ns1:GetLectureModeParticipantsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__leaveConference(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__LeaveConferenceRequest *ns1__LeaveConferenceRequest, _ns1__LeaveConferenceResponse &ns1__LeaveConferenceResponse)
{	struct __ns1__leaveConference soap_tmp___ns1__leaveConference;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "leaveConference";
	soap_tmp___ns1__leaveConference.ns1__LeaveConferenceRequest = ns1__LeaveConferenceRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__leaveConference(soap, &soap_tmp___ns1__leaveConference);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__leaveConference(soap, &soap_tmp___ns1__leaveConference, "-ns1:leaveConference", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__leaveConference(soap, &soap_tmp___ns1__leaveConference, "-ns1:leaveConference", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__LeaveConferenceResponse)
		return soap_closesock(soap);
	ns1__LeaveConferenceResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LeaveConferenceResponse.soap_get(soap, "ns1:LeaveConferenceResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__muteAudio(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MuteAudioRequest *ns1__MuteAudioRequest, _ns1__MuteAudioResponse &ns1__MuteAudioResponse)
{	struct __ns1__muteAudio soap_tmp___ns1__muteAudio;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "muteAudio";
	soap_tmp___ns1__muteAudio.ns1__MuteAudioRequest = ns1__MuteAudioRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__muteAudio(soap, &soap_tmp___ns1__muteAudio);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__muteAudio(soap, &soap_tmp___ns1__muteAudio, "-ns1:muteAudio", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__muteAudio(soap, &soap_tmp___ns1__muteAudio, "-ns1:muteAudio", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__MuteAudioResponse)
		return soap_closesock(soap);
	ns1__MuteAudioResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MuteAudioResponse.soap_get(soap, "ns1:MuteAudioResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__unmuteAudio(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UnmuteAudioRequest *ns1__UnmuteAudioRequest, _ns1__UnmuteAudioResponse &ns1__UnmuteAudioResponse)
{	struct __ns1__unmuteAudio soap_tmp___ns1__unmuteAudio;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "unmuteAudio";
	soap_tmp___ns1__unmuteAudio.ns1__UnmuteAudioRequest = ns1__UnmuteAudioRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__unmuteAudio(soap, &soap_tmp___ns1__unmuteAudio);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__unmuteAudio(soap, &soap_tmp___ns1__unmuteAudio, "-ns1:unmuteAudio", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__unmuteAudio(soap, &soap_tmp___ns1__unmuteAudio, "-ns1:unmuteAudio", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__UnmuteAudioResponse)
		return soap_closesock(soap);
	ns1__UnmuteAudioResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UnmuteAudioResponse.soap_get(soap, "ns1:UnmuteAudioResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__startVideo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__StartVideoRequest *ns1__StartVideoRequest, _ns1__StartVideoResponse &ns1__StartVideoResponse)
{	struct __ns1__startVideo soap_tmp___ns1__startVideo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "startVideo";
	soap_tmp___ns1__startVideo.ns1__StartVideoRequest = ns1__StartVideoRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__startVideo(soap, &soap_tmp___ns1__startVideo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__startVideo(soap, &soap_tmp___ns1__startVideo, "-ns1:startVideo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__startVideo(soap, &soap_tmp___ns1__startVideo, "-ns1:startVideo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__StartVideoResponse)
		return soap_closesock(soap);
	ns1__StartVideoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StartVideoResponse.soap_get(soap, "ns1:StartVideoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__stopVideo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__StopVideoRequest *ns1__StopVideoRequest, _ns1__StopVideoResponse &ns1__StopVideoResponse)
{	struct __ns1__stopVideo soap_tmp___ns1__stopVideo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "stopVideo";
	soap_tmp___ns1__stopVideo.ns1__StopVideoRequest = ns1__StopVideoRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__stopVideo(soap, &soap_tmp___ns1__stopVideo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__stopVideo(soap, &soap_tmp___ns1__stopVideo, "-ns1:stopVideo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__stopVideo(soap, &soap_tmp___ns1__stopVideo, "-ns1:stopVideo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__StopVideoResponse)
		return soap_closesock(soap);
	ns1__StopVideoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StopVideoResponse.soap_get(soap, "ns1:StopVideoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__myAccount(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MyAccountRequest *ns1__MyAccountRequest, _ns1__MyAccountResponse &ns1__MyAccountResponse)
{	struct __ns1__myAccount soap_tmp___ns1__myAccount;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "myAccount";
	soap_tmp___ns1__myAccount.ns1__MyAccountRequest = ns1__MyAccountRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__myAccount(soap, &soap_tmp___ns1__myAccount);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__myAccount(soap, &soap_tmp___ns1__myAccount, "-ns1:myAccount", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__myAccount(soap, &soap_tmp___ns1__myAccount, "-ns1:myAccount", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__MyAccountResponse)
		return soap_closesock(soap);
	ns1__MyAccountResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MyAccountResponse.soap_get(soap, "ns1:MyAccountResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createRoomURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateRoomURLRequest *ns1__CreateRoomURLRequest, _ns1__CreateRoomURLResponse &ns1__CreateRoomURLResponse)
{	struct __ns1__createRoomURL soap_tmp___ns1__createRoomURL;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "createRoomURL";
	soap_tmp___ns1__createRoomURL.ns1__CreateRoomURLRequest = ns1__CreateRoomURLRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__createRoomURL(soap, &soap_tmp___ns1__createRoomURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createRoomURL(soap, &soap_tmp___ns1__createRoomURL, "-ns1:createRoomURL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createRoomURL(soap, &soap_tmp___ns1__createRoomURL, "-ns1:createRoomURL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__CreateRoomURLResponse)
		return soap_closesock(soap);
	ns1__CreateRoomURLResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateRoomURLResponse.soap_get(soap, "ns1:CreateRoomURLResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeRoomURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RemoveRoomURLRequest *ns1__RemoveRoomURLRequest, _ns1__RemoveRoomURLResponse &ns1__RemoveRoomURLResponse)
{	struct __ns1__removeRoomURL soap_tmp___ns1__removeRoomURL;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "removeRoomURL";
	soap_tmp___ns1__removeRoomURL.ns1__RemoveRoomURLRequest = ns1__RemoveRoomURLRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removeRoomURL(soap, &soap_tmp___ns1__removeRoomURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeRoomURL(soap, &soap_tmp___ns1__removeRoomURL, "-ns1:removeRoomURL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeRoomURL(soap, &soap_tmp___ns1__removeRoomURL, "-ns1:removeRoomURL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RemoveRoomURLResponse)
		return soap_closesock(soap);
	ns1__RemoveRoomURLResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveRoomURLResponse.soap_get(soap, "ns1:RemoveRoomURLResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createRoomPIN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateRoomPINRequest *ns1__CreateRoomPINRequest, _ns1__CreateRoomPINResponse &ns1__CreateRoomPINResponse)
{	struct __ns1__createRoomPIN soap_tmp___ns1__createRoomPIN;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "createRoomPIN";
	soap_tmp___ns1__createRoomPIN.ns1__CreateRoomPINRequest = ns1__CreateRoomPINRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__createRoomPIN(soap, &soap_tmp___ns1__createRoomPIN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createRoomPIN(soap, &soap_tmp___ns1__createRoomPIN, "-ns1:createRoomPIN", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createRoomPIN(soap, &soap_tmp___ns1__createRoomPIN, "-ns1:createRoomPIN", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__CreateRoomPINResponse)
		return soap_closesock(soap);
	ns1__CreateRoomPINResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateRoomPINResponse.soap_get(soap, "ns1:CreateRoomPINResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeRoomPIN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RemoveRoomPINRequest *ns1__RemoveRoomPINRequest, _ns1__RemoveRoomPINResponse &ns1__RemoveRoomPINResponse)
{	struct __ns1__removeRoomPIN soap_tmp___ns1__removeRoomPIN;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "removeRoomPIN";
	soap_tmp___ns1__removeRoomPIN.ns1__RemoveRoomPINRequest = ns1__RemoveRoomPINRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removeRoomPIN(soap, &soap_tmp___ns1__removeRoomPIN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeRoomPIN(soap, &soap_tmp___ns1__removeRoomPIN, "-ns1:removeRoomPIN", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeRoomPIN(soap, &soap_tmp___ns1__removeRoomPIN, "-ns1:removeRoomPIN", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RemoveRoomPINResponse)
		return soap_closesock(soap);
	ns1__RemoveRoomPINResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveRoomPINResponse.soap_get(soap, "ns1:RemoveRoomPINResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createRoom(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateRoomRequest *ns1__CreateRoomRequest, _ns1__CreateRoomResponse &ns1__CreateRoomResponse)
{	struct __ns1__createRoom soap_tmp___ns1__createRoom;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "createRoom";
	soap_tmp___ns1__createRoom.ns1__CreateRoomRequest = ns1__CreateRoomRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__createRoom(soap, &soap_tmp___ns1__createRoom);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createRoom(soap, &soap_tmp___ns1__createRoom, "-ns1:createRoom", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createRoom(soap, &soap_tmp___ns1__createRoom, "-ns1:createRoom", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__CreateRoomResponse)
		return soap_closesock(soap);
	ns1__CreateRoomResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateRoomResponse.soap_get(soap, "ns1:CreateRoomResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteRoom(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DeleteRoomRequest *ns1__DeleteRoomRequest, _ns1__DeleteRoomResponse &ns1__DeleteRoomResponse)
{	struct __ns1__deleteRoom soap_tmp___ns1__deleteRoom;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "deleteRoom";
	soap_tmp___ns1__deleteRoom.ns1__DeleteRoomRequest = ns1__DeleteRoomRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteRoom(soap, &soap_tmp___ns1__deleteRoom);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteRoom(soap, &soap_tmp___ns1__deleteRoom, "-ns1:deleteRoom", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteRoom(soap, &soap_tmp___ns1__deleteRoom, "-ns1:deleteRoom", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__DeleteRoomResponse)
		return soap_closesock(soap);
	ns1__DeleteRoomResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteRoomResponse.soap_get(soap, "ns1:DeleteRoomResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__updatePassword(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UpdatePasswordRequest *ns1__UpdatePasswordRequest, _ns1__UpdatePasswordResponse &ns1__UpdatePasswordResponse)
{	struct __ns1__updatePassword soap_tmp___ns1__updatePassword;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "updatePassword";
	soap_tmp___ns1__updatePassword.ns1__UpdatePasswordRequest = ns1__UpdatePasswordRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__updatePassword(soap, &soap_tmp___ns1__updatePassword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__updatePassword(soap, &soap_tmp___ns1__updatePassword, "-ns1:updatePassword", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__updatePassword(soap, &soap_tmp___ns1__updatePassword, "-ns1:updatePassword", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__UpdatePasswordResponse)
		return soap_closesock(soap);
	ns1__UpdatePasswordResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdatePasswordResponse.soap_get(soap, "ns1:UpdatePasswordResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__updateLanguage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UpdateLanguageRequest *ns1__UpdateLanguageRequest, _ns1__UpdateLanguageResponse &ns1__UpdateLanguageResponse)
{	struct __ns1__updateLanguage soap_tmp___ns1__updateLanguage;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "updateLanguage";
	soap_tmp___ns1__updateLanguage.ns1__UpdateLanguageRequest = ns1__UpdateLanguageRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__updateLanguage(soap, &soap_tmp___ns1__updateLanguage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__updateLanguage(soap, &soap_tmp___ns1__updateLanguage, "-ns1:updateLanguage", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__updateLanguage(soap, &soap_tmp___ns1__updateLanguage, "-ns1:updateLanguage", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__UpdateLanguageResponse)
		return soap_closesock(soap);
	ns1__UpdateLanguageResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateLanguageResponse.soap_get(soap, "ns1:UpdateLanguageResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__lockRoom(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__LockRoomRequest *ns1__LockRoomRequest, _ns1__LockRoomResponse &ns1__LockRoomResponse)
{	struct __ns1__lockRoom soap_tmp___ns1__lockRoom;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "lockRoom";
	soap_tmp___ns1__lockRoom.ns1__LockRoomRequest = ns1__LockRoomRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__lockRoom(soap, &soap_tmp___ns1__lockRoom);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__lockRoom(soap, &soap_tmp___ns1__lockRoom, "-ns1:lockRoom", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__lockRoom(soap, &soap_tmp___ns1__lockRoom, "-ns1:lockRoom", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__LockRoomResponse)
		return soap_closesock(soap);
	ns1__LockRoomResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LockRoomResponse.soap_get(soap, "ns1:LockRoomResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__unlockRoom(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__UnlockRoomRequest *ns1__UnlockRoomRequest, _ns1__UnlockRoomResponse &ns1__UnlockRoomResponse)
{	struct __ns1__unlockRoom soap_tmp___ns1__unlockRoom;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "unlockRoom";
	soap_tmp___ns1__unlockRoom.ns1__UnlockRoomRequest = ns1__UnlockRoomRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__unlockRoom(soap, &soap_tmp___ns1__unlockRoom);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__unlockRoom(soap, &soap_tmp___ns1__unlockRoom, "-ns1:unlockRoom", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__unlockRoom(soap, &soap_tmp___ns1__unlockRoom, "-ns1:unlockRoom", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__UnlockRoomResponse)
		return soap_closesock(soap);
	ns1__UnlockRoomResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UnlockRoomResponse.soap_get(soap, "ns1:UnlockRoomResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setMemberMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetMemberModeRequest *ns1__SetMemberModeRequest, _ns1__SetMemberModeResponse &ns1__SetMemberModeResponse)
{	struct __ns1__setMemberMode soap_tmp___ns1__setMemberMode;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "setMemberMode";
	soap_tmp___ns1__setMemberMode.ns1__SetMemberModeRequest = ns1__SetMemberModeRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__setMemberMode(soap, &soap_tmp___ns1__setMemberMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setMemberMode(soap, &soap_tmp___ns1__setMemberMode, "-ns1:setMemberMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setMemberMode(soap, &soap_tmp___ns1__setMemberMode, "-ns1:setMemberMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__SetMemberModeResponse)
		return soap_closesock(soap);
	ns1__SetMemberModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetMemberModeResponse.soap_get(soap, "ns1:SetMemberModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getRecordingProfiles(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetRecordingProfilesRequest *ns1__GetRecordingProfilesRequest, _ns1__GetRecordingProfilesResponse &ns1__GetRecordingProfilesResponse)
{	struct __ns1__getRecordingProfiles soap_tmp___ns1__getRecordingProfiles;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getRecordingProfiles";
	soap_tmp___ns1__getRecordingProfiles.ns1__GetRecordingProfilesRequest = ns1__GetRecordingProfilesRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getRecordingProfiles(soap, &soap_tmp___ns1__getRecordingProfiles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getRecordingProfiles(soap, &soap_tmp___ns1__getRecordingProfiles, "-ns1:getRecordingProfiles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getRecordingProfiles(soap, &soap_tmp___ns1__getRecordingProfiles, "-ns1:getRecordingProfiles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetRecordingProfilesResponse)
		return soap_closesock(soap);
	ns1__GetRecordingProfilesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetRecordingProfilesResponse.soap_get(soap, "ns1:GetRecordingProfilesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__startRecording(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__StartRecordingRequest *ns1__StartRecordingRequest, _ns1__StartRecordingResponse &ns1__StartRecordingResponse)
{	struct __ns1__startRecording soap_tmp___ns1__startRecording;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "startRecording";
	soap_tmp___ns1__startRecording.ns1__StartRecordingRequest = ns1__StartRecordingRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__startRecording(soap, &soap_tmp___ns1__startRecording);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__startRecording(soap, &soap_tmp___ns1__startRecording, "-ns1:startRecording", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__startRecording(soap, &soap_tmp___ns1__startRecording, "-ns1:startRecording", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__StartRecordingResponse)
		return soap_closesock(soap);
	ns1__StartRecordingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StartRecordingResponse.soap_get(soap, "ns1:StartRecordingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getPortalVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetPortalVersionRequest *ns1__GetPortalVersionRequest, _ns1__GetPortalVersionResponse &ns1__GetPortalVersionResponse)
{	struct __ns1__getPortalVersion soap_tmp___ns1__getPortalVersion;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getPortalVersion";
	soap_tmp___ns1__getPortalVersion.ns1__GetPortalVersionRequest = ns1__GetPortalVersionRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getPortalVersion(soap, &soap_tmp___ns1__getPortalVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getPortalVersion(soap, &soap_tmp___ns1__getPortalVersion, "-ns1:getPortalVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getPortalVersion(soap, &soap_tmp___ns1__getPortalVersion, "-ns1:getPortalVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetPortalVersionResponse)
		return soap_closesock(soap);
	ns1__GetPortalVersionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetPortalVersionResponse.soap_get(soap, "ns1:GetPortalVersionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__pauseRecording(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__PauseRecordingRequest *ns1__PauseRecordingRequest, _ns1__PauseRecordingResponse &ns1__PauseRecordingResponse)
{	struct __ns1__pauseRecording soap_tmp___ns1__pauseRecording;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "pauseRecording";
	soap_tmp___ns1__pauseRecording.ns1__PauseRecordingRequest = ns1__PauseRecordingRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__pauseRecording(soap, &soap_tmp___ns1__pauseRecording);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__pauseRecording(soap, &soap_tmp___ns1__pauseRecording, "-ns1:pauseRecording", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__pauseRecording(soap, &soap_tmp___ns1__pauseRecording, "-ns1:pauseRecording", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__PauseRecordingResponse)
		return soap_closesock(soap);
	ns1__PauseRecordingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PauseRecordingResponse.soap_get(soap, "ns1:PauseRecordingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__resumeRecording(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ResumeRecordingRequest *ns1__ResumeRecordingRequest, _ns1__ResumeRecordingResponse &ns1__ResumeRecordingResponse)
{	struct __ns1__resumeRecording soap_tmp___ns1__resumeRecording;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "resumeRecording";
	soap_tmp___ns1__resumeRecording.ns1__ResumeRecordingRequest = ns1__ResumeRecordingRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__resumeRecording(soap, &soap_tmp___ns1__resumeRecording);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__resumeRecording(soap, &soap_tmp___ns1__resumeRecording, "-ns1:resumeRecording", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__resumeRecording(soap, &soap_tmp___ns1__resumeRecording, "-ns1:resumeRecording", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__ResumeRecordingResponse)
		return soap_closesock(soap);
	ns1__ResumeRecordingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResumeRecordingResponse.soap_get(soap, "ns1:ResumeRecordingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__stopRecording(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__StopRecordingRequest *ns1__StopRecordingRequest, _ns1__StopRecordingResponse &ns1__StopRecordingResponse)
{	struct __ns1__stopRecording soap_tmp___ns1__stopRecording;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "stopRecording";
	soap_tmp___ns1__stopRecording.ns1__StopRecordingRequest = ns1__StopRecordingRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__stopRecording(soap, &soap_tmp___ns1__stopRecording);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__stopRecording(soap, &soap_tmp___ns1__stopRecording, "-ns1:stopRecording", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__stopRecording(soap, &soap_tmp___ns1__stopRecording, "-ns1:stopRecording", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__StopRecordingResponse)
		return soap_closesock(soap);
	ns1__StopRecordingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StopRecordingResponse.soap_get(soap, "ns1:StopRecordingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createWebcastURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateWebcastURLRequest *ns1__CreateWebcastURLRequest, _ns1__CreateWebcastURLResponse &ns1__CreateWebcastURLResponse)
{	struct __ns1__createWebcastURL soap_tmp___ns1__createWebcastURL;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "createWebcastURL";
	soap_tmp___ns1__createWebcastURL.ns1__CreateWebcastURLRequest = ns1__CreateWebcastURLRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__createWebcastURL(soap, &soap_tmp___ns1__createWebcastURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createWebcastURL(soap, &soap_tmp___ns1__createWebcastURL, "-ns1:createWebcastURL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createWebcastURL(soap, &soap_tmp___ns1__createWebcastURL, "-ns1:createWebcastURL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__CreateWebcastURLResponse)
		return soap_closesock(soap);
	ns1__CreateWebcastURLResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateWebcastURLResponse.soap_get(soap, "ns1:CreateWebcastURLResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createWebcastPIN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateWebcastPINRequest *ns1__CreateWebcastPINRequest, _ns1__CreateWebcastPINResponse &ns1__CreateWebcastPINResponse)
{	struct __ns1__createWebcastPIN soap_tmp___ns1__createWebcastPIN;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "createWebcastPIN";
	soap_tmp___ns1__createWebcastPIN.ns1__CreateWebcastPINRequest = ns1__CreateWebcastPINRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__createWebcastPIN(soap, &soap_tmp___ns1__createWebcastPIN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createWebcastPIN(soap, &soap_tmp___ns1__createWebcastPIN, "-ns1:createWebcastPIN", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createWebcastPIN(soap, &soap_tmp___ns1__createWebcastPIN, "-ns1:createWebcastPIN", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__CreateWebcastPINResponse)
		return soap_closesock(soap);
	ns1__CreateWebcastPINResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateWebcastPINResponse.soap_get(soap, "ns1:CreateWebcastPINResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeWebcastURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RemoveWebcastURLRequest *ns1__RemoveWebcastURLRequest, _ns1__RemoveWebcastURLResponse &ns1__RemoveWebcastURLResponse)
{	struct __ns1__removeWebcastURL soap_tmp___ns1__removeWebcastURL;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "removeWebcastURL";
	soap_tmp___ns1__removeWebcastURL.ns1__RemoveWebcastURLRequest = ns1__RemoveWebcastURLRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removeWebcastURL(soap, &soap_tmp___ns1__removeWebcastURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeWebcastURL(soap, &soap_tmp___ns1__removeWebcastURL, "-ns1:removeWebcastURL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeWebcastURL(soap, &soap_tmp___ns1__removeWebcastURL, "-ns1:removeWebcastURL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RemoveWebcastURLResponse)
		return soap_closesock(soap);
	ns1__RemoveWebcastURLResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveWebcastURLResponse.soap_get(soap, "ns1:RemoveWebcastURLResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeWebcastPIN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RemoveWebcastPINRequest *ns1__RemoveWebcastPINRequest, _ns1__RemoveWebcastPINResponse &ns1__RemoveWebcastPINResponse)
{	struct __ns1__removeWebcastPIN soap_tmp___ns1__removeWebcastPIN;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "removeWebcastPIN";
	soap_tmp___ns1__removeWebcastPIN.ns1__RemoveWebcastPINRequest = ns1__RemoveWebcastPINRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removeWebcastPIN(soap, &soap_tmp___ns1__removeWebcastPIN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeWebcastPIN(soap, &soap_tmp___ns1__removeWebcastPIN, "-ns1:removeWebcastPIN", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeWebcastPIN(soap, &soap_tmp___ns1__removeWebcastPIN, "-ns1:removeWebcastPIN", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RemoveWebcastPINResponse)
		return soap_closesock(soap);
	ns1__RemoveWebcastPINResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveWebcastPINResponse.soap_get(soap, "ns1:RemoveWebcastPINResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getWebcastURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetWebcastURLRequest *ns1__GetWebcastURLRequest, _ns1__GetWebcastURLResponse &ns1__GetWebcastURLResponse)
{	struct __ns1__getWebcastURL soap_tmp___ns1__getWebcastURL;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getWebcastURL";
	soap_tmp___ns1__getWebcastURL.ns1__GetWebcastURLRequest = ns1__GetWebcastURLRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getWebcastURL(soap, &soap_tmp___ns1__getWebcastURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getWebcastURL(soap, &soap_tmp___ns1__getWebcastURL, "-ns1:getWebcastURL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getWebcastURL(soap, &soap_tmp___ns1__getWebcastURL, "-ns1:getWebcastURL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetWebcastURLResponse)
		return soap_closesock(soap);
	ns1__GetWebcastURLResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetWebcastURLResponse.soap_get(soap, "ns1:GetWebcastURLResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getUserName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUserNameRequest *ns1__GetUserNameRequest, _ns1__GetUserNameResponse &ns1__GetUserNameResponse)
{	struct __ns1__getUserName soap_tmp___ns1__getUserName;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getUserName";
	soap_tmp___ns1__getUserName.ns1__GetUserNameRequest = ns1__GetUserNameRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getUserName(soap, &soap_tmp___ns1__getUserName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getUserName(soap, &soap_tmp___ns1__getUserName, "-ns1:getUserName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getUserName(soap, &soap_tmp___ns1__getUserName, "-ns1:getUserName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetUserNameResponse)
		return soap_closesock(soap);
	ns1__GetUserNameResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUserNameResponse.soap_get(soap, "ns1:GetUserNameResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getEntityByRoomKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetEntityByRoomKeyRequest *ns1__GetEntityByRoomKeyRequest, _ns1__GetEntityByRoomKeyResponse &ns1__GetEntityByRoomKeyResponse)
{	struct __ns1__getEntityByRoomKey soap_tmp___ns1__getEntityByRoomKey;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getEntityByRoomKey";
	soap_tmp___ns1__getEntityByRoomKey.ns1__GetEntityByRoomKeyRequest = ns1__GetEntityByRoomKeyRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getEntityByRoomKey(soap, &soap_tmp___ns1__getEntityByRoomKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getEntityByRoomKey(soap, &soap_tmp___ns1__getEntityByRoomKey, "-ns1:getEntityByRoomKey", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getEntityByRoomKey(soap, &soap_tmp___ns1__getEntityByRoomKey, "-ns1:getEntityByRoomKey", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetEntityByRoomKeyResponse)
		return soap_closesock(soap);
	ns1__GetEntityByRoomKeyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetEntityByRoomKeyResponse.soap_get(soap, "ns1:GetEntityByRoomKeyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getInviteContent(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetInviteContentRequest *ns1__GetInviteContentRequest, _ns1__GetInviteContentResponse &ns1__GetInviteContentResponse)
{	struct __ns1__getInviteContent soap_tmp___ns1__getInviteContent;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getInviteContent";
	soap_tmp___ns1__getInviteContent.ns1__GetInviteContentRequest = ns1__GetInviteContentRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getInviteContent(soap, &soap_tmp___ns1__getInviteContent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getInviteContent(soap, &soap_tmp___ns1__getInviteContent, "-ns1:getInviteContent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getInviteContent(soap, &soap_tmp___ns1__getInviteContent, "-ns1:getInviteContent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetInviteContentResponse)
		return soap_closesock(soap);
	ns1__GetInviteContentResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetInviteContentResponse.soap_get(soap, "ns1:GetInviteContentResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getRoomProfiles(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ns1__GetRoomProfilesRequest, _ns1__GetRoomProfilesResponse &ns1__GetRoomProfilesResponse)
{	struct __ns1__getRoomProfiles soap_tmp___ns1__getRoomProfiles;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getRoomProfiles";
	soap_tmp___ns1__getRoomProfiles.ns1__GetRoomProfilesRequest = ns1__GetRoomProfilesRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getRoomProfiles(soap, &soap_tmp___ns1__getRoomProfiles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getRoomProfiles(soap, &soap_tmp___ns1__getRoomProfiles, "-ns1:getRoomProfiles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getRoomProfiles(soap, &soap_tmp___ns1__getRoomProfiles, "-ns1:getRoomProfiles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetRoomProfilesResponse)
		return soap_closesock(soap);
	ns1__GetRoomProfilesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetRoomProfilesResponse.soap_get(soap, "ns1:GetRoomProfilesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getRoomProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetRoomProfileRequest *ns1__GetRoomProfileRequest, _ns1__GetRoomProfileResponse &ns1__GetRoomProfileResponse)
{	struct __ns1__getRoomProfile soap_tmp___ns1__getRoomProfile;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getRoomProfile";
	soap_tmp___ns1__getRoomProfile.ns1__GetRoomProfileRequest = ns1__GetRoomProfileRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getRoomProfile(soap, &soap_tmp___ns1__getRoomProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getRoomProfile(soap, &soap_tmp___ns1__getRoomProfile, "-ns1:getRoomProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getRoomProfile(soap, &soap_tmp___ns1__getRoomProfile, "-ns1:getRoomProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetRoomProfileResponse)
		return soap_closesock(soap);
	ns1__GetRoomProfileResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetRoomProfileResponse.soap_get(soap, "ns1:GetRoomProfileResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setRoomProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetRoomProfileRequest *ns1__SetRoomProfileRequest, _ns1__SetRoomProfileResponse &ns1__SetRoomProfileResponse)
{	struct __ns1__setRoomProfile soap_tmp___ns1__setRoomProfile;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "setRoomProfile";
	soap_tmp___ns1__setRoomProfile.ns1__SetRoomProfileRequest = ns1__SetRoomProfileRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__setRoomProfile(soap, &soap_tmp___ns1__setRoomProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setRoomProfile(soap, &soap_tmp___ns1__setRoomProfile, "-ns1:setRoomProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setRoomProfile(soap, &soap_tmp___ns1__setRoomProfile, "-ns1:setRoomProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__SetRoomProfileResponse)
		return soap_closesock(soap);
	ns1__SetRoomProfileResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetRoomProfileResponse.soap_get(soap, "ns1:SetRoomProfileResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeRoomProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RemoveRoomProfileRequest *ns1__RemoveRoomProfileRequest, _ns1__RemoveRoomProfileResponse &ns1__RemoveRoomProfileResponse)
{	struct __ns1__removeRoomProfile soap_tmp___ns1__removeRoomProfile;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "removeRoomProfile";
	soap_tmp___ns1__removeRoomProfile.ns1__RemoveRoomProfileRequest = ns1__RemoveRoomProfileRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removeRoomProfile(soap, &soap_tmp___ns1__removeRoomProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeRoomProfile(soap, &soap_tmp___ns1__removeRoomProfile, "-ns1:removeRoomProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeRoomProfile(soap, &soap_tmp___ns1__removeRoomProfile, "-ns1:removeRoomProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RemoveRoomProfileResponse)
		return soap_closesock(soap);
	ns1__RemoveRoomProfileResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveRoomProfileResponse.soap_get(soap, "ns1:RemoveRoomProfileResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createModeratorURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateModeratorURLRequest *ns1__CreateModeratorURLRequest, _ns1__CreateModeratorURLResponse &ns1__CreateModeratorURLResponse)
{	struct __ns1__createModeratorURL soap_tmp___ns1__createModeratorURL;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "createModeratorURL";
	soap_tmp___ns1__createModeratorURL.ns1__CreateModeratorURLRequest = ns1__CreateModeratorURLRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__createModeratorURL(soap, &soap_tmp___ns1__createModeratorURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createModeratorURL(soap, &soap_tmp___ns1__createModeratorURL, "-ns1:createModeratorURL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createModeratorURL(soap, &soap_tmp___ns1__createModeratorURL, "-ns1:createModeratorURL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__CreateModeratorURLResponse)
		return soap_closesock(soap);
	ns1__CreateModeratorURLResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateModeratorURLResponse.soap_get(soap, "ns1:CreateModeratorURLResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeModeratorURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RemoveModeratorURLRequest *ns1__RemoveModeratorURLRequest, _ns1__RemoveModeratorURLResponse &ns1__RemoveModeratorURLResponse)
{	struct __ns1__removeModeratorURL soap_tmp___ns1__removeModeratorURL;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "removeModeratorURL";
	soap_tmp___ns1__removeModeratorURL.ns1__RemoveModeratorURLRequest = ns1__RemoveModeratorURLRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removeModeratorURL(soap, &soap_tmp___ns1__removeModeratorURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeModeratorURL(soap, &soap_tmp___ns1__removeModeratorURL, "-ns1:removeModeratorURL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeModeratorURL(soap, &soap_tmp___ns1__removeModeratorURL, "-ns1:removeModeratorURL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RemoveModeratorURLResponse)
		return soap_closesock(soap);
	ns1__RemoveModeratorURLResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveModeratorURLResponse.soap_get(soap, "ns1:RemoveModeratorURLResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getModeratorURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetModeratorURLRequest *ns1__GetModeratorURLRequest, _ns1__GetModeratorURLResponse &ns1__GetModeratorURLResponse)
{	struct __ns1__getModeratorURL soap_tmp___ns1__getModeratorURL;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getModeratorURL";
	soap_tmp___ns1__getModeratorURL.ns1__GetModeratorURLRequest = ns1__GetModeratorURLRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getModeratorURL(soap, &soap_tmp___ns1__getModeratorURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getModeratorURL(soap, &soap_tmp___ns1__getModeratorURL, "-ns1:getModeratorURL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getModeratorURL(soap, &soap_tmp___ns1__getModeratorURL, "-ns1:getModeratorURL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetModeratorURLResponse)
		return soap_closesock(soap);
	ns1__GetModeratorURLResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetModeratorURLResponse.soap_get(soap, "ns1:GetModeratorURLResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getModeratorURLWithToken(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetModeratorURLWithTokenRequest *ns1__GetModeratorURLWithTokenRequest, _ns1__GetModeratorURLWithTokenResponse &ns1__GetModeratorURLWithTokenResponse)
{	struct __ns1__getModeratorURLWithToken soap_tmp___ns1__getModeratorURLWithToken;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getModeratorURLWithToken";
	soap_tmp___ns1__getModeratorURLWithToken.ns1__GetModeratorURLWithTokenRequest = ns1__GetModeratorURLWithTokenRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getModeratorURLWithToken(soap, &soap_tmp___ns1__getModeratorURLWithToken);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getModeratorURLWithToken(soap, &soap_tmp___ns1__getModeratorURLWithToken, "-ns1:getModeratorURLWithToken", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getModeratorURLWithToken(soap, &soap_tmp___ns1__getModeratorURLWithToken, "-ns1:getModeratorURLWithToken", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetModeratorURLWithTokenResponse)
		return soap_closesock(soap);
	ns1__GetModeratorURLWithTokenResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetModeratorURLWithTokenResponse.soap_get(soap, "ns1:GetModeratorURLWithTokenResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createModeratorPIN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateModeratorPINRequest *ns1__CreateModeratorPINRequest, _ns1__CreateModeratorPINResponse &ns1__CreateModeratorPINResponse)
{	struct __ns1__createModeratorPIN soap_tmp___ns1__createModeratorPIN;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "createRoomModeratorPIN";
	soap_tmp___ns1__createModeratorPIN.ns1__CreateModeratorPINRequest = ns1__CreateModeratorPINRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__createModeratorPIN(soap, &soap_tmp___ns1__createModeratorPIN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createModeratorPIN(soap, &soap_tmp___ns1__createModeratorPIN, "-ns1:createModeratorPIN", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createModeratorPIN(soap, &soap_tmp___ns1__createModeratorPIN, "-ns1:createModeratorPIN", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__CreateModeratorPINResponse)
		return soap_closesock(soap);
	ns1__CreateModeratorPINResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateModeratorPINResponse.soap_get(soap, "ns1:CreateModeratorPINResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeModeratorPIN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RemoveModeratorPINRequest *ns1__RemoveModeratorPINRequest, _ns1__RemoveModeratorPINResponse &ns1__RemoveModeratorPINResponse)
{	struct __ns1__removeModeratorPIN soap_tmp___ns1__removeModeratorPIN;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "removeRoomModeratorPIN";
	soap_tmp___ns1__removeModeratorPIN.ns1__RemoveModeratorPINRequest = ns1__RemoveModeratorPINRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removeModeratorPIN(soap, &soap_tmp___ns1__removeModeratorPIN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeModeratorPIN(soap, &soap_tmp___ns1__removeModeratorPIN, "-ns1:removeModeratorPIN", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeModeratorPIN(soap, &soap_tmp___ns1__removeModeratorPIN, "-ns1:removeModeratorPIN", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RemoveModeratorPINResponse)
		return soap_closesock(soap);
	ns1__RemoveModeratorPINResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveModeratorPINResponse.soap_get(soap, "ns1:RemoveModeratorPINResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getConferenceID(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetConferenceIDRequest *ns1__GetConferenceIDRequest, _ns1__GetConferenceIDResponse &ns1__GetConferenceIDResponse)
{	struct __ns1__getConferenceID soap_tmp___ns1__getConferenceID;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getConferenceID";
	soap_tmp___ns1__getConferenceID.ns1__GetConferenceIDRequest = ns1__GetConferenceIDRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getConferenceID(soap, &soap_tmp___ns1__getConferenceID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getConferenceID(soap, &soap_tmp___ns1__getConferenceID, "-ns1:getConferenceID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getConferenceID(soap, &soap_tmp___ns1__getConferenceID, "-ns1:getConferenceID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetConferenceIDResponse)
		return soap_closesock(soap);
	ns1__GetConferenceIDResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetConferenceIDResponse.soap_get(soap, "ns1:GetConferenceIDResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__generateAuthToken(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GenerateAuthTokenRequest *ns1__GenerateAuthTokenRequest, _ns1__GenerateAuthTokenResponse &ns1__GenerateAuthTokenResponse)
{	struct __ns1__generateAuthToken soap_tmp___ns1__generateAuthToken;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "generateAuthToken";
	soap_tmp___ns1__generateAuthToken.ns1__GenerateAuthTokenRequest = ns1__GenerateAuthTokenRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__generateAuthToken(soap, &soap_tmp___ns1__generateAuthToken);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__generateAuthToken(soap, &soap_tmp___ns1__generateAuthToken, "-ns1:generateAuthToken", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__generateAuthToken(soap, &soap_tmp___ns1__generateAuthToken, "-ns1:generateAuthToken", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GenerateAuthTokenResponse)
		return soap_closesock(soap);
	ns1__GenerateAuthTokenResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GenerateAuthTokenResponse.soap_get(soap, "ns1:GenerateAuthTokenResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createScheduledRoom(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateScheduledRoomRequest *ns1__CreateScheduledRoomRequest, _ns1__CreateScheduledRoomResponse &ns1__CreateScheduledRoomResponse)
{	struct __ns1__createScheduledRoom soap_tmp___ns1__createScheduledRoom;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "createScheduledRoom";
	soap_tmp___ns1__createScheduledRoom.ns1__CreateScheduledRoomRequest = ns1__CreateScheduledRoomRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__createScheduledRoom(soap, &soap_tmp___ns1__createScheduledRoom);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createScheduledRoom(soap, &soap_tmp___ns1__createScheduledRoom, "-ns1:createScheduledRoom", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createScheduledRoom(soap, &soap_tmp___ns1__createScheduledRoom, "-ns1:createScheduledRoom", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__CreateScheduledRoomResponse)
		return soap_closesock(soap);
	ns1__CreateScheduledRoomResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateScheduledRoomResponse.soap_get(soap, "ns1:CreateScheduledRoomResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteScheduledRoom(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DeleteScheduledRoomRequest *ns1__DeleteScheduledRoomRequest, _ns1__DeleteScheduledRoomResponse &ns1__DeleteScheduledRoomResponse)
{	struct __ns1__deleteScheduledRoom soap_tmp___ns1__deleteScheduledRoom;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "deleteScheduledRoom";
	soap_tmp___ns1__deleteScheduledRoom.ns1__DeleteScheduledRoomRequest = ns1__DeleteScheduledRoomRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteScheduledRoom(soap, &soap_tmp___ns1__deleteScheduledRoom);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteScheduledRoom(soap, &soap_tmp___ns1__deleteScheduledRoom, "-ns1:deleteScheduledRoom", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteScheduledRoom(soap, &soap_tmp___ns1__deleteScheduledRoom, "-ns1:deleteScheduledRoom", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__DeleteScheduledRoomResponse)
		return soap_closesock(soap);
	ns1__DeleteScheduledRoomResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteScheduledRoomResponse.soap_get(soap, "ns1:DeleteScheduledRoomResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getPortalFeatures(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ns1__GetPortalFeaturesRequest, _ns1__GetPortalFeaturesResponse &ns1__GetPortalFeaturesResponse)
{	struct __ns1__getPortalFeatures soap_tmp___ns1__getPortalFeatures;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getPortalFeatures";
	soap_tmp___ns1__getPortalFeatures.ns1__GetPortalFeaturesRequest = ns1__GetPortalFeaturesRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getPortalFeatures(soap, &soap_tmp___ns1__getPortalFeatures);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getPortalFeatures(soap, &soap_tmp___ns1__getPortalFeatures, "-ns1:getPortalFeatures", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getPortalFeatures(soap, &soap_tmp___ns1__getPortalFeatures, "-ns1:getPortalFeatures", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetPortalFeaturesResponse)
		return soap_closesock(soap);
	ns1__GetPortalFeaturesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetPortalFeaturesResponse.soap_get(soap, "ns1:GetPortalFeaturesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setEndpointDetails(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetEndpointDetailsRequest *ns1__SetEndpointDetailsRequest, _ns1__SetEndpointDetailsResponse &ns1__SetEndpointDetailsResponse)
{	struct __ns1__setEndpointDetails soap_tmp___ns1__setEndpointDetails;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "setEndpointDetails";
	soap_tmp___ns1__setEndpointDetails.ns1__SetEndpointDetailsRequest = ns1__SetEndpointDetailsRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__setEndpointDetails(soap, &soap_tmp___ns1__setEndpointDetails);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setEndpointDetails(soap, &soap_tmp___ns1__setEndpointDetails, "-ns1:setEndpointDetails", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setEndpointDetails(soap, &soap_tmp___ns1__setEndpointDetails, "-ns1:setEndpointDetails", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__SetEndpointDetailsResponse)
		return soap_closesock(soap);
	ns1__SetEndpointDetailsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetEndpointDetailsResponse.soap_get(soap, "ns1:SetEndpointDetailsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getActiveSessions(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ns1__GetActiveSessionsRequest, _ns1__GetActiveSessionsResponse &ns1__GetActiveSessionsResponse)
{	struct __ns1__getActiveSessions soap_tmp___ns1__getActiveSessions;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getActiveSessions";
	soap_tmp___ns1__getActiveSessions.ns1__GetActiveSessionsRequest = ns1__GetActiveSessionsRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getActiveSessions(soap, &soap_tmp___ns1__getActiveSessions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getActiveSessions(soap, &soap_tmp___ns1__getActiveSessions, "-ns1:getActiveSessions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getActiveSessions(soap, &soap_tmp___ns1__getActiveSessions, "-ns1:getActiveSessions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetActiveSessionsResponse)
		return soap_closesock(soap);
	ns1__GetActiveSessionsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetActiveSessionsResponse.soap_get(soap, "ns1:GetActiveSessionsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__logoutAllOtherSessions(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ns1__LogoutAllOtherSessionsRequest, _ns1__LogoutAllOtherSessionsResponse &ns1__LogoutAllOtherSessionsResponse)
{	struct __ns1__logoutAllOtherSessions soap_tmp___ns1__logoutAllOtherSessions;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "logoutAllOtherSessions";
	soap_tmp___ns1__logoutAllOtherSessions.ns1__LogoutAllOtherSessionsRequest = ns1__LogoutAllOtherSessionsRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__logoutAllOtherSessions(soap, &soap_tmp___ns1__logoutAllOtherSessions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__logoutAllOtherSessions(soap, &soap_tmp___ns1__logoutAllOtherSessions, "-ns1:logoutAllOtherSessions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__logoutAllOtherSessions(soap, &soap_tmp___ns1__logoutAllOtherSessions, "-ns1:logoutAllOtherSessions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__LogoutAllOtherSessionsResponse)
		return soap_closesock(soap);
	ns1__LogoutAllOtherSessionsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LogoutAllOtherSessionsResponse.soap_get(soap, "ns1:LogoutAllOtherSessionsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__disconnectConferenceAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__disconnectConferenceAllRequest *ns1__disconnectConferenceAllRequest, _ns1__disconnectConferenceAllResponse &ns1__disconnectConferenceAllResponse)
{	struct __ns1__disconnectConferenceAll soap_tmp___ns1__disconnectConferenceAll;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "disconnectConferenceAll";
	soap_tmp___ns1__disconnectConferenceAll.ns1__disconnectConferenceAllRequest = ns1__disconnectConferenceAllRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__disconnectConferenceAll(soap, &soap_tmp___ns1__disconnectConferenceAll);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__disconnectConferenceAll(soap, &soap_tmp___ns1__disconnectConferenceAll, "-ns1:disconnectConferenceAll", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__disconnectConferenceAll(soap, &soap_tmp___ns1__disconnectConferenceAll, "-ns1:disconnectConferenceAll", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__disconnectConferenceAllResponse)
		return soap_closesock(soap);
	ns1__disconnectConferenceAllResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__disconnectConferenceAllResponse.soap_get(soap, "ns1:disconnectConferenceAllResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__muteAudioServerAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__muteAudioServerAllRequest *ns1__muteAudioServerAllRequest, _ns1__muteAudioServerAllResponse &ns1__muteAudioServerAllResponse)
{	struct __ns1__muteAudioServerAll soap_tmp___ns1__muteAudioServerAll;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "muteAudioServerAll";
	soap_tmp___ns1__muteAudioServerAll.ns1__muteAudioServerAllRequest = ns1__muteAudioServerAllRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__muteAudioServerAll(soap, &soap_tmp___ns1__muteAudioServerAll);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__muteAudioServerAll(soap, &soap_tmp___ns1__muteAudioServerAll, "-ns1:muteAudioServerAll", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__muteAudioServerAll(soap, &soap_tmp___ns1__muteAudioServerAll, "-ns1:muteAudioServerAll", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__muteAudioServerAllResponse)
		return soap_closesock(soap);
	ns1__muteAudioServerAllResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__muteAudioServerAllResponse.soap_get(soap, "ns1:muteAudioServerAllResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__muteAudioClientAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__muteAudioClientAllRequest *ns1__muteAudioClientAllRequest, _ns1__muteAudioClientAllResponse &ns1__muteAudioClientAllResponse)
{	struct __ns1__muteAudioClientAll soap_tmp___ns1__muteAudioClientAll;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "muteAudioClientAll";
	soap_tmp___ns1__muteAudioClientAll.ns1__muteAudioClientAllRequest = ns1__muteAudioClientAllRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__muteAudioClientAll(soap, &soap_tmp___ns1__muteAudioClientAll);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__muteAudioClientAll(soap, &soap_tmp___ns1__muteAudioClientAll, "-ns1:muteAudioClientAll", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__muteAudioClientAll(soap, &soap_tmp___ns1__muteAudioClientAll, "-ns1:muteAudioClientAll", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__muteAudioClientAllResponse)
		return soap_closesock(soap);
	ns1__muteAudioClientAllResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__muteAudioClientAllResponse.soap_get(soap, "ns1:muteAudioClientAllResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__muteVideoServerAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__muteVideoServerAllRequest *ns1__muteVideoServerAllRequest, _ns1__muteVideoServerAllResponse &ns1__muteVideoServerAllResponse)
{	struct __ns1__muteVideoServerAll soap_tmp___ns1__muteVideoServerAll;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "muteVideoServerAll";
	soap_tmp___ns1__muteVideoServerAll.ns1__muteVideoServerAllRequest = ns1__muteVideoServerAllRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__muteVideoServerAll(soap, &soap_tmp___ns1__muteVideoServerAll);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__muteVideoServerAll(soap, &soap_tmp___ns1__muteVideoServerAll, "-ns1:muteVideoServerAll", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__muteVideoServerAll(soap, &soap_tmp___ns1__muteVideoServerAll, "-ns1:muteVideoServerAll", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__muteVideoServerAllResponse)
		return soap_closesock(soap);
	ns1__muteVideoServerAllResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__muteVideoServerAllResponse.soap_get(soap, "ns1:muteVideoServerAllResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__muteVideoClientAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__muteVideoClientAllRequest *ns1__muteVideoClientAllRequest, _ns1__muteVideoClientAllResponse &ns1__muteVideoClientAllResponse)
{	struct __ns1__muteVideoClientAll soap_tmp___ns1__muteVideoClientAll;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "muteVideoClientAll";
	soap_tmp___ns1__muteVideoClientAll.ns1__muteVideoClientAllRequest = ns1__muteVideoClientAllRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__muteVideoClientAll(soap, &soap_tmp___ns1__muteVideoClientAll);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__muteVideoClientAll(soap, &soap_tmp___ns1__muteVideoClientAll, "-ns1:muteVideoClientAll", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__muteVideoClientAll(soap, &soap_tmp___ns1__muteVideoClientAll, "-ns1:muteVideoClientAll", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__muteVideoClientAllResponse)
		return soap_closesock(soap);
	ns1__muteVideoClientAllResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__muteVideoClientAllResponse.soap_get(soap, "ns1:muteVideoClientAllResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getOnetimeAccessUrl(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ns1__OnetimeAccessRequest, _ns1__OnetimeAccessResponse &ns1__OnetimeAccessResponse)
{	struct __ns1__getOnetimeAccessUrl soap_tmp___ns1__getOnetimeAccessUrl;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getOnetimeAccessUrl";
	soap_tmp___ns1__getOnetimeAccessUrl.ns1__OnetimeAccessRequest = ns1__OnetimeAccessRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getOnetimeAccessUrl(soap, &soap_tmp___ns1__getOnetimeAccessUrl);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getOnetimeAccessUrl(soap, &soap_tmp___ns1__getOnetimeAccessUrl, "-ns1:getOnetimeAccessUrl", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getOnetimeAccessUrl(soap, &soap_tmp___ns1__getOnetimeAccessUrl, "-ns1:getOnetimeAccessUrl", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__OnetimeAccessResponse)
		return soap_closesock(soap);
	ns1__OnetimeAccessResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OnetimeAccessResponse.soap_get(soap, "ns1:OnetimeAccessResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getRoomAccessOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RoomAccessOptionsRequest *ns1__RoomAccessOptionsRequest, _ns1__RoomAccessOptionsResponse &ns1__RoomAccessOptionsResponse)
{	struct __ns1__getRoomAccessOptions soap_tmp___ns1__getRoomAccessOptions;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getRoomAccessOptions";
	soap_tmp___ns1__getRoomAccessOptions.ns1__RoomAccessOptionsRequest = ns1__RoomAccessOptionsRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getRoomAccessOptions(soap, &soap_tmp___ns1__getRoomAccessOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getRoomAccessOptions(soap, &soap_tmp___ns1__getRoomAccessOptions, "-ns1:getRoomAccessOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getRoomAccessOptions(soap, &soap_tmp___ns1__getRoomAccessOptions, "-ns1:getRoomAccessOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RoomAccessOptionsResponse)
		return soap_closesock(soap);
	ns1__RoomAccessOptionsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RoomAccessOptionsResponse.soap_get(soap, "ns1:RoomAccessOptionsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getPortalPrefix(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ns1__PortalPrefixRequest, _ns1__PortalPrefixResponse &ns1__PortalPrefixResponse)
{	struct __ns1__getPortalPrefix soap_tmp___ns1__getPortalPrefix;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getPortalPrefix";
	soap_tmp___ns1__getPortalPrefix.ns1__PortalPrefixRequest = ns1__PortalPrefixRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getPortalPrefix(soap, &soap_tmp___ns1__getPortalPrefix);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getPortalPrefix(soap, &soap_tmp___ns1__getPortalPrefix, "-ns1:getPortalPrefix", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getPortalPrefix(soap, &soap_tmp___ns1__getPortalPrefix, "-ns1:getPortalPrefix", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__PortalPrefixResponse)
		return soap_closesock(soap);
	ns1__PortalPrefixResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PortalPrefixResponse.soap_get(soap, "ns1:PortalPrefixResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getLoginAndWelcomeBanner(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getLoginAndWelcomeBannerRequest *ns1__getLoginAndWelcomeBannerRequest, _ns1__getLoginAndWelcomeBannerResponse &ns1__getLoginAndWelcomeBannerResponse)
{	struct __ns1__getLoginAndWelcomeBanner soap_tmp___ns1__getLoginAndWelcomeBanner;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getLoginAndWelcomeBanner";
	soap_tmp___ns1__getLoginAndWelcomeBanner.ns1__getLoginAndWelcomeBannerRequest = ns1__getLoginAndWelcomeBannerRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getLoginAndWelcomeBanner(soap, &soap_tmp___ns1__getLoginAndWelcomeBanner);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getLoginAndWelcomeBanner(soap, &soap_tmp___ns1__getLoginAndWelcomeBanner, "-ns1:getLoginAndWelcomeBanner", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getLoginAndWelcomeBanner(soap, &soap_tmp___ns1__getLoginAndWelcomeBanner, "-ns1:getLoginAndWelcomeBanner", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__getLoginAndWelcomeBannerResponse)
		return soap_closesock(soap);
	ns1__getLoginAndWelcomeBannerResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getLoginAndWelcomeBannerResponse.soap_get(soap, "ns1:getLoginAndWelcomeBannerResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getUserAccountType(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getUserAccountTypeRequest *ns1__getUserAccountTypeRequest, _ns1__getUserAccountTypeResponse &ns1__getUserAccountTypeResponse)
{	struct __ns1__getUserAccountType soap_tmp___ns1__getUserAccountType;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getUserAccountType";
	soap_tmp___ns1__getUserAccountType.ns1__getUserAccountTypeRequest = ns1__getUserAccountTypeRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getUserAccountType(soap, &soap_tmp___ns1__getUserAccountType);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getUserAccountType(soap, &soap_tmp___ns1__getUserAccountType, "-ns1:getUserAccountType", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getUserAccountType(soap, &soap_tmp___ns1__getUserAccountType, "-ns1:getUserAccountType", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__getUserAccountTypeResponse)
		return soap_closesock(soap);
	ns1__getUserAccountTypeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getUserAccountTypeResponse.soap_get(soap, "ns1:getUserAccountTypeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__startLectureMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__StartLectureModeRequest *ns1__StartLectureModeRequest, _ns1__StartLectureModeResponse &ns1__StartLectureModeResponse)
{	struct __ns1__startLectureMode soap_tmp___ns1__startLectureMode;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "startLectureMode";
	soap_tmp___ns1__startLectureMode.ns1__StartLectureModeRequest = ns1__StartLectureModeRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__startLectureMode(soap, &soap_tmp___ns1__startLectureMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__startLectureMode(soap, &soap_tmp___ns1__startLectureMode, "-ns1:startLectureMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__startLectureMode(soap, &soap_tmp___ns1__startLectureMode, "-ns1:startLectureMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__StartLectureModeResponse)
		return soap_closesock(soap);
	ns1__StartLectureModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StartLectureModeResponse.soap_get(soap, "ns1:StartLectureModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__stopLectureMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__StopLectureModeRequest *ns1__StopLectureModeRequest, _ns1__StopLectureModeResponse &ns1__StopLectureModeResponse)
{	struct __ns1__stopLectureMode soap_tmp___ns1__stopLectureMode;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "stopLectureMode";
	soap_tmp___ns1__stopLectureMode.ns1__StopLectureModeRequest = ns1__StopLectureModeRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__stopLectureMode(soap, &soap_tmp___ns1__stopLectureMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__stopLectureMode(soap, &soap_tmp___ns1__stopLectureMode, "-ns1:stopLectureMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__stopLectureMode(soap, &soap_tmp___ns1__stopLectureMode, "-ns1:stopLectureMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__StopLectureModeResponse)
		return soap_closesock(soap);
	ns1__StopLectureModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StopLectureModeResponse.soap_get(soap, "ns1:StopLectureModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__raiseHand(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ns1__RaiseHandRequest, _ns1__RaiseHandResponse &ns1__RaiseHandResponse)
{	struct __ns1__raiseHand soap_tmp___ns1__raiseHand;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "raiseHand";
	soap_tmp___ns1__raiseHand.ns1__RaiseHandRequest = ns1__RaiseHandRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__raiseHand(soap, &soap_tmp___ns1__raiseHand);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__raiseHand(soap, &soap_tmp___ns1__raiseHand, "-ns1:raiseHand", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__raiseHand(soap, &soap_tmp___ns1__raiseHand, "-ns1:raiseHand", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RaiseHandResponse)
		return soap_closesock(soap);
	ns1__RaiseHandResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RaiseHandResponse.soap_get(soap, "ns1:RaiseHandResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__unraiseHand(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ns1__UnraiseHandRequest, _ns1__UnraiseHandResponse &ns1__UnraiseHandResponse)
{	struct __ns1__unraiseHand soap_tmp___ns1__unraiseHand;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "unraiseHand";
	soap_tmp___ns1__unraiseHand.ns1__UnraiseHandRequest = ns1__UnraiseHandRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__unraiseHand(soap, &soap_tmp___ns1__unraiseHand);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__unraiseHand(soap, &soap_tmp___ns1__unraiseHand, "-ns1:unraiseHand", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__unraiseHand(soap, &soap_tmp___ns1__unraiseHand, "-ns1:unraiseHand", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__UnraiseHandResponse)
		return soap_closesock(soap);
	ns1__UnraiseHandResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UnraiseHandResponse.soap_get(soap, "ns1:UnraiseHandResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__dismissRaisedHand(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DismissRaisedHandRequest *ns1__DismissRaisedHandRequest, _ns1__DismissRaisedHandResponse &ns1__DismissRaisedHandResponse)
{	struct __ns1__dismissRaisedHand soap_tmp___ns1__dismissRaisedHand;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "dismissRaisedHand";
	soap_tmp___ns1__dismissRaisedHand.ns1__DismissRaisedHandRequest = ns1__DismissRaisedHandRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__dismissRaisedHand(soap, &soap_tmp___ns1__dismissRaisedHand);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__dismissRaisedHand(soap, &soap_tmp___ns1__dismissRaisedHand, "-ns1:dismissRaisedHand", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__dismissRaisedHand(soap, &soap_tmp___ns1__dismissRaisedHand, "-ns1:dismissRaisedHand", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__DismissRaisedHandResponse)
		return soap_closesock(soap);
	ns1__DismissRaisedHandResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DismissRaisedHandResponse.soap_get(soap, "ns1:DismissRaisedHandResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__dismissAllRaisedHand(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DismissAllRaisedHandRequest *ns1__DismissAllRaisedHandRequest, _ns1__DismissAllRaisedHandResponse &ns1__DismissAllRaisedHandResponse)
{	struct __ns1__dismissAllRaisedHand soap_tmp___ns1__dismissAllRaisedHand;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "dismissAllRaisedHand";
	soap_tmp___ns1__dismissAllRaisedHand.ns1__DismissAllRaisedHandRequest = ns1__DismissAllRaisedHandRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__dismissAllRaisedHand(soap, &soap_tmp___ns1__dismissAllRaisedHand);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__dismissAllRaisedHand(soap, &soap_tmp___ns1__dismissAllRaisedHand, "-ns1:dismissAllRaisedHand", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__dismissAllRaisedHand(soap, &soap_tmp___ns1__dismissAllRaisedHand, "-ns1:dismissAllRaisedHand", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__DismissAllRaisedHandResponse)
		return soap_closesock(soap);
	ns1__DismissAllRaisedHandResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DismissAllRaisedHandResponse.soap_get(soap, "ns1:DismissAllRaisedHandResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setPresenter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetPresenterRequest *ns1__SetPresenterRequest, _ns1__SetPresenterResponse &ns1__SetPresenterResponse)
{	struct __ns1__setPresenter soap_tmp___ns1__setPresenter;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "setPresenter";
	soap_tmp___ns1__setPresenter.ns1__SetPresenterRequest = ns1__SetPresenterRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__setPresenter(soap, &soap_tmp___ns1__setPresenter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setPresenter(soap, &soap_tmp___ns1__setPresenter, "-ns1:setPresenter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setPresenter(soap, &soap_tmp___ns1__setPresenter, "-ns1:setPresenter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__SetPresenterResponse)
		return soap_closesock(soap);
	ns1__SetPresenterResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetPresenterResponse.soap_get(soap, "ns1:SetPresenterResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removePresenter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RemovePresenterRequest *ns1__RemovePresenterRequest, _ns1__RemovePresenterResponse &ns1__RemovePresenterResponse)
{	struct __ns1__removePresenter soap_tmp___ns1__removePresenter;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "removePresenter";
	soap_tmp___ns1__removePresenter.ns1__RemovePresenterRequest = ns1__RemovePresenterRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__removePresenter(soap, &soap_tmp___ns1__removePresenter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removePresenter(soap, &soap_tmp___ns1__removePresenter, "-ns1:removePresenter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removePresenter(soap, &soap_tmp___ns1__removePresenter, "-ns1:removePresenter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__RemovePresenterResponse)
		return soap_closesock(soap);
	ns1__RemovePresenterResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemovePresenterResponse.soap_get(soap, "ns1:RemovePresenterResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getVidyoReplayLibrary(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetVidyoReplayLibraryRequest *ns1__GetVidyoReplayLibraryRequest, _ns1__GetVidyoReplayLibraryResponse &ns1__GetVidyoReplayLibraryResponse)
{	struct __ns1__getVidyoReplayLibrary soap_tmp___ns1__getVidyoReplayLibrary;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getVidyoReplayLibrary";
	soap_tmp___ns1__getVidyoReplayLibrary.ns1__GetVidyoReplayLibraryRequest = ns1__GetVidyoReplayLibraryRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getVidyoReplayLibrary(soap, &soap_tmp___ns1__getVidyoReplayLibrary);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getVidyoReplayLibrary(soap, &soap_tmp___ns1__getVidyoReplayLibrary, "-ns1:getVidyoReplayLibrary", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getVidyoReplayLibrary(soap, &soap_tmp___ns1__getVidyoReplayLibrary, "-ns1:getVidyoReplayLibrary", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetVidyoReplayLibraryResponse)
		return soap_closesock(soap);
	ns1__GetVidyoReplayLibraryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetVidyoReplayLibraryResponse.soap_get(soap, "ns1:GetVidyoReplayLibraryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__whatIsMyIPAddress(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__WhatIsMyIPAddressRequest *ns1__WhatIsMyIPAddressRequest, _ns1__WhatIsMyIPAddressResponse &ns1__WhatIsMyIPAddressResponse)
{	struct __ns1__whatIsMyIPAddress soap_tmp___ns1__whatIsMyIPAddress;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "whatIsMyIPAddress";
	soap_tmp___ns1__whatIsMyIPAddress.ns1__WhatIsMyIPAddressRequest = ns1__WhatIsMyIPAddressRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__whatIsMyIPAddress(soap, &soap_tmp___ns1__whatIsMyIPAddress);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__whatIsMyIPAddress(soap, &soap_tmp___ns1__whatIsMyIPAddress, "-ns1:whatIsMyIPAddress", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__whatIsMyIPAddress(soap, &soap_tmp___ns1__whatIsMyIPAddress, "-ns1:whatIsMyIPAddress", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__WhatIsMyIPAddressResponse)
		return soap_closesock(soap);
	ns1__WhatIsMyIPAddressResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__WhatIsMyIPAddressResponse.soap_get(soap, "ns1:WhatIsMyIPAddressResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getChangePasswordHtmlUrlWithToken(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetChangePasswordHtmlUrlWithTokenRequest *ns1__GetChangePasswordHtmlUrlWithTokenRequest, _ns1__GetChangePasswordHtmlUrlWithTokenResponse &ns1__GetChangePasswordHtmlUrlWithTokenResponse)
{	struct __ns1__getChangePasswordHtmlUrlWithToken soap_tmp___ns1__getChangePasswordHtmlUrlWithToken;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v.vf365.cn/services/v1_1/VidyoPortalUserService/";
	if (soap_action == NULL)
		soap_action = "getChangePasswordHtmlUrlWithToken";
	soap_tmp___ns1__getChangePasswordHtmlUrlWithToken.ns1__GetChangePasswordHtmlUrlWithTokenRequest = ns1__GetChangePasswordHtmlUrlWithTokenRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getChangePasswordHtmlUrlWithToken(soap, &soap_tmp___ns1__getChangePasswordHtmlUrlWithToken);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getChangePasswordHtmlUrlWithToken(soap, &soap_tmp___ns1__getChangePasswordHtmlUrlWithToken, "-ns1:getChangePasswordHtmlUrlWithToken", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getChangePasswordHtmlUrlWithToken(soap, &soap_tmp___ns1__getChangePasswordHtmlUrlWithToken, "-ns1:getChangePasswordHtmlUrlWithToken", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__GetChangePasswordHtmlUrlWithTokenResponse)
		return soap_closesock(soap);
	ns1__GetChangePasswordHtmlUrlWithTokenResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetChangePasswordHtmlUrlWithTokenResponse.soap_get(soap, "ns1:GetChangePasswordHtmlUrlWithTokenResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
